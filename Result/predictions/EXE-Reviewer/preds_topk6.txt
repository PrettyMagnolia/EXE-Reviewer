Why not keep the default as the first parameter instead of passing thetransport argument?
You should use `$this->config->Index->record_batch_size` here as well.
Is there a specific reason to keep the original version around?
This is a pretty big change, and could break the code a lot. I know this isn't new, but it's just a minor cleanup. Can you move it to the same place?
`isNavigating` could be a function and use `showavigating`.
I think this is not needed. I'd rather have the Mat2col function return a simple string.
I would put a comma at the end of this line
There is already a printf in printf_metadata.cpp. Why is this printf removed?
I think it's more like this in a lot of items (and possibly a bit of time to find out). I think the `focus.windowThreadID` should be used in a more common way, so we can add a new `focus` option to the `hkl`, and maybe the `focus.format` call in the `focus` package.
Shouldn't this be `Service` ?
Just a thought, would it make sense to have an explicit setting for the keys here? It might be better to use something like `setParameter('text', keys).then('value', keys).has('...') ?`
I don't like this name. Just call this `shared` since it is more common.
Maybe we could just remove this method? It's already the interface, and the method doesn't do anything.
ToHexString() here can be moved into the else block to avoid mixing and the conditionals.
If `image-provider` is `nil`, then `err` is `nil`, and so `provider.Name()` can be `nil`. But I guess `err.Name()` can be `!= 1` right?
Why remove the maxLength check?
This looks wrong
I don't think these are the right approach... (same below)
Should we also add an assertion to the user?
This change is needed to ensure the wlr account is triggered by the dev. This change fixes an issue where this bug comes from.
What's the purpose of this change?
I think we should use <msg> I think `NONEXIST_ENABLED` is not needed. `io.prestosql.plugin.handle_serviceservice_service_SuppressedError`
this is just to not clear what the best thing to do is..
`isEmptyType()` will return a boolean, so it will never get triggered.
This change looks unnecessary.
I'd rather see the command history be in the specific tests, rather than in the specific cases.
Did we miss an assert here?
I think we should use the standard `import` helper for this.
I don't see a reason why you added respond_to? here (I don't think it is necessary to calculate the value)
FYI @agramfort this will be a lot of noise (and probably only if you are already here): there is a lot of such changes here to ensure that the new workspace is available.
I don't think this namespace namespace is needed. It's a namespace that is already used in this namespace.
Redundant `return` detected.
This seems a bit hacky, but is there a particular reason we can't use `clear()` here?
This should be `alerters = alters;`
is the other changes in this file related?
Is this the correct way to do this?
This is a change of programme. We need a new helper for this. The `[]byte` here will break all of the tests, which is why this is needed.
This is a nit, but it's more like this to be a `ValueError` than `These`, so I would like to know why.
This interface isn't actually required, and you can either pass in an instance of `DataContainer`, or add the method to `getRequiredName`, or make a `@private`.
I don't think you're going to need this `SetTag` here as you are already calling `DefaultTags#SetTag()` twice.
Could you revert this change?
Why did you change the init? It's not mandatory to change with 2014C
Really not a huge deal, but this import is not really a good idea. It just seems a good place to use `BiConsumer`, but I don't think it's necessary to use a static method.
I think you can just do `self.queue_as : none` and `self.queue_as :to_s`
I think this change could break something that's not meant to be fixed.
can we use the enum instead of a boolean ?
Please revert this import
You should call it `minExperiments`, otherwise it's a breaking change
This will cause a NPE if the feeds.size() is not < 0. I think we should do a check to make sure that the error is reported.
I think this change could also affect the `pipeline` property
Remove this line, we can get rid of it.
Do we want to keep this function around as part of `chain`?
Why not just `lowest`?
This is a bug fix, right?
This is a debug log, not a debug log
Should we use `Promise.update` here?
This line is a bit suspect. Why do we need to open a panic?
I would not do this. First, the `__class__` is still a part of the name. If you are adding the class name, then it is better to do it in a way that doesn't exist. So, this check should be moved to the other place where the `__name__` is set up.
`return false`?
Should the `Start<RootViewModel>` be removed from this PR?
This is not necessary. I think you can just use the map.
double can be removed ?
This is a bit weird, I don't think we can make that a string. What do you think? It's better to be explicit, but it's a very simple function that's something we can use in the future.
This is a change in behavior that was causing failures to fail
I thought we wanted to open this all all the way back to the desire to have the `create_accessor_access` method in this method? Or would that make sense?
why change the return type?
Should we just always use the `string` property? I think the `map` property would be more appropriate.
Is there a reason we are not using thefrastructure API here?
this is an API break and needs to be updated
should we also return `false` here? I thought that `true` would be sufficient for the `true `
I think the `padding` can be removed from the tuple.
This is a bug fix, the problem was that we have `assert(sibling->parent == subsurface->parent)`. The same is true for `assert(sibling->parent)`.
` :title` should be fine, because it is the same as `text_key: :description`
Can you add a `TODO` here to remove this cast and replace `inDDL` with a boolean?
(style) space required after that ',' (ctx:VxV)
I'm not sure that this test is correct. I would just test for a `a-Z` rather than `a-Z`.
why do you need this change? I don't see any `webenginesettings` attribute being used anywhere in this PR.
This may be wrong. You might have to catch all exceptions. If the underlying exception is thrown, the exception should never happen.
this error is lost, I think.
Please keep going back in alphabetical order.
What's the point of this change? Is it a bugfix or is it just debugging code?
This option should also be renamed `replace_variables` to something like `_replace_variables_variables`.
@agramfort I'm not sure if I should keep this here.
Here you can use `generateDataDiskName` directly in the generateDataDiskName, which is not the case.
why is this "pos from a manifest"? I think this is not the position of the manifest
Why not just call `log.d(...)` here?
I don't think this change is needed.
I think you need to change this because this was a public constructor in order to implement this in order to make the tests pass.
I'm not sure if this is the correct place to do this. Where is `localConnection` defined?
I think we can remove this container entirely, since we're not using it anywhere now
Can you please change `Device` to `Device`? It seems like this should be the typedef `t` or `t`.
@tnozicka this was the one you found by the issue you're using, i.e., why do you want to make this change? i thought it was only necessary to pass in the store of the store
why is this a init()?
I'd like to see a test for it.
i'd like to avoid the `(source, x, y, y, element ||creator)` as it's a line break after line 166 instead of the `(source, x, y)`, as we do not need to have the `||` in the array
Why is this here?
The function name is misleading. It is used in the `toplevel` and not the `writers.connect()` or `writers.connect()`. The code above does not seem to be used anywhere else. The code should probably be called in `writers.connect()`.
This seems like a bad merge
This seems unrelated.
Should this be a list of fetchFlowFlow()?
The `typeof` and `arr` are the same, so I would keep the old check here.
`null` or `null`? Should `null` be passed here? Also, why does this check even exist? If `null` is not defined, you may need to check the `null` value.
These can all be removed.
why does this need to wait for the user to be loaded?
do we still need to make v1alpha1 a part of the extension? or does v1.get hide v1alpha1 work as intended in the future?
This looks like a good candidate for a `PortBinding`.
this is not needed anymore right?
@matt-gardner How do you feel about this change... I don't see why we need to expose RequestId ?
Not sure how this will work. This is a bad idea for the array.
@kingjr @wachterjohannes Is there a better way to get the link from the console? This way, the user would be able to call `readlink()` without accessing `i = readlink()` on each iteration.
This can be removed
Code standards: Please keep the space after operators.
This is the only line changed in this file. Is this the problem?
this was the only usage of this file
The default is `false`.
Can you move this to `System.Linq` please?
This should be using `req.addheaders` to match `open` values
breakpoint is a static instance, so it shouldn't matter.
This change will result in an infinite loop if the dictionary is not None.
I think we should also delete the other imports
This doesn't need to be public
Why not simply `std::distance(first, first + 9)`?
I don't think this will work, you should be able to change `kubelet` to `prometheus-operator` in the `kubelet` struct.
do we know that it's null ?
We don't need the `xrc20` import, it's already in the `url.go`
Shouldn't we do this in this PR? We have a `validate_workers_par_state_spec` and `validate_workers_par_state_spec`. I'm not sure how to do these kinds of things here, but I'm not sure whether this is the right place to do so.
We have to be careful about this, but it seems to me that the `StorageMiner` is not actually used anywhere. So this is a bug.
nit: `[]` -> `in pixels`
Why is this default `false`?
I'd prefer a different name for this function: `toString` -> `toString`
If it is not used, remove it. This is the one passing in `ctx`
Please revert this unnecessary indents, and add braces.
This is a bit disturbing, but I would have expected to see that this is only used for codeGenVersion. I would also rename this to something like `getClassVersion()`.
This is a change in behavior, but what about `setFileState`?
@deads2k I think this should be handled in a separate change. We should ensure that the strategy is not cleaned up and it should be handled.
why remove this?
Is `Without` the rootless path for a reason?
Shouldn't this be a `ResponseBuilder.getStatusCode()`?
I think we should have a `tag` field in `Image` and have the `tag` field take care of it. We could just add the type to the `tag` field.
where is the scope scope used?
Missing a closing quote
I wonder if we should be doing this at the bottom of the file and have it live in the model itself? It would be nice if there was a separate file for it.
I don't think this change is needed, you have to add a h2o_next_token() which calls a H2o_iovec_t and then do it in the h2o_next_token() that's already doing this. The call to H2o_next_token() below should do it.
nit: I'd probably make the LruCache an object as a `const LruCache`. LruCache is the only one that is used by the other changes in the code and I think we can just use a `new LruCache(query.project.project.project.roles, _headerCache)` here.
This line is not needed since we are using `keyVersionV3` everywhere else.
I think you forgot to remove the `for` loop, otherwise it would have been useful to be sure it's done by `generate().Error()`
`parentProvider` is only for testing purposes, right? It's not clear why we have to expose it to the constructor.
I wonder if we want this to be only for a `EdgeData` instance, rather than just for the `EdgeData` instance? I think this is a good change for the `EdgeData` instance.
Maybe we should just change this one to `SCM_certname`. We don't really need to change anything in master, since the master name will only have the name.
do we need to update that?
Why did you change the order?
This should be done in `TestCase` and in `TestCase`.
this is for debugging purposes, can we move it to the top of the file?
We should keep `EdgeEdge` in the same way it was before, but we should be able to keep the previous version in case this is a breaking change.
Can we just use the local storage storage instead?
Can we do it in RequestFeatures.go?
I'm wondering what the reason for removing this method?
Does this error still occur?
Just to clarify, what do you think about creating an `__iter__` for `convolve` instead?
did you mean to delete this? We're not using this any more, so far far as I can tell.
This should probably be `message_to_s(obj)` as well.
I think the message information should be in the user timeout, not in the message dir
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
@tgamblin This is the bugfix
Is this needed, or does it need `whatwhat does `ationalList` stand for?
`protected E or distinct distinct node.`
This is not the fix.
Which header is it needed for this patch?
Can we rename this to `exteranosRuler`? We could also rename it to `exteranosRuler` or something similar so that it can just be a string.
Is this still needed?
This test fails without the `l` prefix.
Can we rename this test to reflect that it's a test ID?
Block has too many lines. [30/25]
I think this is a leftover from a previous PR, but I think it's better to be specific and handleable in catch block
Why did you remove this property?
Was this causing a flake errors or just debugging code?
this should be a constant on the `python_PACKAGES`
This import does not seem to be used. Could you please use `javaslang.Alias` instead?
do you need to call `host['ips'].each`? It seems like the `host['ips']` is always undefined, so you don't need to call `host['ips'].each`
this is an API break. We should not use it anywhere.
I'm not sure why this is here, but I don't think the last option should be a part of the name of the component.
Let's move it to `src/...`
This should be moved to the constructor
This was the only usage that changed, right?
Why the move to `File.SPEC_ID`?
Can you explain why we don't use `?:` ?
Nit: `const allEvents                   = "*"` would be more consistent with other places.
Shouldn't it be `auth_thrift`?
I wonder if we should rename `isHydrating` to `isHydrating`
I think we should remove this file, otherwise it will break our API review
I don't see any use of this property anywhere, it seems to be used anywhere
just curious: what does `check_disabled_client` do when the flag is `disabled`?
I don't see any use of `classes` in this function. Can you make sure it works as expected?
I'm not sure why we have this `apply_helpers` - seems like the best approach here is to have the same issue twice in the `request` module?
You can use `ExtendedFactory` here to prevent any immediate confusion.
Why change these to 1?
`jose.ource` is a subclass of type `Type` so this should be removed.
Shouldn't this property be part of the `.properties`?
Should this be `var (func(exec.Cmd) ([]byte, error)`?
please add brackets
What does "myagent/_work/_temp" mean? Is "myagent/_moduletemp" the directory name? It looks like it can only be used in one directory, but I don't see it defined in this directory.
remove these two import if possible
I don't think the `.headers` is necessary here.
why are these changed?
can we move this to the `ConfigHandler` class
I would suggest to define the ARM_32 defined in the ARM_32.
do we need to add these constants?
It would be cleaner to do `getAvatarFilename()` in the first place to avoid duplication, since it's only used in `getAvatarFilename()`
We could also just use `error.` here.
I don't understand the purpose of adding `DefaultTextMapPropagator` here. Can we just use `guid.Default()`?
This is a change from a public API to an API.
This is a bit odd, but I don't think it would matter.
I am not sure we really need this for now, but we should be able to remove this for now.
do we want to keep `required`?
I think you can just return 0 if m == NULL
This looks like a typo, I think.
This would put the first thing in the `putOpt` method.
Is there any way to make it clear that this will be configurable?
This is a bug in `It's missing the `empty()` check.
This is a bit misleading as it's a error code, but a error code is actually returned. It's the only thing we are removing.
I think it would be better if the field was optional (since it is an `Event`).
This is a very good place for the `binary_labels` method, but I'm not sure it will work as intended.
This is a pretty big thing to do, as you're not doing any real work with `FileServer` and `FileServer` here.
I think this is a leftover from debugging purpose.
I think this might be a good idea to have a `definition` as an option to have it as a `@user` argument to indicate users what was being passed in. I'm not sure how to test it, especially given that this is the case, it's a `session` method that is being called by `/session`. It might be worth considering just looking into that code at the bottom.
This is an important part of the Dimensioned data and not a function, which I think is not needed.
Why change this annotation?
What's the rationale for this change?
nit: You might want to use braces here.
Nit: `github.com/pkg/errors.go` would be nice
Can you remove the `initCapabilities` argument from the ` capabilities` variable? It's not used anymore.
why was this removed?
Space missing after comma.
Maybe we should just add this as a global option to `FanoutConfig`?
This is probably better in the core, as this would be a breaking change.
@smarterclayton now that the default is `go`.
I think you can remove this, since this is the main change in the code
Why is this needed?
remove extra newline
I'm not sure this is needed.
This means we now have no unit test to go to a new folder. I don't think `Createsmall` is good idea, but if we do it this will be better for a new future version. Also I would suggest to change this to `__small__`
I think this was unused.
Please remove the header
Why do you need location for location?
There is an `std::string &func` here in the interface.
I'd suggest not limit the condition to 2601 instead. This will give the performance impact of the code to see if there are any changes that are needed to apply. Also, I'm not sure if this is a problem or a bug in S3, but I guess this is something we could do?
Can we move the logic to line 153 and keep the next line?
I'd rather have this be `==`, but rather have a cast to `'true` if there's no other type checking.
I am not sure how this function is used, but I think it might be worth moving it into here as this function might be called from the caller (maybe at least not at the moment). I think it's better for now, but I'm not sure whether it's possible to remove the `WithStatus` or maybe it's better to just remove the `WithStatus` function, and just use the function directly in the `WithStatus` that is called by the `WithStatus` that is called by the `WithStatus` (e.g. `WithStatus`).
note to self: this is not really optional. in what you are talking about, if you want, you need to make sure you are using external arrays.
The result isn't an "swapped" (it's a number, it's an integer) and not a number.
use the `reportable_type` helper for this one
why not put this in an `else` branch?
I think `contains` method has a name for `contains`
I would have made it a static field. It's a little bit confusing for a static field.
this is not related to the task - we should just move it to the `SessionRequest` class
I'm not sure why we should check for `NULL == 0`?
Could you add a `@example.h` to these new lines so that we don't have to add a new `url` attribute at all? I'm pretty sure we're missing a `url` attribute at all.
Why not just call `s.mu.Env()` instead of the `if`?
Could this have a default value in `enableDownloading` for easier access?
the `method` is not the same as the `method`.
This is a bit confusing. Why not `DD_HTTP_CLIENT_ERROR_STATUSES` ?
I'm confused why you remove this.
`getParams` is never called for the configuration, so it is more readable to call the method in the method `createBaseZnode()`.
I think this should just be `root := {}`, not `root`.
Since we don't have a user model, we can't just inline it in the controller and let it be a user model. We can use `<%_name>?(me_path)`
If the file is already added to the form-beaker, shouldn't it be the same?
yearValue() is never read, since 0.0.0 is never read.
If the server changes the function, then the event will be executed and that means you don't need it anymore. The `f` function will handle the `dockerMessages`. I think this will make the code simpler if that's not the case.
I would prefer a more explicit name like `Event`, `DEPLOYMENT_WAIT_APPROVAL`.
Is that method used?
I think this needs to go to the interface
I'm not sure what type this is for... `type: :model` ? Why do we need to use `type: type` ?
Shouldn't these be `os.Chmod()`?
If the cache is not empty, the cache should be empty, right? I don't see any usage for this if statement
why did you change this?
is it a bug?
`os` is not used in this module.
Why is this change necessary?
Just curious why we not use `cleanup` here. I suspect there is a problem here in the case of an error in `ErrorError` that was not found at all. This is because the API was written to find a few cases.
why the change?
$input_path is defined within within '/', so you should remove the assignment of the assignment and the assignment of `resp('')` in the assignment of `psalm` and use it here.
I was hoping we can get rid of this. Another thing to do is make this a package-level package. I think we have a aws package that's used in `package.py` but not have a aws package.
The way to test the `instrumente` in the `test-float64-histogram` is set to the value of the value in the `test-float64-histogram` method, we don't need to pass in `test-float64-histogram` to the `instrumente` in the code.
do we need this?
Note that these changes aren't necessary.
Unused method argument - `_``. If it's necessary, use _ or _options as an argument name to indicate that it won't be used. You can also write as `_`.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is going to break backwards compatibility with the other tests.
Do we want to make it configurable ? I mean we don't need to make it configurable, and I can't see a reason for this change. Can you try and get it back to HiveiveString as well?
@kennknowles @kraftbj can you take a look at this ?
We should remove this line.
It might be a good idea to call this `c.s3Getter`
@josegar74 I think this should probably be `d`
This was the only place where the `emplace` was used.
@jackfrancis can you confirm that this will break backward compatibility? I don't have any suggestions, but I guess it should be a separate PR
Why do we want to set this to a global setting?
This seems like it should be a `boolean` in case `err` is nil.
I am a bit concerned that this will cause a mem leak. I am not seeing any potential design issues if we have to pass the PortPort in as an argument or a string.
Could you move this above the `.find_element` line above?
This is probably the only place where we need to create an Project project for every project that we need to access?
Why is `bytes.Length` nullable here?
this is an interesting change, as we are returning the same node on a boolean. We don't even need it anymore.
This can't compile, because the WriteAsync call shouldn't be removed. We can't use WriteAsync anywhere in the base class without the base class.
Who will be calling here?
This is a bit odd, we should probably just make this a `let` statement for consistency with the rest of the code base
Nit: `attach` should be on the next line.
Please remove the throw on IOException since we're not using it anywhere else.
Did forceRDKit become False?
I think it may be better to do `return Game::find(guid)`, and use that here to avoid calling `find` every time.
same thing about `TestingApplicationsProperty`
Should we make this a warning?
@JeremyKuhne might want to rename this public method as it was only added in the public API
`$this->getRequest()` is not used, it is a string
@danrot @danrot @danrot @danrot @danrot @dantleech did you find this? This is a change of behaviour. It should be `db/g` in the package or `db/ghost` in our code, right? The `validatePackage` is the only way to get the Package Package Package Package. I don't see a need to change that unless the package was in the package manager, but it does.
Shouldn't we raise the `self.map` instead?
Why not `newbodyName`? `chainID` is not a chain, right?
can `tc TraceContext` return a `List.IsValid` instead?
Is it possible that `pipelinepipeline.h` would be used instead of `os.h`?
This one would be more concise for Rails.application.config
We should also check that the lambda is `False`
This seems unrelated to the PR.
is this necessary for the `HostDataDir` too?
Is it possible for this line to be inside `ipsecESPOverhead = 38`?
I would have called this `OnEnd<T,X>`. Then it would be better to have `[DoesNotReturn]` and `[DoesNotReturn]` only take care of it in the `ComponentProcessor`
remove this import?
I think we can do something like `new(Server)` in this case.
Why was this removed?
you should change the `if` to `$this->request->query->get('query')`.
Can you move this to the previous block?
This change is needed to make sure that the first card is enabled.
I don't see a reason for using `getConfig()` here. Could we get it from `plugins`?
If a view has a much more reliable `Unlock` does this, then `Unlock` will be executed. Is this ok?
This was a typo in the commit that was fixed.
Just a note for my own understanding: why is this necessary? The default of `9J2OjH8Ao_A` was already there in the `UserController`
I don't think we should add this. It's already the default in the unit test, not the unit test.
Why not just remove the `unsupport`?
This is the only change that makes sense, but I don't know what you are trying to do, I'm afraid it doesn't matter that the `CleanFpInfoAttr_` function returns a `List`.
you need a `callback` here. You have the `callback` as well.
We need to keep `exercise` in the tests so that it's compatible with the `app/archived/archived` gem
`ExerciseWithProgress` should be renamed
This is a breaking change. This is not a public method.
@Scottmitch why is this not just any place in the class ?
Why the previous version change?
It looks like this only takes a single `Verify` in `maybe_rebuild_setting` as well, is that intentional?
import in wrong section
Is this a BC break?
Nit: We usually don't put the ObsACY in `Application` for this.
I'd suggest `EEdit_AWOR_ROOT` to be consistent with the other `privilege` values here.
this should be in a more complex way, maybe? (same for the "from" case below)
Is the idea here that this will be executed even when the node is not in the list?
Since you're changing the return value of `dokan.ExistingDir` here, this function can now be `[]:`
Do not use listRegions function.
Why was the container removed?
Why not keep the `function roots_get_search_form` function as the second argument ?
It looks like this class isn't used anymore
Did you mean to delete this?
Can you move this to `azkaban.jvm.jvm`? That seems more readable than it is, and more clear what it does, what's the point?
I think you're right about the `transl` here because you are using the `is` statement instead of just an `__(`
Can this just be `GetCancelledZeroTask`?
The same is true for the above if statement.
Why not use `std::steady_clock` instead of `wallet`?
I'm confused by this change. I assume `run` is the first word here, but not `run`?
can you make this pass?
I think the `BlockData` is unnecessary for the service version.
I believe that this should be `final`
@jridgewell Shouldn't the second exception be thrown here instead ?
I would move this method to a new `start_elasticsearch_service` so it's clear what `port` means.
Can you make this public?
Please add a `TODO(BEAM-XXXX)` to this in a follow-up if you think this will work.
Line is too long. [90/80]
shouldnt this be `unaryExprMetaModel`, too?
why is this deleted?
Missing license header
This file should be removed.
Would it be safer to add a default charset to the body of the body of the method?
Does this need to change?
Why not `omitempty`?
Is `tty` an `Close`?
Do you want to remove the `implicit` field?
there are two ports: `protoreflect` and `storelect` here are two separate things, so I think you could just remove them all from this PR and change them to use the same pattern.
I think we should not use this variable in this test, as this is a config option. This is also not a required parameter for this PR.
It seems that the `enclosureTypeValid` call is no longer needed, since `validType` always returns a boolean?
I don't think this is right. It looks like it is a good idea to just ignore the sessions?
I don't think we need this check here as the one we have in `request_server.h`
Why was this removed?
Why is this change necessary?
Isn't this going to produce error if the user didn't specify it? If it's not, I would recommend to use `if (!read(...))` here.
Should we use a different check here for the one above?
The other include is in the list, or at least it's in a new list.
This change is not really related to this PR, but is a bug fix?
I think `to_s` is not necessary in `io.prestosql.spi.erb` module and the `loaded` module is already in `loaded.rb` module.
We're using `bolt/plan_creator` everywhere. Is there a reason you didn't use it?
Should this be `20`?
This seems unrelated to the rest of the PR?
Why is this in this function?
I think that we need a better error message here: we're calling this method from the server, so it should be a warning and we are trying to avoid doing this.
@matt-gardner Is this the correct limit for a limit? Or should this be `define_reader` or `define_reader` to be `None`?
is this needed? `release` already returns null for some reason?
is DrandEntries always available now? if not, we should probably rename the variable to just "isValidationEntries" to be more clear.
I don't know if this is the right place to return getattr(current key value) here, but it seems like the `None` value would be a lot of times in the code and it wouldn't be sufficient to do so (or maybe even a bit more specific) to be explicit and just check for None instead of just string concatenation.
Do we need to check if `mode` is present before using it?
Wouldn't the timeout be able to be `(defaultTimeout: w.DefaultTimeout}),`?
Do we need this? The limit could be a string.
Shouldn't this be using `from scapy.consts import scapy.warn`?
I'm not sure if rollbackPrimary should have a global var. What about rollback? Do we expect it to return a global?
Can we avoid changing the default value here?
`isUpdateawait(isUpdateawait(isUpdateawait(NodeNode))`?
We already have fakeListOk in the fakeListClientset for everyone?
Can you move this up to the top? We're not actually adding new modules in this file.
Let's move this to the new go-api imports above the go-api imports above
Just noticed the pipeline stack in here, doesn't look like it's necessary to add it, but it seems like the `StateSecret` is not actually being set anywhere, so I'd suggest removing it entirely.
I'd put `packages = local_path, local_path` before `self.call_check`. I would also suggest to remove this `package.py` line.
Nit: remove empty line
Does this make it even harder to read?
Use relative import.
I think you can remove this and use `var insecure`.
I think we should also check HTTP version.
Why not use `test` from `localhost` to test this?
I'm not sure about that. MakeFunc returns the default value of `reflect` to avoid the `return Value{}` for each type. It's probably better to do it in the next PR. It might be worth to have the `reflect` return the current one and then return the `reflect` for that type.
I think this is wrong, you're calling it `nameLower(name)`.
Is it possible that this call is not made in `externalNodeStringSet()`?
I think this should be `self.Promise = undefined;`
This can't be removed if we skip the image and not the image
Maybe we can move this function to a `utils.go`?
I'd be in favor of adding a new `if` here.
I think the name `Delete` could have a better name. I wonder if we need `File` any more. I think that `FileFactory` could maybe be renamed to `DeleteFile` or something similar.
This change is not necessary.
I'm a bit sad that we're not going to override the default value of `config` in the `config` directory. I'd rather change it to something more descriptive, e.g. `config.cancel() == 0`.
Do we need to also update the `EnableOpenTelemetrySdk` in the `if (builder.AddActivitySource) { HoodieWriteLock(builder)` case? (just in case of, the tests below).
I think we need a new line here.
Wouldn't it make sense to move these methods inside the `CloudBackupGroupCreate` class, to keep the usages of the `CloudBackupGroupCreateRequest` class and have the `ProcessBackup` interface be a static method of the `CloudBackupGroupCreateRequest`.
Should we be checking for null here? Seems like an error might be a bit too complicated.
I would keep the `call_user_func_array` and `call_merge` here, because it's a `array_merge`?
Can you add a `TODO(sc.IsValid())` line before this so it's clear that the initialization of `sc.IsValid()` will be invoked once the first time.
nit, we add a description to `Schlieählen` so that we don't need to add `span_and_add_another` to the API. we should also make it a separate PR for it, but we should make the `span_and_add_another` and add an "corporations" way to get to this one.
Is it expected? I would expect it to always be the last line
What is the point of having a string literal on the whole type?
I don't think this is the right fix. We should just have `s2` here as well, and have it default to `""` in the `hahahaha` if it's not null.
`TogglePrefetcher` should be `TogglePrefetcher`.
This was a bug, right?
I think we should update `RESOURCE_NAME` to just `config` (that's why we added it)
Why is this change necessary?
Could we use `getAllprojects` instead, since the type is only consumed by the project itself?
should be "data"
I don't understand what this is for. If we have a `dll` function, we should use `scapy.sendrecv` and `scapy.sendrecv` when `not conf.use_winpcapy`.
Shouldn't this be conditional on the `asset_defs` above, or should we be doing that everywhere?
Why did we remove the strncpy line?
I think we can get rid of this line.
Could this require be added to the standard lib?
Let's change this to be `.`
This is wrong, we want all the vinto configs to have the same permissions, not the same thing, but I'm not sure if it's possible to do it in the past.
no space before `!r`.
This is a pretty good change. But if you are changing the logic I don't think you want to change it. This is fine for now, as it is a bugfix for the `validateFrom` function.
Why is that needed?
We should be consistent with other libbeat constants.
I'm a bit confused by this, if we don't do that, why not just call `options: {babel: false, '@babel/env', 'babel'):`?
why change this?
Please add the license header.
I'm not sure this will actually cause an error in some way. The `write` Attachment is the same thing, so maybe we could just add it to the same function and change it to something like "if (p).). I'm not sure we'll need this check here. If we are using `save()` for this, we can use `set()` instead of `set(null)`, which is a very good name.
Does this work with non-user-generated variables?
what is the difference between this function and `_dict` ?
Why is `LongDomain` removed from all of these tests?
These changes are not relevant. Please leave them in.
This should be set to `false` when the value is assigned to the "real" value.
Hmmm, this should use the constant name.
This is a breaking change as it's a private API and should be in templates that are not in use in the code.
I wonder whether it's a good idea to have this as a property on the provider itself. If we do it in a different file, then it should be possible. In this case it's possible to have a simple `Set()` function that returns an `Error` object that is used for other types of different types of UTF-8 strings, but not for all. But this is fine for now.
Should this use `List<SolrInputDocument>`?
Why this change? This makes it more difficult to understand and glad it's not related to the PR.
This is not correct as it is the same thing.
I don't think this change is needed since we already have it in the `VersionReplace`.
The `create_single` method is called in `create_on_register_in`, so I removed it from the `single` table.
I think we can just make this a list.
Why is this function defined somewhere else and not in this file?
It's not clear to me that this is a nil-orig.
I'm not sure why these two lines are here.
Why is this change needed?
Would this be thread-safe and make `volatile` take the result as an argument?
Please remove this.
can we call it `ASSIGNERS` ? it is only `SAMPLERS`
Probably doesn't matter, but just curious, are these changes related to the rest of the PR?
If we're using `stats` for this, would we want to be able to just use `stats.is_a?(stats)` here?
This needs to be added to the "new" commit
Why is this needed?
@sparrowDom Just a thought, did you find a way to make this the state? I'm assuming you have a look at it.
Line is too long. [85/80]
Why not just call this the `yield`? The rest of the file is already on the `Client` package. It's not a big deal, but it should be in a separate PR
This will not always be a `location`?
I think we don't want this for our own `executionproto` but I guess it's not used in tests?
This change is not necessary
This one is not used, and it is a bit hard to debug.
Why is this here? The `time.Time` is a `time.Time`, so it is not actually used.
This is not needed anymore.
This should never be ` TMethod`, right?
I think we need to keep the name of a property in case we want to expose a dataclass or a meaningful name for a list.
I don't think this is a good candidate for a test case.
why remove these tests? they can use pytest.raises
I think it would be good to make this a constant so it's easier to grok it. I don't think so, just making sure I'm mistaken.
Copyright should be translated
I'd like to see this done before we call `.hasLobColumn()`
This enum is added twice
I would use `ui-grid-icon-plus-squared` here, because it is a new instance.
I believe that this was a bug that caused the id in the IDE. The IDE was already doing that.
why are we removing the version?
This should be `internal` (we're already importing from the `HttpUrl` interface)
I think we should pass only the `SynchronizableEntitiesPrefix` when `cfg.Providers` is not nil.
I'm not sure why we are making this change, but I guess we can do it for now. I would suggest to use `pathUtils` as the default, to avoid the pathing of all `DockerfilePath`, and have `DockerfilePath.text` use a file name.
This line is too long
This should only be done if `_check_vanished()` is called.
I'm not sure what this `profiling_enabled` is?
You don't need the `switch` here. If you're changing from `forward_agent` to `nil` it won't be necessary.
It would be good to have this take an input argument instead of a block.
How about `is supposed to be routed`?
I'm not sure why this is necessary. I think it's ok.
I think this assignment could be refactored to be a method on `current_user`. It would be better to check if `account` is set or not, but that way it's not clear what's going on here.
Add link to `nameof`
is the output a valid output name for the string?
I would still keep it for info but I think the reason for this is that it's not required, but it's not a big deal if it's needed for other info as well
This is actually not correct because `maxImageRampup` is a new image.
I'm pretty sure this log statement is not necessary because it can only happen if we're not using it in `Logger.Logger`.
I don't see this used anywhere -- can we just use the network from the passed passed as a prop instead to avoid the implicit cast?
The `fluid` flag is already passed here on the `schemaMan` object itself.
This file needs to be formatted as `ValueError`
I know it is just this one, but is it possible that r.interpreter.Eval() can't do this? I think the `r.scope` function is a better name, and `r.interpreter.Eval()` could just call `r.scope` without `ulope.interpreter`?
we can also remove this `v1.Service.Labels`
I think it's best to just do `default:false` in this case and then `default:array` in the default value. That way the `default:false` setting can be always `true`.
Redundant return detected.
I think you can delete this import now.
Hmm, this is probably a good example of how `firebug.props` works but this is not an issue since `firebug.props` is the ` path` argument.
I think it's better to remove the `//`
I would call this `wxLang`
I think this change is not needed.
Is it better to use a specific environment instead of the test environment?
I think we should keep the old method and just add it to `--min-gas-price`. It will also remove the warning.
Metrics/LineLength: Line is too long. [122/120]
Shouldn't this error be reported somewhere?
Is this include needed?
remove the extra empty line
I am not sure what this is for... why did you remove the INFO level?
This is the bug fix. We should not use flattenIndex here.
We should be consistent and use a single private method here and below.
download the file header
I am not sure about this change; I don't know how much this works.
Do we really care that `dialect` is also used in `lib/dialect.js` ?
Why not put this outside the `Number` field? We have a lot of these three chan variables.
Does the `err` already return an error here? If it's empty, then it might return a status error that was previously returned.
The app.CreatePayments was not doing anything useful in the app. I'm not sure we need it anymore. I'm wondering if we can get rid of the value of the "CreatePayments" constant in the context, if it's not, we can just get a constant from the payment. In this scenario, the value we want it not.
I think we can remove the `file` here. The `load` calls `file` and `load` functions in `load` are now deprecated in `load()`.
I think this should be `if ! params.qstring.method)`.
I don't think we need to make this `Optional`, since it has a default value. We could use that instead of null, and we could use that in `GenericDataLoader`
I don't think this is right. We don't want to do the same thing here, but it seems like the `err != nil`.
@Pearl1594 can we keep the previous or just use the new constants?
I think the dataverse.rserve.password is already the default (i.e. not the user) so this should not be the same as `.rserve.password.rserve.password`
nit: can you do `if (endptr != tmp_optarg + strlen(tmp_optarg), &weights_t)`?
the email is not used and we don't need the email
This seems weird, why are we expecting a `List`?
I don't think you need to do this, the block_a should be the same as the blockection->user ()
I would suggest to move this to `src/server/getServerFormHelper.go`
`opt_port` should be set in `get_opt_port` method.
So these changes are for a while and some don't work?
I would rename this to `UnknownDeployment` and make it a bit more clear.
I'm not sure if the `v` is the right solution since it is not a 9.1. So, the `v` can be a 9.1.
Isn't this the same as in `voteContext`?
This assertion is not correct as it only happens now, not just an issue.
The caller should be able to check that the registry is registered before loading the registry. Otherwise, the caller won't be able to check the registry.
Should this really be in `spreadPath`?
I wonder if this would be more appropriate (e.g. `float64` and `float32`)
This test doesn't seem to test anything but is really necessary. I can't seem to find anything in the code to tell.
why is this in the first place?
Should we rename this to `Wire`?
Why not move it to `src/server/db/Content-database.xml`?
Maybe it would be better to have a test for this, like in `./pants help`, etc.
why is this const public?
`BlockChanSize: 1000` will be too slow to use as the last time. Is there a reason we don't want to make this configurable?
This can be `plans.reject`
Since this constant is used by default, can we move it to `api/v1/api.go`?
I think you should use the `@SuppressWarnings` here and not `--dns-discovery-url`.
Remove this file, not needed.
You can pass the key in as argument to `getattr` directly, but it also makes it more clear that this method is only used when the `key` attribute is set to `None`.
I'm not sure about the use of `IEnumerable`, I think the `IList` field could be renamed to `IList<T>`
This is an API break. Please undo.
This is a bit weird. I'm not a huge fan of "desiredUID" (and "vend"?)
Please avoid import *
nit, no need to return error?
I think the `passwordModificationTime` is a bit too much here, can we rename `username` to `password`?
Would you please add the `if` below the checks? It would make the intent a bit easier to read.
I don't think we want to do this, since we always use `.To('3', 'call')` in the `Printf` loop - we should probably do this in one line.
The changes to this file need updating to match the rest of the PR.
I don't see anything in this PR to get Action by?
same here, can you fix the formatting please
Should we log the stack trace?
This is the line that was not related to this PR, and should be merged.
"... to the kind of the sentence" -> "... to the kind of the workspace".
I don't know if this will be the correct target. I'd rather not use target here but rather use the `cmd/target.exception` target.
This is the fix. We don't want to expose the defaultclient.
I think it's better to do this in `nativeSys32`?
I am confused why we're dropping the `editController` field from the DOM here.
`data` => `key`
this will fail with pretrained argument?
The original code was a bug in this code. We should keep the original behavior as it was before and change the value to `value`
This is not needed. `taskIP := getTaskIPAddress(taskIP)` will already call `.String()` if the task is not found.
This should be `output.colorUrl = "daos", "slquentially"}`
Is there default value in default?
Why is this being changed?
Why was this changed?
I think that it is better if this were to be in a `RCLONE_CONFIG_PASS` function. I don't think we need the else here, since the else is fine.
Can we add a note to the backslashes for this in the test?
isn't this the default?
It's a bit odd that this `compiler.evaluate_string('type PlanResult = Boltlib::PlanResult')` isn't an `rails.PlanResult` method. Maybe it's a better choice.
This doesn't appear to have anything to do with this change.
I think we can do `if len(candidates[i].FairbankBlockHeight() <= 0 && fa.GetEpochNum(hu.FairbankBlockHeight()) {`
Hey @agramfort, thanks for adding this!
Please add `asLenField` and `as FlakyField` to the docstring.
This will throw an exception if I recall correctly: > The `rowCount` would be created automatically for `rowCount`. > The `row_type` will not exist in the `rowCount` constructor. > `row_type` will only work for `row` (which is the only case in which case the user will not see the file path). The current logic will be more accurate.
It seems to me that minQueryLength should be a number, so that it wouldn't need to be initialized in maxQueryLength.
Is this change related to the issue that you changed?
Shouldn't this be `AttributeIdsByProductId`?
This is also an API break, but I don't see any `PerM_PERIOD` argument being set in the `x_detach_cur` function.
Remove empty line.
This will cause the remote tag name to be logged as a nil value when the name is not present.
I think it would be more efficient to do it in this way, maybe `verifyStatusResolvable(split, target.SteadyStateDependencies, onSteadyStateCanResolve)`
Do not use `has_active_subscription?` here and everywhere else. Use `has_annual_plan?` instead.
I think this pylint was causing the CI failure. We should be looking up the habit of doing this now.
This is the only change in this PR. I don't see it being used anywhere.
I'm not sure if this is the correct way to fix this. For example, if a user doesn't use a `nodeid`, I would just pass it to the function.
Can you put `in_channels` in `init_cfg` so that we can save other options? Also, I think `# type=True` should be fine, since we don't have to do this in a follow-up.
Why not just `json/omitempty`?
This is an unrelated change?
Does the build integration actually need a `deploy` field? I think you'll want to pass it as an argument to `build.deploy`.
Perl_croak already does the same thing.
I think this should be `IEnumerable<Transaction>, gasLimit(long gasLimit);`
This was removed because the previous implementation did not have a test yet.
How about "createfile_path"? The concept with SCAN_WITH_STATS_COLUMNS should be different.
I think we should add a little description here. Maybe some sort of implementation could use the ReportStatRequest at some point and have the caller do the right thing.
This include is not needed anymore
Why are min and maxSpeedChange both needed ?
Why can't we just return the first one? It's a little bit odd.
Is the `A` tag correct here? I'm curious.
This is the only thing that affects this PR. I think it should be moved out of `modeman` and have this logic in the `if` block to make it more obvious that this is what is being used for.
I don't think we should have this in the `EMAIL_RECIPIENTS` model.
Just a style guidelines, and I think we should use the shorthand since there is no need to have a variable in there.
`FirstOrDefault` should be called in the constructor, not here.
nit: `/status` was only used in the `State` class, so it doesn't have to be changed.
The `else` block can be removed as well here.
Should this be in `query/memoryCircuitBreakerThreshold` ?
Please remove the newline
Please add a license header
If this is the only change in the `while(` to `IsAuditFields` we could just remove the `is not nil` check here.
We can probably use `try catch` here, and have a test that checks whether there was an `Optional` or `Optional` or the `visitOrAssembly`.
this variable cannot be used here
I'm a little confused by this. Why is this part of this PR?
can you use the same syntax as above?
Remove the empty line here.
`default=None, allow_None=True`
We might want to allow a hardcoded value as well (e.g. `sController.yaml` and `sController.roles.upper`) for this.
We don't use `go mod` in this context right now...
This file should be removed.
Why is this necessary?
We can also remove the `getTypeVariables` method from the `statistics` object.
I don't see the point of having this field here. Can we have the field in the extension, or have it live in the factory?
Can you please change this to `checked` to make it clear what's going on?
I think you also want to keep this for all of our messages, as the ones that are not included in the file are no longer needed
BTW, `Bla` is a `Bla`, so `Bla` is a `Bla` object. That's why I used this here.
`recids` is a bit confusing since it's the only payment in this case. How about `<qid, rg=`?
I think it would be good to add this to `pkg/api/ContentMD5` so the user can know what they're doing.
I'm not sure why we need to do this, as the default is the same as the one in this function (i.e. the matrix should be a boolean).
Nit: should we move this import to the top?
I believe this change is needed to make the default job configurable as well.
I think it's better to go through the go-routine check for `init()` in `init()` so that it can be reused. I think the way we go in `init()` is to have a single file `map` and `num` in `File` so we don't have to go through `init` and we need to go through the go file in `init()` and it's more clear what the package does, but I think we should be fine.
We don't want to log the `WriteLine` for every iteration of this class, right?
This is a bit confusing to read. If I read this correctly, it is a very hard error to see, but I don't know how many instrumentation names in the name. It should probably be a different name.
Should this warning be marked as unsupported? I don't see the issue with it being persisted in this PR.
I would call this "hi" or "users".
I know you didn't write this before but can you change the `plan` docstring?
this should also check for null
`base64` is always the same as password `Basic`, so I'd say `password` is better?
I'm curious why you didn't just have `BAZEL_TEST_DATA_PATH` as a variable? Then you'll have to define a variable in `app/services/config.yml`, but that is not a real issue.
I think you forgot to "not" it might be better in this case
This is a bit confusing. It would be nice if we could have a `granteeList` that has been passed to `roleList` instead of the second parameter.
This is an anti-pattern to be a little more specific. Why not just do it for all subscriptions, then pass through it in?
This makes me wonder... if you want to add a `#new` or a `#destroy` option to the `sign_in` list?
I'd say this is the first thing in the code :+1:
this method is removed and can return false, so no need to keep this.
Is `enableCellEditOnFocus` guaranteed to be `false` here?
`slug` can be removed. A `Installer` will never be used.
I would prefer it the way it is to run the `time` before the `execution_time` (or even the `start_time`). It's not the case, but the second result should be the second (i.e. the second line)
@trevan I think we need to keep this as is since we only call this if it is needed.
remove this empty line
I don't think that `null` is required here.
Out of curiosity, why do we need this as a `Resources`?
Since this is a container object not a "Exec" container, can we change this to `return nil | | | 'Exec'`? This is the reason we have to make it configurable, I'm not sure why we would want it to be a container in the first place.
this should not be needed. we can remove the `./iotexapi.ActionInfo` from the `actInfo` package
Is there any case in which the CN is not `commonname`?
what is this autocomplete? you're just doing this in the previous line, and not doing a `.mule.prototype...`
nit: this can be merged with the next line
This is not the right way to check for `if value.startsWith(value) || value.length() - 1`
This line can be removed now that #ifdef is merged.
I'm not sure how to get the `(and` and `(reportable)` occurrence on it, but it seems like it will work for all three reasons: * The reason we have the `(reportable)` instances in it and the other places in the code is that it needs to be a `(current_user).to_id()`. * The reasoning behind it is to have the `(current_user)` logic in the response, and then it doesn't need the `(current_user).to_id()`.
I'd prefer to have a separate `if` statement instead of the `if` for readability, because I'm not sure what that is.
I think you can get rid of this `approval_response_path` now.
Please add alphabetically to the imports.
It's probably fine for now. but we have a better way to achieve the same effect. I'm not 100% sure we need to do anything with this PR, just wanted to point out the way to do it, and we could just get rid of this line.
@bparees you could add a line after `for`. If you look at line 151, you need to `for` here.
Why is this a public property? Seems no matter what?
I think this is already added in `pip install`
Why is this change needed? It looks to me like the previous code did it.
Should `field_presenter` return an empty array instead?
We already reset the component. Is there a reason we need this?
I would put this in the `config.fee` call for this.
This should be renamed to `ACTIVITY_TIMEOUT`.
Can you use the same signature as the block?
This should be `processRefCGs(ingressRule.SourceGroups)`
Why is this not just `Pending`?
You need to use `!= true` here as well
nitpick, but I wonder if we could move `nextPageTokenName` to the top of the method?
Use the new Ruby 1.9 hash syntax.
Lint/ParenthesesAsGroupedExpression: (...) interpreted as grouped expression.
I think we should use the `as follows` constant here instead of the magic number here.
Not really related to this PR, but I'd prefer to avoid using `watchable_name` directly.
This should also be removed.
Why do we need a `List<ios>` here?
Would you mind re-wording this to "HttpAccess.init"?
if len(sha1) == 7 {
Nit: please remove this empty line
Why not just use the mock `expectedName`?
This will not work. `getDataset` returns a value that is not a `null`.
Minor: I think this constant should be part of the config module (as it is used in other mutations), since it is used in order for the config name.
Why remove the `.` here, and in other places?
nit: revert whitespace change
This can be `object`
@JeremyKuhne might know better, but would it make sense to use a `Default<String>` here?
Should this be a `components` instead of an underscore?
Can you please avoid using `*` imports in `.js`? :)
Please use `String#Equals(String, StringComparison)`
why is this needed?
This is the key that makes the consumer appear to be part of the connection, so I'd expect a change to the provider to make a change in the `consumerID` that is sent from this provider, and not the connection.
This is the only place where `override` is used.
I'd suggest to firstly first first. Then we don't need any of these points, but it seems that we don't need any additional values. The only thing we do is to do is do do that because we don't want any values in the view.
This looks like it would be better to move the `log.info()`.
Is there a better way to do this? I don't know if the `0.5s` check would be better? Also, why `0.17s` and `0.0.5s` became different from `0.5s` and `0.5s`?
Could you elaborate on why we need to do something about json here?
Please remove these includes.
The `Rayveveveveve` is probably a better way to do this, but I'm not sure if `Rayveveveveveveveveveveveveveveve-forgiving `self.legend_opts` would work.
Why not just delete the Launch version here, which we delete on the next line?
Why are these being changed?
Won't this work if you use a custom `.format`?
This should be set in the context context, right?
I'm not sure about this, but I guess the `token_*` function is now being removed in this commit?
I don't think this import should be needed
I think this should be run from `setup.log`
AFAIK `type` is not nullable
This is not related to this PR but I'm a bit surprised to see `parent.getAttribute('role') || ''` in the same way.
I think this should be grouped with the other standard library imports.
I don't think this is correct. If MetricStreamConfiguration is set to true, the method is set to true. It means that you have to pass the `new MetricStreamConfiguration()` to it. I'd suggest to call it `new MetricStreamConfiguration()` instead. Then the method can be removed.
Do we really need this?
>type [](start = 16, length = 8) I wonder whether `type != Type::None` should be a string type?
This is wrong. It can only be used if there's no data. The same below
this can be also defined in a different PR
This line is redundant as well.
Please add yourself header to the second clause
@smarterclayton is this the right move?
Do we need to log the whole time here? Or should we log the whole time instead of just logging?
This seems like it should be a different pull request.
We don't have to remove the year in the original version. The year is already in there.
@jmhooper @jglick Could you confirm you get your opinion?
inconsistent indentation detected (column 6 instead of 6).
Is this still required?
Can you add a doc string to this?
`!` is not needed here.
If you're using a `Shutdown` from `BlockServer`, `BlockServer#addServer` here, why not use that one?
It's not obvious why we use `fraction` here?
Should we just return an error here rather than let the dispatcher handle this?
Do we have to specify `=true`? Is `get_ctu_dir()` always true?
Can the plugin files contain the config file be removed? If it isn't needed, we should probably keep the plugin files as well.
I think this is wrong. It doesn't have the `getAttribute('alt')` attribute, so it doesn't need to check for `alt` here.
Do you know if it's worth adding a check to make sure `ApplicationConfig#userscripts` is not null? It would be a good thing here if it was empty.
This is wrong. The `sub_type` is a `new MongooseBuffer(value.value(true), 0UX)` which is the correct thing to do, right?
Is this a bug or intentional?
This is the same logic that was chosen for both `SELECTABLE and (reason == REASON_CHANGE or STATE_FOCUSED in states):` and `get_absolute_SELECTABLE` should be used for both `get_absolute_*`, right?
You might want to use `CurrentEntityURL` here, not sure why the code is necessary.
Again, should we use `resp.StatusCode`?
Align the parameters of a method call if they span more than one line.
looks like there are 2 more spaces here.
I think this should be a `Map`
@cra0zy do you mind adding the `params_filename` here?
Do we want to put `&attr &&` at the beginning, or do we need to check `||` before calling `&attr`?
not sure if it's a good idea to support the old version, it might be worth having an explicit check that it is for a version of the package. I am just noticing it to other versions of this package as well
I'm not sure what this is doing. It is not a big deal.
This is not the default value. It will be `true` in all cases (see `System::true`) if `true` is `true`
Remove this line
Why not use `__init__` and `__init__` to avoid the need to do anything with the class `./pants lint`, etc.?
These two are not related to the PR.
I would like to avoid any include here.
Is this public API or a public API? I think it should be private.
I think we should change this to use `_` instead of `_` in the `html.escape` method. Then the `_` can be removed.
Can we make it a const? What does it mean?
Shouldn't it be called as a `update` variable to make the call sites easier to find when the callback is invalid, and if it doesn't happen then it'll still be an error. I think it's fine for now though.
How do you make this `('('', 6, 27'))`?
Why not just call `WorkWorkAndResize` instead?
Use the new Ruby 1.9 hash syntax.
I think this should be in a single line with the other `&&` operator rather than in the if clause.
@pmeier I think this should just say that this means that the output of the output of `stdout` will not be executed for all versions of the patch. We should just have two options for that, and then the same patch should be removed.
Why did you remove this?
Line is too long. [83/80]
Remove this class.
I would return 0 here
This is also causing the error to happen.
What about `combinestitutes`?
Just curious, was the reason to do this before?
We could use the default here. I think the code for the default is "true"
Is it possible to use the length of the array?
Why did you remove the domain from the struct?
You can just call `mConfirmDiscard` directly.
I'd rather not use a `is_string($media->getBinaryContent())` here. I know that `is_string` is already an array of string, but `is_string($media->getBinaryContent())` is a string, so it is not a string that's a string
Align the parameters of a method call if they span more than one line.
We don't use this anywhere. Why not just call it `profile.stop()`?
You can also do this for the `CheckForEmpty` case
I'd prefer to return a different value than to use a different one, e.g. `getTime` and `getInstance`
This is not used anywhere in this PR.
This seems unnecessary.
I think this is not needed since `installedVersions` is already called in `isVersions`.
why is this here? Seems like you only need one of these?
This is a change in behaviour, correct?
We need to make sure we don't need to make `Serializable` into the whole `Comparator` interface, but we can remove it later.
This line can be removed.
Why did you remove the `disable_iptables` method? Is there a reason you removed it?
I think thisgo is the only thing that is used in this PR.
This should be a `log :=`
This is not correct as allOutputs will be nil if it's never empty and the line below will never fail.
This should have gotten caught by the code, but it seems that the `MetricSupplier` class is now being passed as a `ConcurrentHashMap` to the `ConcurrentModificationException`. I'm not aware of the reasoning behind that new functionality is implemented, but it is not used and is used elsewhere.
Do we still need the `mode` flag?
These changes are not needed.
This is the only usage that's used in the test suite.
`cur_path = cur_path.gsub(/\//,'\\` ? (we do need to fix the indentation of `cur_path` here)
`edit_guidance_alert_dialog` might be better in the future, I think.
This link can't be added to the website, since this is not a link anymore.
I think this could be called `add_tab(tab: event_option[ext])`, and it'll avoid the need for the `add_undo` param.
@garyrussell, I think we can move this to line 233, so we don't need that.
@KlausBSautter is there any way to prevent this from being handled in the `onWindowKeyDown` function? I don't understand the logic of this.
This should be an if-elseif block. Otherwise we can avoid the specific if statement when you have a property.
Mmmm, this was just me, but can we rename it to "glue-code"?
Do we really want to do this? I think the previous behavior of the `_get_value_transformer` should be a constant.
Can we call this `handler`? We have `this table` in `handler`
Why is this change needed?
Could you make the `qutebrowser.io` package private?
This was the only one I was looking into.
This is not related with this PR, but I don't think we need this `lvis_v1_instance`, so I would just remove it from the `base.py` folder.
You should use debug level here, as the rest of the codebase is not necessary to have it.
We should call `RaiseSingleton` in favor of `setSingleton` and `setSingleton` because that's the pattern that's being done in `setSingleton`...
Why is it necessary to have a new jobExecutorTests attribute in both the job job jobs?
(style) externs should be avoided in .c files
Do we need to call `clone()` in each iteration?
I think it would be good to add a doc here that will make it easier to track what is going on (I think). I don't think we need a doc for this, so I think it's fine to just add it to the `Ecs` interface.
@danrot @efiop ?
This file was added in #10714 and will be removed.
This is not used in any of the Nodeers, but this is not a part of a PR.
I think it was already fixed by the changes in config/urfavecli.
I don't think we need this line.
I would prefer to have this in the `__init__` function instead of having this function in the `outbounds`.
I think we need to add an overload of the `TParameter` parameter to the interface as well.
Is there a better way to do this? I'm guessing because this isn't a public API, so I'd rather see it in a `table_malloc`.
nit: I think `private` is not necessary here
Why not keep the var as `const`?
nit: this should be just string. We could return the empty string in the first place.
this is the fix. It should be in the same commit as the one below.
this is a leftover
Please add a license header
I think this should be `action`
Style/EmptyMethod: Put empty method definitions on a single line.
This is the only change that affects backwards compatibility, right?
This is a very old code. Can you add it to the commit message?
You don't need to assign to the variable.
Why is this being deleted?
why not make this `const` since the next line doesn't have the variable anymore?
The te::get_row_count() is used only once, so I think it's better to move this logic up there.
I am not sure if this is the right approach. It might be useful for the datastore to be in the datastore. It might be useful for the datastore to have a `req.Pagination.Token` that can be passed to `Side note` or to get a `fake datastore` object.
This seems like it should be a function that just passes, not a function.
I'm surprised we don't add this back in. The `respond_to` part of the body of this method already existed, so it's pretty annoying.
This should be kept unchanged
Do we need to check that `0` and `x86_64` are not sufficient?
You may want to use the `Complete` field here instead of creating a new one.
What's the point of this if statement?
This name isn't very good, I think we should name it something like URISafeName or URISafeName. It's better to name it just something like URISafeName or URI.
I think we can remove this `else` now that we pass in `this.plugin.` above
This is a leftover from previous version.
We have to be sure that `assertError()` doesn't throw the `Error` directly in this method.
This seems like a good candidate for a `if (_layout.IsThreadAgnostic)` check.
`org.slf4j.Logger.type` is not defined anymore, so can you remove it from this interface?
If this is the only place where we want to do this - we can't do this - it's a no-op because it is always going to be a no-op - we'll need to do a compile-time check here. This will make sure we don't break the number of nodes that don't break. I'm not sure how to test it.
why not just remove the conditional for `data` and the `Success` in here?
why do you need a try catch here?
Why is this needed? When should `getAttribute()` return a `Serializable`?
Can this check be made in `internal/config.go`?
I think the idea is that if the user specifies an external app that is trying to determine that `s.scope.ManagedMachinePool.Spec.RoleAdditionalPolicies` is set to `NULL`, then it should be safe to do that. Otherwise, the user can do that in both places
I think this is not needed anymore because we want `string` to be sure there's an `int` in front of `string`
This line is unnecessary.
This should be an if.
This was changed in #5392.
What's with `-1` (not just `-1`)?
This is a bit odd... can we just drop `hive.startsWith("hive")` from the table?
This requires an extra `ValueError` attribute to be available.
This should be `kments/ecoments/` (we use `kments/crypto` for standard library names)
Better also add the `Bibliographic` attribute, and add the new attribute in the `Bibliographic` module.
I don't think this constant is used anywhere else.
I'm not very sure this is correct. The idea is that if you add a new column to `settings`, you get an error if the user does not have a list, and the user doesn't exist. Is that the problem?
I think the "hashivault" and `hashivault` is still not needed here
isn't this already set to true? `strcasecmp(value, "false") == 0` will never be false because of the "true" case?
I think the rest of these changes are unrelated.
remove empty line
Don't we have to call `util.CheckErr` on `CreateMasterVM`?
@josegar74 I think we could have more information to this. We would want a better name for the default value for the `dscp` parameter.
It looks like the order here is wrong, and also doesn't look right to me. Why would you want to use `C` instead of `cxSmiles`?
`super` is not needed anymore
Why was this change made?
What is the difference between `'` and `'entity['name'`?
I think we can keep the `return` here because we have `boundIp` and the `client.ip` in line 246.
Nit: using using statements should be in next PR
Oops, missed it.
I think it's better to make this `final` because this is a breaking change for the tests.
Could this be refactored to use the gasPriceUnitIOTX package instead of gasPriceUnitIOTX? The rest LGTM
I think wait should be done at a higher level, so it can wait for the context.
Why are you using this package here?
Why did you change the synchronized to `synchronized` here and not just for consistency?
If we're using this in the DB, we probably don't need to put the email in the DB?
I am not sure this belongs here. We need to be looking for a new constraint in the `Este`, and if it is then we should change the constraint to the string "Este". This will cause an issue if the string is actually being added, right?
It should not depend on `testmod`.
error strings should not be capitalized or end with punctuation or a newline
Can we have this as a constant?
@aghassemi @mmaxim do you want me to do this? I think we can remove this and let us know what is the expected behavior of trail
This is just a nitpick but I think you can remove this?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't understand the reasoning behind this, but the error message seems to be the same thing as above...
IMvx wouldn't be better to have the IMvx attribute be added into `MvxBasePresentationAttribute()` so that it can be used in other places as well.
is this necessary ?
I think this should be a `cleanup`?
This should be `options` instead of `artist`
Is this necessary?
Could you explain why it's needed here?
@SamSaffron What was your thinking behind changing this? I think that's what we want, but if there's more than 1 options, then we should be consistent in that case.
This is a bit of a hack, but I'm not sure if we should do this. What do you think about just changing the default `text` to `text.html`?
I know I'm not familiar with the code, but what does `account_id` mean here?
We should remove the if check here too.
I'm not sure what to do about these two structures. I think the `six.pins pins` and `ADC5.gp` should be a variable. I would prefer that we be able to do the same here.
The message needs updated to reflect the new message.
@elrodro83 Is this what you meant by default? It seems like `https://` and `https://localhost:5000` would be clearer.
What does this mean?
Never used this. This is not the root cause of the PR.
Shouldn't this be `Cfg: &config.Config{DisableMetrics:           true,`?
If we keep the test around, does it make sense to move the test in `src.go`? That way we can test that the `testGOPATH` itself can just call `src.node`
This is not the same as the one above, but it seems like we should just leave it as-is. It's also a bit of a refactoring.
I think we should also check `err` here. `err` is not a `Name` - so we should probably not check that `err != nil`
The cmd cmd=\" should be a string. So, we can hardcode the cmd cmd=\" when it's in the context or the cmd cmd has a reference to the output. The problem is that it is in the cmd cmd request that's not in the "source".
Shouldn't we call `query` instead of `Filter`?
is it possible that the build would be built with a package, but not a package?
Why is this not a pointer?
why are we namecasting this object?
Why is this line changed?
This should be `__memoizedFns`, right?
@matt-gardner How do we know that this is the one we want to run on?
Just curious: how is `JDK7252739.getDeflater()` used?
What's the point of the old overload? Is it public or private?
Why was this changed?
The "main" should be included here as well. The reason is that the "Open year to check" isn't in the "Open year" case.
please update the docstring accordingly
let's not change this since this is a `-L` not the previous version
This is just for the sake of consistency.
This change is incorrect. It is inconvenient.
Nit: I would move this to a new line with the other `if` statements above.
This is fine, but I think it's better to just remove it. It's used by `pkg/configurator`, which is the only one that is used by the service.
@kargakis @krwq @mmaxim this is the right way to check. Should this not just be `if (config.node.peering_port = network_params.network.default_node_port;`? Or maybe this is a better default?
This is a bit confusing, it's not just a part of the name, it's a little strange to see the name of a `Ksql` but I'm not sure. It's the name of a `Ksql` and the name of a `Ksql`. It's the only thing that is used is used here.
I'd suggest to move this to the end of `resolveReferences()` in `resolveHashMap`
`roleText=attrs.get('roleText')` can also return an empty string if the roleText is not enabled.
I'm not sure if `get_thread_private_dcontext` is necessary here, but if the `#ifdef MACOS` above returns it the same value for the `#ifdef MACOS`, then the `#ifdef MACOS` below will not be executed. I don't know if it can cause a problem because it's not the case anymore.
Why is this line removed?
Looks like this is an unrelated formatting change.
I think this should just be `if(feedUrl == null)`
Why did you choose to change the `to` to `string`?
This change looks good but I'm surprised it wasn't there in the previous patch. It looks like the old one was failing because the old one was failing. It wasn't?
Is this file still used?
Why do we need to make it configurable?
Why this change? I would prefer the following: 1. You're using a string as `typing= 0` to get the string literal, which would then never be `None`, so I would expect the explicit `is_empty` value to be `None` 2. The second condition should be `strncmp(resource_str, "id:", 3)` I believe.
Why is that necessary? It is not necessary.
There is already a `ForkSpec<C>` in `ForksSchedule`, no need to change it here, as it's a `ForkSpec`
I think the best way to go this could be to not use this in tests.
Should this be `deactivated_on`, since it is a `post_flags`?
I think it should be "positional" instead of "positional" to be consistent with how we have "positional" for consistency
What's the reasoning behind the `version >= 1100` check?
Why are these being changed?
I don't think the `html_safe` is needed here, the `html_safe` should be enough
I'm not sure how the subject should be here. If it is subject, then I'd say that it's an subject of the message.
This is not needed, `defaultSamplingProbability` should be set by `DefaultSampler` if `defaultSamplingProbability` is set. The `defaultSamplingProbability` should not have been set by the time we get to this point.
This means we can't generateDeploymentStrategicPatch at all?
info is already in debug
I don't see this change in the codebase. Why not using `DCHECK` instead?
This is not the same as `image` anyways, so the code was not correct.
This is not a good candidate for an override.
Please revert the line change.
We don't need an `none` check here because if `videoConstraints` is false, then this will be false.
Unnecessary spacing detected.
I wonder if it would make sense to also check `if config.Target.WasmAbi == "js"` and then set `int` on `lib/lib` to `""`, to avoid that if it's empty and not sure whether `int` is present or not.
can we just call `Append` here, and in the other test cases?
Shouldn't the span be the same as the span?
I think this should be `include.MethodEvents`
I would remove this, because if it's not required to have an admin and the admin is required, it means it will be required after the user changes to use the admin.
Is it possible to avoid using this variable in the `claimFromRewardingFund`?
Should be changed to `NOGIL gil` now that it's not used in the constructor.
I'd prefer to see this as `height` for consistency with the rest of the codebase.
This is a bit of a hack, but I guess it should be handled in a separate PR?
This is probably the only way I could see where a caller would expect a `QueryInput` instead of `Query object`. I think it's better to do the same for the `getQueryType` method.
I believe we don't need this change. It's only a test... it is probably ok to just do this in a single test.
same as above we can from bc not add new exception in phpdoc.
I believe that this is the way it was.
does it make sense to have a `validate` statement on the previous line? Or was there a reason why it wasn't?
What's the rUID-vk GetQueryPoolResults-flags-028?
I would use `String.IntrinsicsKey()` for all the `KafkaafkaO_TIME_ID_TYPE` keys.
I think it would be better to just return 0 here and then use `return x.tbk.Size() - 1`
Can this be `IsAppInsight`? Is this a name we can use?
I don't see why this check is needed.
why was this removed? seems like it could break any of the other balance balances?
Why are we changing the order?
Isn't this CPU now going to be used for CPU?
This seems to be the same as `setup_rvm` but `rvm` seems to be a different method
The issue is that we have to put all the data in the context of this code, so we don't put the `map` here because the `Shape` is not in the `TODO` below.
can we use a different name, what if we used multiple data channels?
I think this is not needed.
Does the metric name need to be consistent with other components that need to know about the max size? I think that would be better for a consistent reference, but maybe it should be a different var?
This is a bit scary, but it's not worth it, as it is a bit odd that it is more common to have two values, `isIn` and `isIn`
why the move back? why do we need it here?
This is the main code. Can we just use our own implementation?
I would prefer the word "else" here to be consistent with the other ones
I'm pretty sure this was a bug. Can't the user be aware of this?
I think you want a different name for this. `GetUserRepositories` returns `u.ID` and `u.NumRepos` returns `u.NumRepos`, which means you can't have two listings.
I'm not sure what the right answer is is, but I don't have a better idea what the path is. I would just drop the path prefix.
Does this mean that the `height` argument will never be present if the `height` is present?
This could be moved to the `_dogStatsProcess` object.
AARCH64 would be a better default if we're not going to have a default value. This is not the case for AARCH64, but we're going to have to write the default value for that.
I think this is fine, but I would like a follow up JIRA issue to track fixing this.
Should this be a option on a page or something?
This is an unrelated change.
This is not correct, you have to check for the first two arguments.
`mlvl_confids` is already in the list of confidences. It can be changed to `mlvl_confids.append(confidences)`
why is this `kube-ipvs0` needed?
Do the ` silly` version of this?
this is a pretty weird place, I'd prefer we just return the expected time to determine that the error was printed.
I'm not sure why we are doing this now, I'm just curious, why does this go through the test?
I think `JSON_DATA` should be a global constant here. The default value of `pkg_config.go` is `JSON_DATA`
I'd expect that this was a separate issue, as the Tracer class already has a default namespace. I would also expect `_spanId` to be `null`.
we could also have the fieldPath() method as this is what is expected by the worker worker?
This should be reverted.
Why is this static?
What's the use of `_poSSwitcher` for? Why do we want to pass `finalizedHeader` to `ForkchoiceUpdated`?
I think we need to move all of this into the public API and use it to get `diskImporterDiskName := fmt.Sprintf(..., w.ID(), dataDiskIndex)`. It's easier to see when it's already present in the old `diskImporterDiskName` below.
We can probably get rid of these `sdf` variable.
Looks like `Baz` is unused. Can we remove it and use the `type` helper here?
This is an important part of the code block that is not written correctly.
Should we remove this ChannelID and use it from all other places?
Why not do `this.getClass().getName()`, and make `methodFiles()` the default?
why not `a = idxCurrentSort`?
we need to keep track of whether theENDED is set or not.
This change is not necessary because the above two lines are repeated 3 times.
nit: Add docstring to this new method. It makes it clear that the new type is optional.
I wonder why the first field is not a `Optional`. The first field should have an `Optional` and then it is an empty `Optional`. Also, it seems to work for `if (isValid)` to be the default.
This is going to be a breaking change. I'm just not sure what the best practice is for.
Why not `resource.metaTaskExec.IsObjectName(resource)`?
Does this work with the `io.prestosql.spi.toml.plugin.syscall#index.Stdin`?
(style) line over 100 characters
Another option would be `ADIOS_CPP.h` (we already have `adios2.h` at this point).
Is it okay to use a special treatment here?
Maybe we should check that the nil is set and only if it is nil, if it is nil it will return true.
why is this removed?
the indentation here needs to be indented
You don't need to pass `ctx`. Just do `dao.Stop(ctx)`
This should probably be `util.RepoOut` instead, since this is a warning in the repo that's been there for a few reasons: * The docroot provided twice does not exist * The docrootRelPath is created * The docrootRelPath is empty and the docrootRelPath is empty. * The docrootRelPath is set to `os.Stat`.
This is going to be the most common usecase for every message (i.e. `\r`, `\r`, `\r`).
I would remove this line.
as per above, can we do it in `create_team_plans`?
I would use the same version to check for `!r_se_t`, it's better to do it for the tests.
This will set the DDR in the case of the property `REQUESTED`. Is this intended?
I don't think `lodash` is needed, because there's an unnecessary import now.
This is not public API, it's not supposed to be public.
I think we can remove the `GoogleUtil` import from `GoogleUtil/svg-icon` package now that we have the `GoogleUtil/svg-icon` file
Can you explain what `(data, [hidden, index]` means? Is that the intention of having `hidden` as an argument? Is there some reason to not to use `hidden`?
Can you please add a `@link` here and below?
`12288` is not needed, because there is already `[0.6` in the `SecurityProtocolType`
Can you please also update the `issue_at` below?
This will be useful for both the logs and the function name.
This was removed because it was a mistake
zip -> zip
reason for both `bs` and `BrokerConditionTopic`?
Please add a license header here (and below) to avoid confusion.
I would not add the `TLS` argument here. It's probably not the best way to do it.
It's possible we want to return `res.IsNullOrEmpty` and return `res` instead of `response`.
Can this be replaced with `[a-zA-Z0-9\\+`?
This is going to be a breaking change for the category format.
I guess this is an API breaking change? The old compiler will complain if we change public APIs in a separate commit.
I think this is not needed
Is this a debugging leftover?
I think you can remove the import statement altogether. You have to remove all the changes to the code.
Can we change the description to `status_finder`?
I'd like to understand this better. But, if I understand correctly, this is just a gitea, right?
Do we need any kind of queue (lookup,) after this? I think we could just remove the client.
is it worth adding `googlegoogle` for the new args? Or just add it to `googlegoogle.common.api. EMRFS`?
If you want to be careful, you need to change all these to "maxrequestbody" below.
Why this is changed?
Do we need to call `dialect` here?
I'd say that we could just make the return type optional.
Nit: I'd prefer a more generic class name that's used for this. `_it_and_and_and_and_and_and_hoc`
I would say : this is not a "Certificates.com" file
This should be checked in `if (tmp)` condition.
This change is not necessary.
This is a bit confusing to me - the contents of `Status::Error` are used in the code below as a `list`, and the `list`/`list` and `list` must be used in the code path. Is that the right approach?
`jrpc` isn't really needed.
`controlTypes` is now unused
This file needs to go first
what's the rationale for `t.root.lookupPath(buffer[:0]]`? Why not directly use `t.root.lookupPath(buffer[:0]` here?
Is there any particular reason to use a pointer here? I'm not sure how much it will work.
This seems like it should be a constant?
I think we can get rid of this too.
How does this fix the issue? I don't understand how the `flowFinished` field will be set to `false`, but it will be `true`.
It's not a good idea to introduce a new `Workflow Workflow` field that will be used by the user. It is also a bit of a big deal, but it is not a big deal, but it is a big deal, just to be sure that the `InitialIntervalInSeconds` is not needed for a `Workflow Workflow`.
Why are we using the "symbolic link" link here instead of the link name?
@danrot please add the `@param string $rangeFilter` typehint on the param
This change was not related to the issue, but is not related to this pr ... please revert
I think `getReactiveElement` is enough.
Is this change intentional?
I think this was for debugging purposes, but is `isFocus` parameter is always `False`.
wouldn't this be `freeze`
Can the `aps` be empty?
We can't remove this
@GabrielBrascher We should return ` empty` if `addrs.ok()` is empty.
What about JSONBool?
So, I'm not sure that this is the right way to do the parsing of the `s` (i.e. the previous version of this function). So it would be good to check whether the previous version was a problem and only if it fails, even if the previous version was `<%=data %d%`?
This will always be called for each test case, right? We'll need a similar test case to make sure we do not change the default settings when we're running `spack spec spec`, and we can make sure to update our code base as well.
We should probably make this configurable.
This is good, but we could also have a `posNext` limit in the `var limit = input.IndexOfAny(new[', '-', ']' });))` and remove the `var limit = input.IndexOfAny(new[',',', ']' });)`.
I would prefer if it would be better to add a new check that is defined in the `if (` (`maxEnabled` and check for `if (maxEnabled != null) { ... }`
We're not using the klog API for this purpose.
Line is too long. [92/80]
Is this field still needed?
Should we test the size of the slice instead of the size of the slice?
`config->http_proxy` could be set to "" by default.
The `if` should be removed here.
I'd rather have these constants in the file and not here -1 for now
Can we get the split size from the array and get rid of this line?
We don't need the period at all?
You could also do `varMap["cur_stuff"] = oi.params.ComputeServiceAccount if oi.params.ComputeServiceAccount` here, but that's not a blocker.
It seems like this `_commands` is a bit confusing to me. Can it be `_commands["GET_CONTEXT"] = ('GET', '/session/$sessionId/moz/context')` and then `_commands["SET_CONTEXT"]`?
We need to be careful with the `encoding` encoding. The encoding will always be the same.
I wouldn't add `positional=False` parameter. It can be an optional parameter when `Date.Lock` is provided. And then we could add `positional=False` to all the `IntParameter` methods.
Could you please update the tests to pass on these 2 lines?
I'm a little confused. If you're going to do this, why not make `spark_session_local` a `resource_fn` function in both places?
Maybe we should create an issue for this?
the old "sp2" parameter is not used anymore.
this looks like a bug.
what's the reason for this change?
nit: remove trailing space
Why did this change? It makes the diff less readable
This should be configurable?
This should really come after the other includes (see line 275).
can we avoid the duplication?
Why was this removed?
Should not be part of this PR
why did you have to change this?
I think this should also be `isFirstAdmin`.
This is going to change behavior, since `Type` is being declared as a list of types, so `Type` is unnecessary.
I don't really understand why you changed this.
This is probably the right place for this - but if we are going to add more options to the resource, it would be good to add a `Id` property that would be used here, and add an `@Nonnull` field in the resource that would allow users to provide more information about what they want to do here.
this should be a class_wise object
Why not use `?:` here?
@carlunny, this change was the bug, and it is a bit weird. I think it's not needed.
I think `config` is not used and should be removed. It's already in the config file, so `from config import template`
I think this is a good change, we should be consistent. @matt-gardner, does your design of refactoring make a difference?
Remove empty line.
Please use the new `ByteStaticNodes` type as the variable name here.
I'd probably make these `_` and `_` since they're not used in the docstring
Can we put this into its own method?
Would this cause a race condition?
is this still used?
Maybe this TODO could be done in a `public static final` method?
We can also remove `this.process` from the `foreach` declaration since it is now a static field.
I'm confused as to why the `urn` is not in `outer_num_`. The `urn` is the default.
This is actually not needed. You can get the NPE from the `OP` (which was a special case before)
I think you should be able to run `translate` on a single line instead of on the count.
can you test this?
nit: `TlsHandshakeHook` and `TlsConfigHook` is already defined in `StartServerHook`.
This will break on Windows. I think you can move this check to the new block (on Windows) and use it here instead of in this case.
this is a bit weird, the `UrlFromRouteCache` was not a `...` in my case, but the `RouteCache` was a `id` in my case.
Do we need to do this?
LGTM, but I don't think we should do this. I'm not sure we should do this for now, but I'm surprised if there is a reason we're using this to be part of the API.
I don't think you are needing the `Aggregate` here, since it's not doing anything useful in this context
why is this removed?
Metrics/LineLength: Line is too long. [82/80]
Why are we removing this?
This is the wrong place for this function. You should return the `bool` function. The first return type should be `str`. The second return type should not be `None` if the tokens match the type.
should we also add these to the `profile_descriptions` page, since they're never used?
This should be done only if the property is not set, right ?
This is not needed anymore.
Why did you need these changes?
this is not right. why do we need to do this?
It is not necessary to add this because it was deprecated.
Trailing whitespace detected.
We should probably move this method into HttpsConnectionFilterOptions since this method is now only used by HttpsConnectionFilterOptions.
Why not add the `getQueryBuilder` function to the `getQueryBuilder` method?
This is also used in development.js
@becker33 can you please take a look at the `readdirSync` method above?
Should be able to get rid of these.
Can you remove this line?
This should be refactored to use an else clause instead of refactored in a new class, but it might make sense to have an if / else clause on top of that class.
It's fine to remove this. I think we can keep the old signature and add `--apache-Oracle-execution` to the `LogVM` package instead.
This should be all_project/tags (i.e., all other attributes) as well. We should also add a host_tags in the host.yml and then we could also deprecate it.
`forEach(int)` is redundant
can we make these two `while` blocks configurable?
Query.isEmpty() is already called in the same place as the first place.
Line is too long. [90/80]
This doesn't appear to have any effect. I think we should use that instead.
I don't think you want to do this. It's not necessary, you have to do this. You can just use the `InnerObjectWithSelector` in the `Object` method.
This is just a nitpick. I'm not opposed to this. I think `init()` is more readable. `context` should be used in this function as well.
This is just to avoid the space between if and the parenthesis
We should avoid this kind of utils. Each usage of this function will not be able to access this value from the code base.
does it make sense to add this to config option too?
Can you please add the `requireNonNull` section above?
Do we need this for backward compatibility?
@deads2k i think we need to do something about this
We should also add ChecksumAddress param
HeaderRestart is not a column name for the flag, so this is fine.
I'm not sure why this should be a property property, and not a property of the `.__version__` in a property of a `HeaderHeader` is not a property of this property. If you can't do a null check in the `KeccakHeaderHeader` property, it'll be `null`.
I wonder whether this needs a migration.
Do these need to be wrapped in the `rfcers`? I think they can be removed.
I'd rather see this as an option in the `Package` class rather than using the `file` module.
I think there's a bug in phpstan.
`alias` is not the right approach. I think `index` should be enough here.
How do you make sure this is reserved for the root device? Would it make sense to make the `is` optional in the root device more obvious?
@dvoytenko do you know why we would want to remove the event?
I don't know what value this is doing. How about if it's a length length length_of?
I would prefer to have this as a field in a struct
Do you think that this should be a `Mapping`, and not a `Mapping[WindowText]`?
I think `cast` should be in `Vey`
(uint64_t)mmap_errors -> (uint64_t)mmap_errors
I don't understand how this change works, I don't think it's worth the effort to change this
I'm pretty sure we should be setting the option to `noext`. What if we kept it at both the top and the `second` package?
This is the only change that fixes #1777. We should revert to this PR and fix in #1717.
this should be reverted. `NewResource` should only be called from within `NewResource`.
why not `match_low_quality`?
I think you should pass the config here.
I think we also need to call `.label` to be consistent with the other `.label` files
Why do we have both `mlflow` and `pyspark` here? Isn't that a problem?
Nit: please remove `TODO`
We can remove this now.
Can you add a `isinstance(..., dict):` to the docstring, please?
This is a breaking change.
I don't think you need to remove the `context.Context` from the `context.Context` function.
Do we need these changes?
Why is this not part of the public API?
We should probably make a `dep BY trigger_dependencies` arg in the `SELECT` array. It's a little cleaner, though.
This file is not required anymore.
Do we really need this test? I don't see it being called anywhere else.
please use `net/times` instead.
Is it worth making this more generic?
Would it make sense to put the "see" in a constant? Or maybe "see"?
Is there a way to avoid the loop?
Metrics/LineLength: Line is too long. [97/80]
the leading space is not needed
Do we need to keep the old name?
use a `Set` instead
Why not just return KV in this case?
What's going on here? Is it a v0.0.0?
I think the `/wow/` should be fine for now, since this will break things that need to be resolved by default
remove empty line
why is this required?
This was a leftover from previous PR
The <msg> The host is `libp2p.Option`, which means you can't use `HostFactory` here.
can we call this `goDurationDuration`?
Is there a reason to setLanguage rather than setting the `language`?
Why change this?
This doesn't look right. What does it have to do with this PR? The previous code was only trying to have an revision.
This is not a typo, but it's the other occurrences.
Is it a typo?
is it a constant?
This should also check for NULL values, no?
This is not a valid workaround for the `@options['HOSTS']` but the `@options` is a list of `display: true`.
I think you can get rid of this line entirely. It is already checked in line 350.
This is just a `StartTime` that we don't need anymore, right?
I don't think it is worth having the `dump_puppet_log` flag in `is_pe`.
I'm not sure this line is actually needed. daal_knn/doNotUse
This class is used in a test, but is not used in this class
This will change the behavior when `Keccak?` is passed to `AddTxResult?)`. I am not convinced that the logic is correct.
This is a little weird, we are passing `NamePiece` to the constructor. Can't you just use it as another variable and use `is`?
This is a change of behavior. We need to test it to see if it is actually useful.
Why is it InstallCRD?
@deads2k @tnozicka this is not a problem for your PR
We can now return nil if statement == '-e:1.
This probably should be `emew` (and the other ones in `aws_utils_cors_ROOT`)
This will be handled automatically by the new indexes. I think it will be a good idea to remove this file, because we will be looking into the same commit for the repo.
This is a bit of an unnecessary block of code, but is it possible to have an `UserController` around the `message` class? It would be more consistent with the rest of the codebase, but I'd prefer the `UserController` class itself instead of `message` since there's a lot of `UserController` and `UserController::get_active_to_user` that we're looking for.
Should this be reverted? if it's not used anywhere, it should be re-used if it was. Also, it's not a bit confusing to have a boolean check here. It would be good to check the fly, but I think this would also be good if it was just a bit more readable.
Should we check that `ReSharper disable` is null?
I don't see where this is being used. Can we just add it to `dbConnection`?
This isn't a boolean, you could just use `info` or `assert`.
you don't need to pass the `@sig` here
I don't think we need an attribute, e.g. `@JsonByByRule_test` should always have a `PolicyRule`, and we should be able to get it back to the `PolicyRule_test` namespace. I think we should probably add a `@JsonByRule` annotation to `PolicyRule` to the `flow` namespace, or maybe that's fine for now.
Maybe a little more explicit here: should we be using an enum instead of the enum, to indicate users that no other functions are added?
I would just make this the first thing and remove it entirely. If it's not accurate, we should just remove the `Active Execution` variable entirely.
I would have added a line `Subscript.slice cannot be inferred as an astroid.Const`
why this change?
why did you remove this?
why not define it here, and not define it in the other file where this change is needed?
Is this change related to the bug fix?
I think we should keep this here, or at least move the validation to `async`
`first count` is not necessarily a good name. I think you can just `len(ltype, first first)`
I think this logic is going to be very confusing. Why can't a `ResourceResource` visibility be used instead? Maybe the name of the component and visibility can be moved to `visibilityProcessor.NotifyNewTask`?
why is this here?
Just a question, why not do this in `FIPS region not allowed in ARN`?
These two test classes are all out of date.
@franckc @mjkkirschner Is this the right way to do it?
you might want to add X to `currLimit` and `offsetLimit` as well.
There is a `RSpec::Core` method that is called from the `IMPLEMENTATION` object that is used. This method will be called in a `MySql` method, but not in the `MySql` class. I think this is a bugfix.
I think this is not the right move since you have to check if the `podnetworkchaosos` was empty.
I'm a nervous at this stage. Is there something in the code where `codecs.register` is called, or would that be the only thing that will be triggered if the `bokeh.register()` method is called when the exception is not raised?
This name must have invalid metrics
nit: No empty line above
Same as above, `# NOQA`
can we make this a constant?
This was the original issue that I found.
This is probably the right thing to do. If we do want a blockNum, we should just ignore blockNum here and let it fail the block forward.
can you use `mypool.common` and `emme.common` here so we have `spire_backoff` only work with agent and only `dboff`?
This is a bit confusing to me. If we don't need this any more, we can just delete the `#include` line altogether.
The `go vet` test should probably be `Ol_UNIX_PATH`, but that is not what we should do for the `go vet` call.
This might be better as `GroupGroup.IIRC.UPDATE()` and in other places where this function is called (in the "deps" module). I would suggest to return a `GroupGroup` or `GroupGroup` and use it here to prevent the need for this function.
I don't think the tab difference is needed, right?
We don't need the wildcard here, just import the whole block (line 15)?
I would move this check inside `now` statement to avoid potential conflicts if the method is not called for any method.
This seems like it could be done in a different PR. I'd like the wrong place to put this. It is in place to create a new environment variable, not a new one. Maybe just add the `--help=` command, and use it here to add the new option to all the `--help=` command in the help output for this.
InitialPackageDirDir -> parallelPackageDirDir.
TheseThese are not optional, so there's a typo here.
May you also need to add the data to the buffer for the child of the buffer buffer, for example the buffer of the buffer buffer, for example, the buffer buffer is zero for each of those cases. You might want the same logic as in the buffer.
Shouldn't you take the values of `ConnectorConnectorermsOfUse`?
I would like to see this be called in the `ConfigurationChangedChanged`.
@cramforce is this necessary? This means we'll send all storage configurations to send the CQDs even if they can't have been send by the browser?
Is it expected? Does the name match DAGSTER_RELEASE?
This is not necessary as there is already a hash already.
Why not use the `bool`?
It's not obvious to me why this is the solution, but I think we should just remove the `evloop_latency_ms`.
This is a bit of a hack, but is it necessary to get the `[Block.Values]` on the `CIPM` and `[Block.Values]` on the `_getHash()`?
why not use a setgengen?
I'm a bit concerned about this change but I think it would be a good place to put this into the interface. Seems like it might be worth to have a way to make this change more explicit and change the name of the function that takes an int to be more explicit about the interface
I think this is still not needed, `[UnsupportedOSPlatform("browser")]` is not used
Could we use `count` or `count` here?
`isinstance(offline, list) or _is_instance(offline, list) or _is_instance(offline, list, _write_to_pcap(offline, list))`
We should add a note that this will be a link to the service that's a link to a link?
Revert this change.
I don't think you should be passing this in in the constructor.
is this needed ?
Can you make the cast cast in the `if`? Then the cast can be removed, it doesn't matter since this is only used by `TestCase`, but it's not really needed anymore
is this really needed?
This should probably be a separate check for `if (Doc.hello)`
Instead of "only" I would suggest to put a "skip" in the form, so we don't have to add this attribute to all the codes so that it gets a "official" of the JS JS JS JS JS JS is just for clarity.
This change seems unrelated to other PR. Why did you move it?
I would have put it under `IsDockerEngineRunning` since the name of the test is a bit generic.
I think you can use `get_string_by_dialect(dbengine.dialect.name, 700)` here instead.
This can be removed, because it's the only one used in the code now.
act_cfg is used in many places in the file that is used in this file and is not in this file.
You don't need to check if the user has a profile_json, it will just be a string.
I'm not sure if this is the right place to handle the client, but should we include this file in the `<short/folly/ssl.h>` and include the file in the `<short/folly/ssl.h>`?
I believe `dom` can be removed now.
Why do we need to `row` here?
I'm curious if this was an accidental bug?
I don't think this is needed any more since you're using it in the DB
why min min min min min min min?
I think we should log the "Exceeded" message in this case. The message is a bit misleading, since this is a very high level of abstraction.
This is the only real change in this file. I don't think we want this. The only way I can do this is if you are going to have a codes for the first time.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
@jeherve @jridgewell @stephentoub I don't know how this solves the problem - but why is this in the first place?
These are all unrelated changes, are they all unrelated to the PR?
what about this line? I think it's a long line
We should also delete the error message and return the "configure" filter and replace it.
Is it worth caching `DefaultErrorMessage` to `alert` in Default Default Default token?
It's worth noting that this is going to break some of the test cases.
@stephentoub I don't get this change. It's just a small change and I don't get why we need it.
the title should be renamed (to be consistent with `/` vs `/` should also match `/`
This will not work, but will be a breaking change as we are not changing the default behavior.
I don't know if this line is still required, but if the other lines were too long for a reason, then I'm curious why this change was necessary
Is there any chance we can add a `LOG.get` to the `base.file()` method? If not then I'd suggest to add `TableMetadata` to the `get` method, as it would be clearer in the method `return` statement.
This belongs in `mlvl_tensors[i][batch_id]` which does not seem to work. It does not seem right to me. It does not seem to be necessary to add this function to the `mlvl_tensors` table. If you need to do it for `detach()` it'll be fine.
Can you add a note that this is not a public API?
I would add the name `log_path` too.
Layout/MultilineMethodCallIndentation: Align .to_i on line 112.
This is a bit weird, we're not doing `clear` anymore.
This needs to be `options.causalConsistency=true`
Revert this change
Is it possible to remove this part and just return in this case?
Why not just call the arg `n`?
$this->array is an array
The name `not implemented` is confusing, maybe `not implemented`?
I'm not sure if we should use `getHolderHolder` in other classes as well, since it is a `private final` class.
Nit: unused import.
This is the only change that affects TF codegen. I'm wondering why we have this.
`this` is probably the correct thing to do here.
`// +build !` is redundant.
Why did you remove this line?
should we make Options('style', a='-1')? (I think it would be more obvious that '-2' was used for Options('style', '-2', and not '-2') would have been a good idea.
These are not needed, `Hx2` and `Hx2` are not needed for the existence of the test, so it should be `Hx2` (and the test `He2`)
"... each other set of bin edges" -> "The number of binUTC"
I think you can just throw new `throw new KeeperException.NoNodeException(path, true)` instead.
This is now `:download_url: true` so we shouldn't be breaking any existing code unless `:download_url` gets defined.
The `.support` here was removed, because it is removed in the validation. The `Bolt::Logger.deprecation_warning` was removed in the controller for example, but the `.service` was removed in the validation and the `service` was removed in the controller for `bx.service` was removed.
the filter and the options are different
Is it correct for this to be `deleteFromFavorites` instead of `deleteFromFavorites`? It's not clear to me why it's a `favs` delete.
Why not just use `query.rowatile` directly?
What happens if `status <= 0`?
I think we can get rid of this if statement altogether, no?
The new `observers` is a new object so it's not a proper object.
I think it's still fine to use some type hints here, but I'd prefer if we keep this line as `optional` rather than `HOST` (or similar).
This isn't going to compile, as this is a link in the URL and it's not a link at all.
I think the word `ResetReset` and `ResetReset` should also be called in the `BlockGauge`.
Why was this change needed? Is it a bug?
shouldn't we be calling this method only if we're going to have to call the method with nullptr?
This is a little strange because if you do return early, the `errorDialog.builder()` will return a promise and the test will be failing. I'm not sure if this is the best place to fix it.
do you need this?
I think this is a leftover.
I think it was not added in #2329
Should be `The solid colors are supported.`
Can we remove this test and just use a mock?
this is not the right place to put this. It should check if the path exists in the function.
why not just use a new line?
I believe this means the `Meter.Name` will will be the metric name of the metric name. I think it will be clearer to change the description of the metric name to `andonedMetricNode`
shouldn't it be `$this->config->Catalog` instead to be &&?
Should be if (segments != NULL) { if (segments != NULL) return; }
I think you should check that the user_data['email'] has the last name.
This is the only change that fixes #532. We can revert this.
@chlowell I've been using the `nackResponseDelay` for these as well, and it looks like they are using the same type as the field in the `CloudManager`. I'm not sure if this change is the right place for this.
`braille-patterns.cti` is the name of the `TABLES` table and the `_TABLE` table is a `Mapping`, so this table should not be modified anymore.
Shouldn't this be removed from `skip generating MachinePool`?
Should we make this `HttpMethod`, not `client`, so that we can remove it?
Can be reused from multiple threads
The <msg>   Is it possible to have `paginate_by_sql` return a `sql` object? I'd prefer to avoid the use of the `to_sql` method and have it take an array of `support_page` and to get the `support_sql` parameter to the job, instead of having it return the job.
Style/PercentLiteralDelimiters: %w-literals should be delimited by [ and ].
This looks wrong
why not using `hexa` here?
implemented files should be implemented.
We should probably also check the number of `BlockDestroy` values for all values.
Shouldn't be `trying to wait messages is received, all messages are accepted.
Please rename this to `$this->getMediaManager()`
Can we get rid of thisampler argument? It seems to me it's only used internally in the code that it can handle both directions, not just one single argument.
I think this may need some test coverage. I think the `HttpParameterType.BODY` field should be added to the `Http meta`.
I don't understand the change here.
can we add a `status` to `idx.Table` ? this is the pattern we do in the other places
I think the memory pressure can be large enough to handle this case
`sum of the `sum of the `sum` is a `dict[str, paddle.kwargs]`
You don't need this. There is no other state of this method.
We have a lot of data for the stop andchan fields and we have to specify that a new proxy is a bad job, I think...
We should not be using `Application.AuthConfiguration` in docker and it should be available to the user. It's not an issue.
Isn't this going to be used in the constructor?
why not just use `if (regex) {`?
I'm thinking that you'll have to change a repo.CreateRepo(repoDir, e.g., if repo.OpenFSRepo(repoDir), then you'll get an NPE.
Do we want to add this to our vendored files? I'd guess we should use it in a separate PR.
I think this is a bit confusing. If we do want a "if position in hos" we should do something more like: "if position in hos.if web and position in hos.element: ...". I am not sure how to fix this. What do you think?
Do we need this in `HoodiePolicy`?
I think it would be better to use `!` here and below
We can remove this.
this should be a log level, we can make sure we have the logging level match
Can you move this line to the top, line 153? This was the only one that existed previously.
I see you set `_tracesEndpoint` in `DynamoModel.go` but this isn't used anywhere.
This group name is not very descriptive. Maybe we can change it to something like `add_resource_open_gen` or something.
Please rename to RpcApi QUORUM
checkCoinbase is not a good way to check for the library
This is an unrelated change that should be in a different PR.
Can you add yourself to the github issue?
It would be nice if `guid_save` was always `true` here. Also, I wouldn't expect this to have the same meaning. I would probably replace `guid_save` by `ex_save` if it's not.
Should not be `context` here (and below)
i don't think this is the right place for this, but this is just a cleanup of stuff
We should probably keep this closer to the core change. We have been using `.Actions` on `.Actions` on `.Actions` so it's easier to find where it comes from.
I don't think this warn_if_key_taken() will ever be used. I'm just curious if there is a reason why you removed it from an empty array and not using an empty array?
I think we need to introduce a constant for this. Can this be a constant defined somewhere that can be used directly by `const MessageTimeOut(uint64)`. Also, we can remove it from this file and use that in other places in this file?
This is the only place where we create a new `actually_bucket_available` function. I think we should move this method to `src/main/bucket.py`.
I would prefer that you'd be better off setting this to something more general and more clear, e.g. `mFutureFuture` or `mFutureFuture`
I'd prefer `Filter` rather than `Filter` to keep it consistent.
why this? I guess you need to make a copy and then use a `@deprecated`?
why is this changed?
I'm not a big fan of the disabling, but I think the disabling should be more than one example example, so it's not worth the wording.
why the default value of None?
So this isn't used, right? Might be a bit more descriptive, `decimal_VOL_SUPPORT`?
Why not use a NULL flag?
I don't see why we need to include the `doc` attribute in the first place.
This is a bit odd. Can you remove it?
This variable is not used anywhere. Can we delete it?
Could we use `string.value` here?
I think this should be `if err == nil && err != nil`. The old code was fine.
do we still need this?
Is this used?
These usings are unrelated but I don't think these are needed any more since we're using them.
This change does not appear to be correct. The save is already closed when the option is not empty, but if a save was empty, the save was not empty. The save is now only allowed for the first save, which we need to save.
Please use e.g. `go`, I believe this is the root cause
Please update this message to reflect that this is a breaking change.
I would have expected this to work for some reason. We don't want `v` to work with `T`, but we should try to keep it more obvious in the future. If we want to change this, then we can make it a private function. And we should at least have a `Create` that is already used in this function, to make it work with `Python` and have it pass in.
I'm not sure about this, is it possible to move this to the existing behavior of `wxLang`?
Metrics/LineLength: Line is too long. [98/80]
@jona-sassenhagen this is what I was thinking. You could make this a constant in the `__init__` method, so that the default value of this property will not be used by the `_binary_location` method.
I think the `branding.dig` is unnecessary here
Should we make the option a constant somewhere?
Should we also check for `DATA`?
This is a bit confusing because it's the most common practice to use `contact_us_url` but the `url` value is used instead of `contact_us_url` so this is kind of misleading.
This should not be necessary.
This should be a `grpcDescriptors` instead of a `List`.
I'm not sure we need this. You may just delete the `tmpStream` variable if it's not used.
I'm not sure what the best way to do here is, but is it ok to call this method without creating a new file with the old `n_liveliness` call?
This might not be necessary because we are not using the API anymore
I would suggest using `Pods []GroupMember = []GroupMember` instead of using an enum.
Why is this needed? I don't see the name of the method used anywhere.
I'm guessing these were for debugging?
Can you add the unit test for this, please?
Is it possible to have 8, and the type hint to it's type?
This is from environ.testing.py
Use the new Ruby 1.9 hash syntax.
Does it need to be `return`?
remove this line (should be the other import).
Can we just delete the `instanceID` and `instanceID` fields from `additionalTags` and `additionalTags`?
Why do we need this? I think it would be better if we used it in the `dict` method.
We should just make it an environment variable. It is not required and will make it easier to debug.
It would be nice to give an example a better name than "dataset".
I'm not sure this needs to be an atomic operation. It can be a static setter, but it's not really necessary in any case.
I am confused about why you did the standard standards for `insightfil`
This is a bit confusing - this is not a `conftest.py` but `conftest.py` (and the `conftest.py` file)?
This is an API change. It is a bit of an API change, but I think it is fine to keep in mind if there is a good reason for it.
Why was this changed? I've been wondering if we need to keep track of the Symbol and not pass them around.
this is not the same as `\[\u2000-\u2E00-\u2E7F\\'`
I think you don't need this.
Should we just use `out_dir` here? I think it would be better if we used `out_dir` in `imresize` for example.
It seems that `\0` would never be true, since `NO_get_recover()` does not exist at all. I don't know if there is a need for this check here.
I don't think this is necessary
Would you mind using `path.Path()`?
I think this should be a separate commit?
Would it make sense to use `ErrorListener` here instead of `ExceptionListener` directly?
This is not the correct way to check if the `ResourceType` property is set to true. And also the value of `true` is true.
I know you could also use a `config.ChainID()` method to avoid the need for the `unit` and `ChainID()` methods, so I'm not sure if the `done` is still needed. The `config` in the `BlockchainCtx` should be in the `ChainID` block as we do in the `BlockchainCtx`
I think this was already fixed in NativeClient.
Thank you for your reformatting, this is good. I can live with this, but I'm pretty against a change here. You can also get rid of `violation.get('rule_name', '')` and get some lines in the `resource_name` and `get_resource_name`, and then just do a `violation.get(' + name, '')` and get the `rule_name` member.
I think you should add a new `texture_height` here and in `texture_width()` to `create_resource_get_user_data()` to prevent a bug where `!==None` would be used.
I'd prefer to use `min(self.user_name)` instead of the hard coded value since we only use the value when we know the value is the string
This should probably be `strncpy`
This package is not in Spack, but it's only for testing. We have to be careful about it for all sorts of things. I think it's better to move this package into the Spack package, and have the `pogo` package be the root of all Spack settings, and the root of that package.
can we make this a helper now that we can use it in all places now?
I'm not sure if this is the right place to use it. It is used only in `github.com/sonm-io/core/proto`.
@adamjstewart I think you can merge this with the previous one.
should we add a case like `gcsblob.OpenBucket: client` to set the `key` value?
Can you use `||` instead of `& send_resource_list_`?
(style) please, no space before tabs
`^ Ban PAAHead does not support check check-time augmentation'`
I don't think we need this line now
Should we use `content-pages` here instead? That way we can only have the value in one place.
The reason for this is that retrying is retry, is that the right place to put it?
Can we add a link to it?
I'm not sure about this. If there is an explicit `Removed` field, this should be `Removed_type`. If you do, then `Removed_type` should be `Removed_type.getPointer()`.
Think we need to pass the arguments here?
Plz add a blank line between tags and summary for better readability
This is a bit odd, as the `StartCommand` variable is used as a member, which is used for the `List` method in order not to create a new `List` class.
I think the naming is better. `clear_loss_weight` is probably not clear enough, I don't know if it's possible but it's not clear to me what this does.
I think this should happen in the conditional below, not the conflict.
is there a reason we don't do `apply_prep` in the `@context` but now the context is a symbol?
I'm not sure why you made that change. Is this change related to the PR?
Do we need to check for the presence of the data that the path is invalid in the test?
At some things it is not really a part of the session, but it's a little bit odd. We do not care about the session to be a part of the session. We could also just call `RLock()` on the user side and have it call `Resources#getDefaults()`.
Why not just use `uint8_t sex`?
I'm not sure if this is needed, or if the other metric is in the `rowMapper`
Can you check the return type as well, and check the type of attribute? Or maybe just return type?
@tgamblin Do you have any concerns with this API change?
I'm not sure if this change has any consequences. I am going to take a look at how the `ti.offsets` is actually being used.
I think we can remove this, it's not needed anymore.
`merge` doesn't seem to be used here or am I missing something?
This should probably be `cmd.forejs` as well. `ghc/#{ghc_version` is not supported in IE.
This change is not necessary. The variable `dots-vert` will be added to the `base` table, but that's why it's not used.
how about `loss_weight=1.5`
`ThrowThrowNumber` seems not always `0`, is it? If so, we should change `ThrowThrowNumber` to `ThrowThrowNumberNumber` and `ThrowThrowNumber` if `ThrowThrowNumber` doesn't have an empty list.
What does it have for indexing?
Is there any reason to remove these lines?
TODO: add empty line above
I don't understand this. Why are we doing this?
The `BlockAPI` is now deprecated, right?
This attribute is not used anymore. Remove it from the `AttributeCode` interface.
This file is missing a license header
@mmaxim do you have an example of the error message? I would expect an error here to ignore the event, but I think it might be a good idea to ignore the error message here.
Should this be `s.err != nil && s.dataForWriting`?
I'm surprised we need this in the `HIP_SAFE_CALL` function.
I think we could remove this line
I'm not sure if this is the right place for this?
Can you also remove all the old steps from the Spack's lock file?
This is an API breaking change. I don't think we should change the default behavior, since it's a `Key-Enter` of `Key_elem`
Is there a reason why we can't just use the context here?
I think this should use the `decode()` method, as the target name is not exactly the same as the target name.
Should this also have a `.to_s` check?
I think you can change the regex: `if ($chars[$i] === '\\' || name === '\\';`
please revert this change, too
(style) trailing whitespace
I think this line is too long.
This method is only called in the account class, and it's not used anywhere. I would suggest to remove the `@param` part from the description. Also, please move it to a new line.
I think we should remove this linux linux field and not add linux !linux linux
I think this should be `if v == ""` to prevent possible NPEs from working with empty values.
Can we keep this variable and pass the original value to the constructor so that the variable can be reused?
Those lines are too long and make me nervous
Why is this change needed here? The `list.go` file includes a `list.go` file.
this is for the actual view of the query, so I just made it an instance variable, and then called in the view itself
This change seems unrelated, can you remove it?
Don't we already have an `elseif` around this call?
I don't think we should be passing in the `ipsets` package here, as it's not actually the best place to use it, and it is used in `felix/ipsets`.
I think this should be imported before the imports, right? I think this is not needed.
The `guid` started here isn't quite right.
please change to `use`
This is a bit confusing to me, as `row[uint64(col))` is in `ValidateFunc`, where you're using `uint64` and then you're using `uint32` in the `NewUInt` function.
I don't see a benefit to removing this class and simply simply removing `cache` field from the other modules.
I don't think this method is used any more.
why not calling `danoeh.antennapod.core.event` here instead?
Should we use `reverse` here? Like `SUPER_type` ?
Can you add the assertion to the following so `assert not any(SPARK_INDEX_NAME_PATTERN.match(name) for name in sdf.columns)`?
This feels like it might be a bit confusing because the `updated_at` is the most common name for the `updated_at` model, but the `updated_at` and `updated_at` are the same, so it might be worth noting that `updated_at` will still be used.
I'm curious why we need to call `workingDir` here instead of `appExe`?
Is the "UTF-8" needed?
I think the line above should be after the `import astroid.exceptions` import. Otherwise, the code will not import any `from astroid import object` if the `import astroid.exceptions` doesn't exist, and will be a bit faster, and will cause a flake8 failure on the line after the `import astroid.exceptions`.
We could also check for the `_corruptedRequest` instead of just returning the result.
Please, please keep the same as the other usages of the same code.
This abstract method is unnecessary. You could remove it from this PR.
can we call this `plan`? I think it's a subset of its own, so `plan`.
If you are going to check `is_ipv4_or_v4_mapped_address` and `to_v6 ()` you need to check the argument.
Why do you want to change the name of this variable?
Why not call ` ChromeDriverCommandExecutor` directly?
Can you add a line below where `type0.getType().isEnum()` is true?
why do we need this function? why not just return the whole dict in `_outgoing_data` and remove that method?
Why this import?
not sure this is the right approach
this is not the right place for this, but I would rather just remove it from the `last` object.
This is not right. It is not a normal normal `prepend` but not a `string[]`.
I think it would be good to also log the `Error` here as well.
Shouldn't this use `<data-dependency-size>` since `text` is an array?
This will fail on every run, is it ok that we only do this for tests?
Why is this using a `WebSpan` in the `HttpUrl`?
This was a mistake, I think the `FrameworkDescription.Create()` was left over from the previous commit to the `past.Presto.FrameworkDescription()` method.
Is this change intended?
@danrot what do you think about using a more descriptive name? `CreatedId`
Align the elements of a hash literal if they span more than one line.
is there a possibility to use a string here?
Why not `checkServiceMatch(treq.Service, response.Header)`? I don't think we want to do that in the service.
Instead of hard-coding the value, maybe `None`, so we don't need the `protocol()` function in `get`?
@jridgewell I think we should make a separate PR for this as we are not fixing the bug where we're not using any type checking for the `Method` parameter, which is why I added it.
This should really be inlined. Can't we be consistent and use the existing API instead?
Why are we using the `execSQL` version instead of a hardcoded `db`?
I think we should add the `ctx.Tr` to the dashboard and avoid having to add it to the dashboard and add it to the dashboard.
I am not sure if it is a good idea to add the `Simple` flag to the `copy_object_encrypt_copy.rb` flag.
This is the same error that's used for a `*yarpc.Buffer`, so you should be able to use `err != nil`.
Could we have a test for this too?
nit: single line
Why do we need to call `Clear()`? It's a `null`.
Why is this change needed?
Please remove this.
We don't have to do this now, because `.to be_true` returns `true` and `false` if it's not `true`.
I'm surprised we have to do this without isinstance()... Can you explain? I'm not sure if the code below does what it actually is doing, but if it's not, I'd be happy with changing it.
this is the change in the test that needs to be updated to not run a test run with the new fixture...
I don't think we need this
I think we need to keep the server behavior here as long as we're here
I would have just used the string.
I think you can also remove this spec: - `transpiles a YAML plan from a plan, name` - `transpiles a queried copy of the original plan.`
Maybe we should move this method into `node_context.go` and move it in `client.remove` to keep all the `SessionStats` objects in `node_context.go`?
I would move this to after line 331, and then call the 'addAccessibilityIdentifier' method.
Should we stop here?
I think you can just change this line to int(multi_scores.size(0) - 1 to avoid the space between the comma and the closing parenthesis (see the rest of the file).
This just feels like it should not be returned here (and the following line). Is that the reason we are not returning here?
The reason this is because `<title %>` is now just `h1`
RegistryURL is not needed here.
Why do we need to use `*` in this file?
I'm not sure how I feel about this... I'm not 100% sure if we should be setting IE11 to 'text' or similar (I'm not sure if I've ever seen it, but this might be an issue, and if you do this, we can't. I think we need to do this here.
I think it's better to just check for `reverseBytes(checksum)` and avoid the check if `actualChecksumIn != Long.reverseBytes(checksum)`
What's the reason for this line?
@mramato is this the only thing I noticed?
I don't think that this is the right change. I think we need to do this. We should do something to check if the column has been provided. I think we can do it without changing the column.
For this to be part of the new file, you should also mention that the `SurefireDir` flag is not available.
This should be a separate change.
Is this change intended?
I'm a bit confused by `orestephemeral.js` as I don't know why we need this one
This was added to get default value from test_framework.go - is that correct?
Just curious... why did the docs get removed?
I think this should be a separate change, since it's a separate PR.
These are not related to this PR.
Use 2 (not 4) spaces for indenting an expression spanning multiple lines.
I am not sure if we can make the code readable. We have to look into it, so this should be an API change in case it is a breaking change.
this will break the next line for each line. will fix it for now.
What is the issue here, if this is not a cluster, then this is a good idea.
This seems to be a very generic way to avoid the need for a cast, but if `SecureRandom.GetBytes(bytes)` is always `int` and the cast would be unnecessary.
do we need this for the `Report` table?
why are these being removed?
I would keep the imagr param here (and in all other places) to make sure it can only be used for postgres (i.e. `use_legacy_coordinate=True`), so that we can remove the imagr parameter from the API
We could also just do this in a struct `bool`. That's what we do elsewhere in the codebase. (It's just a question, I'm not sure why we need this function.)
Can we remove the extra leading space? I think the extra blank line is needed here.
I don't know if the `prepareDismax` can be null here (i'm just wondering whether it should be an empty string)?
This import is unused.
I don't think it should be an env variable. The server side is already using a backend.
Could it be `List<String> <null> <market>`?
This is a breaking change for the API change. We should either add a `method` property or link it to the `IEnumerable<T>.<T>` to keep the implementation simple and add a default property (and use `IEnumerable<T>.<T>`.).
I'm not sure we can remove this?
Use a `try` to add `on` here.
Should `opts.spinner.Stop("Error!")` be `nil` here, too?
Is this needed?
Is `log` a `boolean` for this purpose?
Please add the new line at the end of the arguments (on line 737).
It is ok to do this for a followup PR to change `set_name` to `type()` instead of `set_name` to avoid this change, and it will be more informative and will be a bit confusing.
Is this a typo? I don't know what it is about.
This is not needed since the `spawn.h` is already included in the `.h` file.
@gustavonalle @mchaarawi - I think this change will cause a regression in the future. We should not do this, but we should do it for anyone who has been able to see what's going on.
Is `libkbfs.PublicPathType` left uninitialized by `MRIPathType`?
I don't see how the `new` method name gives me a little handy. It looks like it should be an `@approval` object, but it's a bit confusing for me. I'm not really sure we need to think about how this is going to work for anyone who is trying to access the email and what the best approach is if this method should be called for a different backend.
Code standards: Please wrap operators with spaces.
Can we make this a constant so it's clear what's happening?
nit: use switch-mode for (const std::vector<std::string, const char *prefix = ""), instead of return an empty string.
minor nit: `BooleanValue = Boolean members`. `BooleanValue` is more efficient, can be `BooleanValue = Boolean members`.
This should have a single ` warn_deprecation` argument that does nothing (and thus does nothing) I think it's okay to just call ` warn_deprecation(message)` here.
this is needed for `blitz` as well as the current code in `__init__.py`
In other mutations you use `_virtual_vdims` but not `eq`. I think it would be better to use a single value instead of `eq.contains(eq)`. That way you can get the equivalent of `if dataset._virtual_v \` and `return x.is_true` to avoid the need for this change.
Is this going to cause a problem if there are multiple updates?
Can you please add a license header on the end of the file and a couple of others to the files? That would make it easier to find all the files and to see what's the difference between the two
I'd prefer to see the same name in `log.trace`.
I don't think we can do this. `if not isinstance(as_index, bool, ...)` will do nothing if the value is not a boolean
This should be `$deleteModuleData`
I would put this version in the `api.json` module.
do you need to pass `null` here?
If the destination is not found at the start of the previous line, can you remove it?
This should be a dev dependency
is this file still being used?
Why is this in the `Meta` now?
MakeServiceAccount string is the default so we don't get to this.
Shouldn't we check for the current ") class here and not just do this in constructor?
This should be in `index`.
This test doesn't use a `before` callback.
The above conditional is probably a leftover, but I don't see how this is related to what we're using here. It's probably a bad practice, so I'm going to make this change.
Is this used? I don't see it being used.
Is this change relevant?
Should we do this check at the top level of the function?
I think we need to handle this as well
I wonder if we should add a `# type-list` flag instead of duplicating the if-statement.
This is not needed.
how is this related to this PR?
shouldnt this include be fine? if yes, then we should include `fmt/format`
I think we can move this to the package.json
If you change the name from an internal function you should return it in the errors.
I think we should probably update the `Validate()` method as well
I think you need to keep this here, as you've removed the other ones.
should this be "Failed to parse failures XML: %s"? I see that we are changing the XML to "... at the end, not every other test.
Same here, it should be `{"good case", "%s/zones/%s", "%s/zones/%s", "%s/zones / "%s/zones/%s", "%s", "%s/zones/%s",", "%s/zones/%s", "%s", "%s", "%s", "%s", "%s/zones/%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s")`
Why was this change required?
Was this change intended?
This is wrong.
Why are these changes required?
I'm not sure this is needed, the test fails without it.
You can avoid using unrelated changes in this PR, but this import is redundant.
@bparees this change looks good, but I think it's okay for this to work without the previous version of the package, if we are going to make it public, I think it'll be a separate PR. But this test might have been wrong, so I'll merge this one for a while and then I'll merge this in.
I don't understand this. This is the responsibility of this expression and is not the right approach to get the right of the local storage size. I think the `_this.getValue` should be on the next line.
Could be `!tabIndex && !isNaN(parseInt(tabIndex)) ? parseInt(tabIndex) : isFocusable` instead
Worth putting this at the end of the method `ssh`?
Why not just `?` ?
We don't need these debug statements. The reason for this is that we're passing them in is to force them to default values.
This is not a good change, as this table doesn't exist in the `UpdateNameMapping` interface. We don't want to have a new `UpdateNameMapping`, but it seems like we could leave this change in if we ever want to change it to avoid creating a new one.
Shouldn't it be 0 instead?
Is it possible to get thePkg first?
You don't need these two lines.
@aparajit-pratap Is this the right thing to do if you don't specify a transform?
This should be `NotifyDataSetChanged`.
Use 'TimeDeltaParameter' for separate words.
Why do we need to pass a `callerType` here?
This is for testing purposes, not for this PR. We don't have to change anything in this PR. I'm also not familiar with this PR yet, but I'd like to call out what we need to do in this PR if we need it. I am not convince if I should have a good reason to go. I'm not sure how to go to another PR, but I'll take a look if I can't find anything to do this.
@jridgewell @jridgewell is this the correctness that we have here?
nit: this looks like a code smell ?
I think the `toggleMenu` should be `useCallback`
what's the point of having aSig for it?
We have `TestCase.TestCase` which is not a very good name for this, how can we handle it?
why is it `np.page`?
ExtractSomeSomes doesn't need the others anymore, can you just make the code in `ExtractSomeIfAny`?
Can you put this at the top? It's the convention that it's used in the `env_info` function.
why did you change this line?
I don't think this is the right place for this. The problem is that we should just ignore the error.
why change it? this is a pointer now, right?
This is not the place for PrepareRequest.
Why not just use preg_match('/^VuFind (\d+\.?)?)?)
I think this is not necessary. If you want to get the name from, you don't need to pass the `getProperties`.
I think we can skip these three calls since `sv = new ManifestGroup(ops, manifests)` is invoked twice.
Could you move this class into `WPOnDelete`? It looks like it's only called from a test class.
This should be `disable` right?
I don't think that this test is still testing what it's testing. It does, so it should not be removed.
I wonder if we should make this consistent with `!`...
Don't we need the `console_comm_ptr` argc here?
`user` was added to make sure we don't pass `def` to the `updated_no_action_required`.
I think it's better to move the `status` imports to the `llvm` package
@nvazquez can you explain why this change has this name change?
`$event` is always true.
How about using `oldDom` here instead of `oldDom`?
is this change intended?
Why the change to numAccounts?
This looks like a duplicate function
Is it needed to have a separate test for the new version?
The `goimports` flag has been changed, so this is not needed.
This is a change from `cborStore.Put` to `scikit-learn`
I think this should be `self.set(lk, pkg.get(' codebase')).parent == APP_DIR`
Should `ResponseTypeProcessor` be nullable here? It seems a little confusing.
What is this `if (self.check_feat_is_unconstrained()` for?
@cramforce is this something you need to do here? I think `process()` should be called `apply()` to make sure the arguments are not included.
This is not a correct change
Don't you think we should use `eventname` here, as in the case where `--eventname` is not specified? (In fact, I think it is fine to just remove it.)
What's the purpose of `availableWebEngineWidgets`?
Should we just use the default?
Same here, if possible, please move this to the bottom of the file
What if we added a hash for the `application` key? That could simplify the diff.
Why do we need this? I would have expected it to be a single column
Why not just use `ConsoleColor.White` here?
I'm not sure if this will be needed in the future.
So the number 0x features in this list is different than the number 0x features?
can you fix this whitespace? I don't see the command split in two locations.
I'd rather we remove the `admin` from the `colberber/admin` package.
I think this option should be in place.
I think this should be nullable, since there are 2 different values: 1. `TraceFilePath` 2. `TraceFilePath` 3. `TraceFilePath` 3. `TraceFilePath` 3. `Trace` 3. `TraceFilePath` 3. `TraceFilePath` 3. `TraceFilePath` 3. `TraceMaxInMemoryFactory`
We should add `apiextensionsv1` to the API
I think this should be `pandera<0.8.0`
@kennknowles can you please confirm we have a good reason not to use a tempPermission[this.permissions.length] here?
why not callThreadPool.submit directly?
Hmmm, I think this needs to be moved down a line so that the user can't see their own lines before this change.
Should we do the same for `OriginalRequestCtxKey` too?
This should be `args[0]`.
Should this be configurable as well? To avoid any confusion, could we use `host1.example.com` as the example?
The changes below this test are just to pass the new `Tracer` to the constructor.
same here, if we do add more things in this model, we probably should add more things in `trainer_new_thread` and `trainer_new_thread` so this would be easier to just be changed in the future
> `&-a.type ()` [](start = 16, length = 7) I don't think this is needed. `getattr` should be removed.
I'm not sure we should do this. I think the repository repository should be `DeleteFiles`
Is this the same behavior as `get_constant_and_constant_and_unescape` ? Or does it need to be `true`?
Should be `!=` for default value.
The `An` prefix isn't needed.
The default for 10 ms is 10 ms.
@jackfrancis can you add a `_` here? We should also add the `array` parameter as it is.
Is this a copy of the `<%= t` necessary? I'm pretty sure you don't need to do it for the `text-box-wrapper` part.
This line is unused.
Is this actually needed? I think `url` is already there in `spack.py`
`// what status was sent. void` ?
nit: update copyright year in header
We should add the property name here as well.
We could just make this `error while calculating: failed while convert %T to %T`, since it's a nested function.
can we make these properties in one of them?
This should have been added to `export * from './--sort-keyed-by-key'`, not to mention that we need to export it from the './sort-object-map?
this is not a stuttering bug in our tests, since it has to be changed in a generic way (see the one above). You can check if this is really required and you don't want to have the munged `.rb`, but it has been discussed in another file.
Should we have a utility method for this? I think it's a little confusing to have a method named `upperMethodName` for the `upperMethodName`. I think `upperMethodName` would be better for this purpose
Please fix the spacing here.
Do we need to make it clear that the center is not a user?
Should not be used, please remove.
we could also make this `&&` if it's an `registered`
Should we do the same for `template.Error`?
If the goal is to remove the `isspace`, this will have to be `isspace.c == '(' || c == ':' || c == ':'`
I don't like that we have a `if c.Wireguard.EncryptHostTraffic` that's not a plaintext property (e.g. `if c.Wireguard.EncryptHostTraffic.false`) but this is a little confusing.
I think this will break backward compatability with the new API which will be used.
Is this file used at all, or just debugging?
driver_.getInstance() called in `setParameter` already?
Line is too long. [91/90]
I think we don't want this in theory. We should probably just make it a configurable value.
@mateuszgrzykowski I'm not sure why we need this function. Can we add a new function for `klog` and use `delete` to skip it? It seems a bit odd to call this function at all and add a new one.
Given that we're here, should we check the `cart.ncr?` before passing it? That way, we only check if the previous `if` branch is present and if the check doesn't have any special characters.
This is probably the correct term for this variable. The `class` should probably be `&.`
I would use `get isValidWebDataStreamID()` here.
Would it make sense to add a new error message for `leaf`?
@tannergooding - I'm not sure we should be using a specific `spoken` for the final object. It should be possible to avoid using a specific `states`, but if you want to get the `controlTypes.stop_SELECTABLE` field, then this can be an instance of `controlTypes.stop_element` and be the default one.
`SplitN` is not used anywhere in this function, please remove it.
`ports }}- "{{` was used for a new container.
I'm assuming you don't have to check for nil? It seems like you should be using a "shardInfo" variable in all contexts that do not check for nil and then assign it in the shard.
I'd prefer if we'd make this a global setting rather than just an env var.
The `c` and `sticky` are both a single pointer, so we can just use the `c->sticky` attribute.
Why did you remove this line? I assume this was previously handled by prelude on my part
There is no point in making a single string, if you want, you can use the same string in the `std::vector`
nit: I think we can move this to a separate function
Could we use a constant for numAttempts < 3 and numAttempts <= 250?
I don't think this is a good idea. If you want to log an error that was not going to be returned then it would return false.
why this error is ignored?
Line is too long. [81/80]
Why do we need to export the struct?
@caitp, I've added a new commit to check the bug. I can't remember why. What is this `c_str` needed in the first place?
We don't need a `protoFile` member in this file.
Is it the best practice to use `SERIES_DEFAULT_NAME` here?
Should the enum be an enum for this instead of an enum?
I'm not sure if this line is needed, but is that correct ?
I think this would be better as a `@resource` object and then `@return` if it's an instance of `iter`
I would add the following line to all the other methods in this PR, and say in the docstrings.
The name is misleading since it is not used
Is it really necessary?
Why are the service names optional? What are the implications of having one name that is a JSON object?
This will change the tableMeta in `custom-depr.js` file, which will be added to the base tableMeta.
Should we also update theCpu option? It's a little confusing to me.
I would use a temp variable for this. I know this is not a part of this PR, but I'm surprised this isn't a real `QLineEdit` function
Don't forget to remove this
@jglick - This is where the `ipify` command will be used.
Do we have any tests for that?
I don't think this is necessary. The code in `init` is already called on app, and `local_chapters` is called on app.
The name of this property could be used in more complex description. What do you think? `public` -> `public`
Why not just `record` and `int`? The `record` is the same as the one below.
This is not needed for the test, the test was passing by reflection when `TimeSpan` is false.
These two lines can be removed, right?
Should we do the `this.s.ignoreUndefined = this.s.options.ignoreUndefined` check here?
why not just pass the logger into logger instead of the code below?
Is the idea here that the queue may not be empty or empty? Is there any way to avoid this problem?
Should we check for nil only for a nil only one transaction?
This should be in the other areas, not the class
Why change to `local=True` here?
This makes me wonder if we can just call the `Ready()` method from the call to `isReady()` without a call to `Ready()`?
Why is this needed?
Is this a regression? If not, please remove the extra spaces.
Should we also set the option to 1 here and not to 1 here?
This will need an extra `AWS` since the second callback doesn't get called for both an AWS and an AWS.
missing new line
I think `! isUndefined( decimal )` should be trivial, since the original `isEmpty` check can be combined with the original `isEmpty()`.
composite -> Unused.
Should this be in a defer function?
I don't think it's necessary to use the `@author` tag here.
Is it expected?
Do we need to log at all?
This isn't used, is it?
This needs a more descriptive name. I suggest `is_todo INT NOT NULL DEFAULT 0`
This doesn't seem related to the fix. When you're in, it will be executed while you removed the method.
Why do we need this check? The name is invalid, but the metric name is invalid.
This doesn't appear to be a valid use of the `GetAssemblyPath` type, and it doesn't really make any sense to use it for the path here.
We should use `SYSLOG_INTERNAL_home_STRING` instead.
Is `options` the default value? We are already passing in the options object. I'm not sure if we should do that.
I guess the idea here is that we don't know that `name` will always be the same as the key name, and we want to be able to run it again in that case
Why not dispatch them as a getQueueProcessorObjects ? I think it will make the code simpler and harder for us to not add the `isQueueProcessorActive` property to the `OPERATION` class.
Don't remove changes to this file.
I think you're missing a test for traceLogs here
Should be `!title.IsNullOrEmpty(node)`
Why are we not setting these tests anymore?
I think it's better to use Math.min() directly, instead of using a cast. That way, you can use Math.min() in the code.
I don't understand this change, as the previous logic is not correct, but it's a case where the new `NONE` field is a special case but the old `NONE` field was actually used, and this is what the field does. Is it possible to get rid of the `is_union` check and only set it once in the field? Can we add a case that only checks for 0 values and only if it is set?
`getAabanURL()` is not a good idea. The idea is to have a static method `ExecutorExecutor()` and a method `getAabanURL()` that accepts null (or empty array) instead of a static method.
The `mask` argument is `segms[i]`, so you might as well define a default value of `bool`, to avoid the warning on `color_mask`.
I'd like to see an alias for the internal version, I think.
Maybe we should create an logger with the name of the logger and log it as something like "log-info"?
The `omitempty` tag should be removed. We probably don't need the `[:>` tag here as well.
I think you should do the same thing as the original `listSaveProduct`, as you did in the below `forEach()` on line 13
I think this can also happen in the `addModuleSet` method.
Is this still needed? Doesn't the header already contain the header?
If this is an async function, why not move it into `syncIndexes` function? That way, we only need to pass it to `syncIndexes` function.
I don't think we should put this in the test. I think we need to add it to the test.
I don't see a point in using this anywhere. Can you explain?
This is an example of what I'm missing. The `one of` above is an `one of` that should be used to get an error. Also, I think this can be `viewer.isDebugEnabled()`.
This is a little strange because the name of the property is `Name` but the API is `MethodTransformerContext`. Can we move it to the `MethodTransformerContext` of the `Name` and use it in the `MessageHandler` method?
I think we can just inline this whole thing and do the query at the call sites.
This is wrong. The first two files are identical, and the first one has a valid name.
We should probably have a way to make sure we're not in the config yet.
Are there any other options in the thread?
I think the reason we need a separate ID for this is that this is only used to be an backups?
this is an internal raid constant, can we make it private ?
For the record: The `attr_value` is not defined here.
I think it would be cleaner to check `self.method.upper()` if it is not empty.
What do you think about moving this outside the `try` block?
I think the original code was incorrect. It was a bad idea when a consumer had a `sampleHeight` instance which is passed in, but then it was not passed to the function. Is that what you wanted?
`time.UTC` is `closeTime`, so we don't need to check the time.
Should we also add this to the tag?
@danrot did you mean to leave this in?
I don't think this will work. I don't get why we need to change `ClusterClientCache` in this PR, but I think we should not be using `ClusterClientCache` directly, since the method is only used once in the `ClusterClientCache` method.
Why is this in `libpod.md`?
Why remove the nil check?
nit: this is a bit odd, maybe just mention that it's the same iterator which is used in a view.
@bparees this will break existing test. We need to make sure that we get here in the log, otherwise we'll have to get a `LOG` error.
This line should be removed as the test has no effect.
I don't think we need the `max_retrials_to_get_pods` here. As long as we are in this context, we should just always have a `default=None`.
What is the purpose to add `255` here? I'd expect `workers` to contain a string that doesn't exist and should contain 255 characters or less.
If the goal is to use the 3 values to set the min to the min but to avoid the timeout, I think this is fine, but I'm curious why you did the intention here.
I don't think this is necessary? It does a pretty long time ago, and the first time I've seen the wrong file, and I'm pretty sure we'll see that we don't get a wrong file with a unique identifier.
This looks like something that should be a constant, e.g. `RSolr.connect`
@bparees I think it's good to have this in the `configIP` package. @stephentoub thoughts?
This partial is not included in this PR, but it's not really a partial partial, so you don't need to duplicate it in this PR.
Is distributed still available? We don't have to worry about distributed versions.
I think we should use a more specific quote here instead of an quote value. This is an important case, as we could also change the quote value to an empty string.
I'm wondering why you need to close this? It is a no-op, but it seems like it could be a different close if needed.
I'm surprised this didn't work, as it seems like it's a little odd that the function didn't have a function called the result. I would have just removed the `func(string)` variable and use a local variable instead.
This should only be needed if there's nothing to do with the new version, right? (It's possible we have to make the version pass in the version if we're not already.)
Please revert these unnecessary changes and make the code more readable.
This is a change of behavior, but I'm a bit confused by this change.
I would use the `containerContainsText` property in the container class for all of them, so it doesn't need to be in the list. It's not the case anymore.
This should be `'PATH'` I think, since you're using the `PATH` variable.
This is not really necessary. `#else` is the default in #9925 (the first `#include` is not `#include <stdlib.h>` but it's a `#else` part of the function)
`$this->tester->waitForAjax();` should be called when `$usester->waitForAjax` isn't set in the context of an $this->tester->waitForAjax()`.
Standards: Can you please add braces to this condition?
If you're using a different `IdentifyTrackBreaks` anyway you should be able to use `idTrackBreaks` here and below
why is this required? import_mpi4py is never checked
This is a pretty good change. This is the place where we want to do this, we want to log the error.
Is the idea here that we're using a `interfaces` interface, but we're not using it yet?
Why not use `String.format` here?
Why do we need this? We are already calling this from the default `false` anyway.
reinterpret_cast is not used
Can we remove the `/` here?
why is this change necessary?
We can use `utilsDetailsPanels` directly.
Why is this `persistdir` removed?
@deads2k i'm going to leave this in...
@deads2k do we want to add the check to the clash? Is this because we don't have a default value for "incldued"?
is there a reason we wouldn't want to have an enum as a keyword argument, rather than an enum value?
I think that the `path` will be part of the path path here, because the `path` will be tried to split the `path` into the `path` interface, but the `delimiters` is different.
I am not sure what the best way to do here is. The `if (aURL.startsWith("data:") || ...)`, but the `if (aURL.startsWith("data:")) == null)` check wouldn't need to be there, so I'm just not sure if this should be done here.
Is 0 initialized necessary?
Use `local_version`, because the value `unsigned` is not an int.
This should have been in another PR, but I think it's better to be consistent with what we already had before.
You can also pass <msg> config']['transport=None and use that instead of the one in the target.name == 'localhost' directly. Also, I would suggest to use `|| data['config']['transport'] = 'local' if target.name == 'localhost'` instead. Also, the `|| data['config']['transport']` is a bit clearer.
I would have named it "mServiceConnection" instead.
I think the `wipeableIndex` and `wipeableIndex` should have `[UnsupportedOSPlatform("browser")]`
This was the bug I found, but the issue is still that it's still in the wrong place.
I don't get how this is working. The rest of the tests are failing because there are other things that need to show the `None` key from the `None` key. I'm pretty sure this was an "Invalid Public key" before the `None` was actually handled.
This can be `role ||` because `getJDKREDTime()` returns true.
Does this also need to check for other instances of `localConnection`?
What does it mean that the `PodSelector` is `Date`?
I don't think this is right. The `minRTT` should still be done if the value is not specified in the original `sendDelta` array. We should not do that here.
This is internal, right?
I'm pretty sure this is the right thing to do. If I'm reading the logic correctly, it should probably be in a different pull request.
Can this be replaced with a single space?
Would be great to make a `var` for this.
I don't see the point of this function in the test.
Nit: remove empty line
The `prompt` variable is not necessarily a valid name since it's an integer. It's the name of the variable that's passed in.
Is this really needed?
Is this related to this PR or just cleanup?
Why not set it to `true`? We could set this to `64` in the `opnd` method.
@jsoriano Is there a better way to achieve this without changing thepb button?
Use `:subscriber_id` instead of `:id`
Why not just return this error? I think `HandleHandle` should be sufficient. `HandleHandle` should be a `HandleHandle` and not a `client.PostMessage`.
This one seems odd to me. Is this a breaking change?
What happens when we have a non-properties schema? Wouldn't it make more sense to set the reader on the same object?
Style/SymbolArray: Use %i or %I for an array of symbols.
Might be best if these were changed to `iceberg.Open.hive.enabled` instead of `iceberg.engine.hive.enabled` since this is already a dependency
This was the result that was not related to the delete anymore.
I think it would be nicer to have an `include_boundaries` at the bottom, that way we can avoid adding any additional parameters to the output.
I would prefer to have a test case for the case here, which I think is probably a good idea.
`PasscodeMode` is a new instance (e.g. `this`). So, `newMode = PasscodeMode.Check;`
I think this can be `static`.
I think we want to remove the `rake` prefix as it is not a big deal.
I think we can get rid of this now.
Is the `Ispathname` still needed here? I don't know if this is still the case, but the `[Thread("")]` below is the only place where I wanted to return an error.
I think this line could be removed.
not needed, we have this in parent
This function is only used in `lib/1` and not `lib/1.1`.
In the past, we can use `timing`, which is the preferred way to determine whether we should pass the `merge` into the `export #{or` key.
Is this required for the new client?
Looks good, but I would have used 2 different lines for this.
I think it's better not to include these files in C++.cpp and C++.cpp, if we don't use OSX, we should probably add a new header to make sure that `openssl/md5.h` works as well.
I think this change is no longer needed, since we only use it when calling `_find_elements`
I think it'd be better if `target_id` were named `SendSpellBarEnable`.
this shouldnt be `DateTime` right? you can just use `invocation_id = Column(String(256), nullable=False)`
If we're not going to have a transaction, then I think we should just remove this.
Can we have a test for this?
This line is still incorrect.
I think you could just use the setuptools `cachedChanges` here.
@michaelkuhn This is the cause of the problem. The `execute_task` is called from within the task and the metadata does not have been removed. This means that the code will not be deleted and the metadata does not exist
This is a bit tricky, but why would a Connect go from the first two seconds?
Why is this rollback needed? Does it get invoked in rollback?
this is wrong. It should be `getFormType()` not `getFormType()`
I think we should also be adding an example of `yum` in `yum-`
Please use a different name
if you're using sinon, why not using `useEffect`? Or is that just for consistency with other tests?
I would use an enum instead of a const.
why we need this? diskAttachment can just be null, right?
This file should be removed
How is this change related to the bug? I'm not sure if it is a good idea to do this.
This file has been moved twice
This is the only thing that is supposed to be done to not do this in `NewtonsoftEscapeJProperty`?
Is there an issue tracking this?
Seems like this should be added in this PR.
do we want it to be configurable?
It's a bit weird that R_AS_INT() would not have been called, and the R_AS_INT() would never call this.
if null === $mediaContext
I'm not sure we can make this public. The current version is the only version that we have.
This is a bit confusing to me - I would have used `match_cost` to make it clear that this is not a `List`. IMO `match_cost` is the better name for this method.
I think we should test for both the key and the key in the test.
I would keep this method for all the reasons, to keep the original behavior and change it to something like "This method is not supposed to return "Session"; it is a bit misleading, it should be changed to something like "This method will throw an "Session ID is null". This will throw a `NullPointerException`.
Should we remove this?
We need to remove this spec, as there is a spec that was passing around this spec.
This is not really necessary, since streamId has only 2 flags, and now we are on the same thread.
@stephentoub could you help to check the `test` block?
hmm, maybe make the `try/except` a private variable.
this is probably the wrong place for the test, but it doesn't look like there's some thing to do with the previous version of `guspense.test.js`.
This means that this will break users with the `BATCH_SIZE` value. Is that intended? What if `BATCH_SIZE` is not defined as the `Infinity` key?
This is a change in behavior, but why are we using `Check` in case it's not a valid option?
I'm wondering why this isn't `ConfigService` (as it is done elsewhere in the `ConfigConfigService` constructor) but not on `config` level (which is the initial issue).
Please add Gitea copyright to header of import
should be `options`?
Why this import?
this can be done in a separate PR, as we don't want to use a ton of readability
We should be doing this in a more general fashion.
I think we could remove debug code.
The BN value is already being passed to `new BN()` above (line 577). The BN value is already in the BN value.
This is no longer used?
I know it's just a string, but can you please add a space between `string` and `(string)`.
I think this will need to be done in a dedicated PR, because we need to check if the build is not in the `DataSample`, but if this is not the case then we should just remove it.
This line should be removed
Why do you need this? We don't add it for the specific user who already use it.
`this.opts.onUninstall` is not a correct way to override this. There is a `SubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSub
Why is k8s.io here and not k8s.io for k8s?
Do we still need to check for the type here?
This is an internal function that has a custom function.
This TODO should be removed.
Should this be `using Nethermind.Monitoring.Metrics;`?
Isn't this going to add an additional check for the type of a member variable?
I'm not sure if the original implementation will complain about this method... I'm not sure if there is anything else in the code that can be done by this. For example, I think we could do this in a better way.
This was a bug, we should be removing it from the main main script. The reason we are removing this is to skip the Load table from the database.
what is the meaning of this?
Please don't change the signature of this method, it's not related to `target` (same as the one in `getAmpDoc()`)
I don't understand this, and I think it should be a separate PR.
`add_gt_as_proposals` is now just a list. It's not the same as the one you add.
Why is the removal of this removed?
Close ctx is a little vague.
Just noticed that there's not a global "use" method in the "order" section, not "use".
can we call this something more descriptive? What does it mean, say something like `bbox_head=None`?
This could be just `return ``--with-modern-grub=no``
We can remove all the `client`s here. If the client is client-server, it can only be client-server, so that the client will be client-server. If we do want to keep the client-server. If we need to make this change we can remove the client-server. If it is still a client-server client-server.
Why do we need to add it to the `rails`?
nit: `CDs               ` and `CDs` can be omitted.
I would prefer to have this in deepStackTrace - we'll be able to use it in the UI
If this is an object we need to do it all in the DB and not have it in an object
why is this changed?
Is this necessary? It does not look like the only error code calls it.
I think this is not correct. The rest LPM is not correct for all the ESM, so the new LookupPath() method does not need to be called after the `lookupPath` function is called, so we have to think about it.
I'm not sure we should put this in a helper - I think we might be able to use it in the future
This is not the best one, I think. The agent should be allowed if the agent is matched. It's just a simple `EnableLogging`, and if it's a simple `enableLogging`.
Should this be `parseOptions == 0` instead of `3.0`?
I think you should be able to run `log.url.is_exists()` in `log.url`.
Should we make this an expectation instead? Otherwise if we don't do anything, then we'll have the same behavior as the `expect` block.
What was the reason of removing this line?
TODO: the transactionIndex was removed in #4279
I'd expect the `error: {}` to work in the case of a `warning` in the `error` case, rather than having a single `error` attribute that is passed to this function.
Why do we need to do this?
InUse is a global setting so you can use it instead
Do you want to call this `ErrNotFoundErr` for consistency?
@bvaradar is this the right way?
I guess we should return `Optional<null>`
Removed the title because it was not being used, and we can't rely on it in the actual error message.
Maybe use `localLastUpdateUpdateSession` to be consistent with other `Update` methods?
Could you make this a dictionary type? It's not used by anything. It would be nice if the user didn't want to add a buggy docstring.
Is this supposed to be a specific bug?
It's better to return a `container.Id` for this error message. I know the original code had an error, but `the old "container" in this context is a `validation`. I think that's the reason we want to return the wrong error code.
Should we pass the `PackagePackage` instance here as well?
Is there a reason why you wouldn't want to have an enum?
Could be just `super.pylint:` I'll fix this in a follow-up PR.
I'd rather have a default value here for the value that would be passed to the `nativeEvents` function, and then use that value here.
I think this should be called `actionable_fluid`. The latter is the only place where the user is used and the last one is used.
We should add some docs about these as well.
Not sure what this is for... can we do something like `latest.hasData(reportArgs)`? It's a little confusing with `place.hasData` being used in the constructor.
Can we keep the variable around?
Should thechan error still be logged somewhere?
Are we giving this a query for all checkout's checkouts?
`string|null` is not needed anymore.
Should the `rowType` be `Optional[NotNullWhen(true)]`? It looks like the `@Nullable` annotation is the same than `RowType`.
It seems like it is necessary for this to be moved to the previous line, but the only reason this code is here is because it's used in `utils.utils` where we want to have the same name as the update method. I don't know how to add this, but it's probably better to make it into `utils.utils` and have it be an alias for `utils.utils.utils` or similar
What does "shadows" mean? What's the purpose of this `device`? If yes, then `input_config` should be used instead of `device`.
@michalpristas Do you remember why we have this change? I'm guessing the "pipat" is going to get the wrong impression that there is no "pipat" in the cluster that the config is not handled by the cluster?
This is a bit of an unnecessary extra variable, I'd just call it `HostBy`
This is not right, it will cause problems for the master branch to be merged upstream.
This is just an observation. In the future, I don't think we should change the `is` part here.
It would be nice to get rid of these methods in a separate PR. We should at least have a few more of the `defer` methods in the same place.
This message should probably be updated to something like: "Fail to health check %v"
I would prefer to see trace/subtrace as well
This file doesn't seem to be included in this PR?
Why not just use `nonEmptyAssignmentToListElementChangeType` here and in `LessSpecificReturnStatement`?
why the logging? this is not a warning.
I think it's good to move the error into the `if` statement. That way if the `endif` condition is to be removed, it will also prevent us from being able to run `error`.
Does this mean that when a request is updated, the request is updated as well? The request will be deleted if `scale` is missing from the `Article` table
I don't think this is correct. The call to `this.on` was there for a reason. The call to `this.nbnb`, so it doesn't do anything. But I think this is correct.
remove this file too
remove empty line
I think it's better to move this into the `getSampleFromLibrary` method.
This isn't something we could use in the future: `Input` `after revisions` (which would be a git tag)
This seems like a pretty trivial thing to do, but I guess we can have a `__call__` method that does the same thing.
@stephentoub could you add a better description of why it's changed ?
Why not `if ((arkcmpErrorServer == '2012')`?
This could be a breaking change. It's not a bad idea.
Do we want to keep this method around as well?
This seems like a bug, if the `rmd` is `false`, we should be able to just remove the `rmd` variable altogether.
I don't see a reason to change this test. Was `_docroot` changed to `_docroot`?
I think we need to make this package private
Is there a specific reason for doing this?
Should this also be called in `helper.py` ?
nit: can we rename `ETH66` to `isEth66`?
Extra empty line detected at class body beginning.
`secret` should be a `URL` object
This is a test case I see, but should it be in the test case?
This seems wrong.
This lock is not thread safe. It is not the only one that is used. The lock is not always wite lock, right?
I think this is the only version that works. I think you should remove it.
This file shouldn't be included anymore.
I'm not sure how this works but is it possible to use `proto.contains("cloud"))` in such way?
What is the `fileflags == Lob_Append_Or_V` for?
I'm not sure this will work, if we get to a copy, then it's a copy and then we don't need to parse a copy. The problem is that if we get to this in the `log.info()` function, we get the `log.info()` from the map, which we're trying to parse, where the map is actually requested, and we have the map in the info, where that is expected to be the default and we get the right error.
SSL_set_tlsext_host_name() is called twice here, and it is the same for all the SSL settings.
I think we need to read the `readActiveBlockProducersByHeightTests` to be able to read the `readBlockProducersByHeightTests` to avoid the need for it.
why not just `updateSync` ?
I'm not sure about the place where this `skip` could be called. I don't think this needs to be a `try/catch` block, and I can't think of a better way to do it.
this should be a public method
nit: `requiredarpc.Interceptors()` doesn't have to be the same as `tch.ListenAddr.Interceptors()` (which is the same as `tch.ListenAddr.Interceptors()`), it will have been same as `tch.ListenAddr.Interceptors()` (the same way it was).
If this is the only place where we use the dir, is there any chance we could use it?
I don't think this is the right approach. The `env.store` test is probably what we want.
`s/excluding the word `keybase name` would be better.
This should also be updated to `TimePost.location` and `TimePost.location`.
This is no longer needed as we are removing the validation in the base class
This should be `validateUnstake`
I'm not sure this is the right fix, but if it does, I'm going to change it for a follow-up.
I think this import is unused.
If we're already going to do this we should use `intermediate_rule` here as well.
I don't think there's a typo in the name here.
This is just a minor change. Why was it added?
This will not work for other SAD and some other use of the `abspath` in the rest of the file.
I think the upper bound should be the smallestStepsNeeded
Is this used?
I would use a `null` check to ensure we have an `Optional`.
we no longer need to use `netlink` here?
What is the purpose of this change?
Please use the % msg msg msg msg.
I'm not sure what the right answer is, is this supposed to be?
This is the wrong place for this PR, but we should also check if the `go-fsm` is still `None`
Why was this moved up here instead of just 3?
I think it might be better to use consistent description here for clarity. For example, "Yeah, this is not an option, and there's no other option to set this to `null` or `null`.
This looks like a hack to me, but I don't know if it's worth it.
We should also do this if you are running the container. It seems like we should do this in the same PR. So if I have to do a container, we should do it in the same place as a different place to add a container in the main namespace.
I think this is a leftover?
I would use `watch_video` here, as in theory it is not a video-specific one : )
This needs to be done with `// NOSONAR` in the constructor. The only way to fix it is when it is used is to change the code to not change any of the other properties.
why do we need this?
@Scottmitch I wonder why it's better to use a `Set` method, rather than using a `Set`.
This change is unrelated to the change, but should be reverted.
This should be `ConcurrentHashMap` instead of `ConcurrentHashMap`
You could check if it's aProp here.
Is this spec not correct for the `call` testing?
I think this would be better named `NewController`
This should be in another PR (or in the `validate_test` function)
What do you think of using the `_x` prefix here as well?
Why are we not using `loadDialog` here anymore?
I think it might be worth adding a struct.I'm not sure what the best thing to do is when you call this struct.
We don't need this change any more, since we're using it elsewhere
since you use `StringUtils.toNullOrEmpty` instead, you should remove the `@Disabled` annotation here.
Can you add a TODO here if disable is passed by default?
The change looks good, I'm surprised it didn't break anything.
You can remove this.
We should use the description here.
you should not need the `timetime.Duration`
I think we want a more clear name. I would suggest: "converted"
is there a reason we are not doing this?
I'm a bit confused by the point of the `(nil)` call in `execute` in `OPHashMapChannel` is to get the `nil` from `io.netty.util` and the key in `io.netty.util`.
I think you need a space between here and the first argument. I don't think you can put spaces inside the argument.
I think we should add a message to the output here to make it clear that this is a setting of errors.
Is this the default?
remove the unused import
Should this return an error if the switch statement is not found?
Why is this removed? I think it's unused and should be removed.
I'm not a big fan of making a default implementation simpler for this since it seems like we should be using a default implementation and always default it to 10 (which is not very descriptive). I think it is better to keep it to avoid making the intention of the current default, because it is not the case in the current implementation. The reason for not having it be 10, it is the other way around and not the other way around. The default should work, because we have to think about it, but it is a good idea.
What's the purpose of this change?
I think `lastBlock` is better here.
why are we doing SolrException here ?
is it worth keeping a single string here? a simple string, e.g `\n+`, etc.
@KlausBSautter is this an API call for users that might want to know what the best policy is for? I think we should be using the `hack_USAGE_LOGGER` fixture for `KOALAS_USAGE_LOGGER ` in this case.
Can this be GasPriceConfig.cs?
Why not use `ctor.Input(ctor)`?
Remove these two lines.
I don't think this is correct. `c.metrics.pistRequest` is the correct method name for this function. It seems to me the same as `handleKind` would be called for every call site, so the latter call wouldn't be necessary.
I'm not sure about this. If we need to add the `sender_gcpbroker` parameter to the list before we release it would be good for now.
In which cases do you expect `null` to be `null`? I think the error message should be fine, but it would be nice if it was changed to `Literal<T> lit = literal().to(boundTerm.type());`
could you use `str(gt))` to make it easier to search for the future
Although the `succeeded.` is missing from the previous line, it would be more readable if we didn't use it in the same file, because it makes it easier to test for this.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This may be wrong, because `errors.ErrorCode` returns a `List`, and `String()` must return a `List`.
Wouldn't this be better named something like `opts_at_rasterizer = graphicsPipelineCI.pInputAssemblyState->topology;`?
This is an internal class. The assets should be loaded after any class is loaded.
I think it would be better to keep it and have the go version change. This is a breaking change as it makes sense to move all those entries from `detectStaleConnections` to `lib/lib/lib/` and `lib/lib/` to `lib/lib/`.
is this needed?
Why are you passing the name of the HeaviestTipSetCh?
Maybe we should just use `AWS IAM` here, as we do with `AWS` above?
Maybe log a warning?
I think this will be easier to understand if you just do `hex.Encode(msg, err)`, no?
This is the core logic for this PR, can you check and update the doc?
I assume you removed the license header here?
This is a very good example of the testing purposes that was being used by the client. I can see a reason to make it a property of the test, and have it be moved to `src/server/server/server.go` and then put it in the `try/catch` and put it in the `src/test.go` implementation
I think we don't need the extra `type` here because this is the new version of the package. The new version is not compatible with the existing package.
This should not be necessary anymore.
is it a bug in the constructor?
I think this should be `try/except`
nit: newline should be before the last line.
This is an unrelated change that I'm not sure about. @mjkkirschner @smarterclayton @jridgewell
Please move these two lines to be above the `get_register_name` call.
If `kip44_derivation` returns 1, the second return will be 1, so `len(account_id)` should not be fine.
The Select should be set in the SelectQValueCustom.Computation. You should not need to call SelectQValue.Computation. You can use SelectQValue.Computation.Computation#CheckedToParameters
It looks like this can be moved to a common function.
I'd call it `"logger._logger is not None` to indicate it's a valid value, but that's a bit more complex (i.e. not a ``reset_logger()"
why is this gone?
If `finalizerChan` is no longer used in GCed, then this can be removed
Can we just remove this?
Hmm, maybe this is not what we want. The `node` value should be used instead. I think the `the node cache` should not have the name of the block.
I don't think you are still using the `DynamoModel` struct. It's probably worth adding a field to `DynamoModel` for this class.
Isn't this class really needed?
content is a bit low for a demo, but I can't find anything that gets logged in here
`isDestroyed` is the default in this case.
We should not have this versions anymore. Can we just remove it?
I would use `info_lines()` here for consistency (i.e. `raw_info_lines()`).
This is a copy/paste error, but I wonder if it is worth making sense to call this `setTimeout` instead of the frontend implementation. The idea is to do the call inside `setTimeout()` so we can just call the `reload` method.
I think this is not correct. We don't have to remove these, but I guess we should keep them.
I'm not sure about this. It will make the build fail if it is indeed active.
I'd say that this is not going to break any users who are not familiar with. In my mind I'm not sure what the best way to do is to add `concrete` to the `rails Run` table.
I don't see this method being called anywhere in this method. Can't we use the function from the function?
I don't think you need to do this. You can just do `go func() { publishN(ctx, t, sub, n) }`
Metrics/CyclomaticComplexity: Cyclomatic complexity for approve is too high. [10/6]<br>Metrics/PerceivedComplexity: Perceived complexity for approve is too high. [10/7]
This is an unrelated change.
Please add the new commit message to this commit (see how this is related to the commit commit).
This is a bit weird - why do we want to set the `RequestDescriptor` as a string here? I would expect it to always have the same result as a `get` method. I'd expect that to be a string, but I'd prefer if you would use the `bobblin.common.ui.util.util.Volume` as well as to use a boolean argument here, which is why it is not needed.
There is no need to add Faker for Faker, and `show.play` will be automatically set to `false`.
I think this is the wrong approach. `raise Puppet::ParseError` is actually a valid argument for `noop`.
We probably don't need this file anymore
I think it's more clear if the variable name was `Detail_key_v2`, `Detail_key_v2`, `Detail_key2` and the name is `Detail_key_code` instead of `Detail_key_2`
I'm not sure about the use of assign({}, here, just curious why you changed the state.
shouldn't we check for `max_admin_api_calls_per_day`?
Should we make this configurable? Or is it too much for 10441?
`processCodec` needs to be updated to be consistent between `OrderedDict` and `OrderedDict`
`pdfPageOrientation` should be set to `false`. `--apache-beam-commons` should be set to `false`.
I think it should be the first one here.
I think `if File.exists?` will return the appropriate error, and the check for `text` will return a `nil` here.
I think we should make an overload to make an interface for this method to return an immutable collection. The only way it can be a bool is if it's a method that is a boolean. If we don't want the method to be an array of the method, we don't need to make a call to LoadConfiguration() on the interface
I don't think you are intending to remove this, since the only real code in this file uses this.
why not `stateDB` ?
I'm not sure what this field is used for, but if this change is ok, can it be removed?
This is not the right place for this?
I am confused. Why is this not set at the beginning of `reshape`?
This is a bit confusing to me. If we're going to add a `type` to the `RuntimeError` then we can remove it. If it is only used by a `Skip` then it will be used in the code, and will be used in a lot of files in the future.
Please revert this file
This is a change in behavior. I believe it should be safe to call this.processors instead. The original code did have the original code as well as the existing code.
Could you please explain more what's going on here, what is this magic number?
I think this is still not needed since it has been removed.
Is this the right place for this?
no need for this to be in a separate function?
I think it should be a `GetRequestId()` method in `GetParameterRequest` and `GetRequestId()` to handle that case.
why this change?
I think this would be more usefulI to catch as an exception, and raise an error in the exception message.
Is this still required?
Can you use `count` to make it work?
It looks like there is a bug here. If you are using the right var here then the right var would be better than the var.
Is this needed?
Hmmm. I think this should be an `fiscal_year`?
Why do we need a remove here?
why is this line changed?
`ref ServerHttpSecurity.anonymous()` can be `null` here, and the next line is wrong
Can you also add a `data_record` attribute in the record?
why change this
I think the previous name was fine, we can change it to reflect our new naming convention
You should remove this file, it's already closed by the background framework.
Is there any case where an explicit error happens after the user passes an error?
Why do we want these default properties ?
why is this `require 'pathname'` needed?
Do we need this?
Please keep the original value as `short_names='=>'bool'`, and add a description to the `ing_names=...` in the description of the docstring
Does this need to be added in this PR? It is indeed needed to prevent unnecessary work for the future.
No, please use `goimports` to test for both `service/cloudformation`, and `archerCfn`
can we add type=action?
This is the only place where we need to change this. The `InvalidScalarArgument` string will always be true because there's a new `InvalidScalarArgument` that will return `false`
This looks like a regression from #84845.
Can you please add the new line at the end of this line, so that the new line is merged into the same line?
I would rename ` missingAdminRole` to something like "change validation" or `notAdminRole` to match the other use.
This is the only usage that gets used for the Monster actions, so no need to modify it.
Let's not use this as a import. This is a bit of a hacky change.
Why are we doing this? I think we have a couple of things that refer to this already.
Nit. Could we just use `NewIdentityManager` here?
this is not used anywhere, can be removed
`zip` is too generic, can we rename this to `zip`?
why do you need this?
I would just put the `pre_syscall_app_sigprocmask` in `sigsigmasks` since it's done here.
I'm a bit confused by "It is important that the returned list is sorted"
This is missing the license header
This is a change in behavior, but it seems that the only caller of this if/else is to have to call `get_MODE_WORKER_access()` and return the error if it doesn't have to. The problem is that if we have to call `get_MODE_update_interval`, we would get rid of the if condition and just return an error. This is because the caller can't do this.
Why is this import needed?
`str1.localeCompare(str2, undefined,`. Same for the other one below.
I don't think this is the correct change.
Can you put this in the controller and the new field in the `*`? That's what we usually do.
Is this just an oversight?
The word "unit" should be "Unit name of the asset to look up"
I think this should be done with `auth.New` instead of `auth.CreateInstance`
@smarterclayton I don't think the `VersionV03` event should be updated.
I'm not sure this belongs here. The `.watermark` constant is used by all overloads of `-1 ` -1` - which is not needed.
we can also use a descriptive constraint here, this would also make readers to pick up those readers.
This should be a `os.platform() === 'win32'` since it is not supported in Song check anyway. We should probably make it a private static constant.
I don't think this is a good idea, but it should be good to use a more meaningful name here.
substitution uses the `substitution` method for the setter, not an instance variable.
This was a bug, and it was not possible to use python as argument to generate a non-zero string.
I think we should add some description to how to set the environment variable to the initial port pool, and add a note that the `openvpnPort` will be used for the other port later.
I think we should call `close()` in this method, otherwise the `topology` is not initialized in the `connect()` method.
should we do the assertion on the expectation that the expectation is not found?
this is a weird thing to pass here
I would like to see a test case for the unhileileile bug, but this seems unrelated to the one we made, since it is a test case, not a test case.
In order to avoid having to store `BatchingActivityProcessor` directly.
why is this required? I don't see a reason we discussed this in the first place
I don't think it's necessary to include the `[DisallowNull]` as it's only used in the `ServiceRequest` class, and I think it would be better to do it in the `TextView` class.
why was this removed?
Should we also check the secret is set to `0`?
This was incorrect before.
I don't think we should TODO this is going to work out. I think we can do something similar if `message.Transport` is a constant.
Hmm, I wonder whether we should not make this more verbose/tested, but I think we should use `ComputerName.Computer(true)` in the code base as well.
the `allowError` argument should be removed from this method, since it's now equivalent to the `allowError` variable.
We could just remove this error altogether since we don't have a "default" error message.
I think it's better to move the `MetricMetrics` class from `HoodieMetrics` to `HoodieMetrics`. The `Metric` class is only used to set the `NotImplementedException` to `HoodieMetrics`.
This seems like a bug in our test suite.
The logic here is not correct. It should only be applied to the `<desc>` tag, not the slice.
`dirname = os.path.strptime(mdtm[4]], "DF_path_parts: %s", "/path_parts[3])`
This is a good idea. If the default is 0, then the default should be 1, and not -1.
`s/infinf/infinf/` instead of `Timer`? It's not clear why you need to call `time.Time{}` on `time.Duration`.
There's no ROMize in ROM_ptr as the name can be used in ROM_SPTR res{te.canonicalize(*mol)};
Is this constant used?
I'm surprised this didn't have any side effects.
this should not be necessary, as we already check for null
I'm not sure if it is a good idea to do this for now, but if it isn't we could do something like `application.version.zone.version` to get the manifest from a string that we're trying to do, then we could have the manifest in the `clean_version` method and get the manifest from the manifest itself.
I think this should be `Include`
I'm not seeing where `en-US` is set, but is this what you have for the `TagTag` header?
I think the indent is not correct
type is not used
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
The `default: false` here means the default is `false`?
This was changed in #614, it was only used in tests, and it was not used in production code.
Is this correct? This is the only place where `gen` is used.
I am not sure that this is correct, because `cfg.Meta` is already in `model`, it is a no-op.
info is already in place?
Why adding these lines?
I think we should be more strict about the `Overwrite` and `Overwrite` keys here, as it's a little confusing to see what the default is.
Why is this needed?
Why did you add `json.Marshal` here? It seems to me that the other options are `nil` by default?
What do you think about using `Logger.additionalIngressRules(omitempty)` here and in the other places below?
Same here. Use `protected`.
I'm confused by this change - is it a bit confusing to have datum datums be smaller?
I think it would be better to be explicit and avoid the need for `isWorldStateAvailable` to be called when the Hash rootHash isn't specified.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This should be handled by the unit test as well.
We should not have to move imports in this file. Can you try moving it into `build-system/system.js` and add it to `build-system.js`?
I think the indentation of this error message is offhand.
I think you need this newline, right?
Why not use `given_syscall`, `own_syscall`?
Please use `@GET`
I don't think this is right. The value should be a `core.g.,`, not `core.g.,`. I think we should have a `Map#core` method in these cases. We should also make the type tag configurable.
Can you add a link to the issue of adding this?
This is still wrong. The `go-filecoin` file in the go-filecoin go-filecoin ` seems like a bug in the go-filecoin version of the go-filecoin.
I don't think this is needed. In fact, I think it should be called `DISABLE_TQDM` instead.
Why did this change?
How does this work? I think `else if` is a valid comparison
nit: maybe `setFromad` would be more suitable
Are you sure you want to call `JAVA_OPTS` here? It seems to me that you're using it everywhere, and is confusing, because it's not a requirement, but it is a bit confusing.
remove this empty line
I think we can skip `tls_version or 0x030303 > 0x0200` because the check is not required. I think the `!=` is unnecessary here because the check is not required.
log4j is not used, use 4j.
I don't see where you used this - can you explain why you used this (or anything else?) - can we not have this flag in the test?
I'm not sure we want to mock mock_ecr to be an object. A test that adds mock_ecr should be set to 1.0, but we can use that to make it work with a mock mock_ecr.
I'm not sure why you removed this - there is no way to specify it in the middle of a `API_requires` URL
We should have a separate PR for adding this here, but it seems like the fix is to add a new commit (or maybe even a note about this).
do we really need this? I would have expected that if you add the `__init__` below it would be a good idea.
I would move these `Object.setPrototypeOf(...)` calls below the setter.
nit: I know we're changing the code, but I'm not sure we're going to add this to the docs.
I'm confused by this change. If we don't use old_size, then the new size of the old_size doesn't require any memory size. The original idea was to have a list of array, but the original array was not known to be used to create memory usage. It is not possible to do that.
Why is this needed ?
This should be `hasLongrunningOperation(..)` and then we should not have a method for it (either we could change the method in `getLongrunningOperation()`)
The password should be `info` or even `Basic` and `Basic`, so that the username will not be sent if password is disabled.
I don't think you need the `self.all.order(updated_at: 'DESC').forEach(updated_at_desc, -> self.all.order(updated_at:))`
This is not the most appropriate change. The Base is the Base class, not the Base class.
This change is not needed, width is always set to true by default.
`milliseconds` is not a `getConfig`, you could get the config directly and have the plugins set the config directly as `image` and `getConfig` as well.
Why does this need to be on the config instead of on the config? I don't think the config can ever be used.
Why do we need this?
Please use the new constant
Is there a reason we are not using the struct bool?
This import should be moved inside the group above.
This is probably a leftover from the `if` and it doesn't make any sense for the `c` here.
please don't need changes in this file.
I would use 2,3,6,6,5,6,6,6
This needs to be public - the changes in `__iter__` are not necessary.
I don't think we need `Bolt::Config.user_path` here since `Bolt::Config.user_path` is already a config argument. (The logic is not correct for now.)
I'd like to see this in a separate test and maybe a separate one that takes care of this and has a bitten us in the code.
We can't do this for the public methods, since they are forcing this to be a `protected`.
This will probably lead to a regression in the past, since the goal is to simply `datetime.now().year()` and `datetime.now()` will be more efficient.
Shouldn't this also check that `strcmp(type, "goto error)` is `None`?
Style/PercentLiteralDelimiters: %w-literals should be delimited by ( and ).
Should we move the `api/config.go` file into a `config` module?
This is just a test case, so I'm fine with it.
"toggle" -> "toggle"? "it's only happens if toggle isFalse"
I think we should add new public fields to `UINT8      ` and use `L8` here instead of using the new fields.
This is a bit of a hack, but I would have thought it would be helpful to have some utility for the YAML class instead of a simple string so that we don't have to copy it in the future.
I would use a `DispatchInfo` constant for the class name
I'd probably move these to the bottom, since these are only used once per test.
I think it's not necessary to change this, because we don't need to change any state of the file, and the ones in `build.php` will still work.
This is not needed anymore
Do you know if you are going to read this from the command topic? I mean, do we have an option to call this function?
this will make the block number more verbose. We should probably add a warning in the message that it will be useful.
This should be in a constant somewhere
Line is too long. [85/80]<br>Redundant curly braces around a hash parameter.<br>Space inside { missing.<br>Space inside } missing.
Why do we still have a new chain chain if it is null?
nit: can be `null` to make it more clear in which case we will use `setMetatable` to avoid this kind of conditional
I think you could move this line inside the `if` statement, so that the exception message will be thrown if it's not true. That will avoid code duplication when it's not true.
This is a little hard to read. The `if Travis::Build.config&.ssl&.verify == false` line was removed from Travis process. We can use the `Build.config&.ssl&.verify` constant.
why not keep the assignment to `stopEventWalk()` ?
Why is this needed?
Could you add a new flag `staging-install-media`?
If the `num_scan` is not defined and this will be `null`, it will fail with `undefined`.
@mattcaswell, is this the network/NetworkUtils::getAvailablePort() method?
You need to keep the MinimumRate variable.
No need for trailing whitespace, see below.
This is just for the next review.
This is the fix. This PR doesn't make sense, but it looks like we should be doing this. Please revert all the changes to the `configure_sigdelset` below since they are related to the PR.
`@Nullable TODO` is more appropriate for this (and more important in the future)
Can we add a Integer field like `Integer` as well?
I think the original code is wrong, but this code is a bit redundant.
Why is the type of the `Oneway`? I think this would be more correct as we have a `Config` in the `pants.util.Type` and a `Config.extend`.
I think you can remove `config.XDPEnabled && config.XDPEnabled` entirely
I'm wondering if we should use `if (s == ResultCode::ERR_SPACE_NOT_FOUND)`? I'm not sure we should do that.
Might be better to make this `True`, `False` for the given argument and `False` for the default argument `NULL`
Remove this empty line
I'd say, if we wanted to keep this exit from an earlier stage, we could just use a `exit()`, and we could do it in the same way that we don't have a final exit
This seems dangerous... if we have two auth states in the same file, we could probably move the crt.Spec.CommonName to a constant?
Should this be a test or is it handled somewhere else? Maybe it's not necessary to test for the `CreationCreation` class and test the `CreationCreation` class?
I think this should be the only way I'm working on the windows side (I don't have a real scenario) is to have a value that would be displayed in this case, so that `spark_version` can be used.
can we add a warning message here to make sure the rank is not present?
No asterisk imports please.
we're removing the config check here, should we just remove it entirely?
I don't think "integral_columns" should be here. "aggregates changed to operate" sounds a bit like a very bad name. "aggregates changed to operate" sounds like a lot for a single columnm.
I think we can remove the src parameter and use the new function here
I think it would be nice to add this to the `ecs.Attribute` above, and add it to all of these attributes in the future.
I'd suggest that we make this `_APP_FEATURE_CODE_USER_AUTH` since it's not a boolean and should be a boolean value.
Why do we need this? 8 is a bit redundant with the rest of the code, should it?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
The `cancelled` route route route route route isn't available at this point.
Please remove this line.
I'm not sure if we should add `--verbose` flag to the models file in `core/v1/internal/internal/server/v2/testing.py`. Also, if there's any models that can be defined in the model, should we add it to all the models ? Is there a way we could make it explicit? I don't think we can add it back in in this PR, but if we want to add it back in the future, we can add it in a follow-up if we should add it.
For backward compatibility, we should probably not pass the config here as the default config is the default.
Why do you need to do that?
This is not correct. The code below is not right. `q == null || fcontext.base.size() == 0`
Please remove spaces around imports
Is it worth caching bytes.Buffer and setting it in the constructor so that it can't be empty?
This is not a change that will make the cert.NotAfter the wrong thing to do, but it's probably worth checking. <msg> Don't we need this at all?
I think this is the wrong package
I think this would be more useful as a code smell. We have a few of these in one place: - `if self.is_grid and self.is_grid` - the new one in the file that is used by both branches of the `test_data_url` and the new one in the `test_data_url`.
This should probably be in a try catch as well
if deployment.ClusterName is empty, then we should check if deployment.ClusterName will be empty
why is this removed?
It seems the only place where we use this.initInputShape?
Might be good to have it at the top of the file.
Could you please catch the specific exception? (but not now.)
This was a bug, the bug was passing in `recover` instead of `nil`, so I added it here.
`score_thr` is confusing, why we need `show` here?
This should have been left by mistake - the "site-nav" and "site-nav" aren't needed anymore
This can be removed now
Why the change to these?
I don't understand why we have both RTL and statusButtonWidth here?
should we add a view to the initializer?
I think this should still be a addFilter
I think we can make it `an.application.VERSION`
I'm not sure how to fix this, but why is it different from the default? I'm pretty sure the other test is going to miss a good default for this, but we're just not going to change anything else.
Could you also add this to the other `shouldnt` functions? Thanks.
These are the only ones that should probably be removed.
@DanielVF why did you remove this?
What if the user doesn't have permission to add their corresponding `--overlayText`?
`s.IsHidden` can be `false` by default
I am not a fan of adding the 'clef-signer-address' field here.
Is this related?
let's call this `ringPoolClaim` to be more specific?
**suggestion (non-blocking):** I'm not too familiar with how this works, but would be nice to have a better solution.
Is the `--prefix` option still needed here?
I think that the original code was correct and I don't think this was correct.
Why is this removed?
Trailing whitespace detected.
Please add a space between `)` and `>`
can you add the view to `view`?
This should be `if (isWindowsWindows.portEnabled()) {` I think? Also, is it possible for a version to be re-assigned?
Why is this change required?
I would use `https://https://io.my.salesforce.com` instead of `https://io.my.salesforce.com`
I think the idea behind the `if(name)` condition is that the function can be called by the `if` statement. That is, if you have a `#ifdef` statement it'll be called after the `if` statement in line 277.
I think it would be more consistent to rename `getFunctionIdentifier` to `getMetadataName`. It would also be consistent with `getFunctionIdentifier` and other methods in this class.
Shouldn't this be in the constructor?
I would prefer a more general `Set<T>`. Then you don't need to do this.
Could we have a better name for this header? Because we don't have to worry about header being the same, we might just want to know for sure.
This is not needed anymore, the only place this change is triggered is where `NETSTANDARD1_3` is used.
Why did you remove context-net from the "Workspace" module?
This is a leftover.
I'm not sure if this is the right fix to not use the `static` field here. If we do, we should not use the `static`.
randomrandom is the random conduit node.
There is already an `Platform` in `AssignmentEntry` and `killTheseThese two lines.
I think this is not a correct name. Can't it use `isIframe`?
Will this result in a regression if maxTrace > 0?
`days` is not a proper name (a boolean), you just need to use the `dry_model` constant.
Would it make sense to have a separate test for the second param?
@mattcaswell, I think it's better to keep this as `@Deprecated` and add `@since` as `@Internal`
Do we want to use `logger` instead of `logger` everywhere?
I would rather not have `script` available in the `text/` directory in the `text/` directory. Then, we can just use `javascript` instead.
Why is it ok to not return true if imageAlpha != nil && imageAlpha.Input.getRolloutTime) == 0 ?
Does this still compile when you create a new namespace in `main.NewUUID()`.
I wonder if there should be an option to avoid calling update in `onHandleCreated`?
Why does this differ from the command topic?
could you please explain why this is needed?
Should this be an `opts[:run_in_parallel]` here?
I don't see this change in this PR.
This can be deleted.
Do we need to keep this? If not, maybe this should be a separate PR
I don't think this line is necessary, because there is an error on the "value" parameter, not the "value" of the "like" of the "value" parameter.
nit: you can reuse `tables.copyOf(tableMap)`
Is this still needed? The only place this was used is `GoogleSitekitDashboardDetails` is used is in this file.
If we are touching this, we should have `NewVHS` and `NewVersionHistories`. Otherwise this will be the default.
How about `:missing_text`? This may be more clear to me.
Why not use w-]+/[\w-]+)(?:/(.+))?$"?
This is not the right place for this. We don't have 18n time for 18n time, but not for 18n time
nit: missing space after the `continue`
I think this test is now redundant, since `o.NoLog` is false if `o.StoreDir == nil` (which is true in the test), so I think you can remove that line.
If we don't need the empty line here, we can get rid of the empty line.
can you also add the new `Camera_ENABLED` attribute here?
I think this check can be moved to `mne.utils` since that is the default value.
I don't think we need the full alias here, it's not a valid package
Should probably also be a `@Input`
It seems like we should be using the `/home/foobar` file instead of the other test files.
I'm surprised this isn't part of your article?
I don't think we should be calling this a session. It is used by the client.
This is a bug in the `TestAccAWSCCE_factory.newByteBuffer()` function.
Is this file still necessary?
This is probably the only place where we had the `statusbar` namespace.
These were not being used.
wrong import sequence.
Can we add a message to the message?
should be better to do `if (h2o_sysfn(socket, AF_UNIX, 0)) {`
I don't understand this, the `timeline_semaphore` is a boolean.
I think the ` percentiles` can be removed entirely?
This is not a text in the spec I don't think we need it in the spec. We should add it to the `SELECT` table.
@bharatviswa504 What does this mean for the k8s version of this?
Should this be here?
I don't think the `|` is required here. The `if` statement is not needed for the check.
I think this code is redundant, since `config` only gets `nil` when `configKey != ""` and `max` when `nil` is `true`
This is the wrong place for this, but we should be using `onPlaybackEnded` to ensure that `PlaybackPreferences` is set.
Is X11 is a better idea?
Is this class really needed?
Can you also move the stdlib imports from imports into the new imports in `go-grpc-prometheus` imports above?
I think this is still needed, since `Logger` might still be used
Space inside { missing.<br>Space inside } missing.
I think this is not needed since `s/nupic/algorithms/nupic/variant/lib/python2.6/site-packages`
This is not necessary as the target is already a string.
Can you revert this change ?
We should probably also make this package private.
Should the env-var here be `<=`?
If you are going to make a change here, how about creating a separate `GenericString#testValue()` method in this file and adding an explicit `GenericString#testValue()` to the `Function[]` method?
I don't think this changes the semantics of a template, as it's the `upgrade/templates` template for a template and it's the reason for the template template for all the templates, not the new one. I think this is a bug, and it's probably worth to revisit the existing one to be more explicit and saying something like: "github.com/openebs/maya/pkg/upgrade/templates"
is this an accidental change?
This is not the right way for us to use the "DATA" variable, but the code in the `KafkaConsumer` is used for the `key_one` method. It should be in the `config_environment.html_request` method, so that we don't get the `kinesalite` object directly.
ditto for the two
` Stack` is unused. Can you please remove it? It's not used in any of your changes and I think it's only needed in `cloudformation`.
I don't think this is a bug fix, since we are using the default for the default.
Why not use a path as a path here?
This isn't needed, right?
It looks like `\".With(nil)` is not actually needed.
I'm not sure this is right. The dot should be a dot rather than a dot.
Why is this needed?
This should be done in a different PR as it's used by other components
All mutations that return values are used in a field. You should also add an assertion to this: `if field in ('id', 'collection_id', 'collection_id')`
Is this change intentional? This is a very bad thing. The problem here is that we are not using the logging logic.
This should use `JENKINS_brief` instead.
Why we don't need the "optional" message? The message will be the same as "initialised"
I don't see the spells[spell_id] below that can be either of them or the spells[spell_id].reflectable; I can see it can be either in the spells[spell_no_los] but the spells is an spells[spell_id]; has a spells[spell_id].reflectable;
Is there a particular reason for adding this to the end of the hash file?
Nitpicking, we might want to also test the error message to be more verbose, and add the error message to the output.
why removemiddlewares ?
Why is this not a global?
why do you need `computed` here?
do we want to set a test as a user-facing setting?
remove empty line.
this is the main change
This is the main place where we need an extra `encoder` object, so we should be able to encode the `encoder` object in the first place. The only way this function can determine if we want to ever modify the `encoder` object.
This looks like a breaking change. It seems this is only used to be used for the new task ID, which is not the case.
Why not just remove this method and do an in-place on the next line?
I think we should just use <msg> JsonPropertyName here instead of calling the method everywhere. It is not a property of an object. It is an array of success.
Why is this validator needed?
This should probably be done in the `scheduleFn` class
How about using `__DIR__` instead?
Why do we need to check for `opt_port` here?
I wonder if we can make this `IEnumerable<KeyValuePair<string, object>`. I suspect it's a public API, but not a public API, so I guess I'm missing.
I'm not sure if this should be log.info, but if it isn't, then this should be log.info.
the only way to get the Scale server from an API, is it to have the same API?
If we're going to do `TODO(BEAM-2424)` then we should remove the TODO in this file.
In this case, we should still support `float`. In any case, we should probably remove this.
This could be a one liner, if we're going to make it `&Counter` then we could just make it a pointer and then use `[1000]` in the method.
Is this change intended? If not, I can remove it.
nit: using statements should be in next line
Why is this in the DeckPicker?
It would be better to use the x30 interface.
Can we put this logic here and below the code block?
I think we should also change the type to `string[]` in the `string[]` section.
I believe the fact that this didn't work, I just didn't realize it was a copy paste from another PR.
Can the properties in order to be more specific?
The only thing you're changing is that `std::stringstream` can be replaced with `set` which is the default behavior. I think you should just leave it.
@joshblum I'm not very familiar with this - do you know where is this coming from? (i.e. it's used in other projects that use this list)
I think we should not have `cast.Connection` as a dependency here.
Remove this line
This is a bit of an odd addition to the code in `init()` method, we should not do that.
This should be removed. We use `StopProcessorTest.java` and the `AbstractTest.java` methods to test that the cycast is removed from the server-side page
I don't see any other names in the code, so I would say this would need to be `: EG: nil, Bokmål`
I'm not sure if this file has any effect.
nit: maybe we can just remove this file?
this can be removed since `get Elgg�ivä` already exists.
`patch-component` is probably not a good name for this (I guess), since it should not be an extension point in the component. I think it's more readable to use the component here
Should this be `String.format`?
`dumb branch branch of this Service.` sounds like an enum value to be a `NewResource` that will be the correct reference for a `ServiceReference`
Not sure why we need to change this, but I'm not sure how to name it `DeviceName`.
I think this is the wrong name. It should be "engine" instead.
I don't understand this change. What's our current minimum minimum?
Why not just add a pylint check?
Nit: please remove the period at the end of the sentence. Also, please add spaces around the newline.
Please remove if possible
@deads2k @mfojtik @johanste @johanste what do you think about making these 3 names a const-valued URL and having to add the `kubernetes` URL?
I'm not sure why these are needed, since the only places where we set the `specificKey` is for the `metricKey` library.
Why not use the same logic for `\b` ?
This should be renamed ` destroyResourceLinks` now
Should we add this to the `ConfigOptions`?
please don't remove this, there are no usings using the standard library in this file
I think this should be `var`
This is not correct. The only time that #if TRUE is triggered is the only place where this is called is in the wrong place. I suggest `#if TRUE` to avoid the need for #if TRUE. The way I understand, we are doing that, but I think we should be fine.
I'm not sure if we want this check. If the `null` check is not required, the `NullActivity` is not needed anymore.
do we still need it?
I think the indentation is wrong here, because the `=` is wrong
Is this necessary because `strict` is used for a test (for example, even if it isn't) ?
properties is null here?
@smarterclayton do we want to do this in this PR?
I think we should just remove the `class NS` altogether. It's a little strange that `key` is a string, but it's not a class that's only used here. I'd suggest just doing `from builtins import class`.
Should be `if contentType !== 'mixed' && contentType !== 'movies' && contentType !== 'mixed');`
I'm not sure we can import github.com/...
This function doesn't return anything (it just allows the type of the front_front_preference)
I think it would be good to use `rewrite` here.
This file is not used.
I'm confused about this. Why not just add the endpoint to the `flush_enabled`? What about other types of `None`?
I think you should use the env var you defined for all `prometheus`s
this should be a separate PR
Why not keep the default for the `FAILED` case?
Is there any way to make `peer` a required parameter?
I think this is not the right place for this, but it's not really a good way to fix that.
Could we delete this service? Or do we need the service account at all now?
This will fail when `--installed` is `false`, right?
This seems to be the same sequence numbers as in Thread.com/Common.php.
The task should be in the task.java file for this. Also, can we name it `rewritten-file-scan-task-list-enabled`? It's not the name.
This is going to be a problem for other SDKs (see the other SDKs).
CheckErr was not used, so it will be removed.
I'm confused by this. Why are we using an enum instead of an enum ?
Which case was the `Array` in the `tokenList`, is it really necessary?
I think this is the wrong place for this. Why do you want to check this in the `PostState`? In this case, it's not a big deal but if this is a bug, I'd suggest to have the `data` as a `Collection` instead.
Is this the right place for the auth key?
This is not a public feature
I don't think it should be a constant?
I would move this package to the `AutotoolsPackage.json`.
Do we have a test for that?
Isn't the name `timerIntervalInMilis` a typo?
This should be marked `rules` so it doesn't crash any params.
Please annotate return types with `<p>`
Please put the `Rule:`, it's a bit confusing to have a `conf` argument, but it's not a blocker for a user, it makes it really hard to see what it does.
no longer than 1.6.5
I'm not sure if this will be necessary.
So this is the only place where I've moved it from the server side?
This code is duplicated in 2 different places and it's in a different file, so I'd rather not do a separate `switch` statement for this code.
I think this should be done only when a notification is started. Otherwise, the user can pass in a null, but in that case you can't use `new: nil` or `new: nil` and `new: nil` if it were not. Also, if the `if` condition is not needed, I would just assign to `false`
@matt-gardner, does this actually fix the issue ?
Can we add a note on what kind of a user should have on this?
The `Email` can be removed here, since it is a special case for this value.
This should probably be a warning since `config` is `dir`, not `config`, but `config` is not.
This is going to be a bit weird. HPX::m_hpx_initialized is not being used. Is there something special about HPX::m_hpx_initialized being used? HPX::m_hpx_initialized is a function that returns a boolean object (it seems to be used for both)?
The correct way to check this is to allow both `RPCAddress` and `RPCAddress` to be `null` but the `is not` check is fine.
This import seems unused
I think we should start a new `restartFds` with restarts, as we do in the other methods
This is an unReport prone. I'd like to see a new-lineing rule that I'm not 100% sure.
I think we can just remove this now that we are passing the compiler through to compiler.json.
Hrm, this doesn't look right... But, I'm not sure why we need this. When I read this correctly, the `args` argument should always be `null`, so it should be the first argument. And the first argument should be `args = []` so I think the `!args` argument should be added, so it's always always `undefined`. I think this argument is only for `(args)`.
Shouldn't this be done in this PR?
concat do you mean None?
This should be changed to use `setJavadocComment` to be consistent with `setJavadocComment`
I think these changes are unrelated to the PR.
You don't need to change the default value. Just use the default value in `updateStage`
This seems like it would be better to keep the same logic in the loop above, and add a new line before it
Can we just use `primaryType == null`?
It's fine to check for connected and not connected.
This test is really testing what `partitions` does. Can you explain?
this method can now be private, it is just a method
if this is true, then I think we should just make this `if`
Is this supposed to be here?
Can we use `this.baseUri === null`? I'm wondering if we can just do `options = {}` and then do a `SwaggerPetstore['super_'].call` at the beginning of the function. I don't think so much either.
nit: I'd keep this as `@private`.
Why did this change?
Remove this extra line.
I think this should be set to false by default, since we don't want to be exposing this in the future.
Is there a reason why you removed the returned error from `nil`?
Is the "text/plain" parameter intentional here?
What's the reasoning for changing the default?
I think you should just add `configParams` here and below.
[same thing as in `fmt.Sprintf`
@jridgewell I don't see any issue with this.
I think this should be on the server side too?
Did the existing spanContext logic handle this somewhere?
Is it worth caching this variable into a constant?
For consistency with other properties in this file we should use `DateTime::createFromFrom`. It should work as-is.
This seems like the wrong place for this function.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This will be `>= 0` for the `target < 0` case.
This is an API break, right?
I would prefer this to be `@job`
Should we have an options struct for these and `v8s`? `types` is not the only supported extension name, so we don't have to add `v1` here, but I don't have a big opinion.
If the item last contact is not updated (and this would also affect the time, it's not required)
This is a breaking change and I don't know what is correct. It will be hard to find. I think the `isinstance(element, dict)` check should be moved into `isinstance(element, dict, dict)`.
why is this include needed?
This could be a single line string.
Should this be a debug level?
This is a temporary workaround to me, as I'm a bit worried that if `byte>.Count` is `volatile`, it will return `volatile` and thus we don't care about `byte` because `Vector<byte>.Count` will throw an `AtomicAttribute`.
why not use this in `get_rule_site_env_test`?
Line is too long. [82/80]
what if we called this `validate_resolve_reference`?
I think this needs to be moved down to the `#ifdef DEBUG` block as well?
it would be nice to have a test in the new code.
I don't know if we can do this, but if we are going to do this we should probably make `app/models/click` a constant.
I think the `defer` is unnecessary - you can just `defer f.Close()` without the second line.
Why do you call MinerCreate? It is not used anywhere, but it is in the world where it is used.
I don't think we need this. The channel ID is not a channel ID.
We should add a `@return` tag in the doc.
can we add a `@JsonProperty` with a non-blocking `other_IL_fr` and `@JsonProperty`?
this one seems to be missing some line here, and then in the line above it, I think it's ok.
Should we also include the `ContentMD5` in the blob class as well?
@deads2k the reason this is because we want to handle IP now, right?
`# `attr_value` value will not be `None` (it's a required attribute in the first place). The `#` attribute will always be `None`, right? If so we can just remove `#` altogether.
I think `_now_focused._last_hovered_link` is better here. I think `_now_focused._last_hovered_link` can be done in a future (or at least in the main `tabbed_browser._now_focused._last_hovered_link`).
should we make this a constant?
I don't see any new tests for this class being marked as internal. Can you please rebase and rebase?
I'm not sure we want to do that. It's not a good idea that this is a good idea. It's a good practice to have some sort of `.Get` method to generate the same name.
Can you add back the `@param` and change it to `float` and keep this getter as it is.
This is a breaking change for users. If this is the only change in this PR, please remove it.
Why `AccessNode` is changed here? It seems like we should only add to `AccessNode` and remove it in `JavaAccessNode`, no?
you don't need a class reference, please move this class to `player/sombok.py`
This is wrong, you can undo this change.
The `TDTWriter` is not used in this file. Can we remove it?
I would have just used the `AddProcessor` here
why `str()` and not `str()`?
second is not supported anymore.
`allow_stdout` might not be the best place for this, but `allow_stdout` might be used instead.
I'm not sure this is the right solution. The reason for the `api-version` prop is because it is a new file in the UI. It should be the version number for the `Sampler` route (which is a new one for the user, but not for other components).
I'm guessing you meant to use `push` instead of `optimizer`.
I think this was a bug before?
Is this just a code smell? I thought the plan was to remove `render` from the `DynamoModel` and not have a `get` call anymore?
This will only ever happen if c.acc is a pointer.
What if someone does a C++1111 have its own C++1111? This is a bit confusing, since it's a C++1111. If someone is using a C++1111, then the code will still need a C++1111, and the code is not very "shunmin" for a C++11 or something like that. I'd like the idea. I would prefer the latter, but I don't feel as strongly about it.
non-value is probably the right description here
This will be set by the time MAX_PERTABLE_ENTRY		 = 0
I think we should keep this as `Raises: false` and make `HTTP/1.2` private.
The code here is an error if `UseLane` is `true` but `UseLane` is `true`.
Is it worth making an issue for this? `iotex-proto/golang/iotextypes` seems like it should be renamed to `otex-proto/golang`
I think this can be combined with the one in `app_exit_event` above since it will be used in a few other places.
We need to be careful with this: > The user will have an `before_save` check that the `World` is set. We will also have to include that in the `before_save` callback as well.
nit: could be on one line, the `const` here is a `const`.
This should be marked as private, right?
Do you still need the MSI and MSIEnvironment? Is there any point in doing this?
Is this necessary ?
I think this should be `current_group.groups.group` not `user_group`.
nit: remove trailing space
Is this change necessary?
This is a breaking change. It's not used anywhere.
I think `v2` should go before `go.uber.org/yarpc/peer`
I'm not sure if we need to do anything special for it in the debug output. If we do, we can add `if err != nil {` check before logging.
I would prefer to have the `c` type `c` instead of `c` for `c`, and then just use `c.so.Native` here instead of `c.so` to match the other `c.so.Native`s
why is false initialized here?
Do we want these in this file? I mean, we could just remove them in addition to the line above.
I think this change can stay here
I would use something like: `converted to a user provided `super` to resolve an unhandled unhandled issue in `Property` but not the most recent `super` one. That way the `super` one can be removed, or even something that makes me feel like it will not make much sense for the first time.
We have an issue tracking this, so let's make sure there's a change to the process process at the start.
This name is confusing. We're mixing up the fully formatted formatted in the way it was and that it's easy to say about. We're going to have a lot of fully formatted formatted in the way we're working. It's a little strange that this is not fully formatted on the `failure_number` model, but it's a bit confusing that it's the most important one. Maybe `fully_formatted_lines`?
I'm a little confused by this class. It seems to me that the class is now renamed and not used in the other classes.
This should have been an `PolicyPolicy`
Why is this being removed?
This could be renamed to `telemetryEnabled` to be consistent with `telemetryEnabled`.
this method should not be exposed
This is a test failure - should this be `true`?
not required since we have no test coverage for this
I think you can remove the `app.SiteLocalSettingsPath` call here, as it will not be set anywhere in the code.
Why does this need to be a directory? The user could not use this.
This is the only place where we're returning `false` here. Should we instead return `true` instead?
Can we make this a hidden class or create an additional instance (like we already have it)? Also, can we create the `capIsNew` object in the constructor?
This could use a more meaningful name. `c`, `c.in`, `registerWithAccount`, `c.in`, etc. which is used.
I'm not sure about this, I would say it should be an argument to the test name that doesn't seem to match the test name.
Shouldn't we use 512.Join rather than just 512.Join?
Align `.generated` with `.format`, found one space before the method call.
I don't think we want the full list of I/O code. We should just have a test case where we're not using the `Code` anymore.
this shouldn't live in this pull. It should be done outside this pull request
How is this related?
Nit, could you change the order of the lines above as `fmt` and `errors`?
I think there's no need to include `resources` in the model. `attributes` should be enough to ensure that it is always present.
I don't think the context manager has an error here. The context manager is not used anywhere. The first one should handle it, which is a problem.
I think we should just have a small name `fragAlignRatio`, and not have a function `fragAlignRatio`.
Shouldn't we check if the host is False here?
This test should be removed now that we have an external `OAuth2Login` now that the `extensions` method has been renamed to `OAuth2Login`.
Why do you need to add the new parameter to the public API?
`StringUtils.hasArray` is not necessary here, as in `dupe.array()` we use `dupe.hasArray()`.
This should probably be `<=` for consistency with `spanReference`. See the other similar methods.
@bparees this was a bug, since we have `verdaccio/logo` already. We need to get the files for `web.logo` in order to get the owner of `zda.server.common.web.logo` in the code for v1.2.x to get the owner of `zda-server.common.js`
Doesn't look like we should remove this.
"path" -> "path" ?
Is this the only place where you use this function? I'm guessing you meant `self.schema.get(item_top_two)`?
Can we just use `title.IsNewUID` here? I don't think we need the constant for the class, since we don't really want the class to be in the test. The method is only called by a class and not a class. I would suggest `title.getMethodcdp_IS_on_commit`.
I think the URL can be built with `googlesitekit`, so we don't need to make changes to the `liboglesitekit` directory at all anymore.
This should be `secondsTimeSinceParent`
Metrics/LineLength: Line is too long. [123/120]
Please add a `item` attribute.
this is the one that enables us to pass the result.
Why do we need this change? `encryptionKeyGetter` doesn't really have any side effects.
Why are we not using this? Is it because the HiveClient_JNI is not part of this patch? (The problem is that the HiveClient_JNI is always called on the client, but in the future we should be able to remove all the code that uses this method)
I think we have already done this in `BuildStart()` and `writeConcern`. We should also remove this one.
why is the `ignoredDestroy` chain different than the other two times? I'd be ok with that but if we are going to make this pass, then it should be an `ignoredignoredDestroy` with an `ID` or something like that.
Can we add a todo to remove this?
Why not just add an `fileName` field here?
Since this is a private method, it can be changed to just `unless @keyonjie and we can keep the old name as well, and keep the same for `showindexing` method in a single place.
Is there an issue to track this? I'm not seeing a `expression` property is being used in there, but it seems to be a good idea to have a single word in the characters that aren't allowed.
Should we make it `const`? `Add ServiceHeader` should be fine
Should be `searchDirOnHost[0:1] == "."`
why this change?
I wonder if the exception is better than an empty tuple? Would make more sense to just check if the exception is not a property.
This function can be moved to a `Join` function, it's only used in a single function.
I don't think we need the `! hasExistingTag` prop here.
Can we also check for the `nextLinkMethod` property? I think this condition is redundant. We already have the original logic in `ValidateFunc`, so we can simplify this to `if (compositeType.Extensions.ContainsKey("nextMethodName") || this.Extensions.ContainsKey("nextLinkMethod", false)) `
I think the original is still a good idea. The new code is not needed anymore.
This is the only line needed for the `NETNETNET1_3` file to remove the space between each class and the `!NET1_3`.
I think we should add a `TODO` statement to add these as part of the condition and the message. This is a little confusing for me.
Missing semicolon at the end of the line.
please use braces for code formatting.
Can you move this import to the top of the file?
Why is it needed here? The `.update` is never called when it's called.
If you add the `RandTypeType` to the `icmpCode << 8`, you could also remove the `case_for_rejected(src, dst)` altogether, and just add the check to `RandTypeType_id` to the interface.
This was added to avoid unnecessary response response.
Can you use `ImmutableList#createFunction` here instead? This will result in newViewportHeight if `height` is `null` but `null` is not specified.
I think `extergeist/blob` would be better.
Ah, I see that this is a public function that's used by the server, which is not really necessary.
This was not needed
This is pretty ugly, but I don't think we should be using the `allowOrRetries` here.
This should be static too.
In a future PR, this will need to be `-1`, right?
Can we use non-integer type here as well?
I'm not sure if we need this as fetchUnfinishedExecutions will be used by the fetchUnfinishedExecutions class and not the other way around.
`Collect` should not be here. `Collect` is not the correct location for the `BSD` route.
Is this needed ?
I don't think we need to add this.
Should the name of the `Query` method be renamed as well?
Hmm, this seems to have been a very large change to `c.dirtyBcache`?
Are you able to do this? This is a bit weird. I would prefer the `if err != nil` as well
Same as above, I would use `SkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipSkipsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmallsmall
Can't we just return true?
Can this just be `"""`?
Hmm, do we need this?
@deads2k any reason why we need to define this in the database?
why did you move this to a test function?
It looks like this will be removed. I think it is not used anywhere.
Is this the only place that needs to be decoupled?
This is wrong place, `specifying` should not be able to see public subnets were found in VPC %s. The `log.Warningf` call was removed from the `Config::getConfig()`.
nit: remove new line
`import speech` is not used in this file
Is this a new "nessie" change?
I think we need the `Min` here.
This was a bug in the `ecs-nvidia` file before.
should we add this to the `vmy_s3.ts` and move everything to a separate file if we want to be sure this doesn't get merged upstream?
Wouldn't it be better to call this `DR_instr_disassemble` instead? Or is it because we would still have to worry about `DR_instr_disassemble` in the future?
Why the 0077? Should we consider doing a constant in the error message here?
I think `ByteCount` should be removed.
Same here: why not just use `!=` here?
Why is this needed? It's not used and is needed in `.gitignore`.
FileSystemTarget is not required, it will be imported from `FileSystemTarget`
I think it would be better to make `thread_id_t` either a `int32_t` or a `dict` at the top of the function.
This looks like a regression. I am a little surprised if this works.
Well, this is not a part of your patch-server..assuming we can't use `nnictl create`...`nnictl create`...`nnictl create`...`nnictl create`...`nnictl create`...`nnictl create` and create `nnictl create`... (See above)
Could you explain why this is needed?
This is a change to the implementation, I'm not sure what `values()` does, but it seems like it should be a different fix.
this should go at the end of the function
There's a typo in the name, it should be "ecdsa.PrivateKey", it's not that big of a "bug" thing.
This class creates a lot of operations, but `PackageEntity` doesn't have a parameter for the `Function`. I'd just call this something that describes it.
This is a very minor change, and could be done in a separate PR. But I am ok with this, just wanted to make sure this works for now.
This is the wrong thing. This is meant at all to check whether the file has the same size or not. It would be nice to not have a file in that file in the file at all if you've got a file in the same size.
this was a bug in the test that didn't run yet
I think you forgot the `=` here
I wonder if we shouldn't use `unless` here.
I'd suggest moving the condition to a try-catch
This seems like a great idea (or a little more explicit). Is this the correct way to do this? I'd say something like: `fips secs secs, e.g. `s/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US/en-US.yml
Why is this being moved from the previous version to the new version ?
This should probably be CoreCLR CoreCLR CoreCLR CoreCLR, not CoreCLR. Not sure if it is a good practice for the next major release.
I think this is not correct. It is called from a broker which is not a broker. It's called when a server was created, which means the object has been committed.
The previous code was only doing one line, so we could just do `ts.location.Errorf()` here instead.
Should we add an option for `IF_ARM()` to this function so that users know they're always setting a new one?
Why is `maxResults` necessary here?
Why did you remove this?
This should be moved down to the top of the file. You could use a `try:except` or some `return True` instead.
`urlencoded` might be a better name? maybe `urlencoded_TYPE`? Or `urlencoded_TYPE`?
this flag will need some update. If the flag is not a part of the page, the flag will be deprecated and will be deprecated.
This is not the same logic as in the keymap, but I guess this is just making the tests slow.
why remove the public ?
I don't understand the error message. It looks like this should be `err != nil` instead of `err != nil`
I guess you meant `Rust.\n` here.
When would this error occur?
I don't quite follow this sentence. What does `Register._UNSET_NAMESPACE` mean?
Should we just log something about the error? What happens if there's a user specifies a corruption and not the word...
It's a little confusing that `minify` is only used for the `middleware` backend, but is there a reason for that?
can you change this to be `provider`? It's not necessary to pass a `provider` argument to `config`.
It is still useful to have this set in a `node` section.
This is a bit weird - the package `3434`, and the `3434` is the same as the `iotex` package, so it can be moved down one line to `3434`, and `3434` is the same.
This file has the main problem.
I think this should be in `src/service/message.go`?
Can this be reverted?
This is the only place where you'd want a different filename than just a "PublicKeyFile" (and the rest should be "dedded", I think). I think it should be consistent.
Can we add a `omitempty` field to the `*`?
Does `to` need to be checked against null? It seems like a string is missing here, and is not a `null`.
As discussed offline, I don't think this namespace should be in the namespace namespace.
I think we should not use the default here, but I'd be happier if we don't use it, I don't know how to do that
The linter will need to be fixed, but the linter will need to redefine it.
Is this supposed to be a different constructor?
COMMAND -> react.
why the name change?
You could just have the key `index` here, rather than passing the key.
I would prefer to see a test here (i.e. not only testing main point)
I'm not sure we should add an assert here, to explain why we do not want it
The <msg> Please change `3.25rem` to `font-size: .7em` as it is the same as `<a>` tag.
I don't see where this is implemented, is it? Or is it just me that jinja has a retry instance?
`Vector` is not needed here. The ArrayList can be removed, and the arrayList doesn't need to be duplicated.
Can we make this a hidden constant so that it doesn't have the exact same effect?
@stuhood @mmaximus, I think this might be a good change. I'm not sure about the 2019 dependency. In theory, the copyright line of the 20ms is that the 2.0 is a 2019 dependency. The reason we have to change the copyright.
Could `getBitMask()` be used directly ?
This is the bug fix. The issue was that if a ReadOnlyTxProcessingEnv is not mapped to a subset of a different cluster and the next one is not created, the second one is going to have been removed. Is this a good thing?
Should be "not in"
If we are going to have a `header` package, then we could have a `header` package with the `.spec` package.
I think this should be `InitCodeTransformer`. The `initCodeTransformer` is used for the `initCodeTransformer` argument. If we want to support it I think it should be safe to pass this argument to the constructor.
This is a change that will be fixed in a follow-up PR. We should fix it in a follow-up PR.
Can you use the `_get_ctu_failure` helper?
I'm not convinced we want to keep thesummary for this case, but the others are just a simple string, I think.
I think this class is missing the declaration of `MvvmCross.Platform`
I think you could just use `import typing` here. We don't use it in our code, it is better to use `const typing.connect` for example.
I'm curious, why did you change this?
I'm pretty sure this is the first step. The `-` environment variable should have been left in the previous iteration, but I don't think the "old" section should be left.
Why is this false?
This is the wrong way to do this. `if (dataManifests != null) {` is the same as `doManifests != null`
I would call it `cappedThresholdChecker` to keep all the others in the PR.
Why do we need to import antrea here?
@fowczarek What is `ActivitySource` used for?
I think we should add gas price in the validation check and make sure it's not written to other transactions
I think it's a little confusing for a method to return an instance of the process, but it seems like this function is only called from one place, and is also not used by the code in the `Test` method. Maybe there is a reason this is a different issue?
Why not `ExceptionException`? It's important that the exception is in the Exception.
Why is this using a theme?
is this actually used?
Line is too long. [85/80]
This constant should have the better name
Nit: I'd call this `                         Supported STYLE values:\n"` as it is the same as `cpp-field-case`. It's a bit odd that `upper` is the proper C++ code for each C++ code.
This is the only place this code is used. I'd suggest a different name for the file name.
This is a breaking change - we don't want this in your article, so the changes in this file are not necessary.
I don't think the `exit` should be here.
A Main actor must be "A Main actor"?
Should be `zk-read` for consistency with other settings that have this parameter be added in the table?
you changed the type of tpe in order.
I would put the `TODO` here to avoid duplicating it
This is wrong. You can just use `checkcheckCLI` and remove the `if`.
There's a matching `printf` below, but it's not actually unfortunate to add it to the functions that are used in this module. I'm not sure how to fix that though.
How about 'non_iterating_code' ? (Because the `__({}` list is not defined in code)
Why the change? I thought we were going to remove the assertion?
Does this need to be an `type`?
I think the convention is to have a more meaningful name
Would it be possible to add the `.isTrue()` case to the caller?
This should be split across multiple lines. The code is not good. But it might be better to use the new one `q found` or `multiple`.
This file is a bit confusing. Maybe we can remove that?
@mjkkirschner this change is a bug in master, as it's in master, and we're in here.
Can we also include the annotation in the package?
This will fail if the path contains a path in the user's config, not an absolute path, but in the join_opts
should we make it clear that `SARetSegmHead` is the name of the namespace of the backend, given that we're not going to use the name of the namespace?
It would be good to have a constant for this instead of a class name.
I think we should add some more context on this.
Should be `getImageContext` and then `isSupported()`?
Oh wow, this is good to me! :+1:
should we use one of the other?
I'm not sure if this is the best way to do it?
Style/WhileUntilModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This is only here because `auto_fire = false` above is set to true. You don't need the variable at all.
I'm curious why you didn't do this in the first place? I thought we had to do that in the past
`value` is a value.
I'm not a huge fan of this name, since we're already using the default. Can you check?
I think we need to remove this dependency and add support for the services to the `secrets-ssm-environment-variables.sh` in the future.
I don't think we should be calling this `protobuf` here, it's used by other packages (either the same `v1` or `v2`), which is why `v2` is used for `v1`.
You could just call dialog directly, and then you don't need this action at all.
I am not sure if I should just remove the `pytest-xdist` and `scikit-learn`.
Why not move the other one down below?
I don't think you should delete this test. The old code had it's own test that it didn't do anything, and it didn't seem to have been working without it. The new test does not have a "not found" error and it still does.
I'm not sure what the best term would do here is. In other words, `capabilities: global._googlesitekitUserData?.permissions` is the default value, so it is not recommended to specify that default value.
Do we have a `log_capacity` flag for the logger? If so, can we use `log_capacity` here to indicate the length of the log?
I think this is an improvement. The wording should be more clearly in case of an ` Flags` and an `Fileution`: that's the thing that's being used.
@zyme I noticed that there were issues with the `cmd/base.tsx`, but can you check that this doesn't break anything?
Maybe we should add a key for it to account for the key name.
Is there any reason to define a constant for this constant? Also, is it worth adding a constant for all the string literals to avoid code clutter?
I removed this because I'm still not sure what the function does, but it seems to be used to be doing the same thing as before.
This is a boolean, so it wouldn't be better to use it in the method.
"Invalid" seems like an odd choice for users.
Shouldn't we also change the other tests in your remoteQuery to return a `.ResourceTypeService`?
Trailing whitespace detected.
@danielmarbachhuber I think we should keep this here and add the `createViewModel` logic to that class.
nit: Can you call this `disable eslint-disable jsdoc` instead of the `autoColumnSize`?
We don't need to do this. Just use `Row.NextWithContext(Great.NextWithContext)`
Do we need this in all places? Can we make this final and just have a `AddressDetails`?
We should probably have some doc for that.
The previous code did this automatically, I think it was wrong in the first place. The old logic was not showing the default value.
Why not `claimJWT`?
This file should be deleted
The only thing I'd love to see here is that if you don't create a new recipe, you can just do `&spec != null` and check that it is in the caller's `recipe_id`.
Please add empty line above.
Why do we need this catch block?
is this an app-generated string or a full string? if yes, could we also validate the actual content here?
I'd rather see the `CacheChange_t* change` be part of your next PR.
I think this should be a different stream in the interface.
Why is this needed?
Can be reused here?
There are more places in the file that use this `_replace_replace_and_maybe_retry` in this PR.
Does this work if you remove an input field? If yes, then it would be better to make the field clearer and make the field `""`
We should probably use <msg> DefaultHttpContext.DefaultHttpContext instead
Why is this being removed? Is this because `assert` is a `char`?
This is a bit weird, maybe it is worth to call this method `cache-decorating-method`?
you should be using album_info in cmt msg to set a value in cmt msg
Add to the top of the file, otherwise this will be removed from the future.
We should add a new function to `isHiddenWithCSS`
Why the comma if there is no requirement?
I don't see any reason for this. Can we have it as an option in the method signature?
This change is not necessary, since it will be in the context for the closure.
I'm not sure what this is trying to do
Please revert the changes to this file.
We should not do this for our own `torch.jit.annotations`s
nit: you can delete this line.
This seems to be an internal API change?
Could you please remove these changes from the PR? This is a test and is a bit confusing to have.
Can we add a note that this should be ignored and should not be ignored anymore?
Should we just use ConcurrentDictionary<string, string>() instead of ConcurrentDictionary<string, string>()?
seem, you can remove the "ecs" part
Why was this change made?
I think this is going to fail if a endpoint is disabled. We need to skip this endpoint.
`createElement` is now an error, can we remove this?
It's not a big deal, but if you are going to add this to the other PR, you can remove that function.
I am wondering if this should be called `ExpectedCondition` instead of `String`
Can you also add the `deviceID` field to the `Properties`?
I think this should be a `name` and not a `count`?
same here... just remove the spaces.
Please add a trailing comma, otherwise this will crash anyways.
This is a BC break, right? It seems to me that it is not used anywhere
I'm not sure if it is possible to have OSError without OSError
Why is this being removed?
@zcbenz are you okay with this change?
Just to clarify, is `progress` the right thing here?
Please remove the empty line
This is unfortunately wrong, as `Init` will only be used to set the `fonts` value in the `waves`, so I don't think it's necessary to add `Init` in this PR.
Are we removing this code?
@mikeshultz did you check the meaning of this? I mean, you were just calling FlinkTypeVisitor, which is a public method. I don't see why there is no need to change the FlinkTypeVisitor at all?
This looks like a regression. Why did you change it?
I think this needs to be added back to the caller and not the implementation.
FirstN node is not set.
Why not `getTypeName` and `getEndpoint`?
Let's add a `_` prefix to the `padding` string so it can't be displayed in the future.
Is this something you plan to add to your `Context` class and add it to `Exporter.Context`?
Just curious, why the change from `checkpoint_config` to `PALETTE` here?
We should avoid the use of `ver_test` in the `views` module.
We could probably have a test for this, but this spec feels like it should be a spec for this spec.
We should rename `AccountState` to `AccountState`.
Do we need to call `spack_approval_notice? approval` here?
What is the purpose of adding the `tracer` option in this PR?
We should make sure the field is not set as a URI in the constructor. If the URI is not set, that is fine, but it might be a bit confusing if someone calls the URI.
The `long:"ex" description:"Exclude any targets with matching labels"` is a little bit misleading for a new description. Maybe `long:"ex" description:"ex" description:"ex" description:"Required": "long:"Required": "public 100"`?
Why are we changing this?
please revert changes to this file, as this is a breaking change.
This one should have been removed.
Not really your fault, but do we care about breaking changes to the json format?
Should the `cmake-apis` be used here?
I think the changes here are not necessary.
this isn't used
The record_get_field_value calls record_get_field_value and record_get_field_value calls record_get_field_value calls record_get_field_value, I think this is not a good idea.
I'm not sure that this will be correct.
Is there any reason to change the value from 2.0 to 2.0?
Is this really the right version?
this is not needed since it is used by the `run_open` method above.
Should probably be `keys`
Why is the assignment necessary? The variable should be `(MapRouter,nil)`
This is a bit of a nitpick, but I think we should move the call from <msg> get_instance to to to after the call to `do_action()` to be more generic. The same applies for other classes, in the codebase.
Is this supposed to be https?
As this is a private method, it should probably have `_find_elements` function.
I don't like the new import. I don't think this is a good example. It seems like we should import `docstore` directly from `Rails.BaseTree()`.
I'd make the constructor `@Nullable` and add a `TODO` to the interface to get the null-check.
These arguments should be removed.
Why not use `mtx_isEmpty`?
Please use braces to make this a bit more readable. Also, you can use a single if statement instead of an array.
Please include the short description of the `str`.
These lines are repeated in alphabetical order.
why did you remove mining delay?
`in_progress?` is probably a better name for this.
Can we remove the ` Flag` prefix completely?
Should this be a role instead?
I don't like this. The `self.get_argument_from_call` is the pathlib for `self.func.attrname == "encoding"` so it will be defined in the function `self.get_argument_from_call`. I don't know what the `self._attr` function does here.
Should not be in the `recovery` package, but in the `api/server` package, it is used in `errors.go` as well.
I don't think this is the right place for this. The `chan interface` is a required field so it can just call `close()` if the first argument is a no-no-source struct.
Should we check the context here too?
Could you update the docblock as well?
I think this would be more efficient if `forceFragment` is an object
This if statement is too long, because if it is too long, we can use a conditional with a single conditional string.
This change is not necessary.
I think you can drop `.toClick(`
reffedHeaders.includes should already have a comma here
Is there a way to detect this functionality with a `list.Items`? I'm wondering if there is a better way to do this, but if we ever want to make sure we don't get a `ArtifactDevice` func, we can just get the error message.
can you add the license header here?
Please include alphabetically.
This is a nice nice nice line of code.
Is this a debugging artifact?
@michaelkuhn Do you know what happened here? It would be nice for the tests to run in parallel if we can't run `info` in the tests.
I think this should be `if mset.mu.Unlock() == nil` instead of `if mset.mu.Unlock() == nil`
Does this change the semantics of the `clear` in `pixman_region32_clear`?
No reason for this to be a issuer
This is still a part of the fix, right?
I don't really see this version in the PR.
If len(cnb) > 0 (cnb[0])) is returned then we don't need check for len(cnb) > 0
This is the only place that uses this interface. Why are you changing this?
This is a pretty big change, why not just call `go go.manage()` in the go code and in the other go code?
This is the only place where you want this change, so I would not change it. I'm not sure if the only way I can change this is, but I think the reason behind this is because of the first `procCode` that I'm not sure is the best way to do here is to use `sprintf()` for the first `procCode` method in `build()` (or maybe the `get()` method) in `build()`?
can you add this only if it's in one place?
why `str` and not `None`?
Why do we need this function, can't we just do it in `modules.go`?
Why do we need this? The current implementation is only 3.
I think the check for `stopped` is unnecessary.
I'm not a fan of this name, but can we have a better naming for this? A future Asyncity is that if we ever call `is_object()` it will be a bit confusing. I think that this is why the problem is that the problem is that `nnictl create --defaultalalhetics --no_t` will not be called for `nnictl create --no_t`.
We should be setting the standard library in this library.
I'd prefer to keep this as `ssm-parameter-store`, but as I can see the need for a new link to the service for making it clearer.
We can probably remove this `find` method as it is now now that the methods are `OtlpMetricsExporter`, and the methods `find` are `OtlpMetricsExporter`, `timeExporter`.
Why remove these?
Is there a reason why we need to do all these? I'm assuming we can just delete the code and do `pe_defaults` without being explicit, and delete the code.
This seems to be the same as `dispatcher.beforeClickOn()`? Isn't that what you're passing in in?
If this is an `else` block, should it be an `else`?
I think we need to remove these interface since we have the `get` method already.
why do we need to add this here, multiple ragged arrays should be enough?
We don't need to setCleanupOnError here as we are not using it anywhere outside of the package anymore.
I think it's safe to keep the original implementation and just create the instance variable.
Why are we calling calling GetALEECHCHANCE instead of just the variable.
why not using `CrossOriginFilter.class` instead of creating new `allowedOrigins` ?
Please delete this line. I don't think it's needed anymore.
I'm not seeing the use of `ZipkinActivityConversionExtensions` as a global setting here.
I'm wondering how this `getResultType` function could be used to ensure that the file type is not CameraResultType, but not CameraResultType?
revert changes to this file
This is not the same as `mail_to mentor_email`, right? You can just call `mentor_mail_to` directly.
nit: `null` as default here?
This test is still running on mobile because it was not running on mobile because the test was disabled in the `expect` method, so I removed it because we now assert on the actual actual errors and we actually do not expect the errors and we're not doing anything to test.
I'd prefer if it was just `github.com/aws/amazon-ecs/agent/asm/factory`.
I think this is fine, but I think it's better to move the `run` method to the `Customize` function.
nit: this should probably be `isinstance`
I think we should just pass `super(tableName, ops)` to the constructor. It will be a bit slower.
Please use a strict comparison
Please add a check in the `o` param.
why this change?
I would use `log.nodes('port', 'port');` as it's a constant and will be a little more efficient
I would prefer if you used "You do not have permission to download file". It's better if you want to change the description to "You do not have permission to download file".
This change makes me think that the previous behavior was to restore the thread now (e.g. a different thread). I'm not sure why this was necessary.
is this necessary?
Do we need this?
@garyli1019 This is a fix for the next PR.
Can you throw an Exception here instead? The exception thrown above will be thrown in this case. Also, I think we should be able to remove the exception and not throw an exception.
I'm not sure about this. When `inputs` is an input, the first argument is a `data_type`. I think `inputs_type` and `data_type` are guaranteed to be a tuple.
Do we want this default value ? I mean, is this intentional or is this intentional ?
I am wondering why it was even possible to get this from version.x?
This is a bug fix. We need to change the type of Enum to false in the constructor
I don't understand this? Why do the ad is required? Why are we doing this?
I'm a bit confused by the interface `ParamView` is not a `DataView`. Could you add a `getParamView` method that is passed around, and then provide a `ParamView` interface?
can we also call the "onevent" in the name?
I think we should keep this for now. Otherwise we will have a better solution in the future.
It is a little hard to see a problem here... I think we should use `check_for_free(guard_pages)` to make sure the above code is actually used, instead of the above code.
Should this be `non_pending.map` ?
Why is this here?
@jackfrancis is `KILL` an expected list here?
This should be `mobile` too.
Could we use `param_list_from_params` here?
This is a change of programme and makes me think we should rename it.
Nit: This line is causing the test failure.
poS is a generic attribute.
Use the new Ruby 1.9 hash syntax.
I think this was a bug before?
This file is no longer relevant with this PR.
the `<div class="row">` is not a template, you're not using it yet in the view. This is a good candidate for a template for those.
I don't know why you don't do this, the `reloadCache` should be initialized at all. The caller could check whether `topicCache` has been loaded, and this will throw an exception, so I don't see any code using this.
This looks like it's a duplicate of line above.
You could also do `fname.startswith('/'):` here, and in the other places you check `os.path.join(__file__)`.
Extra empty line detected at class body end.
nit: this could be a local variable.
If we're not gonna make a lot of noise, I would rather say "Zero_count Argument", but the latter feels too strongly
I don't think we should be changing this function.
Is this a `str`?
Should use `archer` here.
I think we should just delete this line.
You don't need this class. AllDataFilesTable already has a dataToString, so don't need to pass it in as a separate field.
Should we add a check to make sure the limit exists?
If we are going to get rid of the `Params` field from the `CCEPackage`, then we should have `CCEPackage` to the `Params` field.
I'd prefer a single test for this as well
I wonder if we should just have a test that checks the state instead of just the repo (and the one in `testimonial_thumbs`)?
Just curious: What happens if the `flow.toObject()` doesn't have a `execution` parameter? I see that `index` is set to `null` in this case.
Since we are only using `icon` now, do we need to add `ico` here?
The exception message should be more specific. Also, I'd prefer to have the exception type be more specific here.
The name "names" is misleading. "names" is a name.
Shouldn't we also call this `AppendRICS_MODE_COLUMN_CONF_PREFIX`?
Please add a space after the comma.
Please combine these two imports with a period at the top (same with the rest of the imports).
I'm surprised this works. But I don't see this in my PR. Can you please implement it?
Why did we have to remove the `at top` duration, and not have the duration?
Can we also do the same for `valid_flags` and `remove_i` here?
I'm not sure how to do the right thing here. I would like to have this be configurable.
I don't think we can do this. The only way we can use a single file name would be to test that it's not used.
The random numbers should be kept in a constant.
This is a bit odd - we are not going to want to be very slightly more complicated than just doing an `if o != 0` check in case there is some reasonable code to do and let user know what the user actually had to do
I'm not a native familiar with the `filecoin.types` import - I'll have to move this line up so the `go-ipfs-files` directory can be grouped together.
This is not the right place to put this. The `instanceof` is the only place we need to do this. The code that uses `instanceof` is not the only place that is called for the same reason.
Let's not use the `sun` import for this, it's not a big deal. You can move it to the next `Game` package.
This is an interesting one... I think the `sp.OnStart()` function should probably return a tuple of both.
Do we want to add the `UpdateSnapshotInfo`, maybe just in case we get an error from `UpdateSnapshotInfo`?
Do we need to check that ` DefaultLogMessageRateLimit` is not set here?
We should check that the error was set in `assert.Equal` here.
I would go ahead and remove the reference. Otherwise I'll change the description of the include.
This is a no-op, right?
if block ends with a return statement, so drop this else and outdent its block
This should be the other way around, maybe a `overflow_max` function
It's a little strange <msg> It's not a "spec" but a "spec" thing. I think we should be consistent about what "spec" means.
I don't believe we actually need to remove the `pcapdnet` import here.
What if there is no source?
Why is this needed? I don't see it being used.
We should make sure that all callers of this are in a single feature that can be reused/unified.
Why did you remove the lines?
Just to make sure I understand, this is the first line here. We must not change it unless there is an alternative. We should at least change the line in the file.
If the config file is `os.path.aws`, this module could be deleted.
This will only happen if `child.length` is a `nil`, not an extra `reverse()`
why do we need this factory?
I'm confused, is it safe to not do this anymore?
Is this needed? Does `_` have the same `_address1` already?
why change this one?
I don't see where this test is actually used...
I don't think this is correct... there are a few of these if the call sites don't have a `in_dygraph_interpreter` or `in_dygraph_interpreter` on the `before_action` branch. I'm pretty sure this works because I'm not sure if it's safe.
should be asserted?
is there any way to avoid this?
I think `get_meta` method should return `Optional[str]`.
This is needed for all the new queries, but the new queries have been changed in the DApp.
I think it is good to keep track of what properties does, and add a TODO to fix this in this PR.
This is a bit odd... Maybe it would be a good place to do it, to do `@unresolved_targets[t_name] = target.id` instead of `target.name`?
why is this needed?
Is there a reason we need to keep the check here, but return value?
I would move this to `build-system/passesRestrictions` to make it more clear what is going on here
Why not using an interface for the feed?
Why don't you do a call render() when there is an empty list?
Why not `getCouldSupported`?
Is this a typo? Should it be `constexpr`?
This is not needed anymore.
This change is not related to the issue, but it is not related to your PR.
nit: `FileUtils::makeDir` could be used to set this to `0.0`.
This is not a boolean, it should be changed to `List<List<T>`, and it will not work for all existing targets.
This is a little hard to follow with the `isset` check on line 730 above. `getHelpText` is not defined here.
Is this change related to the rest of the pull request, or did we just update the doc accordingly?
Can we add an option for that?
Please use `if (Union(Union(Union))`
Can these be `final` rather than `final`?
Is this class really needed?
Can we add this to the changelog as well?
You should use the `memQuotaRatio` variable instead.
I don't understand this?
Why is the `32` in all caps?
This will be very likely to break existing users of the code, and it is not a blocker for users, and the user could have to check for `Union[T], List[T], List[T]]`. I would also prefer the name `Union[T, List[T, List[T]]`.
Should we also include the error message in the message?
Is there a reason we need this config? I'm not seeing we are using `Platform` as a string, and we can't use a `Platform` in the config.
Can we change this to a more descriptive name like `unittest/external/test`?
why did this change? i would expect ac.SigningKeys to be nil if it's not set.
I guess this sleep was not correct. This is a test, and it does not make sense to sleep, and then sleep with sleep, but we don't want to sleep here.
You are using a variable to store it in a variable. Can you fix the indentation?
@becker33 can you check if ``OrderedDict`` is a `torchvision.io.OrderedDict`?
This is a breaking change. The JSON JSON will need to be stored in the constructor.
I know this is just a minor cleanup, but can you add the `file` property to the `bzzFileDownloadHandler` as well?
what's the reason for this change?
What was the reason for removing this line? I don't see it being used.
use `assert.EqualEqual()` instead
Does this change need to be in?
Why not `new Namespace(new String[] {})`?
I believe the original code was not working. It does not look like the old code is working. It does have the same problem as the original code, which I was trying to find out for this code.
You need to use `Config::GetData` here, and below.
Is this for the advantage of the service being thrown by the service?
This is not correct, but the tests are not passing.
why not just `CommitAndRestore`?
I'd be inclined to use `std::unique_lock<std::mutex>`.
Why does this need to be added to the docs?
I think we should use the `notification_list` helper here instead. We could have used this in the `BaseTracer` class to reduce the number of times.
can you make the logger a const, and use it here?
This seems to be an unrelated change?
I would prefer to keep it in this file: `if (name === 'string') {... }`
`package p2p` -> `package p2p`
I think it is still useful when the block was created, but it's not in the `IsPrefetch` block.
I'm not really sure this one is worth the troubles with the code, as it seems a change of behavior is a good thing to be able to change to `sql` and then a `sql`.
I would prefer that you'd be able to have the body declarations as a global.
why is this a required property?
The default is `null`; this table has no default value.
`# `attr_value` is not required as `attr_value` is not None
Should we add `addon` to `amazon-ecs-cli-v2` so it is compatible with the `isaddon` imports?
Trailing whitespace detected.
What is this change about, @mikeough ?
I think this is the wrong module. You can do `Symbol.from.Symbol(Symbol, Symbol.iterator)`.
This is not correct. If the lock is not closed, the lock will be closed and not closed, otherwise it will be closed. So this should be an if.unlock (the lock will be closed when the strategy strategy changes anyway, otherwise the lock is not closed)
We need to make all of these magic numbers into constants for clarity, like `[32, float]`
I don't see any use of these in this PR, but I won't be able to fix those in this PR
why is this not an icon with the same `BaseEpochs`? It would be more consistent with `BaseEpochs` in other words, e.g `this.get('store')')`
I think you can just remove the `role` variable and do the following `return false;`. I'm not sure whether it is safe to just do `if (role && node.getAttribute('role') !== 'banner';`
should be calling `setCore` only when `core` is `null`.
This is wrong. You should use `[a-zA-Z]` instead of `__iter__`.
import \* is not recommended.
This should be a link to the user that uses this. We can't use `token contains an invalid number of segments`
`_gradient_gradientgradientgradientgradientgradientgradient-Unused` ? `_gradient_gradient_gradient` ?
Can we move this to `iceberg-record-batch-size`?
Can you please remove these lines?
I don't know if we actually need this since if we're not computing this, can we just make it a constant?
Why did you change this?
I think it's fine to remove the second sentence as it's not used anywhere else in the PR
I would rather see if there are any more exceptions or something that may not have beennull here.
This should be removed.
Indeed, if the first place in the logs has to be kept, we should log it and not log it.
This change is unrelated and should stay in a separate commit.
I think we should remove this part and just say "AWS_BOUND_SA_SIGNING_KEY".
@alalazo Is this a good idea to use the `blas.h` as well? Or is it just a `blas.hpp`?
This should use `nano::pub_key` instead.
Maybe `ignoreUndefined: false` as well?
shouldn't this be anything - not anything - but it's a tad more verbose message?
why we use a connection.Slice here?
This is just a cleanup in the code, not strictly necessary, but it seems to be related to this PR
No need to add the `getFeed()` method here. You can just use `setItemVisibility(...)`
I don't think we should remove this, it's unused.
The default value of `docstore` is `i` (which is the default value of `i`). It is `docstore.i` and not `docstore.State`
I think it's better to make this a helper method in `Report.py` and call it `self.build_system_info`.
I think you forgot `startTime` here :)
Can we have a better name? e.g. `grc.mfout.printf("%s", q)`
I don't think we need a class prefix here. I think we don't need to do any validation on it, because there is already a default index.
This should be a warning since we don't want to be using it anymore.
I guess this is not needed anymore?
Is this needed?
The new version of this test is a bit confusing, it's not really testing what the problem is, and if it's just a single message you are testing. Maybe a different exception is necessary, and then just a bit more complicated.
I think this should be `h2o_quic_close_all_connections`
This could probably just be `Object.isObjectEnabled()`
I think this could be done with the type checking checking `options`
Please change to ``count``
I don't see any reference to ExpectedBalances in this file. Can we remove them? (The type annotations is a variable, not a variable)
This change doesn't seem necessary since it's in the `RLock` callback.
can you make this change as a separate change to createClient?
I think it would be nice if we could make this a function and call it `error`
is this change intended?
Why are you removing this?
This is the change that affects TF providers. I think we should keep this around.
Shouldn't we do this as a `HttpServerErrorStatuses_ERROR_atingSystem` instead? It would be clearer than making it `internal`.
This should be `return flb_input_get_property("true")`.
Does this need null check?
Since this is a separate method for simple test, can you rename this method to `async_async_async`? It's not really important that we're not testing that the async method is only called on each test.
I think you can remove the default value entirely, and remove the default value here.
why do we need this change?
We don't want <msg> We should probably make this a string string, as it's not being used anywhere else.
Should this be `if(headersKey != null)`?
Why did we need this change? It seems like it could potentially just call `schemaVersion` once?
You need to check that version != != NULL before calling the method.
The only reason why `node` would be `aria-hidden` is here is if `aria-hidden` was `true`, which would cause `aria-hidden` to be `false`.
I know this was already here before, but it seems weird for me to test for saved output.
nit: should this have _currentProcessMachineName_ as well as below so we can still keep this field as is for _processDataPoisoned?
I don't see a reason for this change, but I'm wondering if we can have a better solution to this.
I'm not sure we should add `get`s here. When `get-free` is used, it's not the one in the ganaget.
This is not right. It's an invalid query that isn't a boolean, but it's a feature that doesn't exist. You can use `status` instead.
I would use `generate_list()` here instead, since this is a special condition.
Is this used?
Do you have an example of how this could be used?
Why is this needed? Wasn't the `HIVE_MAX_PRECISION_ALLOWED` included in the platform platform?
should `UpdateProjectSingleSignOnResponse` also be passed in?
Can we add a TODO to remove this ?
shouldn't it be: repository_id ?
This is just to remove the array.
can we just call this powershell?
I'm surprised you didn't have to do this, but it seems like you could just get rid of the `toLowerCase` check.
There's an `KeyError` for now.
I'm not sure if this is the correct solution. The `onBehalfOf` function can only be called if the `Value` has been initialized.
This is a bit odd, we can just use a `**kwargs` instead of a secondary flag.
I think we can remove the `RLock()` call here. We already lock in the `RLock`.
I would use a `getBoolean("s")` here.
This is now done in the parent context, so there is no need to remove it here.
Is there a reason we can't use these constants?
It's a bit odd to have a method named `mqtt` as a parameter here. Can we do this as a method on `name`?
Is this actually the only place it was used?
why private?
compression=on is a bit odd, can we just add `compression=on` to `server.go`?
Metrics/LineLength: Line is too long. [97/80]
This if block is redundant IMO
Warning is not really used anymore.
This is a breaking change.
This is not a bugfix. It should not be here.
Why not use the logger?
I'd prefer to see this be a separate commit
This is the only change in this PR.
Don't use semicolons to terminate expressions.
We should only do this when `ls` is true if `gcgc` is true, so we don't want to create a new error. I think we should be able to make `gcgc` a `event` so it can be set in the `ls` package if we can. In any case I'd prefer to not do the `event` here.
this should be `new String[]` instead of `library.yaml`
I would have named this `r`, since it was already a type.
Why is `readonlyNode` removed?
Can we just use `// ShouldRetryType`? It looks a bit strange.
@stephenroller this is the best part of the API. It is a breaking change. It seems we can use the `service` instead of a `Service`?
This file is not in the test
Is this really needed? I thought `OracleAPI` was already being used in `SideToken()`.
it looks like this can be an `Extension` route and not a blocker
This change is not related to the PR, but it is a breaking change.
I think you can remove this
I would prefer to have a separate `wikipedia` option to be consistent with other commands that contain this string.
I'm not sure this is the right fix. If the code in the `RAM` has to say anything about it it should be a separate `err` of this function. It's not very useful to have this function either.
This doesn't make sense, since there is only one `set_code` method.
This is not correct. It's a private function, and it's not really needed and can be reused.
We could probably get rid of this too.
I don't think this is right.. but the `getPropertyValue` should be used in the `else` block.
Should this be `getKey()`, `getKey()`?
How about `AdoNetExcludedTypes`?
Can you import the `ndm` above?
I think this is just a test, we are only setting the state for the state in the state. Can we do it here instead?
This class should be private.
This is not the same as the rest of the code that is being used, is it?
Do we need to also clean up `EnableCleanupReplicationTask`?
Why was this needed?
Should we make it `tolerance.count` or is it something else?
I would prefer a separate PR to fix this in a separate PR, as this PR also removes the changes from the PR.
`.then(executor__.get(), [self = ...` I don't like the responsibility of the `.then` here
Isn't `IsIntegrationEnabled` sufficient?
We need to keep this, as this is a field, not a field, it should be a field.
Why is this being made public?
I think this is the only change needed, and I think it's not clear that it's only here if we have a nil pointer in `ChaosImpl`?
"... count"?
I know it's just a cleanup but we might be able to remove it
Is it possible to use `Object.hasInstance`?
This is not needed, we should not be adding new options into the `config` package. Instead, we could just have a `from` setting in `make config` which will be the default.
Why was this added?
@sparrowDom Just a thought, we can change all of these to `pubsub` and `pubsub` from `pkg/apis/duck`.
I'm not sure we should do anything special to make this work for now.
I think this was a leftover from debugging, it's not related to this PR
I think this should be a `common.Close()`
Shouldn't this be done at the same place in `app/index.js`?
why do we need this delete?
Can the original code be removed? `CMAKE_SOURCE_DIR` is now unused and `CMAKE_SOURCE_DIR` is deprecated now.
This should be a constant. Otherwise the value will never be read until a pipeline runs.
why is this default public?
These should be moved to `errNotEnabled` since the `errConfig` is used for the `Checkpoint` object.
is there a reason to make these fields configurable? if so I would just remove them
I think this is not right. The code below will still run on each request, but not on the next request. If you look at the `nextRecover` request, you should check if `duration` was `true` before calling `getStart()` which is the first run, and then just check if `getStart.Before(nextRecover)` is `true`. But if you want to keep `nextRecover` and `nextRecover`, then we don't need to check if the duration is missing.
I'm not sure if it is worthwhile to just `!this[kIsMaster]` here, as it seems like it should have been in the first place. It's possible for a second time we get to the right `beforeHandshake: !` in the first place, and we're only checking it on each of the cases where it's in the first place.
I'm not sure we want to use this in every single test, but I wonder if we should just have a test that has a different behavior of the `cancel` method in the `cancel` method?
Long bitmask was used in the code base?
Should this go to `flux.go`?
How does this `!==0` fix the bug?
if you want to use the `TextView` field instead you could add a `@BindView` annotation
nit: this could be moved inside `case ATTR_READ_ERROR {`
this file has to be moved from the PR
Why not just use `Reader` and `type` here?
Probably we need to add this to the `check_return_handle_call` too, since it will be called after a `return_handle_call` call.
please remove this file, it is not used anymore.
I think we should be able to remove this check. The `attachShadow` function is not needed anymore.
can we remove the `/unified/` prefix?
FYI, the order of $options is a string, so it should be an array of the two, not the same. So the order will be the same. So, I think that we can remove the $options: handleSingle altogether. It's a good idea to add it as a field in the $options.
nitpick: this is not a `String`
Should we have a `product-develop` product for this?
I'm not sure about this. When I see pod appears in the first iteration of the provider and the pod appears in the first iteration, it means that the other changes are actually deleted, which will result in the wrong message when the provider is deleted. It's not the case here but I think it's a good idea to get rid of the second sentence. We might be able to make that change to make sure it works for a pod later if we have a different message or something. I think it's best to keep the logic here. If it's the case in the first iteration, it's fine.
This exception will be raised after you invoke `self.rollback()`.
It would probably be better to return nil if there were no items on the next line.
Isn't `equals()` the default? Why do you need to return it?
Is this property really used?
this is not related to this PR, but this change should be reverted.
Was this intended?
I think you should keep the `v1` part in the build and just use the `v1_` prefix to make it clear that it isn't part of the public API.
I would like to see this name being configurable, I think.
Why do we need to use `System.Collections.Generic` here ?
I don't think this should be a TwitterPlayerCardsController, you could just pass through the controller directly to the controller directly.
This is not needed anymore.
This should not be needed, we have a module called `pyramid`.
should we just remove this entire file? I think it's already included in `app/services/server/package_impl.go`
I think it's not clear what the best practice is to do here. I think it's better to have a `azure-store` flag for this, and have `azure-store` always be the "az" command line. That way, you won't have to specify it if you're in the context of this flag.
We probably don't need to make changes to this class, so that we don't pass in a sessionManager instance.
I'm not sure what the best thing to do is is, since there is a race condition.
This is a change from what was added and can be removed as well
`urlencoded` isn't supported in IE.
is this going to work for you?
I'd like to avoid this kind of change in this PR. I don't think we need to import anything in a generic way that is needed, so we need to add a new `from .graph import _` to the `__init__` of `from .graph`.
If you add the file to the docs you should use `org.mule.runtime.api.api.api.client.Klog.apiapi-client.go`
Can we remove the err from the name of the function? I think it was added already to get the nil.
We should probably have some sort of `match` for this.
`localConnection && localConnection.type == Blockly.OUTPUT_VALUE` => `updatePreviews = true`
Please don't remove the TODO. The other option is just to keep `force_rebuild`.
Does it make sense to set the `TestError` as a `string` here? I can't see any use case for it...
`if (is nullptr && CheckCanLoadFromBin(filename)) == "")`
Does this mean we have a `Reader.Wait()` called from `pkg/err`? I think we should just delete the `!= nil` check here since `Reader.ExitError` is already set in `pkg/err/Async.go`.
I'm not a fan of the use of `StatusOr<bool>` because I think `func_to_string` would be a better solution
I don't think there should be a need to change here
I am not sure why we are not testing for the error. IsPaused will be nil if we don't want to send a cluster?
Nit: this is a bit odd - could it fit in a single line?
This should be `IPathManager.toAbsolutePath()`
This is not a good API. It is better to have localFieldPathType.schema instead.
I'm surprised you didn't get a `Mysql2` error. I think you're using an `if` in the previous version, and it will not work.
Is there another PR we could move this to a new PR?
The name of the column does not seem very descriptive. Perhaps we should have some name for it `draw` or `response` or some such that we're trying to find some other name?
It would be better to move the RawDiff function to the RawDiff class and then add a call to RawDiff in the RawDiff function.
Can we just remove the #ifdef here? I'm not sure if we still need it for NET461, but it seems to be the wrong place for NET461?
I think you can move this to the top of the file.
I think we need to change this to a `cert.URIs`?
Use `get` method?
We don't use a standard `mhtml` for downloadations, so you don't actually need `downloads`. `download_path_suggestion` is a required argument.
I think the port port port is wrong, we are using port known known port is known to be known. It should probably be port port port port port port port port port port port port port 80.
Not sure if this is the right thing to do. I think `if app.config.respond_to?(:secrets)` should be safe as well, because it doesn't seem to have anything that the user can call `.config.async_to?(:secrets)` in the `else` branch because they don't care about the other.
Do we need this check? I mean, do we need to set it to something other than the previous one? Also, do we want to set it to something reasonable?
Shouldn't this be `if (supportsRetryableWriteError && !hasRetryableWriteError(err)) &&`?
This is the only change that will be breaking in our plugins, and will break our plugins.
Is there a way to avoid this? If the code in `go shows how to usie` it can be removed.
`!state[0] === 0` is a safe conversion
What's a reason to remove it?
I don't think we should add the `--range` flag to the `18.04` here. We don we need to do that on every single machine. We can also do the `--range` flag in `build-system/plugins/bin/bin/made-18.04`, but the `--range` flag only contains the sub-range machine.
I don't understand this one. The only place it is `#endif`, is there a reason why you're not using `JobStatus.h`? Why is `JobStatus.h` not `JobStatus.h`. I'm not really sure what this is about.
Is it worth moving this to a new location since we're now passing the context through the cluster?
Why does this need to be the one from the previous iteration, or was it just before?
this is a change of behavior - the user should be able to build the api server with the default admin url
This seems a little out-of-place to me. What is the difference between this and the `definePropel` ?
I don't think we should have a way to store it. I'd rather just have a separate variable that is passed to the `this` class.
We can add a TODO here to fix this issue
Is this needed? `VuFind\OAI\Server` is now set by the user, not the user.
I wonder why the test is needed here?
It looks like this function is no longer being used.
I'm not familiar with this. Do you think it would be better to put these flags into a constant?
Why is this necessary?
Please revert these changes. It is not necessary to include the copyright (i.e. the comparison in the regex)
This is a good change, but I think this should be `SourceUtils`, not `null`. But we should be consistent.
Can you change this to use the `url.php` helper?
I'm surprised you didn't use constants in the code, please do.
this is already in `lib/babel/lib-babel` file
Shouldn't this be `CherryPick cherrypick()` ?
This is the only place where `manager_env_prefix` is used.
this file has been removed
I think this can be combined with our "k8s.io/apimachinery"
This is going to panic if the `html.replace` was given to encode an empty string?
Nit: we could also add a check here to make sure the HTTP cluster check is not in the API
can you move this to `cfg.model.neck`? it's already checked by `if cfg.model.neck: False` below
Could we move the config to avoid mixing/wrong code and just call the function from base?
`cxx.cs` should be added in the C API and not in C API.
This should be a single string, not two sentence fragments.
why not put this on the next line instead of using an explicit `accessKeyID`?
Line is too long. [83/80]
I think this was the only place where I could get a `allow` error. We want to keep an assert for this, or maybe just an assert that the URL is not known at the moment.
why do we need this? This will allow port-list and port-list to be set before we update the version
This can be `static`.
I would assert that info.info.name is not defined as expected but still use the info.info.name
This is a bit hacky, but I don't think I like the version change.
I'm not sure if there is a good way to do this without having to specify the hash.
why is this change needed?
Why is this necessary?
@wingjteri why not just have a check here to ensure we don't have to pass an exception?
why not use `event.getConsumerCall().increment()`?
Should this field be part of `GitHash`. It should be part of `Resource` and `Resource` to be consistent with `Resource` and `resource`?
This is not a flow-wide setting so it should be `config.makeflow_flag = 0`
This is not right. It will only ever get called with a per-property value. This means if you have a non-duration value, it will return an error.
I don't think `createVNode`, is this right? The `createVNode` will not be null. It's a bug.
Is it necessary?
I assume these changes are due to the "bug" command line option, right?
why is this being removed?
this is a bugfix, it is not needed here
This listener listener is now being called when the `listener` is empty. It should not be in this case.
What is the reason for this not having `null`?
Is this used?
I think this is the wrong error message. The commit message is not a valid key.
Can we make these public and reuse just in case we have one?
I'm pretty sure this is not needed.
I would call this `foreign_key` or something.
@bparees this will cause the runner to be able to use the `initializeMetrics` field from the `authenticationPlugin` object, but the `authenticationPlugin` field is not defined. I think it's better to use the `getMetrics()` method instead, and just return the `toStringMetrics` method from the `initializeMetrics` method.
This would be better to check if `!player->getGroup()->access` is set to `0` before calling `getRequiredAccountType()`
I don't understand why this is necessary. The node version should be the actual node version, not the node version.
I think this is the reason the test was passing. The `go v` test was failing. We need to make sure we're doing `go fmt` on a `true` error.
I think the previous version was a bug, not an issue.
I think this is the wrong place for this.
Why does the `context` has no meaning?
Why is length not in the first place, but in some cases it seems to mean that it would always be in the _bytes function?
nit: maybe `q.text` (or `synch`)? It's not used in the original `<a>` but the other `<a>` is enough.
Lint/UriEscapeUnescape: URI.newfactoring: URI.new());` for autocomplete suggestor -> don't need string interpolation or special symbols.
@jona-sassenhagen @rgoj @siddontang this change is the only place where we have `gogo` set.
I'm not sure if this is still needed since the `#show` already exists, and we have `#show` already.
This seems wrong. You don't have to import this package, you just use it.
It is not obvious to me why this is needed - `s` event is always a string.
this should be handled at the top of the file (line 151) - otherwise it'll still be useful for users to know that the `approving_off` is not a public key in the DB.
This doesn't make any sense. You should either use a custom `List` or `Set<T>`, then make `toList(T)` always use an array.
Why is this removed?
Why this change? The only caller of this is `Open` is to get it into the context, so it's more obvious that it has to be changed.
should we add a validation to ensure that these values are in the same directory?
How about 'NM' ?
Since we're modifying an API for new `member-subscription` hash, we shouldn't need to specify the API for new `member-subscription` hash.
This was not a problem before but I think it was correct. We should be consistent with how this works, and I think we should fix the problem.
@jadarsie I'm not sure how to go about this...
Should probably update the readPreference prefix as well?
I thought we had had an explicit error here?
Seems like there was some conflict between this and previous line.
The nodeID is not the same as the `nodeID`?
`variable` is not the default value for `id_vars` (as in the docstrings for variable names)
Is it possible for this test to be moved out of `set_cloudtrail_with_botocore`, or just `set_cloudtrail_with_botocore` so we don't have to introduce a `parse_cloudtrail_with_botocore` method?
Is the name still valid? I think we should be consistent about what we use for naming convention for other services
This should be a separate PR
Should this be in `ensure_prepare_MAP`?
I'd like the other tests to be updated to reflect this change.
I would move this to `KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK` and move it into `pkg_KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK`
this is a regression.
This is not really a valid class, since it's a `class` attribute.
This was just to prevent a delay from being enabled and the commit still has 1 minute.
why is this variable not required anymore ?
I think the field name should also be renamed to fieldfieldID
Should we also add a note that the acks are on the positive mode? This should also be a case for the positive mode (i.e. a runtime error).
Should be public statically imported. Just keep it simple, because it's not a public getter.
This is unrelated?
I'm not familiar with this code. Why not just `all_defaults = scope.args.kw_defaults if d is not None` ?
We should add the `ndeltas` as a `default` field to the `accountDelta` field instead of the `ndeltas` field.
I'd prefer not to use the "xpath" parameter for "xpath".
This is going to be confusing, why we are returning `collectingu` here and not return `criuProcess`?
I think it's better to run this outside of the task, rather than inside of the task
Wow, I know the `Errno` is a `nil` case, but it's a `reason` case, so it doesn't really matter, but I think we should change `errors.Errno` to `reason` or `Error` here.
If I understand correctly, the `movie` is a bit too early, do we want to just call this?
I'm curious if this is the right place to do this. If the function returns an unsupported method, it should just return an error and not ignore it, so it should be checked for that case.
can you make this a conditional?
This doesn't need a `_getCheckpointParentDir` any more?
you should just call it `UIACUIA`, otherwise you'll have a label type in your settings, and you'll get a `UIACUIa` if you are doing so
Do we want to log if this happens? I'm assuming the idea behind it is to not break any tests?
I don't believe this is the right place for this constant. The `const` should be removed.
Nit: move the `using`s under the next line?
@kargakis do you have any insight on this? I would have just done something like "boolean _to represent the cache cache, for example, when we set the cache cache to `0` and then set `caseInsensitiveSelect(selectedColumns)` on a boolean flag. I am not sure if that will be correct.
Should we call it eventTE? Or is this just for consistency with other server?
I'm not sure this is the right solution. If `!fn.normalCalls` is 0, and `IsNil()` will always be 0, so we don't know what it means. I don't see a problem with this?
Is the 4 columns the same as the default value? I don't see it being used anywhere.
Is this still relevant? I think `FailureImportOperations EventReason = "Failure Import operations"` is a better option for the `Failureable EventReason = "MoveMoveMove"`.
I'm not sure if this is needed. `rb_intern` is called from the `nni/algorithms/core.rb` so it is not needed.
The log.debug should not be changed. This is the log line that was previously removed.
Please make it clear in the implementation it is just for code maintainability.
`updateTime` is a `boolean`.
@zjffdu I don't think that we should change this type. I believe this should have been added in the docs
can we change the type from: `sigmoid` to `primitive`?
Perhaps add a similar case for the error log?
I think it's fine to leave debug level as it was.
I don't like the name of the function. It's not an error, but it might be better to just parse it.
It looks like this function returns `null` if a file was created with a `unique_lock`. Should we use `::unique_lock` in all places? That's a bit more consistent with the rest of the code.
What about a simple `mysteriumnetwork` package? That way we can get the `v2` package from the package.
Why do you need a return type here?
This is the only real change. The testContext is the same as this test. This will be removed in an environment variable, and is a bit confusing to me.
Datasets are not consistent with the rest of the code base. Can we rename these to `Datasets`?
Why are we removing `hostTracerProvider` and `defaultTracerProvider`?
I would move these import under `src/server/grpc`
This is probably what the `utils` is for, but not here. I don't think you should use `read_file` for other purposes, and if that is, you'll see it as a dependency. Also, the `utils` is only used in the `read_file` and the `_` are the same, so the `_` is not needed.
I'd prefer to see this take into account errors as the `klog` argument, not here. But I can't remember exactly where this is called.
This is not correct. This is what we want to do, if we are writing the stage before we're unusable.
Can you add a todo to make sure this reference is not part of this pr.
Is it possible to have a state that we'll always want to set?
Can we please re-use `[BigDecimal]` instead?
Do we have tests for the NAsync case?
Not sure what this is doing, but it seems a bit of an unrelated change to the rest of the PR.
The original PR was a bit of a hack that was merged into my PR.
why this line is not needed anymore?
should be "snakebite" ?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why is the constant not in core?
@adamjstewart And there are a bunch of places where we need a glassfish entry in the file. Is this just for consistency/descriptive?
this is not needed since the `launch_vehicule` is already in the `spec/models/venv/urls.rb`.
nit: this can be simplified to simply `if (!fileInfo.Exists)`.
Is this needed?
I'm not a fan of using `/public/all`, which is more readable than `/public/latest`...
The port may have been removed in the message.
I'm curious why you used this as `ure (%s)` as opposed to just `ure (%s`.
This is not a valid built-in, right?
shouldn't it be: `\w`
Please use `result` for this. You can use `result` instead, which is a bit simpler by using `goto` in all the places.
Does that mean that when `this.ratio_` is set, the `0` will always be set? What about `this.ratio_`?
I think we should call `MaskedIp` here, as it's used in many places.
substitute must be in an optional parameter here
Hmm, this means you can actually check if you are actually not in `_tab` anymore, right? We are going to check if it is in `_tab`, but it's not that important...
These are all out of the scope of this PR. The other option should be `TChannelDispatcher` and `CreateServer` to ensure that the `TChannelDispatcher` is not set.
This is the only usage where the original was missing.
`in_browser` and `in_browser` are both false, can you move the check into the `if` clause above.
This is not related with this PR.
Can you please create a test for this?
Why is the check now handled inside the `if`?
Is there a way not to do `deleteManifests()`?
I don't like this name, I can't remember if I can't find a standard in one of our tests, but it's not clear to me that it's a `unless`
Should we make this configurable? Or is this not just 5 minutes?
Why do we need this code? It seems like we are not using `tests.Split`, so maybe we should remove this code.
We should not use FW if we can. If the default `crd` is the alpha then we should use the `v1alpha1` variable.
We don't need to have the default value here.
`getDefault` is not a int, you need the `getDefault` and the return value.
This is not a bug fix, right?
Should we take advantage of these new params and making them optional? I know the answer is, but is there a way to fix these issues? For example, `contribs` is too generic, it is not the case here, but `contribs` should be the number of those, and it is a bit confusing.
These should be `options.log` I think
For consistency, we probably want to keep the `email` rows in a `/` directory. It's not a blocker for me and makes sense for me to be able to get rid of the `Order` and `Order`. This will help us avoid the need for another PR, but we'll be able to make sure we don't accidentally break our `post`s when we're not using it.
The name `RuleViolationFix` is confusing with the name `RuleViolationFix` in other components, but it's more clear.
Please remove curly braces.
What is `care_is_unix_path` for? If the `host_is_unix_path` contains a different path, what does this do?
I don't see where this is used? Anything wrong with this change?
Can you remove this? I would not disable anything, it is not a huge thing, and it's a huge thing.
We have a `@param MediaInterface|int|string $format` which is a `ConcurrentMap`.
this is the actual fix.
Can we make these `final`?
This should be done in the same way as the last option, no?
Is it worth moving this to a separate file, since it is in `listenerShutdownWaiter`? It's not a function, so it's a function. It can be called in a separate file or in the future.
I think it's better to keep private to prevent errors from being created.
We should test for the truth values as well
you can also check if `$links` is not null
We should consider making `target_name` a constant for this one and passing it in to `target_name`, as it's a `bytes` attribute in `asset_key` and `target_name` in `target_name`. This would make it more consistent with the rest of the API.
Why do we need this property?
We should change these tests to `without` now that this PR is merged.
Shouldn't this also be dagster.core.definitions.pipeline_definition_definition_sensor
I don't think we need the `return True` check here. We do that in other areas, so we don't have to return it anyway.
I'm not sure why you used `millions of Algos` here, and not `millions of Algos` at all, but I think it's better to put the `dependent` and `dependent` at the end
I think the new default is `false`?
This is the main change, but the `./` is unfortunately ambiguous, so we shouldn't change the name.
I think we need the function name as well.
What is this change about? I'm not sure why we need it here, but the `if` above looks like a bug and if it's a bug it could be removed in a followup.
Why are these `public static`s removed?
why is this needed?
Is the idea to only do this for `AntreaPolicy` in the past?
We can use the v1 version here.
Since we are using a `pendingRequest.configuration.remoteHost`, we can't just pass a `remoteHost` object directly into the `pendingRequest` object. We don't have to pass a `pendingRequest` object directly.
This is a little hard to follow, but I would rather keep a `getSearcher.getDocSet()`.
Can we put a newline at the bottom of the imports and use that here?
I would prefer to return an strstr instead of strstr
I wonder why these are changed?
This change is not necessary.
Why is this needed?
Can you move this line below the imports?
I think you need the `[a-zA-Z0-7]{3-9]{2,]` on the second parameter to be `A-Z0-9]{3`, which is not the most common use case. `quartile` needs to be `None`, but I'm pretty sure that's the case.
Can you change this to use the shame that it is compatible with git format?
These includes are causing the flake8 tests to fail
I'm not 100% sure how to get this message
Shouldn't this be `var` instead of `code` ?
This should be `2011_optimizer`
I think this is a typo
Please add Gsuite API here too
I don't understand why this change is not related to this patch, but I don't know if we should have a const or a conflict.
I would make it `vcr` as a getDataErrorComponent, and have it return a getDataErrorComponent. I don't have to think of a better name.
Since you're here, let's say 'dataset'?
Not a fan of this name and it might be more clear for the future. What about something like: "NotUse the user account"
This doesn't need a `newQueue()` because `processQueue()` doesn't need to be called for every call to `close(...)`
Why the `iterable $galleryItems` variable removed?
I'd like to see this in a more general test, but it's really not a big deal either way
`window` is not a required name for this, it should be `_` or something, like `_`.
@jsoriano Isn't this the best one to use? I would say `a-zA-Z][0-9]{5}/`
Can we have an explicit default value in this setting? If we are going to change this to a number of options, we may need to update `SparkWriteOptions.TARGET_FILE_SIZE_BYTES` to make this clearer.
I think we should also add `--user-id` flag in `config.yml` as well, and add `/dashboard/useruser` flag for the user
Doesn't `AvailableBalance` need to change after that?
Is this error generated by user?
Unrelated change, will fix during merge.
This is a bit of a weird thing, but the data has to be revised by the file. I'm pretty sure that it's fine to just remove it from the store.
Shouldn't we also check for `cfg.IP`?
Could you please change it to `type=int`?
nit: can remove the 'icebergCol.name()' from the name as it's no longer necessary to have a new attribute.
I think this was a leftover from the previous PR, and it is more readable to call a constant from the `params` module, not the default implementation
Please add a `en-plugin` option to the plugins plugins.
This will break existing semantic semanticization for our mypy if the type is null.
Not sure this is needed.
nice! I made it more than 1/3 :( Thank you
I'd suggest to make this method internal and make it package private.
I think this can be removed now?
nit: can you add a period at the end of the sentence?
Why was this test removed?
Can you explain this change?
Is it safe to call a `lock` here? I wouldn't say that it was a `json:"-"` and the call to `RWMutex` below.
Why not use the `TEST_ARN` variable directly, like in the other test files?
What if we called this `InitIntervals` instead?
nit: this could be a one liner.
I wonder if there is any way to add DialogResult to the parent window so it can avoid the need to add DialogResult here.
This should be `@visibleForTesting`
This is a no-op. Moving the default value to `"""` makes no sense, and makes it a no-op on the default
why are we using key='projects'?
I think we need to add dir to the `pkg/api/pkg/api/server/pkg/api/pkg/api/pkg/api/pkg/api/pkg/pkg/api/pkg/server/pkg/pkg/server/pkg/pkg/pkg/api/pkg/pkg/pkg/pkg/api/pkg/pkg/pkg/provider/pkg/api/pkg/provider/pkg/api/pkg/pkg/provider_api.go`
I'm surprised this didn't actually check for `DR_HOST_NOT_TARGET` but the check isn't needed for `X64`, right?
Can you please change these to `./v1/bzz` and change the `fileUploadResource`.
`error.details` is never `null` - is there a reason we need a `six.details`?
What about the `if ( ! empty($access)` statement?
We could use `goto err.Parse()` here.
@smarterclayton do we have to make the constructor public with `A v`? I'm not sure we need this.
Should this be marked as `public`?
I am wondering, should we have a method on `BitMask` and use it here?
you don't need the assertion here
Should we use `NewKeeper` as the name of the file? It's a bit confusing since it seems a bit like it's called `Keeper`.
Please don't use wildcard imports.
Is there any reason for this to happen?
why not `getService().getService().getService(url)`?
This will fail on Python 2.6.1, which means we will not have to worry about functions that have `LogTo*()` functions.
Is there a reason why we can't just call `disableAuthorization(true)` here?
I think this should be `IEnumerable<IEnumerable>`
Shouldn't we use `aws.go` here to log the full concretization log?
Why is it a boolean type? I don't see it being used.
This is not the same behavior as the above, since you are already setting the result of a message in the debug mode. You're doing `!== null` to the message. The message will be a bit more helpful than "Enabling calltarget state by ref" and then "squash" or similar, which is the case in this case.
Use the new Ruby 1.9 hash syntax.
This is a good example of what the normal `PBFParser` is doing here.
I would like to keep this as a key in order for a reason to have to pass in a `*key*` so you don't have to pass in a `*key*` here
this is a bit weird - why is this required?
Should we add a check to verify it's a valid domain?
Does `oldVNode._component` need to be annotated as a `updated`?
Why not using the same name as for the class?
I don't see a test for this, is it necessary to make it explicitly available?
Can you remove these copyrights?
I believe this import can be removed
This is not a great name. MyPy says something like "no longer maintained" and I'm not sure what the action is here. I'm guessing you meant `verifyDeviceAcquirer` or something similar?
I'm a bit worried about this being a nil-error. It doesn't actually get written to any task. It doesn't seem like it would be a good idea to include this in the task.
I think this file was accidentally deleted and it was moved to our dependencies. The reason I have is that this is not a file and it's not being used anymore so I removed it.
Just to make sure - this should be a `enode`?
Why do we need this?
why remove the render method?
I'm a bit concerned about this being a bit confusing, but it's a bit weird that this will be an error if an error happens (e.g. the one with a `ddev_root`). Is there a way to fix this to ensure that the `ddev_root` is not set to an error?
This import is unused.
Why is this necessary?
I would prefer to not have `Number.MIN_SAFE_INTEGER` as the default value of `(2 ** 53) - 1` since it can be an const. It's not a big deal either way but it's not clear what is happening in this context though.
Should the `handle` be a `Result` instead?
This change is unrelated to the change in this patch, but it does look like the `wlr_xdg_surface_configure()` call will already return `surface`.
`skip` also needs to be updated now since the `render` method is not existed, but it will not be invoked when it is enabled.
why do we need to call `svcDescriber`?
This line is not required.
Is this change intended?
I think we should use GetRootNodeForTest here
We should remove these spaces.
I don't think that it's necessary to wait for an nolint to wait for a long time.
Why not use the constructor above?
I'm pretty sure `cisco_nexus` is the correct choice here. I'd probably just do `if host[:platform] =~ /cisco_nexus/ && host[:user] != 'root'`, then we can check for the other values.
This should probably use `global.googlesitekit.setup.authenticated = response.authenticated;`
How about using the default `pingWaitTime`?
I'm not sure how to make this test pass - I was not able to test whether this actually works, but I think this test is not really testing the right answer. I would just change the test to something like: `if !kINESIS_PROVIDER == 'kinesalite'`
I think you can delete the `Copyright` declaration now.
nit: `maxRetryTimes` has been removed, and the constructor can be removed.
The `signedUserName` name is misleading. I think the name of this function is too generic. Can't we just name `load`?
We should add a log to the stack, to prevent any confusion
This doesn't work. It is only used by a test, right?
I think we have already done this in the `database/side_build.go` file, so why do we have to change this file for a reason?
` PutHash` is not really necessary. PutHash does not do this.
Could you please use `bytesRead=1` here?
should this actually go through the next line?
@chillscheibelp This will need to wait until the changes made in the UI. The reason we are making this work is because they're only used in the `__init__` method.
Can we use `PluginInfo.info` here instead of the global?
How about `more_value` instead of `QMetaType.Type.value`?
I'm not sure we should add a note to the description what happens if we have done the same in the context context and we have done this in context context. This will make the user refactoring easier and harmless.
Align the elements of a hash literal if they span more than one line.
This is a bit confusing. What about a `string.Empty`, and a `string.Empty(string.Empty) + (i+1).ToString()` or similar?
This is the only place this was used.
why not just remove this function?
Should this method be public?
@jeherve - I removed these methods from the interface. Isn't that a problem? I thought we removed them.
Why is this in the application? Shouldn't this be `windowsApproved`?
Why did you set it to False?
These changes are not needed, we can remove them.
We need to make this configurable, or we can just make it final and make this final, and just make sure it's done the other way around.
Can we add `HasDir` to the doc?
If I get the `priv` provider, then this should be `priv_getTransactionCount`. The current code is used to set the `priv_deletePriv` value to a new value.
I think this is the fix for #5501
How come these are changed to the old ES version?
Why update it?
This one is the main code, so I don't think you need this anymore.
Is this the same as `NewUser-Agent`? Or is this something we should be using for the `default-domain`? If we are using the same as `NewUser-Agent` we should also support this for other custom `User-Agent` components.
Shouldn't we have a constant for this?
I'm not sure this is a good idea. Why are we not using the default?
This should probably be split across multiple lines.
These changes need a trailing comma, but next time please do a trailing comma.
Same as with params params.
I don't see this used anywhere.
Why the #if here?
`s/is stand-by/`
I think you can just delete this test.
This is a breaking change. Please fix all the other usages of this PR.
Why is this being changed?
you can drop the if
I'm not sure this is the right place for this, but it seems like `WinRM::Connection.new(options)` should be called `#includeinclude?`.
This is not a right fix. You may want to pass the `request` into `get_requests` method.
This isn't related to this pr, but it seems a little strange to me.
Use %i or %I for an array of symbols.<br>Line is too long. [88/80]
I'm not sure if the `onPreExecute` should be a list. It might make sense to have the `Void` as a list of objects.
What about `RESTRICT_ACCESS`?
Should be removed from the interface to avoid any undetected memory usage.
If we're using `config.getServiceContext()`, why is it necessary to call `GetConnTrackInterfacer`?
Let's remove `SessionId` here, it's not used anymore.
I'm curious: what is the purpose of these lines?
Should we make this package dependent on `NamedNamedNamed` ? It seems that the only thing we care about is that this package is not generated when there is no `NamedNamed` in this context.
Shouldn't this be a `IntPtr`?
Is this a change for the reader to be able to run `./gradlew` ?
Did the Caffe::GPU get set on the next line?
nit: `computed` should not be all caps.
I think you forgot the field `chan`
(style) spaces required around that '=' (ctx:VxV)
This name is misleading because it's a file name, but `cstor-volume` is not a file name. We can use the file name `cstor-volume` package in this file, it's a bit confusing.
I think we don't need to throw `check_bad_alloc` if we already know it's a list by doing a `check_error_bad`
I think the wording of the "Create" should be "The"
why the new define here? can you just use the new `file` ?
Do we still need this? `number` is a number of retries in the retries package.
@bvaradar : this change means that the test is still not running on Linux. We can't see where the test is implemented, and we need to fix it.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I'd prefer `buildBinaryFor` to be consistent with the other methods in the source, as it makes no sense for `buildBinary`, and it makes it more clear that the method is in the source.
InMemoryExporterOptions is deprecated. We should not be using it anywhere in this PR.
this is unrelated change?
This is the fix, not the issue.
Is this the reason for the getInstanceId?
Nit: We could just inline this line.
This doesn't mean to modify a callback, right? You're only passing in the trimming rows in the contentRows plugin if it's in the contentRows.
I would make `strcmp()` return the first element, and then just use the first element.
The name `info` is misleading since we are using it elsewhere, but not a big deal
I'm not sure about this. This will work with python 2.7, but the class `getIntegerReader` is already deprecated, so we need to make it in one place. Also, I suggest to add a new method `getIntegerReader`, `getIntegerReader`.
I don't think we should change this
I think the idea here was to set this to a new `selectedMenuItem` instead of an empty list.
@zjffdu Why did we move this line back?
The following two cases are identical. I would say that you want to use one of them, and you'd want the following: 1. The other "else" functions can be different. 2. We could also support X_AC_DEFINE(X_AC_ENABLE_SANITIZER, X_AC_DEFINE(X_AC_ENABLE_SANITIZER, X_AC_DEFINE(susl, so-forth))
Need to remove the `protoregistry`
Should it be a classmethod instead?
I don't see why we need this, I don't see why we need to do it for the `size` check in this file.
I think we should use the same logic in the config object here.
I think you could just use `exMessage.startsWith` instead of ex.getMessage
I don't think we need to define this here.
Ah, this is not needed. You can add a `nSocketFnum` to the `stderr` in the call to `updateKeepalive` to get a `stderr` and then use it directly in the function.
Is this TODO still relevant?
I'm curious, why not make this change to make it more generic, e.g. `updatedProjectConfig != nil && err != nil == 0`? Also, why do you need to check if `updatedProjectConfig` is a `ChangeSetEmpty`?
update the XACT description?
why is this changed here?
why is this needed?
@mattpap Ambiguous idea here would be if you want to do something like: > The `is_BATCH_int` and the value of `valgrind.h` instead of `valgrind.h`.
You should just call `writer` here
I think `JSON.parse` is a better name
What about making it public so we don't have to make it public when the API is re-enabled?
if exp.Target.StressChaos.ContainerName == nil?
why did you add this line?
We still have a similar similar issue in `volume-create-getpvc-default` and `volume-create-getvc-default`.
Why is this needed?
suggest to usetransformer.py in python 3 as well.
The logic seems to be the same as for SelectSubscriptionActivity, but in the other place it's used. Can be done as a separate commit, and then in the commit message, the code can be refactored to: - if we have no SelectSubscriptionActivity, then we can't use the actual values for the same values, and it would be nice to avoid a different method to have two different values, e.g: * Rust side of a class, a common method `public static final intent = new intent { intent = new intent = new intent; } }`
Should this be "check"?
This seems like something that should be done in an else block?
This change seems unrelated...
Why the rename? It should be optional.
`timeZone` is only used when `DateTimeFormat` is true, and `timeZone` is true.
Not sure if we should do the same thing in `updateStatus` and have the send method `localDev` as well. I'm not sure if that makes sense as there is no way to send any of the `updateStatus` event in the `Name` property.
I don't understand why this change is needed. Why is it in the current PR?
I'd probably add a `TODO` here, so that if we get to it, you'll get a `TODO(mmmmcv_maximum_version)` check and then delete the `=` line.
This is not needed anymore?
This will need to be `null === $normalizedConfiguration['type'] = 'text';`
endsWith can be used here.
Can we just remove all `Zipkin Exporter` stuff from `CommonConfig`?
I'm not a big fan of changing the wording here, since it's not the case in createPipedKey, I think it makes sense for the update to have the key in a more generic way.
Should the message be a bit more general to say something like `Unsitesite-kit`?
Does this need to be `Organization`?
I would rename this variable to something more descriptive, e.g. `datasetUpdate`, `secret` or `secret` and `LeLe`.
This change makes the output of `3` a little confusing, it's probably best to leave out `cliquet` for backwards compatibility.
I don't know how we can do this, but this is a bit of a bit unusual for a few reasons: - if we do have the same thing, we can just make the variable `master`. - If it's a way to do it, we don't want this to be a constant, so we should just remove the code below.
Isn't this supposed to be renamed to `Apple reporting`?
nit: the `hide caret` here is not needed anymore?
this line is useless, please use tabs instead of spaces.
`acc` a bit weird, maybe `llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
Can we just return an error here instead of silently ignoring it?
Just to confirm: Is it okay to remove the fetch/htpasswd config from the config object?
For consistency with the rest of the PR. "If a request has cancel method, the callback is called" and the callback is called "If this one is called" or something similar.
Can you add an `desc` attribute to this spec?
I think this is a good name to make it pass as `g Gzip` to `src/precompressed/precompressed`, so I suggest moving this to a separate header file.
Can we put it on the same line?
I think we should remove this too
This method should be `@Deprecated`.
I think this include can be removed?
is this really needed?
If we don't set a `5*1024` value here, wouldn't this break our `#if 0` case?
This is a change that is causing the build to fail. This was a bad idea, and it was a bug in the `master` block. It is just a fix for #5329.
@fredericBmi I think this is the right place to do this...
`mock` is a `Kafkabot` so the mocking has its own botocore, which is not a `bot`. I'm not sure how to mock it. If you have a `Kafkabot`, you could add a `Kafkabot:get_moto(Kafkabot)` function in the other class.
If you look at the message above you'll see it as `yarn link` and `yarn link`, you can fix that
This seems like it's not going to make a new `handle` here. The only reason we are using it is that if we don't have it, the func will never be created.
`float ` for `double` is not needed since `scale_fixed` is a `double`
I don't think we need this change.
This is a change in behavior, the old name was incorrect.
I think it may be more readable to just use `if ($scope.properties.summary.value !== 'undefined') {` instead of the `if ($scope.calendar === null) {` since it also calls the `send` and `send` one.
This is a bit confusing - why can't we have a approver warning in the error message and have the error message be logged at all?
I'd prefer to use a different variable name for the stats field.
What about `--rm`?
I think we can just call this `executiongenproto`.
I think the `copyqr` variable was not needed since the `qsubs` was removed.
I would not do this here, the `-` is a valid value for some other case.
This is incorrect. `self.extra_convs_on_inputs` is not set.
if block ends with a return statement, so drop this else and outdent its block (after all if blocks are not required)
You can use the "additional" function for the state instead of the one in the list here.
I think this is wrong... but if v4IPNet is nil, then v4IPNet will be nil, otherwise it will never be nil.
I don't think we should use `details` here. I would prefer to avoid having the constant here.
(style) 'char' may be misspelled - perhaps 'and'?
why remove the Settings.versions?
This will be a good place to return a string. It might be worth to create a struct that returns something to indicate that it's not present.
I'd prefer if the variable name was renamed.
Need to run test coverage for this
Please remove if unused `if` blocks
I don't understand what this variable name is for.
I'm not sure we should have a token here. If we're going to have a file under a different folder, should we make it a global setting?
This is a breaking change, we need to make sure we don't accidentally break existing deployments?
We have a `if isinstance(44, exception)` here. We don't want to raise an exception.
We need to make sure this is not an `GrpcHandler.Request`?
This is also not a part of the PR.
I would prefer to define this as a constant (maybe even with a capital letter). The same for the `ADIOS_HAVE` version. Otherwise we don't need a separate `Analysis` function for this one :)
I would move this to a new line, it is a bit of an extra variable, and if it doesn't get executed, then you can call the function twice.
this is not needed anymore
why not store the variable in the store store?
Metrics/LineLength: Line is too long. [131/120]
nit: I would make the name non-`pop` so that it's clear it is clear what this method does.
Why was this needed? I was trying to test all the `*testing.T` tests now
this line does not belong
The original `_Headers` should be kept inside an `UnUnHeaders`.
Should probably use the `iceberg.metadata.` prefix to match the config name?
Should this be `el = append(el, ...)`?
This is a pretty trivial change, right?
nit: `GetHost` and `Getactive` should go up here, right?
This log line is not needed. The file is already closed below. You can get a `return` statement in the log line.
@tgamblin Do you know if this is the right place to put this change? The compiler is to add the new `Authentification` and the new one to `Scaler_HOME`.
You can print a list comprehension here
I think this can be just `import`.
@nmittler - How do we know if `ipsets` is set to `undefined`, but do we need to check if it isn't `null`?
nit: `?` -> `?`
I think it would be cleaner to have a constant for `page_size` and have a default value of PARAMETER_MAX_RESULTS.
I feel like this shouldn't be in here.
This doesn't seem right. What's the intention here? Is this intentional that the user can't set the libevent to whatever they want to set to?
Should we do `CRiOS` only when `item` is `true`?
Why is this public?
This needs a bit more: "A query of a collection of dump puppet logs: #{dumping_exception}"
It seems like the diff is always diffified if we have multiple `newVNode`s
I'm not sure why we would need 2StartEpoch here. It seems to me the only place this is used. I'm not sure what is the best way to fix it.
Droping a reference to `get_basic` seems a bit confusing to me. I'm guessing that's because we were not using `Dropable` and we're not doing that in the code?
So this means if we call this `os.GetPaths()` we don't need to return a `GetPaths()`? There is also `os.GetPaths()` on the `os.perf` file.
Do we need both? Can we just use `nopop.HidepidDisable=true` for this condition? This will make the code more readable if we ever use this value.
This should be done by the caller.
go moderny?
Should this be `this.prevFolderId_`?
It's a small typo and should be `clock.`.
We should probably have a test that verifies that `lbann_comm` is `finalize`. I'm not sure why the `lbann_comm` is used here.
Please remove this. Also, add a trailing comma.
Nit: I'd like to see this as a separate commit, since the default is already on the `@visibleForTesting` method.
This seems to be a change of behavior. It's not clear what `capitalize` is doing in this case, but why is it `list`?
this is a bit weird - can't it be `false`?
This is not a good place for this
Shouldn't this be `learnedColumns`? Also, shouldn't this be `if isinstance(self.learningMode)` instead?
Shouldn't this be `in.GetStatus().Experiment` ?
This is the main place where we actually do this. The renewal lock is already in the `LockLock`. So we could just remove the `LockLock` and change it to `LockLock`?
This looks wrong
I think you want to return an error.
Is this something we want to clear?
This is a breaking change. Please revert to master as this is a separate API change.
It's really hard to see the change of the PR, but can we keep the wording on the other files?
This is the one that was created, not the daemon
Nitpick (and a few more instances below): `--flags-BoolVarP`. I think the `-r` and `--url-body` should be a flag.
Did you mean `err` to these? I see it's an error for some reason, but I'm curious.
I would move this to `client/NODE-3405-packages.js`
this shouldnt be added to the other pull request
Seems like the style of `computedModel` is to be `string` here.
This return statement is redundant, as we return it anyway, right?
You can also do `find(id: 1 << 32)`, since it's the default, right?
this is an example that makes sense on Linux, can be fixed
Do we need this? `_stream_data` already handles `patch`, so we should just use it here.
Can we make this a private map, so that we don't accidentally create an API?
Why change to 0 here?
nit: this is not necessary, it will return the type of the Iterator (or any of the elements that aren't valid)
I'd rather avoid `WIP?` as `MySqlCommandIntegrationName` and `MySqlCommandIntegrationName` as it is, and only expose this as a `WIP` property. This way the `WIP` property can be used to be `WIP` in both methods (since we're not using this one for the `WIP` namespace in this file).
I'm not sure this package should be here? I don't think we should be able to use it.
Shouldn't there be a space in between `if`/`if` and `(` at the end to make the same mistake?
you can remove this
Should it be checked if `len > 0`? Also, what does the original `max_relocations` mean?
Why the change away from the new version?
Line is too long. [83/80]
Is it possible to have the value in a field instead of in the field?
Should not this be `static` for consistency?
ditto, keep the same URL
Is this used anywhere?
This line has to be inside a color, because the line above it is the same as the previous if block.
Why are we not just canceling the entire component?
Can you remove the `should be as expected` check? This is going to be redundant. I'm not really sure what the best thing to do here is, but if we do, we should just remove the `should be as expected` part of a file that isn't being used.
this one is unrelated to this PR, but I wonder if this is the right way to fix this
I don't think you need this
Can you please add a space after the colon and the first comma?
I think it would be nicer to do one `Field` here to be consistent with the rest of the codebase.
nit: this should be a `std::strtok`
Why is that removed?
this is just a one liner, and no need to repeat it
Remove newline here
This looks like a debug print, no?
I think it would be better to use `None` as the default argument, not `False`.
Instead of adding this, we should create the InstalledTimestamp to the pool, so that it will get printed. WithInstalledTimestamp() will also be called from within the pool.
I think it's better to do `addProductNutritionFactsFragment.containsInvalidValue(true)`. If the fragmento is invalid and there are no invalid fields after the fragmento is invalid. If the fragmento is invalid, the the first call would be `true` but the fragmento is invalid.
This change will break all the other users who have used listens. I think this is the correct solution, but I guess it is not possible to make the change.
Align the elements of an array literal if they span more than one line.
This should be a public property, so you could use it in other places as well.
This test is really suspect. I'm also not sure if we want to test this at the moment. What's the intended behavior for `custom` ? I mean - what if a file has a custom template, but an alternative is to test a custom template, a custom template? I'm not sure what the best way to test this might be to test a little bit.
I don't think this is right. It's a `legacyscribe` that should be called for each `legacyscribe` case. The `legacyscribe` should be called by a `legacyscribe` or `legacyscribe` value, which means this should be handled by the `legacyscribe` case, which is the case.
Should addLink() take care of this in the loop?
I would not do this for loop. This means we will start http2 streaming from the http2 streaming. I would expect this to fail, as we will be able to actually start the header after the loop.
I would prefer to return the result of `task` instead of a full partition
This is going to get rid of it. It's used by a function that's defined in `kbfs.NoSuchNameError`.
@tgamblin I think we need to check the version here to make sure the headers in `./pants run` are in the `tequilapi` namespace, since they are indeed the same namespace.
Can you use the `Config::get('app.debug', true)` instead?
Please don't change this line
I think this is a leftover ...
Is this nil check still needed?
Redundant curly braces around a hash parameter.
is there any reason we're not using the `ReadElementContentAsString`?
The problem was that the exception message was being logged, but is that the `request.getTitle()` method was previously implemented to return a different exception type? I'd be ok with that as it was.
Does this mean we'll get here more efficient logging?
I think we should use the `i.interceptor` variable instead of `i.interceptors`
This should be `continue`
Can this be a const? Just a thought.
I'm not sure why we would not do that. If we don't have `tree.put(contains(tree))` on `contains(tree)`, then we could just return the `tree.put` object here.
I think you meant `if TYPE_CHECKING:` here
The `new(heap) char[len1+1]` is the same as `JSONError`, and the same is used for the `_extract_path_text` below.
This is a bit hacky, but I think we should be using `DEFAULT_DEFAULT`.
If you're using size of the -1, you could use the size of the loop instead.
I think this is not correct. `AppendBool` doesn't return a value in `values()`
This is the fix.
"Default" should say "this is a subset of those error codes.
Is it needed for `config`?
This is the most important change. `cftime_types` is a different name. It would be good to be able to do that in one of `datetime_types`, but I don't think we should have to worry about the types in the future (i.e. in the other files)
Is it worth having two blocks here: one with `openebs.io/`?
Should we add a note on the message saying this is not working?
We don't need this assertion anymore because the block will be removed entirely.
I think the <msg> I don't think we should be creating a new `_socket` instance here.
There is a lot of empty lines above it :)
Are we sure this should be a constant? Shouldn't it also be a pointer?
Let's not export this dependency. It's not necessary. You can just import from the base class. It's not a blocker for this PR and the `from` import it.
Can you add this field to the description?
@xuehui1991 Can you please review this change, or change it to `Start`? I think the new default for plot is `False`.
This is incorrect, because the traceId.trim() always returns a float.
Why is that needed?
This is a bit weird and I'm not sure how the changes to this file are here, but it looks like it will be in the wrong location.
This is fine, but we should probably have a consistent description of what happens to be used here. Also, if the number is `foo` it should not have `foo=bar`.
@gartung I was trying to get the `orgname` field from the object instead of using it to `org.google.orgname`
I wonder if it should be `competitive documents`.
This is not right, we are reusing it, right? If so, I think we should remove it, because it should be used only when master master master. If we're not, we need to remove master.
I think we have to remove the argument `proofs` from the standard import - if we do, we should use it.
Is msg.MessageId an absolute length?
I think we don't need to make changes like this. We can just do `propertyID = webPropertyId;`
if you use `countly.compare.models.js` here you can use it here
NIT: should we check for `nullptr` here?
This should probably be a class constant.
lt;' should not be removed here as it is the default
Why are we passing the min limit to the struct object instead of creating a new one?
Block has too many lines. [26/25]
This is the same as `TenentMaxLength` right? Is it a problem that we don't have to do this in the core?
why public ?
This function does not return anything and will return a promise which will never be used.
I think it would be good to add a little helper function for these kind of level values, such as `level_t` or `wlr_drm_connector`.
I think this should not be an error if nonce has multiple nonces, since we want to log it.
Is this the right fix? I'm not familiar with the code. Why would we want to only start this when the default behavior change? I don't understand how `func` is used for the `ShareExtension` class.
Not related to this PR, but I don't think it should be in the `tls` command.
This should be a utility function. The PublicHeader should have a type annotation, not the current one.
I'm not sure this belongs here. `Character.indexOf(element, int from)` vs. `Character.indexOf(element, int from)`?
`isRegularInterface` is not a primitive for the annotation, I think it's better to have a false flag here.
this is a test that was not related to the fix
There is no need to add this. This is a core change.
I think we should use a more explicit name like `MutableStateStats`, `MutableStateStatus`, `MutableStateStatus`, `MutableState` or `MutableState`
Can we make this string a constant so that it can be moved to `worker_keystore`?
This test now throws `NullPointerException` if an exception occurs when the raw is not found. I think we should change this to something more explicit like an `int.raw` or similar. It will be useful for both cases.
This would be more readable as: - If the view has already selected, it will be reloaded for the view that is not the same as the previous page. - If the view does not contain anything, then we could add it. - If it is not, this will help with the code.
All the other `AddNewPeerRing` calls should take a `All()`
this method should also take the call to `vendor_store_in_time`
break here should be enough.
Use the new Ruby 1.9 hash syntax.<br>Use 2 (not 4) spaces for indentation.<br>Tab detected.
Hey! I think we could just remove this?
This should be `functional/mongo_client_tests.js`
Just noticed this while I was here, should `goog` just be `Search Traffic Summary`, too?
I'd suggest to have a `Split` constant, to make the code more clear, e.g. say 'the host host'
I don't think this import is needed.
Should error also be a `error`/`warn`?
why is the second clause moved up?
just to be sure, you're right in here that `get_binary_cross_entropy_with_logits()` will be called twice, and then you're not actually creating the `class_weight`. You could also just change the code to `pos_weight = _check_EMAIL(loss = F.binary_cross_entropy_with_logits(loss, weight, reduction = F.binary_cross_entropy_with_logits(loss, weight, reduction=none')` and you can remove the `get_binary_cross_entropy_with_logits` and just call `get_binary
this test is not really testing anything right? It does not seem to have been called by this PR. I don't know how this will work.
I'm not sure what this is for?
Is this method used? I thought `convert` would be a more idiomatic method.
Just to be sure: I'm not sure why we needed to support `bluebird` in the past.
Can be final.
Is this really needed? Does the file need to be re-used for the same target?
These values should be moved to a new test file. The reason is that if you have a config file that has `render_commons` and the test file `expectation` is in `render_commons`, the tests are actually failing and the tests are failing because of that.
Trailing whitespace detected.
@deads2k I am not sure that the `Public` parameter is really necessary
Thanks @fredericBan89, can you please revert this file?
We could probably get rid of this method entirely? It's not related to the PR.
@fmassa I'm not sure if this change is needed for any change, right?
Why the double blank? Did you make it possible to have one of the serialization serialization?
The new field `LinkToParentDomain` should be added to the parent domain.
I don't think this belongs in this PR, but I wonder if we could move it in `pkg/configurator.go` and `pkg/configurator.go` to `provider.go`?
Just to confirm: What about the constant names?
let's keep the order sorted
Is there a reason we are not using this `Db`?
I'm confused by this function. It seems to be called only once in the context of the `external_test`. I think it is better to use `@param` instead of `external_test` here and in the `external_test` module as well, which is why we need it in the first place.
You can remove the partial `.tox` here.
I think the original check is still needed, since `pygment` already contains `None`s.
I think this should be `MaxSubs > 0` and then we should be consistent about the other options.
Why are these removed?
Redundant `self` detected.
I think you can just say 'retry' here.
I think this should be `VERSION=True`
This is an API break. It's an API break, not an API.
I think this should be `@configuration.fail_if_no_examples`
Can we use `Blockly.FieldVariable.prototype.referencesVariables`
Should we also update the `protoproto.js` to include the new `localSubnet` interface?
This is a bit scary, but should be `'type'`
Can you make this a little more specific? `config_file` doesn't really make any sense for platform specific.
i don't think we need a `os.Exit` status code here, since the error is never run.
This is not used anywhere, right?
Can we remove this? This is done in volumeuiduid too.
`return [DoesNotReturn]` ?
nit: you should add a license header here.
I think we should keep the `Activity` field in order to avoid the risk of breaking things.
Line is too long. [108/80]
I don't really understand this, but why is this done on a collection of `std`? Can we simply use `get` and `get` instead of `shouldRepeat`?
Why this import?
what if we called this method "application_options" instead of just "source", would it make sense to call it just "admin"?
Why is this needed? It seems to be the only thing in `setUpFile` is that the default? I think the default behavior should be to set a default value.
Should this be `Http2ExperimentSwitch = "Switch.Microsoft.Server.Kestrel.Experimental.Http2"`?
Use a hash literal if they span more than one line.
Should be changed to `errors` as well
Nit: please wrap lines for k8s errors
Why is this not needed?
If this is the only place we need this extra line, we could just use the constant.
Please remove this line.
I think we should be more explicit about the sole purpose of this option. This is also a concern for the sole purpose of this PR - we should have it also be easy enough. I don't have the suggestion here but it's a bit of a hack to have it work to you, so I would have to add it to the public API.
I think this is unnecessary and probably not necessary, but we already have a column column column in the array.
@garyrussell This one also needs to be replaced with `systemdsystemgeneratordir` in order for the to work, but that's not a problem.
I don't think you want that - maybe you just need to call `self._classificationCompute()`?
Can we use the `methodInitCode` method here instead?
why not `startTs`?
This is a small change that should be in the `rect` module.
Do you need this as you can just delete the whole method call?
What is this ? You mean to use the `$dependent_classlikes` ?
Please rename all of these to `EmelizeProperties` and all the other `view` import to make it clear this is an actual thing that they're getting in the same location (i.e. `%w` and `%w`).
can we call this `Workflow`? I don't think we have any other suggestion, so let's keep it simple and just add one.
Can you use `NaN_size` instead of `0.25`?
Why did you change this?
Not a fan of this `Python` prefix, but `symbolase_pex` is the default value.
How does this work?
This is an API break. It will break some code. You'll need to add an extra Delay to the docs. That is, I can see it, if you can add it to the docs.
Why is this change required?
This is the wrong approach. You're using a voting to know if a voting is set.
`file_exists()` is the `JDIR__ .AXISAXIS` files. It should be used instead of `file_exists(__DIR__ . '/../' . $symfonyDumpFunctionPath ? file_type : file_exists(__DIR__ . '/../' . $symfonyDumpFunctionPath : : $ $symfonyDumpFunctionPath : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
This is a great idea, but it might be better if it was just an `app.OutputOutput(err)` in a few places (or something similar).
This was just a typo in a previous commit and I didn't see it, though.
Is this going to cause problems on macOS when the `Dockerfile` flag is set to `True`?
I am curious, why you use `node_classes.NodeNG` instead of the function? I think that's what we usually do.
I think it would be good to check for the `if @group_level != 0` check here to be sure that at least it's the case.
Shouldn't we use the `getTableTimestampWithPartitionWithWhitSpace` constant?
I'd suggest moving this line up so it's more obvious where we're passing the return value into the function. Something like `get_notebook_base` which does this automatically if `notebook_path` is a string.
Do not use space inside array brackets.
This test doesn't seem to be testing anything.
I don't think this is necessary.
@adamjstewart Is `build` a `str.format` here ?
Do we still need to call this.fullResponse every time?
Suggest to make it more obvious that this is not a string. You can make `from string import ascii_lowercase` or something like that
`const console.dir(err ) {` is an extra variable that will no longer work.
Is this file still required?
Why is this change necessary? `traceLog('Class<?> SystemMediaLibrary::class . ');`
Please use `EnableAdminApi` for these `enableAdminApi ` and `enableAdminApi` as well. No need to do `enableAdminApi` for the sake of consistency.
This is the new line you removed in this PR
Why do these need to be `*record`?
Should this be `<br>` or `>`?
It seems that these changes are unrelated?
This one should be `phpHeader1`, no?
Is it possible to keep these as a constant? If so, I'd recommend using `.toEqual()` instead, to be consistent with the rest of the file.
can't we just test the `flow` environment variable here instead of passing a hardcoded value?
Should this be `decode_eflags_usage()`, or do you just mean to use the same argument? I'm assuming it's just the first one on `decode_eflags_usage()`, but it doesn't really matter.
Revert this new line?
why not using reconcile.Reconciler directly?
I would have put this method in `getClientConfigImportModule`. I would suggest renaming it as `getInternalClientImportConfigImport` and then you would have it there.
maybe we should move this into chai
@jhipster/developers this is where we want to require require require regards to agCapabilities, so we should probably remove this.
I think the `+1` can be removed from this branch, since `o.sgap` is already set to `false`, so this can be `nil`.
do we have a test for this or just an empty file?
this looks like a bug, it should be fixed in a separate PR?
I thought the plan was to use `InvalidRemoteable` here instead of `actionable`?
I'm not sure if this is the right place for this.
nit: add a space after `[`
Do we want to keep it as default if the environment variable is defined?
Why not use `update_state_map`?
@martinsonMSFT I think this was intentional?
nit: this should not be checked here. if `this.inputs.length > 0`, the `.sequence` will be undefined. `max(sequence)` will be undefined for `this.nLockTime = time || time.getTime() / 1000`
Hmm, this will make a lot of those that can be removed. Maybe we need something in `GCS uploader` that will be returned by the database.
I'm not sure what `final` means here, but I wonder if we should have a `@Nullable` or `@Nullable`, to make it clear that the order of the elements are not known at all.
Do you need to set the header for `peer`?
This is a very old code so should be a separate commit.
`import io` is from `time.py` (which I don't have the `from kinto` import)
why change it
Maybe `properties` is too generic.
This is not a valid check for the `RouteSource` argument.
do we need this setting here?
What about `verbose_for_verbose`? Also maybe you can use `warnings.warn` or even `verbose`?
This is a change in behavior. We need to move all the `org.infinispan.commons.lang3.internal.StringUtils` logic out of the `org.infinispan.commons.lang3.StringUtils` class.
Should we just make an issue for this? `storiesOf` is not the right one. It is used by both `button` and `storiesOf`.
@lilleyse Thanks for your contribution and your change! I'm not sure we need to fix the issue.
I think `key[:]` would be clearer here. Also, for the first 2 conditions, we use `key[:,]` for the first 3 conditions.
`settings.New` instead of `iri`?
I don't think we should be setting the `Theme_AntennaPod_Dark` flag for this. We're not setting this to true at all if it's empty.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
why not `e.getMessage().contains("Table/View 'HIVE_LOCKS'` ?
This seems a little bit weird, why not use `isSymbolUsed`?
I don't understand the purpose of this code, is there any way we can check if the url is a string and not an array of orders?
Is it worth checking for the recent recent change in this PR? If yes, we should probably move this to a separate PR.
`undefined` is a little ambiguous for the `bool` here. I don't think this will work.
I think this should be removed
Is this a typo? I hadn't checked it before. I hadn't noticed that this was the problem.
nit: I think this is more readable. `opt_port` is a more accurate name for this.
We should rename it to `codec:"s"`
Where do the `selectCastSink` value come from?
nit: I would use `isinstance` instead of `isinstance` here. Also, `isinstance` is already in sync with `isinstance` below, so you don't need to pass in the `isinstance` in here. Also, `isinstance` should be enough.
I would prefer to see this as a separate PR, but I'm not sure it makes sense to be a big deal for it.
Can we remove this and use an enum typedef? I see it is used only for internal components and can be removed in a future PR.
I don't think this is a good idea. It will be a little bit confusing if `signal` is a subclass of `.BLACKLIST` and `.BLACKLIST`. I don't think we want to do anything in that case, but we don't have a good reason for that.
This seems unrelated, can you remove?
I'm not sure if there is a null check here. If `nested_flatbuffer` was null, it will return null
Why do we need a different check for this? It is a bit confusing to have a check in Push/RATent sense to have a check in the same module that we have to use in `_get_all_controller()`
Please use `String#Equals(String, StringComparison)`
Style/SymbolArray: Use %i or %I for an array of symbols.
Why do we need a small `Series` field?
whoa, this is not an implementation detail, it would be nice if the `Uri` was a `.JsonObjectLocation` rather than an implementation detail.
this was unused.
I would prefer we use only one item in `expFeeFactor`
I don't think we need this.
can this be removed?
Why not just change the test name to `t('E-mail', true)`?
The `map` method can be null, since `map` is not null.
This can be just `constructor(props);`. It will avoid reapplying innerHTML when there are no records.
This is a `Test` so you could just use the `ClientPool` variable here.
We need an issue to track this with a topic topic. This is because we have the sort sort in post-merge, right?
Is this still used?
I think it would be better to make this a `IImmutableList<Span>`
We should remove this type.
The original code was correct here.
I'm not sure if this is a good candidate for a `<%= i/o <%=14/#{trace.latitude}/#{trace.text || (trace.text) { warn</%=14/#{trace.latitude}/#{trace.text>}`
It looks like this file is no longer used?
This is not right. If we don't have a null `this.exporter.Export` and we do not have to.
do we expect the assertion to be incorrect here? I would expect that the collections can be `None` but in which case would the test not pass? (or maybe we should test that one with the `Error` and `json['details']`?)
I think you can remove the 'ar ugments' type from here.
`width: width * 2` => `maxWidth`?
This is not the right place for this change (and a few more places in this PR). I think it would be better to do this in a `for` loop to avoid unnecessary search and to avoid having to create it every time it is called.
Why does this need to be a `ves`? What if the user didn't specify a `force`?
It seems that this should be an `Detection` rather than a `*`.
Shouldn't it be `<%= _(<<-TEXT), data on the usage dashboard is historical [fmt.name]` ?
This is a very minor change, we should probably add a `setField` method.
The test here is a bit too much - could we use a `f0` helper instead of a simple `str(f0)` ?
This blank line can stay here
this was the fix to make sure the `if` branch is not modified
`var` can be removed here
This change is unrelated, but it was a different bug that caused the error. It wasn't caught by the tests because there was a reason for the error being raised. The reason that we were passing the converter to the `2` and not `2` was passing the same thing but now we're using the same `s.Equal(2, 2)` on the same file.
I think this import can be removed?
This is a bug, we want to get an error if the process was already included. This seems to be an issue for users with the change.
This is unrelated to other changes, but I don't think it makes more sense to remove this.
I think this will be a bit clearer if we explicitly set these magic strings as the `StringBuilder` value to 0, instead of `1`.
Why do you have to remove the list here? It seems like a bugfix
I think we should keep both info and info.getCanonicalCapabilities(); and make them both stricter
Rails/DynamicFindBy: Use find_by instead of dynamic find_by_ levels.
Not used anywhere?
I don't think this should be here.
I think the tests should still fail.
This is not necessary.
This should be include of `#include`.
Can we keep this as `OptionalOrElseMethodInvocation`? I think it's a little bit confusing now since it's a `LambdaMethodReference` that is used for both a `Optional` and a `LambdaMethodReference`...
Why did the change to public?
This is not needed. `version_info < (3, 3)` is a `sys.version_info` not an `int`.
I'm not sure what that would be.
MakeMdID is a generic parameter.
I don't think we need to change this, since the order of WordPress dependencies is a dependencies. I don't see a need to have this import at all.
I don't think you need the `#-` here
We have a `Dispose` method that does the right thing.
Maybe this TODO should be done in a different PR
It would be good to use the `snapshotreay_code` helper here as well.
This test will fail if the `--test` package is not enabled.
This is an example of a common area for querying multiple times, which means that the batch size is no longer longer the same as the batch size
This line needs to be indented by the line above the `task.after_commit(param_visibilities, {})` if it's not the case anymore.
Nit: `Positional arguments are out of order` -> `arguments-out-of-order`
`BY_signed_in` is already deprecated and this is where it comes from, so it's not worth doing it in `SnackBarHandler` as a side improvement
I'm not sure if this is the correct spelling of the `toHosts` format?
What about the stubString, which is the user of this function? Or do we need to add this to all the other tests as well, to avoid duplicating it?
You need to `if filename != ""` as you are not doing anything else.
I'd rather avoid the import of the package. It's not a concern, but if we have a few things that have the same code, we have to make sure they're the same.
Please do not use data store classes in the log message. It is not a big deal but it's also a good idea to have it there.
maybe `@widget.` -> `@current` :)
same here, use %zu instead
I think this should be `den, say, "Delete mark denotes whether row is deleted or not");`
I would have expected this to raise a different exception.
This looks like a leftover from an earlier patch.
The only thing I'd say is that it should be a `Accountable`, so it should be an `always`.
I don't think we want to add this file, it seems like we could get rid of it. We're not using this file in the code that uses a non-functional function, and we can't use it anywhere outside of the package.
This line should be removed as well (here and elsewhere).
same here re: the guidance group for backward compat
Should these have `sizeof` statements as well?
I think we can just remove this exception, it's not needed
Was there a reason to make this line a required?
Shouldn't this be a separate change?
is it safe to just use `values` here?
Why this change? I don't think you want to make it into the diff?
We should probably add `tenacity` as well. It is not used anywhere else and is not needed.
Why not use `@param` here?
The `[UnsupportedOSPlatform("browser")]` isn't needed, since it's used in the constructor.
Why not keep this in `registry.setProfileID( '')`?
we should also assert that there are no data configured
can we do a `must_render_template` or `must_respond_with` on the column column?
I think we don't need to `if metadata != nil` check anymore?
This isn't necessary since we're using the `cart` decorator.
We've been using wildcard imports in the past. We should probably move them to a separate package
Isn't it a bit simpler to just do this in `createSpy()`, and then call `shouldValue()` on it, then just use the `DataReference()` directly? It feels like a hack to have a test that is not really necessary and we should be using the same interface.
Why did you remove this?
This should just be `throw` since it's a `using` statement.
Why are we passing all the blocks to this `write` ?
The `KafkaConsumer` tag is now unused.
can you add a jira for this as well?
This should probably use the constant in the test as well.
I'm not sure if the use of `pytest` in this test is needed, but if you are using `pytest` it is probably not a good use-case to make things clear.
Could you add a docstring for this?
Why do we store these?
Why is this `await Task.Yield()` removed?
I think this should be the other way around and maybe we should move the method into the `Kratosql` namespace.
I don't think this belongs here - the auto space is never read.
This should be configurable.
`subject = fmt.Sprintf(subject, s.KafkaAccessAccess).Errorf("Error setting up internal tracking for %s: %v", subject)`, but not the
nit: you can just call this version `fme_token` to match the other version
You can use `@param` as the default. See `FrameworkBundle\Component\Router`
So, is this check required? If not, it is a problem for _all_ merge, right? Why is it not possible to just remove this code?
nit: can we change the return type to `isValidRole`?
This is the only usage of this class. Can we keep the variable as a static final ?
I think this can be `if skip_session_tracking?` instead, since `home_tracking?` can only ever be called if `home_is_crawler?` can't be called.
`raise` is not really required, this will be a breaking change.
This should be `right (C)`, right?
>= 3 [](start = 12, length = 6) Do we need to make this check? #Closed
nit: unused imports
Shouldn't we add the `.name()` here?
What are these classes doing with Scorable? It looks like they are never used in the class.
why did we change this this?
Line is too long. [87/80]<br>Use the new Ruby 1.9 hash syntax.
If `staff` is not called on a node, it should be removed.
Why are we dropping the namespace here?
should this be true only for tests?
why not also remove the `blockSignerAddress` type?
Should the default value be '0.0.0'?
This should still be renamed to `tm_cpp`.
Why is this needed? Is it used by this point?
This is the main change. We should not introduce breaking changes in the PR.
This is not the correct solution. The protected is not a protected attribute, but it should be.
I think this block of code is a bit of an important part of a change, can't it just read the value of `mongodb-extjson`?
Since you're not using the doc, you could remove the doc here.
Is there some reason you need to use `HAVE_RSEQ`?
Why is this line removed?
This fixes a bug where a password doesn't exist in the controller
Please rename to `db`
Maybe `remove_event(..)` after this `wait_for_event` call?
To support the AMP's `name` we can use here.
Why not `Version`?
I don't like this change, I don't think this function is actually used at all. The `if resp == nil && resp == 0 && resp == nil && resp` would be fine
I think this is a bit confusing to read and see if the type is an `read` or a `read`?
We should rename `preferredMimeType` to `user_preferredMimeType` to make it clear that it is in the `facingMode`. I'm fine with that as long as we're here.
Layout `const` should be `const`
@deads2k I have a concern about this change. I think `Svc/Svc` is fine.
This should be false by default right?
whats the point of this?
This seems to be not related to the patch?
why not set it to the default struct?
Is Interop\ContainerInterface correct for this purpose? It should be Interop\ContainerInterface
I don't think that `html/docroot` was supposed to have a `__html__`, so I don't know why this is here. I don don't see the difference in the code where we actually use it.
I think this should be public
Do we need this check anymore? The only reason we have `node` is that we've got the `url` at the beginning of the method is to avoid calling `/node.` in the context
Why do you need this? The return type is `Map`, not `NULL`.
This should be a singleton.
I think this is a leftover?
Why was this removed?
I don't think this is necessary. If `&.` has any other options, we should be fine with it. If you don't care about it, you can just set it to `""`.
Shouldn't you be calling `array $icons` instead to keep the signature and set the other arguments (and set the default values to `null`)?
We can add `TODO` to remove this
Should this be `final`?
Why not just use `GetMethod` here?
Who will be removing this?
This is not the right thing to do. The `errno == EAGAIN` will just do this for the other branch.
I don't think the condition is necessary given that the hasattr() function returns a non-zero value
`except ValueError, e:` is the default value. It is always `None`.
will be deleted if not needed
Shouldn't we also mention the `package` package here?
Why is this change needed?
Should be `pants.ini` instead of `sdf`?
Should we also include the environment variable in the config config?
Why the type annotation here?
I think the logic here is fine, it's better to keep the method `transformPaths`.
I think the idea here is that if the user is not integer, the return False will be more accurate (but probably the return type is integer) and this will be true for the caller.
I think we could have this as a constant somewhere, but we'll need to make sure the name matches the name of the view. I'm assuming the feature we're not going to have any other way around.
Revert this change?
It is strange to me that the field name is a boolean, and not an array. What about: `IllegalArgumentException.isEmpty(doc)` ? And if we do this, we should also have the check for "IllegalArgumentException.class" below.
I'm not sure this is actually needed, it is only used by the `bisect_wing_round` key in the view model and we need to keep this in, for example.
the reason is the `:paste-primary` option here is to avoid the duplication on the dashboard.
I'd like to see a more descriptive name for the variable, it should be something like 'xxx' or something.
Why removing this object?
should we rename this to ` PlayerTradeAccept` ?
This is not needed.
Standards: Please add a space after commas.
Why not using the `$plugin` variable here? Then the `$lang` variable can be removed.
Since this is only a very specific point for a single file, I would prefer not to remove this, but the reasoning is that the `SpecNodes` variable is used here and the `api.SpecNodes` variable is used by both `SpecSpecNodes` and `SpecNodes` and `SpecNodes` properties are already declared in `SpecNodes_type()`.
How about we make it `container.new_record?` and then in `before_validation`? Then we don't have to create a new `validation` method.
If you're going to be casting away from 1f you'll never need to check for the globalRate > 1f
I think the previous check is wrong here, since it only works if you used `--ACTIVE` which you have now the `--ACTIVE` flag. Maybe `--ACTIVE`?
This is a breaking change, but I don't think you need to pass `async` to `new MenuItem`.
This should be also changed to "exporterOptions".
This should have a `@var` attribute.
Why is `DownloadHelper` not being used? `index.isPreviewAllowed()` will be true if `DownloadHelper` is not Private.
This method is not being used, is being used by anything else?
Note that this log message is not useful. It might be useful for debugging purposes.
Is this not the same as the one in `CreateAndArgumentArgument`?
I don't think this is right, but I don't think it's a good idea to test both in the first and the second one, so I'm fine with it.
Trailing whitespace detected.
We have an `db.capacity`. `Info("setting db capacity to :", db.capacity)` does not exist, but it is not really a big deal, because this code doesn't do anything to do with `db.capacity == 0`.
There's some lock in the `std::mutex` function.
this could be statically imported
Hm, I wonder if this should only be done if `dbName` is set, but I wonder if we should just get `nullable` for `set` and set `dbName` to `null`, since the `db` and the `@db` can never be `null`. I think we should keep the old `set` for each new bundle in the `@db` and `@config`, so that we can set it to something else. We can do this as well.
This is a bit confusing. How about something like `BasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasicBasic
I would make this an enum, not a constant
I think this should be kept, not `nvda.exe`
I think you can keep this one, if you still have a `__GNUC__` feature.
I guess these are the defaults, not sure they are really needed if the network version is the same as the network version.
this is an important debugging leftover from me, it is not clear how to use `model.Module` and not `model.Module` for the model (which is what `nn.Module` does), is it a typo?
`--eval` is a `\nixpkgs` so should be fine
Why did you remove it?
I don't think it's a trivial thing. If we're going to do a IP, I would go with something like `IP[ps.mode]` to be clearer, so I would have the same pattern for the IP in `spack.info`.
Hmm... this is a bit unfortunate and I think we could just remove it altogether and use an enum.
I think we could also add a secondaryConfig property to the common and update it to call secondaryConfig
Line is too long. [81/80]
Shouldn't we still have `isProcessLOB()` ?
"Cannot used by this"
Why does the default return here?
Did you want to include this include?
Is this still needed?
What do you expect to be able to detect this value? It seems to be used in many files.
Why this change?
If zk is an zk, this will throw an Exception. I think this will throw an exception if zk is available.
I'm not sure if we should be doing this, but I'm not sure what the best way to do is is.
Why not return here (and the body) rather than returning?
Can you add a note about the new field in the new field in the `*SecretEncryption`?
Line is too long. [86/80]
I'm surprised the indenting here was intentional.
how did the `api` argument get set?
This one shouldn't be here
"Attachment is used simultaneously as a a attachments."
What if we added a feature to `HeadManager` in the future?
No need to have the default here, the description should be updated
Why is this required, if we move the import to the top of the file?
(nit) I'd say "Keychains that shouldn't be shown in the keyhint".
`keys` is the same as `keys`. The same is applied to all the tests.
Can we remove the arg arg here?
Question for my own benefit: do we care about the fact that `options` is an object of the view object, but the `get_current_info` is an object of a view model?
I'm not totally convinced that `Status` will be used as a string. Maybe `metrics` or `metrics`? It would be good to be consistent with the `returns`/`reset` metrics
I think this would be better as a `before_action :set_outside_committers` check and then we could set it to `before_action` directly instead, since the `before_action` is only set to `outside_committers`
`return new Date(json, Date, o)`
This is a very confusing name, as we are in the same file. How about we change the type in `EVP_native.PutUint32` to `EVP_native.PutUint32()`?
@tgamblin Do you remember which value `BooleanDefault` is `false`? I think we'll need to change the default to `false` if we don't want to change that.
Can we remove setting the value here, as it's not used in the method above?
This is a bit scary, but I think you could remove this
I don't know what this `mysqld` is used, but this `opts` is used for
Rails/InverseOf: Specify an :inverse_of option.
Should this use tunnel->tunnel == NULL instead? It seems to be the only caller of this function that is passing in the NULL check.
I don't think it's necessary to change this line, but this will break existing tests.
This could be `newLen <= 0`.
this was removed, it's still required in the changelog
What if MMFFAromCollection is non-empty?
I think this will break if you remove the old version.
I think this can be removed. If the String in the case of an empty String, the String will never be empty, so we need to use it.
We already have a GapicProductConfig.create() and create it in the constructor. Please add a GapicProductConfig.create() to the interface. Thanks.
`breakPos` is a new instance, so this doesn't need to be part of `hack/index`
This should be `nodeConfig.AgentConfig.RuntimeSocket = ""`
@tgamblin Do you have any concern here, if we have a default value of 0?
This should also have an assertion on the implementation.
Same as above about splitting the whole method into two lines
no need to change this?
I don't think there should be a private key.
Would it be safer to keep this as it was since it is already called inside `masked_heatmap`?
Is it a bug or just this one?
This file is not used any more. If you remove this file and we don't need it any more.
Can you remove the file, it's no longer being downloaded?
This should probably be a different way, I don't know if this is a good idea. But maybe it's worth to have a file that does not exist.
This is a `<input>` and it is an `>`, which is not what we want. Can you remove it?
why is the `==true` needed?
I think you can just do `!isBlocked.function(item, ...)` instead, since it will always be in the list of click/hidden handlers.
"Add automatically, this be automatically automatically" should be "Add the gateway to the root of the CLI flag."
I'm not sure about this one. If I'm understanding this right the configure method was `super().info("unchecked")` which is the correct location. The configure method was `super().info("unchecked")` but I would prefer it to be `super().info("unchecked")`
This should probably be removed, right?
nit: this is fine for now, but I think we might be able to make this configurable by the service itself.
`bp` is not a good name, because it is in `os::vector` and it has been removed from this class.
I think it's better to keep the import of the external library.
Why not use the new built-in package?
I don't think we should be calling this `IsolationLevel` for our own specific implementation.
Why remove this?
Why is this being removed?
Line is too long. [85/80]
I'm a bit confused by this message. If you're using a parent, you're using the parent id, so that the parent id can be different, but you're using a different message to be consistent.
Why is there no config flag now `true`?
Why not just return the tuple here?
This doesn't seem to work, since `entry` is already a `Map`, so I would use a `Map`, but it's not a big deal either way.
add string is not a big deal
Why is this needed? It looks like this was added in #20932.
I'd prefer `config = plugin` as it was before, and in `config` we use `ConfigHandler`, `ConfigHandler` for all config classes.
The CDN because it's the same thing as the old one (including the `CDNDN_`).
this is not a valid function
This function is a little odd - can we just remove it?
@bartonjs, I changed this to `QColor this_col(int(255.0 * col.r), int(255.0 * col.b), int(255.0 * col.b))`
We should add an assert here to indicate that this is a default (which may have some effect on the fact that there is nothing wrong with a `[int]`).
I am not sure we should print this twice, it is not an error case. I'm pretty sure this will print the failure if we have a test for the new behavior.
Style nit: Can you use `!` instead? It's more readable with `if (string_value)`, but it's more readable.
This should be set to false by default.
This should be done in a separate `if` block. Otherwise, it will be the last one which is not the last one.
This is still in scope of this PR, right?
I think this should just be `default:`. Also, I don't think the other `default`s should be used.
Why is this in the first place?
I think `# `attr_value['string']` is not required as `attr_value['string'] == value`
Hmm. Why did we have to use the `reader` variable here? Is it a common pattern to pass the reader in to `metrics.All()`?
Do we still need this?
@fmassa what do we use instead the factory function?
I think the naming here is more readable and less confusing. The "hrottle" is more like "Redundant RTL string" and "init" is more clear.
This change is not needed, right?
Can this be removed? The referent happens in `kser.name`?
this change is not related to this PR, but I don't quite get why it is needed. I would also add it in `config.py` and add it in `python_utils.py` in `python_utils.py`, but it's not needed.
Why is this removed?
We can probably remove the `attribute_change` method altogether since it's not used in the `attribute_change_attributes` anymore.
should we just pass the `GetItemLayoutId` through to the constructor? I'm pretty sure it's going to change in this class and I don't see a reason we need the `GetItemLayoutId` as a name of the constructor
This seems to be missing the class definition?
This is probably what we do for the `DropVXLANPacketsFromWorkloads`.
Should be `funct`
I'm not sure this is necessary because we're returning EGL token if the parent is the same, and we don't actually need to have a different result. In the case of, if we have two different operations, we can just do one call in one function to call `render_request_code` or the call to `request_code`, which seems to be the same.
The `deploy.on\\` should be a `\s` instead of a dictionary, it can be a string like `The `deploy.user-deployment`
Please keep `$code` and `$status['code']` in local variable.
I'd prefer to have a constant defined for this constant.
Should this be `Duration_SPOT_INSTANCE_DRAINING_ENABLED`?
It seems that this file and other similar changes are also in the `__future__` file. Could you make this a private/private method?
I am a bit surprised this didn't break anything.
Line is too long. [83/80]
please update the `['bool']` as well.
This is an example of how a `repositories` would be used?
I think this should be just `setBlockNetworkLoads`
nit: add a `TODO` here
We don't need to use `signer` here because it's a local var.
`!localize] != false` should be fine.
just to be removed?
@alalazo Is it worth changing from `kvs_txn_info` to `idx_txn_info`?
This is the only place that is used for the `when_searching` list. `when_searching` is used in the `scrolling.bar` property. So it would be better to use it as `scrolling.bar`.
This should use `sys.getfilesystemencoding()`, and then use `fs_path.decode("sys.getfilesystemencoding())` (which will make the call to `fs_path` in line 355).
We could also add this interface to `Spec.separator` and make this `IHttp` since we don't really want to expose it as a public interface.
Should we keep this as `@SuppressWarnings("unused")`?
The Sms should probably use `CryptoSm2Usage` instead.
I think this method is unused. You can simply remove `loadChain()` altogether.
I guess there's a better way of doing this, but I don't feel strongly
let's use a larger regex
Please remove this method as it was before.
I'm not sure how this is going to work, but I would rather see a unit test for this.
Why was it added twice?
I don't think we need this.
@dvoytenko is this good or should we be using this for all resources?
Missing comma.
This needs to be added to the other PR
I think this should be `output.append((((Date) v).toInstant().toString()`
Nit: Use a full sentence, capital M and end with a period.
This is not needed
Should we be moving this to mailPort since it is used only when a user provides task?
@francescoonsoo avoid using an empty list.
This looks like a typo.
What is this `map[string]bool` for? It seems to be the same as the `map[string]bool` for all the subclasses.
Can you add this to the other `Server` functions?
why remove it?
Does this work? I would have expected it to return some string, and it is not obvious that it is a textArea.
This now gets called on `go`. It looks like you're calling `run()` in `lib/lib`.
why not `break` as the `the` above?
This is probably the only place where I wanted to call `deliver_welcome_email`. I don't know how to do this, but I think we want to be very careful about this. What if we called this `deliver_welcome_email` instead?
You should be able to use `map` here because `visible` isn't in `DruidCoordinator. Config Config`. I'm not sure what the best name is, but it's the best we're planning on using.
Is this `double` closed? If not, I would say `double`
why removecorr?
The error is in the `sync.chainStore`, so I think we need to update it.
I think the `IComparable` is redundant as well.
I assume this was added because of the `workspace`?
It seems that you need `auto` here to be consistent with the above code.
Should this be a constant? I'm not sure how to test it. If it's useful to have an var, it should be a constant, not need to be passed to this function
Do we have tests for this?
do we need to set a password here? we don't have to specify a password
Why do we need this change? It seems redundant and `serverState.BuildState()` can be called from within `RunBuildState`
This change is not needed
This should be a const, right?
@mfojtik why is this change relevant?
These lines were also a bit too long and not related to this pr ... please revert
Why is this change needed here?
It seems a bit weird to me that this should only be used if `actual2136.Type` is empty.
This looks like an odd change.
is this related to the platform checks?
Should this have the same signature as the other `pmd` package? If not, it might be better to have it as a separate file and use it here.
this was just a typo
Does `metricNamespace` need to be run as part of a namespace?
This will need to be added to the host list.
Use a protected method, not a simple string.
I think we can avoid using the Ratis_conf for this case.
Why not `pthread_cancel()` ?
I am surprised this isn't a recommended way to go.
This will only work if `disabled` is not `disabled`.
I think this is the wrong version
I think that this may be a little bit over-complicated since `typeof` is a valid argument.
Can we have a default state between `Descriptor` and `Descriptor`?
I'm not sure this is a good idea, but I'm not sure it will be a good idea to have this in `VersionState` interface as well, as we already have it on the other components, as in `VersionState` we don't have to.
I'm surprised this works; did you mean to add it?
this should probably use a default value, right?
Why are we using comma8 characters here, rather than a hard-coded comma-dangle?
Can we make the CLI flag optional?
Why is this removed? The reason is that if the file is not being loaded, it should be included in the file and not in the file itself.
It seems we have this same issue in v1.x?
We should keep this cast around for a couple of these where the uint8 extension is used.
This is going to be `WithStampWithTagID` and it seems that `keybase list-data two.5` and `keybase list-data two.8` do the same thing as `keybaseID`.
Shouldn't this be configurable?
`I000-\uF8FF` can be used by `Mdiv`, and it's not used in this file. We should add `Mdiv`, `Mdiv` and `MMbats`.
This is not related to the feature, but I would prefer to see this be `T` rather than `T`
I don't get it, but why not include the default in the `settings.py` namespace? It would be a bit more future-proof for users to think that they're used for people to think that they should have a default value of "vscode" in the future.
Do we need this?
Why are these changes needed in this PR?
This is not a great change, but I think you could also have an explicit `where` struct in the middle of the changes to this method.
I think we'll have to change this method from 0 to 1.0.
Why does this display 1?
No met met H2.0, but we should use `pin` here.
I think this should be `EncryptedDataSize`
I'm surprised we didn't have a MIME type for the blob object. I don't see any usages for this
I'm not a fan of this, is this related/recover?
See question: is this change correct?
why does this not use the endpoint store?
It looks like the `BlockSig` is also in the `Read` method, so we can just remove this line. (It's not a big deal, but it's just a small thing to get around.)
Is this change necessary?
I don't think we need the `spec['verified']` part of the string, since we don't have any other `spec['verified` fields in the response
Is the intentional?
`log_path` should be in the docstring.
purchaser? -> approver or delegate?
This is not the right place to put this code. The value of `tx` is not available. I think we should be explicit about whether we should call this `if !has_fee_estimates()` instead.
I think the original code was better than the original condition. It seemed to have a different meaning for `TopLevelCondition` but it's not a big deal.
I would call this `alloc` since this is a very specific one.
Why not use the `sql.DB` helper? This function is not being used anywhere and can be used by both.
Why the newline change?
It is still not necessary to check the newly allocated value when the array is empty.
I'm not sure about this. When would a user be freed, it's freed on a 404?
do we need `password_reset` and ` Op_reset`?
Can this require `./index`?
`from` is not necessary here, it's only used by `final`.
do we need to remove all shutdownHook?
Can this cause a conflict in `policyName`? If there's no policy name, it's not too long.
`Start` might not have a `Start` instance. I don't know if it's safe to use it here since we don't use that anywhere else in the codebase. I know that `Start` is not a `List`. But this is probably fine, but if we want to use the function that calls `getStart()` on a `getStart` we need to use `getStart()` in `Start()`.
Is this used?
Is this test still necessary?
I think we should use `goto_common.go` here to prevent unnecessary code coverage.
@mjkkirschner I think you have an idea about the first check.
if there are multiple exceptions we can move to a common header
nit: can we call it `epochlengthactivation` to indicate we're not actually using it?
I think it would be better to move this into the `if` block, and have the `if` block block be the last line of code that would handle this.
I think we should keep this as it is for now.
I'm not sure what is going on here. I am not sure how to test for mapper here.
@bvaradar Any reason why this is changed?
You don't need to add the `int32` to the list if `opts` has been changed.
`DECIMAL_LITERAL` is now unused, can be removed.
Nit: remove newline
@dantleech Why did you change this test to a `[Test(CallWithCode(code)`?
Is the idea here that Windows is not included at Windows?
Should we rename this to `none`? It's not really a "typed now" but a "so we're just doing the conversion of it being a struct so I'm just thinking...
I'd prefer to see the test in the test suite rather than have it on line 14. I think the `.inOrder()` can be removed as we don't want to have it on line 14 and the test is still on line 16, right?
Is there any way to avoid creating a new set here?
This was a bit hacky. Call it `Debugf(Server Exiting..), in case of raised in the future. This should be `s.Noticef("Server Exiting..")`
You don't need the `timeLeftToClaimRefund` variable anymore.
Can we have a constant for the table?
I would rather have only one set of tests in the tests, that is not a great way to test.
Should we be using `Valid` here and in the below `ValidCollector.ToInvariantString()`?
What if someone uses a different type for different inputs for different inputs?
I would prefer this set in the `settings.html.erb` file. It's not in use anywhere else and makes sense to me.
Whenever we are using `Long` from the common package, we are trying to reduce the number of places we need to use it in this PR. I would recommend using something like `typeMap.get("type")` or `typeMap.get("type", Object)`. I don't want to have a more generic solution for this.
Shouldn't this be `expect`?
Should we call this zoneIDIDID?
You need a `if random.uniform(0, 1)` here. Otherwise you can use `self.prob = prob(0, 1) >= self.prob` which is a bit simpler.
this was a bug, this should never happen.
This test will fail on mobile. I think you should test it. Also, this test will fail to ensure it is not run at all.
Looks like a typo :)
You can use `spaceId`.
is this needed?
This isn't an ` loglevel_id`. The current view of the signed signed view is signed.
I would rename the parameter "DBPDataSource" to be "public" instead of "DBPDataSource"
This looks like a pretty big regression for some other PR.
@stephentoub can you please check the difference between the two above and the other test?
This is a bug fix that I'm getting is working on. I don't want the role to be used anywhere.
I'm not sure why this change is needed? I think it would be easier to just add the `seelog.xml` parameter to the `StopExecConfigDir`
@vitek-karas @Eric89GXL What is the purpose of this line ? Are you able to load the full amount of time from the worker_start_time? I'm guessing this is the way to get the time out from worker_start_time_option - this code is called twice.
Unwrap error is already checked, no need to wrap it.
This seems unused. Please remove.
Why is there a property of `houseOwnedByAccount` and not the default value?
This seems unrelated to the platform checks?
let's change the param name as well
Why is this removed?
I'm curious: are these functions not being used in the `app`?
I think the package name is better
this file is no longer used
Is this needed? I don't think the other `.c` file includes it, is it needed? Or are there any issues with it somewhere?
Probably a bug in client
This seems to be a boolean, but I don't see a reason why it was `>= -1`.
`Detected-Locale` is a bit confusing. What about `HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas
Is this change needed to make it so people are not using it with the previous behavior?
`StatusContinue` is already in `Http2.go` so no need to add it here.
I'm not sure if it would be better to have `scripts/copy-groth-params.sh` here instead of `hydrateParamCache(c)`. It would be nice if this was a copy/paste in the first place.
This will only work for custom options.
Do we want to add this to the "real" section above? (I think that would be a good time to start putting the dont_listen into the "real" section).
I don't think we want to do this. The user will have to use `clang-diagnostic--'` for the env-var runner, which is not the case for the analyzer.
Line is too long. [89/80]
@smarterclayton I've been doing this as a bug in `lib/dependency_req.go`, not sure why we are using `--body`, as the default behavior. Is that what we want?
This should probably be removed, it's not used anywhere
I'm not sure if we should do this in this PR. If not, I'd rather we do it in a separate PR, but it's a separate PR.
This change is not necessary, right?
I don't understand what the difference between `journalPausedFromConflict` vs `journalPausedFromConflict` is, can you change the type to `keys`?
Is there a reason this was removed?
I think this is a leftover from debugging.
Please use `$this->getContainer()->get('sonata.media.manager.category')` instead of `$this->getContainer()->get('sonata.media.manager.category')`
Why not use `ChainFailsafeIn` and `Chain_FailsafeIn` here? The same in the other two parts.
Does this really need to be read when `err == nullptr`? I'm not sure if this is the right solution.
Nit: we should use a hash instead of a hash.
I think this will not cause a NPE, as it will always return false if there was an empty op in the `if (*(Lng32 *)op_data[1] != -1)`.
should the code be part of the code below `advance`?
Is there a way to make `raw` optional and add `@private` to the help text, and update the error message to say that it should be a `default`?
Shouldn't this be named `security` instead?
Can we move the option name into the config itself?
this doesn't seem to be needed, since the method can't be called by any of this code.
Why is this being removed?
why not `current`?
@agaspardcilia should we do the same for `<%=name %>` ? I think we should always use an enum instead.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't see where the extra `filter_#{params[:filter]` is used, can we use that?
We should add a note to the ticket that we'll have to do this before merging.
Please also rename `MoreObjects` to `MoreObjects`
Why are the changes to mock mockings?
this should probably be a `Set` method, as it is not required by this PR
@deads2k i'm not sure why we need this change?
Why are we only able to get rid of this `joplin` check?
id isn't used anywhere?
nit: update copyright year in header
Why not just use `t_blob_button_blob` here?
nit: this is not needed
why the need for the moment if it is not used anywhere?
@maarcingebala What's the difference between "subscriber" and "obj"?
Do we need to keep the `iframe.configure` on the `configure`?
You need to make the `Resource` subclass a `contacts`, not just the rule
Can we use `SELECT` here instead of `Source`.
I don't think this should be a part of the public API
Align the elements of a hash literal if they span more than one line.
This seems like a pretty big change. Why is it necessary to check for nil?
nit: `Boolean` is a better name
should this be if self.w3c == self.3c ?
I believe you can drop this right?
This function is not called in `startTime`
I think this is an unrelated change?
i think we should use json here
If we're going to get this to happen, can we make the log statement a warning?
@mitchellhenke Thanks for the contribution. I'm not sure that it's the best idea here. The rest of the PR is to add the `typing` import to `dependency_dependency_from_metadata` in the `install` module. I'm not sure that the file name will change in the future though, as that is not the case, as it's a `typing`-type.
This should be `>=3.1`
(style) externs should be avoided in .c files
Maybe we can create a default spec for this as well, or at least make it more clear?
why are these variables deleted?
We could just call this `context.WebDriver`, but it's more consistent with what we usually do.
This needs to be use to support new-style support, but I don't see why it is required. I would expect it to be a new-style rule, but it doesn't work with your new-style rule.
Please don't use this.
This should be just `$table->tinyInteger('reserved')->unsigned()->nullable()`
nit: `selectColumns` is a better name for `selectColumns`
I would rename this to just `Boost`.
I think we don't need this. You can just do `spack_platform] =~ /cisco-5/`
Is there a reason why the defaults are optional? What about an `omitempty`, `SecretPrefix`, `secretSecure`.
slaveOk is already set in line 364
This is a bit confusing. Why do we need to fill all of the attributes, and not fill them as key?
Do you need this for tests?
Remove empty line
better to use buffer size rather than its size
I think this should be done in `constants.rb` instead of `or`
Why is it being changed?
Extra empty line detected at block body end.
It seems we can now remove the `=` part?
@jridgewell I've been using your IDE to avoid using the `*` in the IDE, which is not the case for the IDE. Can you please check?
This is a bit of a hack, we need to make sure it's in a different pull request.
This line should be removed.
This is the only place where `getValidationError` is used.
The `A` and `h` were both of these to be the same for `topic` (as in the `create` method), so this is fine as well, but we don't have to have `create(:topic, topic)` here.
BTW, you can use `_build_package_active` to keep the signature of the build method as it is.
Standards: Please add braces to this file.
`ExpectedCondition` is not used, so it can be removed.
I would prefer to have a separate test function for this as it is used in a test function.
Is this related with this change?
Why we need both #if and #ifdef?
diagnostic will not be used for the class name in the constructor.
Maybe we could rename this to `volatile`? `private requestReadReceipt = false;`
@jridgewell Is this change related to the current API change? If so, would we need to update the `cleanup_4.1` and `cleanup_4.1` to `cleanup_4.0` for new users?
Why not just use `errno_val = -0`?
Can we make these functions take `func (i *inbound)` and then use `func (d to avoid constructing the new elements if possible?
I think we can remove this and just set `vic.TagList` to the same as `dev.gz.yml`. It would be more readable to just use the same `id` here.
@deads2k @matt-gardner, does this mean you'll have an issue for this as well?
`hostName` could return `false` here and then `dial` is never called, since `dial` would return a boolean and thus `false` would return `false`. I think we should keep the same behavior and return the same for `dial()` method.
I would put this in the core, it is used internally in the core, not the "normal" API.
It's not clear what the invalid request is. Can we just remove this?
is this intended?
Is this needed?
Is this import still needed?
Why is this needed?
Move go-mega above the other go-mega imports.
We have to keep imports sorted
should we log at L241?
I think this is not the right way to check. If `!is_int(netloc, netloc)` does it work?
I think there is a typo here...
We don't really want to log this message at all. It's not really important that the user is able to see the problem and see what the problem is.
We can't change this. It's an API break.
This function is only called in the code, and not in the `err` interface. It is a little confusing to return an error here. I think `err error != nil` is more appropriate for `code.Status` to be returned as a `err error`.
This wasn't an Optional, so it wasn't used anywhere?
Again this is the only place where we getChromePath is used.
It would be better to use the same name as the existing "normal" parameter?
I think you can add this to the parent package. You can add this back in the `LogDestination` package
I think this can be removed
Why are we not adding the new `452` annotation here?
You can't really do this. Just use `!=`)
Can we make this a `3kb` instead?
Is it worth moving this logic into the `descriptor_update` function? We could just call it `VK_DESCRIPTOR_TYPE_DESCRIPTOR_SET` right before the call to `descriptor_update`.
I would put this right under `SiteConfig.grab_interface`.
@mmaxim do you think this should be set on the config?
Would you mind fixing the import as well?
Please, add the `TODO`
This should probably be renamed to something like `status_STOPPED` (just for the future, I don't know what you have for the status).
We can't remove the tests for Provisioner and Provisioner, since this is the change that fixes it.
I don't think these are valid, they are optional in the first place.
`STORE` should be imported here
This type using `os.environ.getKind()` is not the best way to get the `type` from the list of `os.environ`. So, it should be `type using #getKind() as a cue.`.
I don't understand this, but is there a reason to use `<svg>`?
We could just call the CDC for each CPS here.
`vStringTruncate` is used to initialize `vString` with `null` value, but I don't think this is correct.
It's better not to remove 'connecting' from peer list, it could be possible to just remove 'not connect'.
This is a little weird, why do you need to return 0?
This is a bit of a hack, since `MarshalECPrivateKey(key)`, and the `keyBytes` variable is `nil`.
Why not just do the string. Instead of doing it in the constructor, we could use it in other places as well.
Can we add this to the `init` section above?
Why does it need to check for `is_open()`?
Can we make this configurable?
Here it would be nice to call it `generate_special()`
Line is too long. [81/80]
We should be looking at the `info` level in the `onSelection` and the next log level (which will also have the `using Namespace` and `_get_or_update()` method, which is the default behavior). This will make a lot harder for the next log to understand.
It looks like this is the actual fix, but the previous one had not been removed. Is that intended?
This is the main thing that I'm seeing is the most important part. The import statement above needs to be changed.
Can you please add a `TODO` to these messages to remove the need for the `docker`?
Using two times here is a bit weird, I think you should pass in a `currentTime`.
This is wrong. You can just remove the condition.
Doesn't it need this check as well?
We can't do this because there are a couple of `this->dateConverter->convertToDisplayDate` and `Y-m-d H:i` calls in this PR. This is a little hard to follow, as the default value is not set in the default value and the user can do `!!!` and then the value is set to `null` by default.
I think the import should be changed to `Reader.production` and then the Vue file name should be renamed to reflect the Vue file.
The first argument to this `float` was the second, because `model` was a tuple before. The first argument is `model`.
`path << path << "= directory";` is fine, I think.
This is a bit weird - it should never be used.
@jcston i think this is a debug debug level for the debug level, not quite right. I think it would be a good place to put this on the debug level.
nit: can we call this `fields.Timestamp`? it's not really doing a name for the `fields.Timestamp`.
I think we should change the description of this change.
Is there any way to make this configurable?
I believe this test could be simplified to use the function `assertEqual(object)`
nit: add `[type]` and maybe `logical_size` to this new parameter (and the corresponding one below)
Why is the `=` removed?
This will be incorrect. The new error will have the same address as the old one. Is this intentional?
I think I should have looked at the first check I think this should be also `maxBoundDescriptorSets > 0`. I think we should just check if the `gpu_validation_reserve_binding_slot` is zero.
When is this ever set to true? If not, why don't we just return `null`?
This is the only place where `tables` is created.
This seems like a change to the change that is needed.
I don't see the pylint here.
Do we not want to check for a non-null value? (not an empty list?)
Line is too long. [84/80]
wrong import order
Nice catch! I'll have to clean this up :)
We need to keep the original pointer. The original pointer was created with `@Nullable`.
nit: can you add a small small note to help text here? ` get_model.h` is the default for this header
@chirimoya Can we change the description of this to `SEO_TITLE_MAIN_PAGE`?
We can't use `s` here, it will cause `MaxMaterialize` to fail if we specify the default.
i don't see any use of a unless here, can you just do a helper?
We don't need this, we have a seed model with the same name as we do for the seed. Say the user has a reset entry in the list
What's the point of this `&` statement? Should it be a `&.`?
We should add some validation of the new parameter.
Why do we need to check the value here, and not just if it's an empty string?
Why is this needed?
We should use `JSON.TypeOf` here.
Can we use a different class name for the internal class?
I'm not sure if `toySchema` is the best way to check if the `save` method is actually used in `build-system/common-impl.js`?
should this not just be `dbm`?
Why remove this?
We should not add more things like this in the future.
I think it should be possible to have one log lines that is not in `localtime` but the other lines in `start_admin/cli.go:3000`.
Is there a reason you can't use `nameof(32.parse())` here instead to avoid a warning?
This would be `URL` so it doesn't need an index on a host.
Why do we change these parameters?
`h2o_error_printf` is the same as `fatal`. Is that intentional?
The fact that this is a test is pretty weird. Can we keep it as it was, or just a test that verifies that the warning is not expected?
We should avoid the extra copy and paste a warning for errors and errors and errors
This will fail when the file changes to the `common` module.
Was this just an oversight or was this just a mistake?
This needs to be checked every time.
> 10 * 1000 * 1000 * 1000 * 1000 * 1000, // The PubSub service limits the number of messages in a single Publish RPC for a single Publish RPC. Is that the intention here?
nit: not necessary anymore
why remove _writeLock here ?
Can you also use `go-config.go`?
Should we keep this as is? If we have the enter key, then we don't send the action here.
Does deduceExprType throw exception if deduce has already happened?
This was an error I wasn't sure about
This is the main thing that I don't see where I can see this.
I think the URL could be more meaningful.
This seems to be the wrong thing.
Can you remove this? If you are going to remove some feature to improve the naming conventions, please remove this one.
why is this check removed?
I would use `this.stop` to be consistent with the others (and it is not clear to me why).
` visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual visual
Remove this class
Why this is changed?
would be better to use a `var` instead of `var`
I would recommend using `self::FLAGS_WITH_IMAGE_FILE` instead.
maybe just remove "current" and just use the short version?
Sorry about the nagasp, but this could be a sentence sentence, not a "smultiple" search?
I would just set this to `false` here, to prevent any misunderstanding where the error message is actually logged.
I would also call this `--conn_retries`
The issue is that the input number of elements will be incorrect (i.e. the LooseVersion). I think that the `Script` could be a good idea to do it with a `Script` that will be used in two places.
I think you could just use `ZMSImpl.class(ZMSHandler.class)` instead
This is a bit confusing, why not make a `set` statement a method, and do a single call that just returns the result of the job?
can you change `eth` to `ImmutableEthProtocolConfiguration`
This should not be `DiscoveryField`, as the field is not a `List`.
Why not just make the container and use it in all places? I don't see it being used anywhere.
Do we have a convention where this is used? I thought it was a good idea to keep the `#else` block together.
I think the package imports can be moved into the group above.
Why are you changing this value? The new value is `date`, which is wrong, but the new value is `date`.
I think this should be 32, 32,5,5?
Should be log.info()
The key generation is still empty. This means we can't use the key generation in the key generation without updating the key generation.
can you use `mock`?
This is probably not a great idea. But if the value was already in the constructor, the default value was `undefined`, the user will have to pass `this.options.cursor`, so the default value should not be `null`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We can probably just use `Debug.Assert` here.
The original code was not clear to me what this change means. `if (props.value)` is the same as the original value and the new one is a no-op as the old one. Is that correct? `props.value` is the new one, and it is not the same as the new one, so the old one would not be okay.
Why not move to `WordWidgetKeyword` as it is the same as `downCallback`? I think the original idea was that we have the same code in `downCallback` but we can remove it in this place
It would be nice to have a test that checks for these values
This file was moved out of the "v3" block, but it's not in the rootless context, right?
Should use a `|| (1)` here.
So this one is only used in one place now?
Is this still necessary, or is it because the `Query` already has a `*Query`?
I don't think this belongs in the package. Instead, we should set it to `auth` and add it to `github.com/libopenstorage/pkg/correlation`. Then you can use `libopenstorage/pkg/correlation` to get the pkg.
Why not keep Message here? Seems like it is not a requirement.
This was a bug, right?
@daniel-beck I think this should be `selectors.Model()` instead of the `alias` one.
It looks like we are not re-using the same code, so I'd remove it here.
Shouldn't this also check for nil?
This include should be removed
This is the fix, the original idea was to make the count consistently aligned - but this test does not work for any other purpose.
why are we no longer using `select_in?` anymore?
What about using string?
I think we can remove it completely. We don't want this to work.
I think you can get rid of the `new`. My vote for using `new`.
In general, we use `cluster` in the `configure` method. I don't have a strong opinion, but it's a little confusing to have `configure` for things that are used to create other cluster-related images.
Just remove this line.
This should be a constant, no need for the `.State`
nit: Why not call `propToCol`?
Why is this in `build/system/system.go`? It doesn't seem right that there will be more things to display. I'd say we should keep this as is.
I think this is missing the package `v1`
nit: remove empty lines
This should be a single one, not an admin.
@deads2k i think we should use `item_with_element` here, as this is the default behavior
Do we want to add a check to make sure this is properly set or not?
what is the reason to not just remove this line?
This needs to be changed to use `.format` as the rest of the file below.
I think this is not a good use case for this, it is just an example of where it should have been, right?
I think we should be consistent and say `expecting'` instead of `at` to be consistent with every other type of WIND
I'm curious why you didn't have to do `pluginID_t getTaskDevicePluginID` in your `if`
Shouldn't this be `if` instead of `sreq.params.set(CommonParams.FL, "*")`?
I'd prefer to remove this.
What is goal of $exception?
We don't want to use `build-system/besu.core.Wei` anymore, since it's not used anywhere.
The `os.IsNotExist` call does nothing.
It seems like `GetParserWithBuiltins` could be a function to return a boolean that is not GetParserWithBuiltins.
Can we move this into `cpuCircuitBreakerEnabled`? That's what we do in other places in this PR
Should this go in the deletes object, with the rows rows for this?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Could we use a `shortcuts` variable here?
Why does it overwrite the snapshot? I think this should happen before we set `canceled` on the snapshot.
This should be `HttpHeaders.CONTENT_LENGTH`
shouldn't the length be a static constant?
This is a bit weird, it should be `get_rules_to_not_not_not_many_for_tests`
I'm a bit concerned about this. Why is `eniAttachHandler` being set before it is set to `eniAttachHandler.handlerFunc()`?
Is there a test you could use?
This is the only place where we use `cavaava.setFlags()` to set `universe` to true.
There are some places where you can use `chrono::duration`.
I think these can be combined with our coding style, no need to change this, as the library library already imports this package
`std::string *error_code` is already defined as const. I would use `const std::string_tuning($error_code, std::string_tuning($error_code)` instead and avoid the double negation here.
Why not make the constructor a `std::string prefix = kPartsTable;` ?
why this change?
We already have `go.opentelemetry.io/otel/sdk/trace` so we can just inline this one line.
I don't think we can return any array of `null`s here, so I don't think there is much a need for this return value.
(style) line over 80 characters
Could we have a loggable context for this, like in the above function to avoid ambiguity?
Use the new Ruby 1.9 hash syntax.
If we do want to return errors from `s.first` here, we can use the `error.first` function instead.
why is this change needed?
I'd like to see some more information about what this is and why I'd prefer it to be `null`.
What do you think about moving the `Prefix` into the common package? I'd rather not have all that `StringPrefix` and `str.Join` return a `String` or a `str.Join`.
There is a typo in `pushsync`
It looks like this is not a subpass. Could we add something? Like: - Eliminate from a VC file - Eliminate by a DAO - Eliminate from a DAO? - Eliminate from a DAO? - EDF here is a concern, i.e. a DAO? - EDF here is the DAO.
This change was needed to make the `TRAFFIC` in `setup.py`
I'd rather have an index for this.
Shouldn't this be `backgroundCtx`?
This is a change of programme. We have a number of custom resources in our code base.
Why do we need the `name`?
why not at the version number, and the log message?
What's the purpose of this change?
I think the `REGEX` should be an error if the user has a `full_description`, not an error.
It's a bit odd to use the `extra` value here. I'm guessing that the `chain` value is used to handle cases where `test-event` is ` 11 byte`?
Please don't put `isset()` here. If the association is a `?:` it should be in the same if condition. Also the `isset()` will do nothing, and the `if` should not be necessary, but not in the `if`
I'd be tempted to use `typing.authorization` here.
`allUsers` should be on a new line, like in the other files.
This should probably be a `verbose`.
Please add a space between the resulting `=>` parenthesis.
I wonder if we shouldn't do this in a different way. I think the `where` clause should only be needed if we're not using `4` in the `n` key. The `if` statement should still work for `4` (which we should only if it was in the `if` statement).
Why is this required, and why is it needed ?
This is a good idea, but I'm guessing you can use something like `env.config.parse` instead?
Why was this change made?
Can we rename this to something less vague? I think it makes it more clear that this is what's used for.
Style/NumericPredicate: Use && instead of and.
@mfojtik I think this should be `Simple.com` instead of `.rb` right?
You can use `FUNC3` to get the class names
Align the parameters of a method call if they span more than one line.
@jglick I'm not sure about this one. I'm not seeing any use-case for `newRoot.Successors()`
I'm not a fan of the changes in this file, as the code looks a bit off to me. Can you explain this change?
I'd rather not do `0.12.6` here.
why is this removed?
Should this log line be removed after the logging?
Standards: Please add braces to this conditional statement and spaces around the `execution_time` operator.
Let's call this `setup_profiler`
This is unrelated to the rest of the PR, but could you remove this.
This package is no longer used, please leave it as is. We need to keep the package-level package-specific.
Why do you have to set the NULL argument here and then return NULL?
Why is this function not being used?
I think you can move this to the `static` declaration, right after the `newMergedCell`, to keep all the fields together.
In general, why use `attemptsCount` as a pointer?
this import is unused.
This is a bit weird, why do we need to define it?
I don't think it's necessary to do this.
What does the remoteHostIsNonLocal here do? If so, how can we handle the remoteHostIsNonLocal?
Is this change necessary? This is a test for `type` argument, right?
This is a change of behavior, but I think we want this to be an error in the `operator`. I think we should be consistent and remove the `or isinstance` and `or isinstance` altogether.
This is not correct, the auto index should be set to the default value of `_auto_indexable_2d` instead of `_auto_indexable`
This is a breaking change
why not using an enum ?
Can you add the `break;` here?
I think we need to get rid of the `ws` here and the `UpdateContext` below.
I wonder if it's worthwhile to have these checks in a struct, and then a bit more detail of the `if`?
can you please add some docblock to `yarpcpc`?
This can be a single single query, with an `ids` only the "old" fields that have been added by the `getQuery()` method.
This is not a "old" solution, since we are already calling this twice. I think it's ok, but maybe we should add a "default_type" flag?
Is this property still available on all platforms?
I would prefer to see the logic of the `receives pool pool pool pool pool` as its value and not the client id. I think `print_api.go` should be the name of the function.
This should be changed to something like `timeout/service`
This is a breaking change. If we want all these values to be public then we don't need to have a default value anymore.
this should be set in the test suite, right?
This should be done in another PR.
Do you need this in the constructor?
`StringLiterals` must be valid.
Please remove this.
Missing description please.
Don't use star imports please
Shouldn't we also be setting this to the default in the test cases?
@tmds please review this.
Why are you using `example.sni` here?
You could also use a `@Rule TemporaryFolder` here.
Is there a reason we change this?
Is there a reason to not call the `responseWriter` twice?
Why did this need to be changed?
why "mining successive" is now an int value? I think this is fine for now.
Why this module is not importing? I see the `__future__` imports above that you added.
I don't think you need to add the `padding` param.
I don't like this name. It's used in a number. I'd suggest to use a constant for it and a `use-starting-sequence-number`.
Why not `tagLock()`?
why remove this?
nit: this import is unused and will be removed
This include should be indented by the OSX, not the OSX.
This is a breaking change, but I wonder is it worth adding a new JIRA?
Could you add `__init__` to `translator` as well?
I wonder if we shouldn't have to expose the `Field` as a parameter.
This will be more efficient if you put all the headers in `MailChimp`.
This if statement is not necessary.
The `Fork` function has already been called. Is this correct?
Is this required?
Why is this removed? Is this related to this PR?
@jdkit-Andyas I think it is better to move this to the bottom of the file where `six` is defined.
maybe you should extract this with `if` as well?
I think you need to update the `Batch` to mention `done`.
How about changing this to `[]string.Converter`?
I don't think this method is called anywhere else.
We have to also add `DateUtil` here.
This seems like it would be worth it to get the actual error if it is not set.
Can you add a space between `if` and `$classes`.
@mjkkirschner is this the correct place to put this? I don't see why we need it in this PR.
Does this mean we have to update the `attic` types of the types?
I think this is not the right fix. We should just get the first part back and throw a warning if the file is in the first part of the file. The other option is to not have this flag in the file, so it should only be retrieved when the file is not in the first part of the file.
Is this correct? Should we be calling `seat->seat->keyboard_state.grab` here? Or should we call `seat_keyboard_grab` before the function name?
I would suggest to use a ternary operator instead to avoid the duplication.
You don't need cascade here.
Shouldn't this be "private" ?
How about to make a helper function in editInPlaceAnnotation that only edit the certmanager object, since it's not in the user's edit?
@dvoytenko can you review the change here, right?
This class is not used any more
I don't understand why this function is here, there is no need to have it here.
Is this change required as part of this patch-set?
@franckc I'm wondering why the default is required, but the #ifdef does not exists?
I wonder if we can get rid of the `.length` variable in the string and use `.to_s`?
I think `e.Input.Namespace` and the same `Field` is redundant here.
@davidjumani I guess this is a bit of a hack, but it might be better to keep the old name and make the `--cache` parameter consistent. It would be better for the new naming.
I'd rather have `aria-query` here, as this would be a different place for `aria-selector` (and `invite`).
I don't see why it's changed in this file. Can't we just make `internal` static?
why this change?
What if the <n> tag includes a string? Maybe we can skip the string?
I think it would be more clear if it would be `false`
This is a bit confusing. If timeoutMilliseconds is Timeout.Infinite then no exception is thrown. And if timeoutMilliseconds is not Timeout.Infinite.
I think these 2 lines can be removed?
I am not sure if this is a good solution, if you want to do this (to remove the git import). The other fix is to have a `java.util.Kubernetes.java.util.StringUtils` in a `if (db.util.isStaticStatic()` in the `if`, and import from there. Also, I think you can just import the `if (db.util.isRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemove` check.
The gServiceAccount check looks good, but I can't think of a better way to do it
I think this should be `config.option.checkCNumberOf(config.option.check)`
Does it not fit in a single line?
nit: I don't think you can simplify this a bit, the method is not only exposing the case for `headingLength`.
I think this is a bit weird. I thought we agreed to have it explicitly on the `*` module.
I think this is wrong, `onStartSend` should be called from within `onStartSend`.
same here -- do you know why it is act.GasPrice() and if there are any other things that might be a little hard to debug? I think it might be better to have the same action on the ESTMtc, and then have this be a try/catch in the action
This is a good thing to go. The first part of the list should have a "default" set to the default. This was the first one which is a bad thing to go.
What if the `maxNotFound` check is changed to `externalFormat`?
Why do we need this change? I think we are trying to get the `running` locally now. If I'm understanding this correctly, we should probably add it as a constant.
We should test that sms messages are displayed to the user and it would be displayed to the user.
We can use package-private import
Just to confirm, does this need a separate `fmt.Sprintf` call?
I don't know if this is a good idea. I'm wondering if there's any reason for not calling the `loc` function for every `AutoFilesystemTrimUsage` method? It would have been good to have one call at the end of the function: `if (!IsNullOrEmpty(...)) { ... }`
hmm, I think we should rename it to `opt/puppetlabs/agent/bin`, I think it's better to change it to `opt/puppetlabs/agent/bin`
Why was this moved?
can we add a `merge` here, that way the input does not exist at `merge` level?
The other `OSRM_EXTERNAL_MEMORY` includes the `O_routing_base_ch.hpp` file.
This needs to be removed as well
I don't think this is used anywhere
This is a bit of an out into master. I think this is fine.
We need to use `apigetest.util.Security` here as well
This is the one that is not used.
I'm not sure we can do this. `rpc-protobuf-raw-response` is the only purpose that we're trying to move to `rpc-protobuf-raw-response`
Should we do the same thing in `core/uri_parser.js` ?
why not make `self.underlayer` a static method on `Hudson.seq`
Why is this removed?
I think using_mysql is a little too generic for a reason. Maybe just make it an `if not in?`?
Should we make this consistent? Just: * The partition adjustment * The domain of what is present * The partition adjustment * The domain of the configuration * The domain of the partition adjustment * The domain of the domain can contain a partition adjustment
Why is this in `MetadataFlows` and not in `activeFlows`?
The problem seems to be that we don't have to do this, but it seems like this is a very minor cleanup of a code. I'm a bit concerned about this being a bit of a minor thing, so I'm happy to add an additional `return` statement to make sure we're not breaking any existing code.
Can we add a new line after this one?
This changesThis size to `torch.Tensor` as well? :smiley:
This should be a separate PR, right?
This is wrong, you should remove the import below `make check` below.
This doesn't look right. The `error_message` is always a string, and this will result in an error. IMO, we should just remove it.
You can't do `let(:org)` here, because `FactoryBot` is `true`.
What about just `url($uploadsPath)` and then using the function directly?
Why did you change this? It's also possible that we will change the UI if we don't have a `builtins` attribute?
This is not a good example of why I'm not sure why this is needed for the existing test case.
I don't understand why we are doing this, how does this relate to `timeout`?
nitpick: We don't use a global var for each parameter.
@bvaradar Any reason we are not using the `static` package here?
Shouldn't this be `ifr.Retryable == nil && ...` instead?
I think we should use `indexed` for zero indexed
Do these tests need to be wrapped in a `if currentTime in Storage.CheckTimestamp `?
This should probably use `short_version` as well for the same reason.
I think this needs to be in the same package as the other PR.
Shouldn't we use a Types.StructLike instead of a hard coded one?
I don't think we need to do this anymore.
I think the `2015` needs to be left to the `2015.` prefix.
We should not be doing that when the head is already set to revision.
Could you please use a more meaningful name?
I'd prefer to have a default `json.RawMessage` here, since we're now using this for the time being.
I'm not sure what the best way to go about the older version. I'm not sure what the best way to do is is, but this will be hard to debug when you have the CNI URL set to "0.2.0"
I am not sure this is actually the right way. It should be the name of the resource.
Should this be `NetworkService`?
I wonder if we could have a better name for this `TaskBase`?
Is this needed?
@bryevdv, we can't use `./gitea/utils` here.
NoError is now unused.
Why does this need to be removed?
Is this a typo?
>value [](start = 8, length = 4) I am assuming the null-check should be thrown here?
Can we make this `empty` instead of `Column`.
This would also need to be added to the `name` method
I think the command name should be "initial"
this looks wrong. You're just using internal Group.Selector here, which means, the internal Group.Selector will not be nil, if newGroup.Selector is nil, then the internal Group.Selector is set.
This will be wrong as we use `agent.v2` for the test.
Is it worth having one call to gasLimit ?
Shouldn't there be a "skip" call at all?
Can we move `metaServer` to `ConfigOption`?
You can merge `pip` with `pip.check_call`.
This looks like a debug message to me, no?
Is this TODO still needed?
Maybe a bit more explicit, but wouldn't it make more sense to move this code to the `default_bucket` list?
I don't think this is needed. `$this->normalizeIdentifier()` is called twice.
I think this is the right fix. Let's just add it back to the model in `formSource`. It's not really a good idea to add it in the database and we should be doing it in the controller. The way the form is in the `Model` model is in the form manager.
Is there a reason why this is not just `self.obj['validateIntoView']`?
I'm curious why this happens, but why is there no way to specify a warning?
Please add a blank line here.
I'm assuming this is going to be handled in the `jteeuwen/gocoverutil` package?
Should this be "not found"?
Style: Use `self.out` instead.
Lint/UnusedMethodArgument: Unused method argument - student.
Why not `==`?
This is the only place where we use the default log log, we want to use the default log, so that we don't have to do any validation on the `c` level.
What's going on here?
remove empty line
I don't understand how this works. The value of the revision in a getter is used in the following cases. Why not just have the getter in the getter?
Please don't do it in this PR.
Why are we removing these errors?
This is unnecessary, `if (in_data.name_id == out_data.name_id)` is enough.
Should this be `return FPGA_INVALID_PARAM;`.
Please move the include of `#include` here.
need `need_unmap` in `saleor/graphql/core/resources/core.py` as well?
I think `cm` should go with `github.com/chaosctl`
I think we should add a warning here to make sure it's not going to work properly for other types of auths.
I don't understand why this was added. Is this an oversight or some other link?
`cast` doesn't need to be a cast
This file has been updated to match the unit tests
I think `v` can be null here, since we only use `null` when the `null` parameter was changed.
why not pass in the original context? it should make sense to pass it in as an optional
The SVG is LTR, force text to be RTL or the number of outputs.
This is a generic generic name, not a variable name...but it is not a standard. I don't think we should rename it to "AWSAWS", so this should be fine.
I think you should change `check_commands` to `command = ''`, as you have below `.join()`
This can be used as a method on the `exclusion_patterns` array since `full_backtrace` is just used in this class.
nit: new line?
I'm not sure this is a good idea. There is already `a` in `mitmproxy` that's already in the package, but I guess we could remove that.
No longer used.
PY310-PY310-PY410
This error is not right, we are returning it to save the ability to log, but not on every request, right?
I think we should move this to `SSL_to_shipping`. Also, I think it's a bit more clear to not do that.
Is the asserts here correct?
Is this still necessary?
These tests should be reverted.
I'd rather have a separate commit for this PR
This is a breaking change. The virtual method should return a nullable string.
my bad merge?
(style) trailing whitespace
I think we still need an `ISet<CodeFlow>` for this one. It's not really an array and it's a `AnnotatedCodeInfo` class.
config is already imported at the top of the file
I'd be tempted to not expose this as an interface to the public APIs.
Let's use `accounts` here
The same issue is in the `search` method above.
What if `rpcSchema` is null ? Isn't this going to be the same for every `getAnnotation` method ?
Is there a better way to do this? We should probably have a better way to do it, but I'm wondering if it would make more sense to just set the `TableProperties.MANIFEST_TARGET_SIZE_BYTES` to `12850` instead of just the `12850` struct.
This looks strange, as it will always return an input.
can we make this a constant so it can't be used in production code?
Is the change from `appErr` to `Payload` necessary to change? I don't see any callers using it.
why the new constant?
This is a little hard to follow, but I think we need a better home for the `/start`/`/end`
I'm not sure about this one. It's just a question, and it's not the right way to go. It's just my first impression that the `class_agnostic` is `False` but this is a bug, and if it's `None`, it should be `False`.
The value here is `pos` and not `row`.
This is not needed.
Would you like to add the same action for the next page? That way the change in the code would be nice.
Oh wow. I didn't want to change this, but it feels like it might actually be useful to have a default `p if` here.
@Scottmitch why do we have to pass the `REG_##reg` here?
This is the main thing I mentioned in the changelog. The `title` text says something like `mailer.feedback_footer_html` which I don't think is necessary.
This file doesn't need a trailing semicolon
Why not `SecurityGroup`?
@DanVanAtta Can you please review this PR from this PR, please? I see it is used anywhere in this file and I don't think we should be changing any of the changes to `rometools` but let me know if I am missing some other way.
We should remove the info log.
Can we use `errors.log()` here instead of the hardcoding of sql?
It is better to put this in a method with a default_name_like_value() method, and have the logic inside the for loop if the body is non-nullable.
We could have used `SubscriberFuncForReceiveAndDelete` instead of `SubscriberFuncForReceiveAndDelete` for more complex types that use this constant.
It should be in the mne.hdds.getMessage file, otherwise there's no need to modify it in this file.
This looks like a regression. I would have expected a better way to fix it.
Nit: `MDServer` is not used anymore.
I'm not sure this is correct. The problem was that `By by` is a `List<T>` because this is a `List<T>` but I'm still thinking we can do something like `T>` but we can make the code more explicit.
Shouldn't this also be in a `pkg/err` file?
This error will be printed at a per-user level, and so not being able to return an error.
I don't like the naming of `_` in this method. Can you explain?
This is a bit hacky, no?
I guess we could remove this?
this is just a temporary temporary file, you can use `.to_s.rvm`
This was the only real change that was needed to ensure we don't accidentally break anything
This isn't a valid value, since it will never be used.
Should this have a constant defined somewhere?
why is this removed?
This looks like a duplicate line
I think we should add a helper function that should raise a `helper.ByByBanned`?
I don't think we can remove this `else` block (line 579). I think this check could be removed. If the type is already `version_` then the `else` check can be removed.
We could also use the constant for this.
What's the purpose to put the `if ($url)` here?
Should we do the same for `window.location.href = false`?
I'm not sure if this is the best place to put this. The other partIds that are in the same `partIds.emplace_back` function.
`_shared/Type` and `_shared/Type` are both both redundant.
Can you please add a space between the `)` and the `{`
@ruflin I changed this to https.r-SCM.md
I don't think the name should be here (and the one above). It's a little bit of a brief enough to get rid of `2018` and `name` in a more general `is_2018` function.
Please remove this empty line (same for the one in the previous block).
I think we don't want to use `Plugin` here anymore.
Can you remove the `.` at the end?
This should be `add_index`, right?
I wonder if this should be in the if block, since we have a lot of code duplication when we try to make this more robust to understand.
sign_in_as or even use_in_as for consistency
Oof won't have an impact on the device device
Why is `ConnectionKeyCombinations` not `ConnectionKeyCombinations` ?
I think that it would be better to have an `isDebugEnabled` check here, instead of the check at line 23, and then just check the result. This will avoid a lot of duplication if there is an issue with the other `visit_error` checks.
This is fine, but you don't want to show the values if they want?
what if we made `transfer` an optional param to `state`?
this is for testing?
"sftp" is ignored in the remote host.
Can you remove this blank line?
should we do the same for all the read fields?
Can you make this a function?
Nit: please add a space after the closing brace.
This should be a debug level message to make it more informative.
this was also a bug....?
This is a bit weird, why is `Model.SecurityGroupOverrides` nil? I'm wondering if it's better to do `spec.Is/</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</<ronronronronronronronronronronronronronronron at`
Could you add a license header here, please?
I think it's better to just use `shouldBeamIntoFocusOrder` instead of passing `el.tabIndex > -1`. It is a bit more consistent.
we don't need to include 'identity' here?
Should this function be passed in as an argument?
This should be `c[0]`, no need to have `encode`
This is a breaking change. I don't know if we should do it this way, but if we are not, then we can probably move `if (project.getClassLoader().toString()))` out of `if (project.isClassLoader()) {` and then we don't need to have a test where `getClassLoader()` is called.
What about creating a `_should_mocks_syntax` method that returns a `T` object of the class inside `on_ensure` so that we can just do `T_mocks_syntax` and then call `T_mocks_syntax` here?
Why not `2012` ?
I think the `git grep grep --help` should have been `git grep grep --help` in the `git grep grep --help` files. @josegar74 do you have any opinions on how to fix this?
Should this be in the core, so it doesn't get serialized?
I'm not familiar with this approach, but can you confirm?
I'm not sure how the `:` is used, is there a way to make this a bit more readable?
Why are we changing the default here?
do we need to set the block size here? why not just set it in the `BlockIdentifier()` function and return it in both places? I think we can just set it at the same time.
What does this need to be public?
Should we do this in `TlfID()`, so it's not in `TlfID()`. I think we should be consistent and use `TlfID()` everywhere, but if the lock is not there, the call site will be the same for `TlfID()`, so maybe it should be `!variable.h`. But it's probably fine to do so.
I'm not sure if we should use the `video` helper here. It's not really important but it's used below.
Should we be using a different name?
I think we can revert this file now.
This should not be necessary. It will not work for any other handler as the `load` is not focusable.
How do we know that this is a str? I think `.msg()` will be more appropriate than this.
This is a breaking change. Can you remove it?
This is not the right include, but `_use_metadata()` should be called when `cstddef` is true. This is the only one you need to do.
Why not `fetchMock` ?
Why are we not setting `mFolder` to null?
This should be a constant or a class constant. `text_only multipart` should be fine here.
Would it be better to use `lower(user)s:%` here?
This isn't needed since `UTF-8` is no longer in the init.
Do you want to remove the archiver option entirely? The archiver should be the default, right?
If we're not using the old `rootNode` we should remove it and we don't need to pass a `GetOrCreate` field.
@bryevdv, this looks like the only place where we call this method is in `jvm`
Does this need to be backported to the old version? Or is it because the file is always created by the old version?
How is this change related? I thought the other changes were made to make the else branch harder to read.
I don't see where this change is related to the PR.
@deads2k @mfojtik why did you change this?
This is a little hard to follow, but I think it is better to use a label to check the container type and just check the type in the container type.
This is the only place I'm doing. If the user is going to change the flag, then I don't think it should be a `--recurse` flag.
These should probably be `clone()` (as `clone` is the same as `clone()` above).
Wouldn't it be better to explain why the exception is thrown and then the exception is logged?
The doc should be `The ` Pci` (the description of the `Buffer`)
Could you use `webelem.Group.inputs` here?
Can we have a test for that?
should this be `s svc.blah`?
this is wrong. 100ms is 1000 and 0:1005 is 1000
Why is `_sorted` placed here? Shouldn't we be using `_order` instead?
How about adding a `using Namespace` field?
`cls` should be `cls`
We don't use intercept-build here, as we're in the intercept-build which already exists.
can we call this `EnablePipedResponse`?
Can it be _currently_user? (and _currently_user is not _not_-bound.)
If we have to flush all the nodes, we'll probably don't want to add it here, but I think it's okay.
Please change the `@Nullable` to be consistent with the other places `@Nullable` (line 579).
It seems there is some utility that needs changing here?
This is an interesting change. This change should be reverted.
`addMapping` should be placed into the `type` function.
Does this work if it was already in the original state?
I think this is a better solution than this. The subs variable can't be empty.
`core` is not necessarily a directory, so I would say it's a directory. So if we want to use it, we can just use `core-core` instead of `.io/...`
The `.limit` should be the same as the next line (and the next line).
`Resource Groups Tagging API` -> `Tag`
This is a bit weird... I'd rather have it have a separate package for a specific reason
nit: remove empty line
Is this needed?
I would use `assertList()` here, because the `err` is the same as `assertList()` in both cases and the same.
nit: this might be a breaking change for users
It's better for this to return -1, since this will break the loop. (This is not the case anymore.
This should use the `is` constant for the case of a valid source or a valid source.
I don't think this is necessary. We don't use the same code, but it doesn't seem to be used anywhere.
Isn't this a proper `bool`? `""` seems to be redundant here.
Why not `return nil` here?
@cra0zy - How does this work when theSibling is undefined? It seems we are just storing the two arguments (which we have the same `next` and `window.js`)
@smarterclayton do you have some context for this?
What about the word "CreateCounter" (or similar)? Should we be consistent?
`pushBoolean(L, -1)` is nullptr
This call to `t_p_PublisherPair` should be made made const.
I think this needs to be added to the `ChainBlockStatus` block.
I think you can use `String#sanitize` here.
Maybe rename this to `ParentChildrenSyncTargetHelper` to make it more clear?
I think it would be better to move this code from the parent class and have the `self.available_slots = sys.maxsize` already set this value. It is a required value for `sequential`.
I would rather see a separate test case that tests that use this new `tf.Test`
This seems unrelated, but I'd probably just remove it.
Why are we adding this to the API package? I see no reason why it's needed.
Why is this needed? The `switch` isn't necessarily necessary.
why retry is 1?
Why not use `Test` ?
This line has whitespace, and the following lines should be removed.
Should we use the "byteutil" package in imports too?
Why is this needed?
Why is this needed?
This is the only change I'm concerned about. If I understand correctly, this will cause issues, but the original issue was to fix.
Is this going to be a breaking change to any existing setting? It seems like we should be using it in the code base. Also we should add it to the service.
is this related to this PR?
I think we might consider moving this into the ReadPasswordTwice class since it's only used by the password in ReadPasswordTwice.
I think you need to update the copyright year in the file
I'm pretty sure this is a change in behaviour, but it looks like it should be handled by the commit.
Why is the `GraphType` being removed from this file?
should be ` @var \Doctrine\ORM\EntityManagerInterface`
Could you please rename `getPos` to `getMolChemicalFeature`?
I think that this line can be removed, since it's now in `org.apache.hadoop.client.client.client.http.client.client.http.clientclient.client.http.client.client.http.client.client.client.client.http.client.client.http.client.client.http.client.client.client.client.storage.client.client.client`.
@joshblum I think this would need an `public const` if you are already making a `public` keyword, which is then used here
Please put this in a try block and add a TODO.
`metrics()` is no longer used.
What's the reason to use a set statement here?
We don't need this getter, we can just call the getter with `GasCap`.
@dvoytenko why not just use a mock here?
I'm not sure this will actually work. You have to do a reset reset before sending it was already locked.
why not `connect(this, &ConfigPanelDialog::accepted, this, &root-emur);`?
why remove this part?
So this will result in a lot of different consumers of the DB?
`node` could be a constant, so it could be used here.
If I understand correctly, this is not a hot command. This is only for hot command, so I would just add a new line at the bottom of this line.
This is a breaking change. We should change it to `stpb` instead.
Can we just make `make_searchAttempt` public and add `@private` annotation to the docs?
I'm not sure this is a best way to implement this. If you look at a queue and you'll get a signal of a command, then it might not be a problem.
I'm not sure this is right, we should check if `CanEnablePulls ` exists before doing the check
Shouldn't this be `project.project.join`?
Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Can you add the standard parent class?
Is there a reason you couldn't use `t.Log` here instead of `t.Log`? I guess you can test against `len(phpVersions)`
Would it make sense to have a separate check for `getSerde()` in `getSerde()` and check for that instead of passing in a `*`.
Do we really want to update `updateOrderStatus` to be an error? If we do do it now, we should also add an error to the status status, as we do not want to be sure that we are aware of the status status.
Why not `[Errno::ECONNREFUSED, Errno::ENOTCONN, SocketError]`?
Shouldn't this be in `project_cache_throttle_percentage` since it is a project that is already in there?
It is not necessary to call a `ListSelectorEntries` with a new one. I think it is better if we just remove the call to `ListPowerSelectorEntries(request *ListSelectorEntriesRequest)`, then we can remove the `request *ListSelectorEntriesRequest` from `ListSelectorEntries`
I wonder if we should make this a `public static final int int`, since the type system is in `go fmt`.
Is there a way to avoid calling `argument` over and over again?
**Question:** I noticed this was missing in the docs, but where is the username used?
I think you meant to add `null: false` here.
I am not sure if the location is the best way to get Windows Sysprep.
I think we should just set the test to test the specific length of a larger array.
Should be `\DateTimeInterface::getStack`?
I don't think we need this const.
Can you please add to the validation above to make sure it is not supported?
I'm wondering if we should just use `padding.count` here and let the tests pass.
why are you changing the behavior of the `randomState.nextBoolean`?
I think this change is not right - the compiler will not have an current value, but not the current one (if) - this is not a bug fix, right ?
Can you add a license header here?
why did we remove this and the corresponding `wtimeout` member variable from `wTimeoutMS`?
This is a bit unrelated to the PR, but the lambda lambda isn't needed anymore.
I would change this line to `const (Trace) {`
We need to call `lock(this)` here, because `handler` is not actually being initialized.
I don't think this is the right place to do this. The code that is being called from the `NewContextWrapper` that does not use the "-client") - why don't we just use `.WithService(serviceName)` here?
Style nit: you can remove the `res` declaration as well.
what does this do? I think it's not clear why this was necessary
Do you really need to make this a hidden class? Can't see it being used anywhere, and it is only used once in ` PlatformTaskEx`?
This one was incorrect, and is wrong. The same is used in line with line 177.
NIT: Why not use `crypto/rand`?
This should be changed to `logxi/`.
I would prefer to use `out.write("UNF", {})` rather than calling `write()` everywhere.
the formatting is wrong here
I think it's better to put the config in the config_id param, so that the user can know what they want.
I'm not sure about this one, what is the meaning of `allowOptionalMappings`? I think it should be `allow-IDictionary`
act_cfg (dict, "int") is the same as input.
Why do we need to take on the first element? Isn't it better to use the local variable and then use the local variable to hold the initial value?
This is the change that will lead to a race condition where the `tcpServer` API is being used.
This will fail if the `findById` method returns null.
I think this is not a right fix since this is a new version of `this.map` (as it is in the other places already). The current version is the same as `map` (i.e. not `this.map`)
Can we put this at the bottom of the file?
This is not needed anymore.
This doesn't seem right to me...
Just to be sure: this will not break any tests that are being run in parallel.
nit: can this be a bit more specific? I would say "Unsupported metric type: %s" instead of "negLL".
I don't understand that `repr` is a good idea since you're changing that to `isType()`... Could you please replace it by a different method?
This is a change of behavior. It looks like the original implementation was a mistake, but it looks to me like the actual problem was with this change. If it's not possible to get a `_context` error, then we can't remove the `finally` check here
Another nit - and I feel like this should go in this line.
use the constant in `pkg/configurator`
I wonder if it would make sense to add a `SetAnnotations(annotations map[string]string) CertificateRequestModifier` to the `CertificateRequest`
Nit: I'd call it `IdentifierScheme`, `IdentifierScheme` or something, and `IdentifierScheme` makes me think that it's just the scheme of the scheme (or the scheme of the scheme of the scheme).
You need to add the `break` here.
Is this related to this PR?
`while (key !~ /id/)` would be more appropriate
Can you move this import to the top?
I think this is the wrong way around, but we should do it in this PR
I'm pretty sure that the new code is going to be removed because we're modifying the old code, but the old code isn't doing anything, and the new code does. But it's probably not worth adding new code to the new code as it will be used as an extra check that suggests that the new code is repeated.
I'd rather not do the rename. It's not a blocker.
This will not be the case if the path is a boolean. I think you should check if it is false or not.
I'm pretty sure this will only work for the deployment, right?
`CustomRouterAuth Auth` is not used anywhere in this function (and it's not in the `CustomRouterAuth`).
I don't think we should be using this property. It seems like the property should be available to other components (because we have the same structure) and not have the permission.
`typeof` is not necessary here, `child` can be removed.
Should this be || raw.get(STACK_TRACE) == null || raw.get(STACK_TRACE)` ? I think we don't need the ||
Shouldn't `InitAddress` be in the name? It's an implementation detail, but it's a bit strange for me to understand.
This needs to be added to the interface as well.
Is this going to be set when the zoom is set? If so, we should be using the setZoomval implementation.
I would prefer to keep the `SrmDocument` field as the last parameter. It's not really clear what the difference was. It's doing a good thing here.
@martinhoban for the assumption that these are only intended to be added in this PR, but the `chan map` is the only place where this is used. I suggest doing the same logic in `Result.map[string]ResultResult`. Otherwise, we don't need to pass the `chan map[string]ResultResult` to `RunResult`.
why change this? This is a public API, and it's only used in a public API, right?
why this one is renamed ?
Why make this `NewRequestFailure` instead of `RequestFailure`?
Why is this static final?
Why did you remove this? The other minor version of this file is to allow the change.
I don't think this should be right. The strings.Trim will just always be empty and the result should not be empty.
I believe this is not needed anymore because it will be true for the application if the application is running on a tablet (which is the same as the application), and the app is loaded with the application.
You don't need to call `info()` anymore.
Is it necessary that this patch will be executed by a different thread, or does it cause problems on any other user?
This is going to break anything, since there is a lot of data over there. I think we should not be adding this to the list here, but I think it is better to be able to make a helper, that way the code that uses this is only used once, and not everyone is already using it
I think that you could also have a single `private` method that calls it.
I would add `#pragma warning warning warning warning warning warning warning warning warning warning warning warning`.
This can be simplified by using `pylint: disable`. Also, the pylint disable shouldn't be needed.
I think we can remove this entry.
@alalazo: should we return a `List[None]` instead of a `List[T]`?
This is the only change I'm asking about is this code, or the compiler should use `with`?
If we are not going to be giving anyone to using a single file, do we need to name this? `super` is a good name for the file name.
Please add a license header.
I'm not sure why it is here? The class `sampler`, and its class `Arch` is only used to be loaded in `Arch`. So this could be renamed to something like `Arch` or `Arch` or `Arch` or `Arch` to be consistent with `Arch` and `Arch` and `delete` and `delete` or `delete`
This is a bit confusing, as it is not really a big deal. Can you add a log here?
maybe it is better to pass the ` <keep> ` to this method, and have it call `nc.Repo`?
Nit: Please revert this import.
Can we put it in a `const time:"tables.lock"` ?
Doesn't have to be apackage dependency?
I am not 100% sure if this is needed.
This will throw if `validation.validation` will be null. I think we should check that if `validation.validation` is not null. Also, if `validation.validation` is `false`, this should also check that `validation.validation` is null, and we can just check for `null`. I'm not sure if `null` is a correct behavior.
I think you mean "the old code was supposed to compute XNA and compute XNA" ?
Shouldn't this be `<element>`?
I think this might be a problem because the `tabindex` tag and not a `tabIndexTask` in the code is not in `pkg/api/pkg/api/tabIndexTask`. I believe that this is not the case for this PR (it's not that important for `tabIndexTask`).
It's good to have a better unit test for this. It will be nice if you could have some unit tests.
I'm not sure what the Workflow should be here, as this is not really a part of a user. We can't have a client-side client-side work-only dependency if we want the Workflow to be in the future.
Use && instead of and.
It's better to use a different name than the csv field name (` (`dataframe`)
why do we need to pass a blockCache?
Should this be a try-catch instead of an explicit call to `st`?
What about the other error cases?
Similar blocks of code found in 3 locations. Consider refactoring.
I think we can get rid of this property too.
I think this can be simplified to `@user` instead of `@user` since it's a `upper` object, but the other method can't really do it. I think you're right, so, we should just remove the `!==` and then just use the `.to_subscribers` method.
please revert this unnecessary change
I don't see any value of `curSchema` being null, so this change seems fine.
Why was this removed?
Should we move this import to the bottom of the imports imports?
Do we need the check for list of keys in the list of keys?
Why is there an option to add this as a list of files?
Not related to this PR, but I would rather see a `use`, `set`, `set`, etc.
We should rename `explain` and `readConcern` to `JobError`
Why this is removed?
this change is fine but I don't know what it does, I'm also not seeing any of the super classes in this file.
can we use a default value?
Please remove the period.
I'm a little confused by this line because the value of `force.nil` isn't a array. What if there is no explicit null check, then `value = Array.wrap(field_names)` is the same as `""`?
I'm guessing this is not a typo?
Do we want to make it a global setting here? I mean, can we do a call to `client.Info(MYSTER_API_LOG_PREFIX, "Identity registered: ", identity)`?
I think `setPropertyID` is not needed anymore since the propertyID is already set to `0`
I would add `m->getNumAtoms()` to the end of the function.
Why are we not using `this.node.getAttempt()` here anymore?
Rails/InverseOf: Specify an :inverse_of option.
Make `_` the last argument (and a tuple with an integer)
this is not needed. It will be invoked automatically by this point.
I don't think this is needed, if you pass the logging to `log.Close()` you don't get here, so I think we can get rid of this warning.
this is not needed in the current version.
Why did we change the output format?
This function is a bit confusing, since we already have a `for i, x := range b { ... }` in the `bytealg.IndexByteString` function, but `for i, x := range b` in the `*` directory.
This looks like a bug in Ubuntu 16.1.x and I don't see the point of the `_cache_rack_harper_INTERNAL_step` test (i.e. in Ubuntu 2.1.x). I think this is the correct way to test that this is not a bug. `_cache_rack_unbox_step`, so this is not what the behavior of this PR is. We want to keep this as is, but that we should also have the added tests to pass. I think this is fine to remove.
I think you missed the `id` here
remove empty line
It looks like it can be improved to use a function. Is that what we want?
This is not correct, the existing code should be `c.debug = (c.srv.logging)`
I don't think this is correct, we want `app.GetConfigPath("config.yaml")`
Why is this line removed? Are you sure this is the only BuildBasePath Service that isn't being used by the BuildHandler?
Let's remove the import now
This is wrong. You need to keep the old constructor.
Is this the correct place to put this code? If it is, I'd recommend using `--with-default` or similar.
There's an extra space here.
Long bitmask was used in many places, maybe it would be better to make the constructor private and have the constructor as an argument to the constructor
The issue I see was about here. I was expecting a failure and the client was never cleared.
I'd put this line first and the next line
Maybe rename this to `client.Client`?
This needs to be indented with the other "Chromium-based browser" style, right?
I think you can remove the if check here, since you do nothing if there's no actual data
I'd prefer to keep the `with_semantic_card` here instead. The current form of proposal is not 0.
why did you need to do this?
This includes includes `<fmt/format.h>` and in the `list.h` includes it, but not `<fmt/format.h>`
I don't know why we are not using the previous version, since it's only used in one file. Would be good to have a different version of the new version.
This is a bit odd to see if the port was specified, but not the other half of the file. Is that correct?
Is `auto` the same as `auto-domain`? It's a very confusing thing to have, but I would prefer to have it be used for the `auto` parameter and pass it to the `std::vector` and pass it in.
Is this the same behaviour?
I don't know the answer to this. I think it's okay to remove the `atom->getDegree()` check and just return the same result, so the check will be unnecessary.
i'm not sure if this is worth a better way of doing this.Sleep(time.Sleep(time.Wait(time.Wait(time.Wait(time.Wait(time.Wait(time.Wait(time.Wait(time.Wait(time.Wait(time.Wait(time.Wait).).
Why do we need to copy this over to the map?
I'd prefer a `SpeedLink` here instead of `SpeedLabel`.
nit: you don't have to wrap this in a `else` block (see the other places below).
Is there a reason for adding this? Does not seem like there are other places where we can use this code in `__init__` ?
I think it would make more sense to add the `Result` attribute of a `Result` object, and then add the `bake()` in this `if`.
`sess_manager.session_save` could also be set to `True`, so it's not required here.
I think we can delete `identitySourceIds()` too since it has been deprecated.
I think we need to remove `G3C` from the `session` one too.
I would move import down to the top of the file.
I don't see any changes in this file that should be reverted.
Please remove this
Why the move outside of the loop?
@deads2k I don't think we need to pass it, as the default config is not set.
Maybe we should create a new `app/views/features/wallet_rules.py` and have it exist in the `app/views/features/wallet_rules.py` file and use it everywhere
The example is `serve`, not `serve`. The `toto` is the correct field name (and sequence the reset fields) and the `toto` is the same as `serve`. The purpose of `toto` is to change the implementation to `toto` instead. The `toto` field is `False`, but the `toto` field is `True`, but the record is `True` and `toto` and `toto` is `False` if it is
Removed because it's unused.
@tmds any idea on how this is related to the tests? The test doesn't work with that, but we should have the `h.query(...)` call, as we do in the `ksqlConfigSetTrusted`, that way the code will fail, and if the `ksqlConfigSetTrusted` returns a `ksqlConfigSetTrusted`
I'd like to see a variable called var here.
Do we need to use a 16-bit length here?
What is this? I don't see this in the public APIs.
I don't see any use of this option in the tests.
we need to keep import with other packages
I assume this was just to get rid of?
Would it make sense to move this `indent_stdout` into `ZFS_DEBUG`? Or are we using it anywhere else?
@mjkkirschner @mitchellhenke This was causing the python test failure - we were trying to get rid of `PythonSdkType` in this change. Can you double check? I don't see where we're testing the right thing.
Nit: We could use the constant here.
I think we can delete the `name` here since we don't use this.
This is a good candidate for a helper method to avoid a very good candidate.
For the record, we can set this to `""` to prevent the need for it.
This is a bit confusing, as `this.values().elementCount()` is a `List<T>` anyway, and I think this is not a right idea.
Wouldn't it be possible to have a `stamp()` method that has the same `--build`. This way we will not have to call `buildActionMutex.Lock()` every time.
This is a breaking change. We should not use the old configuration in a package package for this.
Can we have a method that returns the value instead of using the `null`?
Do we need an assertion about the new field?
I don't think there is any harm in making this change. This is a change of the test, and it doesn't really matter, right?
I'm not sure what you mean by the property name?
It is strange to have an empty string in the builder, but we don't want to add it to the builder. It's not clear to me why this change is needed
Shouldn't the `container->get()` be updated to `new NormalizerConfigPass()`?
Is `__eq__` necessary?
Doesn't look like we have a `return` at all.
` AddPeers` needs to be called before ` AddPeer` :)
please revert this file, there's no reason why this is not the case
I'm not sure why we need the `iptRule` variable here.
why did you remove it?
why this modification is needed?
Nit: please add a docstring.
This should be called `yaml`. This is a special case where we want to use the `Kind` field.
Why was this removed?
You could just call `auto & blocks.front ().size ()` here instead of the first one
AFAIR we don't use these anymore, we should do them for both tests.
nit: you can remove this line
This is a breaking change in a breaking change as a build failure is not needed and will be fixed in a separate PR
Shouldn't this be indented by the JUnit 4.7?
It's better to check for if the user is empty.
Why are we passing this in?
Is this change required as partId?
Do we need to do this in a view? Seems like you're just using the attributes here.
Is it better to import `types.Base` and just `types.Base`?
Missing a newline here.
We should probably show a deprecation warning here. The lock should be removed, but the event handler will never show a success.
The config doesn't use the `OS` parameter, so this should be `run_config["solids"]`?
Style/NumericPredicate: Use nested module/class definitions instead of compact style.
We could use `./pv-tests` here as well
this should be `const`
Shouldn't we check for error here?
I don't think `session` is the right way to go. We should check it before doing `close()` on `client.close()`
Nit: This line is a bit redundant, and line 246.
There is no need of `Bolt::PAL.load_puppet`, you need to add `load_puppet` to the `load_puppet` line.
Could we use `padTo` as the `sb` parameter instead?
Maybe we can reuse `custom_imports` from `config` to `custom_imports`?
I think it would be better to use the `text` instead of a ` present` here
I think we need to add the `#preload` parameter to the method name. Otherwise, we could pass in an interface that takes the caller to pass in a method `from gamma import warn` to access the method
Is this used anywhere?
Please don't include any header/non-null header in this file.
Why is this change required?
This should be `window.self.location`
We should also update the `ErrWorkspaceNotFound` in `AssemblyOptions` to use `edToWorkloadManifest`. It should also be in `Assembly` as well.
I'd like to see a unit test for this.ShutdownAsync(cancellationToken).ConfigureAwait(false)
I don't see any use of `unused` in this file.
`Charsets` is not required. `Charsets` should be removed.
I don't see any tests for this command. Is there a way to avoid using `*ovsCtlClient`?
shouldn't this be 'false' for the next page ?
Why is this necessary?
Why not `mitchellh`? It's not used anymore.
This is the only usage in the code I'm not sure. This is a change from the code.
I think this is still a valid alternative to use. We're trying to keep the function as a "bug" and not a "breaking" as a parameter.
This is not needed
I think this can stay `static`.
Do we need to check that the names match `_name__` are also specified in the optimizer?
`Number.MAX_SAFE_INTEGER` ||. Should `length` be enough?
Just curious, why does this require `liveManifests`?
I think this should just be `utils.utils.from_env`. The `kwargs` package should be `import docker` instead of `import docker` in this file. Also `utils` is a more correct location to put that in the file.
@jridgewell Is this what you intend to do here? I don't see the difference between `actions` and `actions`?
We should also mention this in the `hooks:` block (see below).
Should this be `this.wait(sec * 1, "1", 1);`?
It's probably better to make this a `h2O_VECTOR` method, rather than a `h2O_VECTOR` method. The code above calls this function with a boolean argument. You can then use a single argument, and use the `H2O_VECTOR` parameter to get the value of `H2O_VECTOR` from the `H3O_VECTOR` directly.
Please remove the extra `TODO`.
Why not check that the number of retries in the user is empty?
Unused block argument - site. You can omit the argument if you don't care about it.
Shouldn't we do the same change for all the other parts of the same folder? I don't see why we are using it in the same folder.
shouldn't this be a `Field`?
Use `&& 0` instead of `==`
What is the purpose of adding this space? It seems to be unused now, and you can remove it.
I don't think this type should be here?
Why was it made internal? Is it used somewhere?
Doing `cPickle` is not needed here because it is imported but never used
Could you please also add `The copyright` there as well?
I think we should use the existing `allowedOrigins` option. We should not be doing any cleanups with the new code.
If we're going to do this then we can remove the `Preconditions` check below.
Is there any way to check the `attr_TO_MANY`?
UoE isn't really a meaningful name for this.
I would rather see this change on the line below, but it seems like it would be good to keep the `exception` and throw an Exception here. If there is an exception then the `exception.MustBeRethrown()` should be called before the call to `exception.MustBeRethrown()`.
I think you can delete this.
This should be a separate commit
AFAIK `trim`s shouldn't be necessary for the `preferredMarcField` field?
This is not needed. `_numpy` is already used in `saleor/__init__.py`
@dvoytenko why do you use `go` here ?
This method and other methods are called `IsRootedPath` - which is the default for this case.
I think the reason for changing all the status code here is to add the status code that I'm on is the following line.
@scheibelp I've removed that because I don't think this is a good idea.
This is a bug fix.
Why remove this line?
why are you changing the name of the uint32?
Should we add a migration to set `grant_id` in the DB as well, or is that going to be a problem?
I don't think we should change anything here, since there is a `default` statement.
I would move these env vars up to the top of the file and keep the old one around (and in the file that uses them).
This is the same code as the line above.
just get rid of the `get_package_registry` imports
@benhalpern this is breaking change. It should be defaulted to true, right?
can probably be combined into a single `config = require('./webpack.prod.js');`
I think you need this. The previous code already sets the default values to true.
I don't think that we want this. We can probably just make the message "the default is not found" and that it can't do anything with the word "the default will be removed"
places is hardcoded in the test, so it shouldn't need to be changed
This message could be more specific (or at least say it could be a warning for some reason).
why not import the stdio functions?
I don't think the subscriber should be part of the import block.
Should this return `DEFAULT_TYPE_TYPE_GLOBALS` instead?
This was a typo.
This should really be removed.
nit: this seems a bit confusing to me that `proposalID` is used by the `Update` method, IMO.
This is not true, we can just remove this method.
can we make this public so we don't have to pass it in?
Does this need to be added to the `--file` label?
Can we have a test that checks if we can't use it?
I think we should just make these default values 'x64' if we're using a sane default.
I think the `bokeh_renderer` should be a `Connection`.
This isn't the right place for this. The `if` should probably be removed from `modname`, right?
The default case should be `write.metadata.previous-log-max-chunks.java`. Otherwise it is in a different PR.
this is a bit weird, why is it needed in the tests?
I think we should remove this line?
`self._input` is never `None`, so there is no need to check here.
what is the purpose of this change?
I think we should use `info.info.debug` instead of `order` here. The `order == 0` check is probably fine, but I'm not sure if `console` is an intentional decision for it (if I'm not wrong).
This should probably be `address_string.is_string(to_string_string);`
I think that this would be a good change to log an error. In case proxy is passed, we could end up with a different message than proxy.
This could be a `validates_attachment_type`.
`Load login page` is unused and can be removed.
Instead of "private", I'd say "if we can't render an component, we should render an render-end" or something similar.
Is this a valid "default"?
I'm not sure we should be changing the type here, but it seems that this change is a breaking change. It is possible for the test to pass in a different resource than the expected expected expected behavior, and the test fails.
This seems like it would be a good thing to have to create a real error.
I think we can remove the struct altogether now that #28021 is passing in the struct here.
It might be nice to have the property name as a property for `mapTo` if you're not using it. Also, I'm fine with that since it's the default, I'd suggest to have `[map]` set of properties, which can be used to set the property name in the constructor. I don't think that's a big deal though...
Why use `go-sqlite3` here instead of `mattn/go-sqlite3`? I don't see any reason to have `mattn/go-sqlite3` be changed.
This is wrong. You're using the `getKeyName()` method in PHP 5.7.1.0.
Please, change these to 'zip' and 'x-tar', 'y-line', or 'y-line'
Hmm, I think `ListDeploymentConfigTemplatesResponse` should be renamed.
I don't think it's necessary to connect the inputs, since the action is removed from the URL, but it's not being used in the URL anymore
> long [](start = 165, length = 8) Why not using a long? I mean, you're using a long to be a long long for some other number of characters in a long. I'm not really sure about this change but this is just a suggestion, though.
Why remove this?
@jridgewell I'm not sure if there's a better way to do this, but I can't find any reference to this code anywhere else.
I think it should be using `PyPy::Utils::calcUnscaledVdWParams.epsilon`
@adambka-nenas, is it worth adding a check here in the `kdf = kdf.reset_index(drop=self._should_drop_index)` so that we can verify it works?
I think we need to remove this now that we are in a different PR.
This should be `//`, it's not a `public static final` class, right? The `WebDriverException` is not the only one that's the responsibility of this class.
Do we need this? We're already creating new endpoint and setting the `.enable` option to `false`
Is this supposed to be `scss`?
Why not just `host`?
Unnecessary spacing detected.<br>Put one space between the method name and the first argument.
This package name is not very descriptive, it could be renamed to `@package`.
@mfojtik @jordajm this is the actual bug, we need to make sure we don't want to have a platform-specific `redhat_fips` here.
@jona-sassenhagen this was a bug. The previous behaviour was that it was originally working before.
The `UserList` should be sorted from `list` to other threads as well, right?
If this is a different folder, can you use the constants?
This can stay, right?
Please move `RetrySettings` to `ApiCore` class.
Is this interface needed?
why are we adding this? global is a temporary temporary one.
This is a bug fix.
This change is not related to this PR, but `Dispatcher` should be `TChannelDispatcher` as the second parameter. The reason for that is that the `Dispatcher` argument is `Dispatcher` and `TChannelDispatcher` is not `Dispatcher`, and the type should be `[]` to `Dispatcher` (or `Dispatcher` or `Dispatcher` is `TChannelDispatcher`) are because they don't seem to have a type `Dispatcher`.
is there a test case where `Pulling` is 0?
Does this work with python 2.7?
@martinhenke Thanks for your contribution. Can you please add a TODO to remove this? It's not related to this PR.
Why not just return the callback?
Why not `procproc` or `procproc`? I don't see where the user has read `Flush()`.
Let's not add complex values here.
why is the str check removed?
I don't think we need to call `RemoveAll(dir)` here, but I think we should just use `RemoveAll(dir)` to be sure we don't need a call to `RemoveAll` on line 634.
Is this a typo or should it be a `casted`?
why not use a `@Internal` ?
I'm not sure that the HashMap service should be here, but it is not a good place to use the `toMap` interface.
I don't think this is the right place for this. The idea is that if we have an account that we don't want to have localProjectAppNames, we can use that to determine whether or not it's in the settings or not.
Is there a way to do this without a `width`? I don't see a point for it. If you can't use it, please remove the `width` variable. Thanks!
Is this still needed? If not, we can remove the txgroup method.
What if the user doesn't specify a file name? This is probably not the right one.
And what about the explicit explicit argument? I mean, I'm not sure if this is a good idea or not.
I would use `io.prestosql.spi.affine_grid_generator` here, since we don't use `io.prestosql.plugin.hive.io.affine_grid` elsewhere in this file.
We don't want to check that the key exists as well.
Please use `is_Hook`, otherwise it'll be useful in future.
Can we remove this `trailer` for consistency?
Why do we need to wait for the ready? Is it possible to call the client that has the same name for a particular client? If so, I'm just trying to understand this as is.
Why change the startHeight here?
This should probably be a warning.
I would prefer a `...`, if not I prefer a `...`, like in the other classes, but not a big deal
I think this is the wrong place for this, since `VideoCodec` should be `'opus'`
Why is the other way around?
@ruflin I think this is the only change to what you have here.
Why did you move this up?
why is that change?
Isn't the topology a nullable column? If not, I'd suggest not to use `topology.description = null` here.
Nit: It's a bit odd that the line break is not in this file.
I'm not sure that we should use an `-` role in the URL instead of a `<dl role="menubarar="Util"` parameter, as this test will fail with the role in the config file that we should use for the new `include role` to get the new role.
I don't think this is right. We don't want to be able to run `spack install --no-progress --no-progress` and `spack install --no-progress --no-progress` in a short term, and we don't want to re-initialize the CDN in our tests, and we should be able to make sure that we're not doing anything else in the future.
It was a mistake, I didn't see this in the first place.
Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
I don't think we can do this - it's the responsibility that we do when instance is `not found: %v`
I don't know if this should be `Tuple`
Is there a test where the `action` property is not present?
@mfojtik why change XUnitIntegration? Isn't it going to cause any regression?
I'm not sure why the line length is here.
Do we have a test to cover here that this is a duplicate of the one on line 554?
Since you're touching this, do you still need the `setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT)` line above as well?
Why are we returning here? We don't need the returned error if the last item of the current file is the same.
Why not just use `trait JsonResponseTrait` directly? This way we can avoid this change if anyone is using `trait JsonResponseTrait`.
is it worth adding some logging in here?
Redundant curly braces around a hash parameter.
Why not have a `CopyActions` as a `CopyCopyCopy`?
I'm not sure about this change. I'm surprised we don't add XDPEnabled to the config.XDPEnabled in the past. Is the previous version of XDP still valid?
Is the `qualifiedName` necessary?
@jglick - do we have a better way to access this? I'm not sure what the best way to go.
I think you need to remove the `.then()`
I think this should be a part of the config class
I'm a fan of hard-coding a `new` here.
Maybe it would be good to have an option to have `isUpperBound` in the `isUpdated` package. I think we should do the same for `Docker.isUser` and `Docker.isUser`?
This is now done by the `develop` directive, so it should be moved into a separate method
I don't understand this change. Why are these username and why do we have to pass a boolean?
nit: remove newline at the end.
I think you can keep this as it is and remove the extra empty line
Why do you need this change? `QItemSelection` already has an `if`.
You can't use the `try_lock_shared` method here.
We should not have this `jsx` dependency in the `js` namespace. It's not the case anymore, but we should be able to remove it.
Nit: please move next to the other import statements.
why is this change required?
Are there any scenarios where we can use this interface? We should not use it to build the interface interface
Could we use `*big.Int` instead of `extension`?
this is a bit weird..... why was it not working before? it was a bug and it wasn't a bug...?
is this not the case anymore?
This change is ok, but I would prefer to have an empty check here instead of an empty check. The `label_cb` check should be in `label_cb` so `cb` is always `None`.
the indentation was wrong here
Why do we use a `int`? Won't `len()` always return `nil`?
The changes here are unrelated to the platform checks, but not the best option here.
@jona-sassenhagen this is where I was looking at the code. This is a breaking API change in the future, so I wanted to make sure that the test is breaking.
Same thing here: I would use `CASDefaultCstorPool InstallENVKey` instead, to be more specific. And I would use the default `CASDefaultCstorPool InstallENVKey` as the default value for `true`, but not the default cstor pool.
`client().close()` is redundant here - `close()` already assigns the `close()` method to the client.
Wouldn't `pop` be better?
I think this needs a better name. It is a little confusing to have a better name.
I think you can delete these now, and use `datetime` in `mne.utils.mne.utils`
Use the provided field instead of the hardcoded "HIP-UNSUPPORTED}},"
Can you please update the docstrings for the new parameter?
@scalablecory, I'm not sure about this change, is it possible to remove it?
The only time we handle this is `working` when we're using `allowHash` is to handle a single `PutState`, which is not correct, we can use `allowHash` to get the `allowHash` as a `PutState`.
Why is this not public?
breakpoints?
what does "index" mean? "rjust"?
Just curious why we need to do that. Shouldn't it be `path.Join(v4.signedHeaderVals[k], ",")`?
I would prefer a separate PR from adding a new method to `setTimeout(false)` to keep the old behavior consistent and just have the same `null` check.
If there is no empty file, I don't think there is anything better.
Can you please change this to `std::string Container::getName()`? It's not clear why we're using the same name twice in this file.
I would have left the whole method `onStartNestedScroll` since it was a one-line function
Should the `fill_cb` parameter not be necessary here?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
the naming is weird, I'd rather have `Rectangles_type`
@JeremyKuhne might want to review this, I don't know.
nit: this should be `!=`
Should this be in `info.go`?
This is a breaking change for anyone. It should be in a separate PR.
Why this change?
why the change?
this is the wrong place to put this method, and the one on line 13 should have a "return -10" before the method. (It's really hard to read.)
I think it's not clear that this is the end.
This is not the actual change.
This is a breaking change, but I don't think it's necessary at all. The package names should be private.
This is not a part of your PR, but should be a separate PR.
nitpick, but can you add a `simplify chained comparison` if we are on a more specific line?
Why removing this line?
should we rename proxy to something like "loglog"?
I think it's not clear what `authority` means, if it's `:authority`, it will actually be `None`.
I'm wondering if there's a better way to check that the network metadata is the container id, and the network metadata is the container id.
I'm not sure if this error message is correct or not. If we're going to get into the log message, we might need to do it in the log message, and also not log the error message.
I would have put the `mark` in a separate file.
Can you also add Golang version of this import?
I'm not sure what the difference between root and root, but is that intentional?
This is a public API. We shouldn't be changing it here, but I don't have any better idea.
Does this change have any side effect?
The log level should be a slash.
If we're still using NewTestLogger here, should we still pass this in as an instance of `NewNewLogger`? This is the only place where we have `NewTestLogger` in `NewTestLogger` so we can just pass it as the param?
I wonder if it's a good idea to make `hashCode()` public?
This should be safe, since you have changed the call to `else:`.
How about making a method like `user_id = "user" :lastfmscraper("user_id", "cfeedback")`
Can we have this be private? We are already setting it in `aws/internal_store.rb` for this
what if both of these flags and the second so we only skip the amount of assertion if the workflow contains the ssh?
Here, `collection?` is the second arg.
Are you sure it's safe to remove?
We don't need `import 2` here, `samplers.pseudo_sampler` import statement will do the trick.
I would suggest to move all of this import to `go-algorand` imports, so we don't have to import `go-algorand/` anywhere in the package-go-algorand package.go
Just wondering, did you try to avoid using `l2` as part of the list of `l2`s and have `l2tp','l2f` as part of the list?
This was changed in #1085, but the PR was about it.
whats the purpose of the `%w` suffix?
Can we move this to the `lib/gorm` package?
You should check that the result is `ptrptr` before checking that it's `False`.
What is the meaning of the lock_a?
Can we use `volume_mounts` for this?
@deads2k @smarterclayton I guess this is the only place the first condition is not correct, right?
I'm not sure about this one. `AbstractAnyTypeDeclaration` is the only one used in this case.
This file should be removed.
nit: you can merge the two above two lines with the same indent as `isWorkflowConditionFailedErr := err2.(*persistence.CurrentWorkflowConditionFailedError)`
This is the fix for #1846
Why the `c` here but not above?
Can you please explain why this is being added? I'm assuming the `namespace` is not required here.
I'm not a fan of the else blocker. I think it'd be best to do something like "if not found" and then just do: "if you want to create the else statement when you're not actually writing the previous statement (and not ignore the else statement).
@JeremyKuhne might want to call out the `TooExpensiveTxFilter` here.
Please use `Collections.emptyMap()`
I'm not sure what the correct name is, but I don't have a good reason to keep the `.name` check here
Please don't use wildcard imports. Please remove.
this is not necessary, it is not used anywhere
The first commit message is a bit confusing. If we're going to use this message, it should be "Failed to setInstances ..." or "Failed to set theMutations of the token".
You could also make it `QDesktopServices.createUrl(QDesktopServices.createUrl, str)` and avoid this change
Is `quit chan` a common term in this method?
I think you have an imperfect case for this, but I think it would be better to just pass that around. The latter is the most important case so it's fine.
This seems to be a breaking change to the SDK. The `Apply` function is called for all SDKs, so it might be a bit clearer to just call it `return err`.
I don't think it matters in this case, but it's not really a big deal. We should just be consistent.
Why are you removing the #define here?
I'm not sure this is correct. What happens if the file is not in the original version?
Why not use the function definition here?
This is the only change that affects backwards compatibility during tests.
Why not `searcher.start(q, ip, number, 20)`?
is this the right way to write `format inventoryfile boltdir configfile`? Or should that be `:format inventoryfile`?
What is the difference between this exception and the property? Could this be made consistent with the other methods?
I would have made a method on `Throwable` instead of `Throwable` as this one is an internal one to use.
why not just call `DynamicMap` here and `List`?
This is not needed if `main` is not running in CONTAINER.
I think this can be removed since we only have a single database.
Why do we need this change?
I'm not sure if this is the right place to do this, but if it's a request then we should do it in the `request`?
I think this should be `Kokkos_Core.hpp`.
Not sure how this works, but it seems to work. This works only because the code below is not able to use `hs->qid_metrics`, but I'm not sure if it's the right answer.
The `0` check is redundant here, `len(rule.DstIpSetIds) == 0` will do the same thing.
I would have thought of this, I'm not sure how to do it, but we should be looking at this code.
The f-strings are in a single place and not in this function.
What do you think about making the `xstate_t *` part of the `sigcontext_from_rt_frame` function so that we don't need it in the `get_sigcontext_from_rt_frame` function?
Remove the entire static import as it's not necessary
I wonder if there's an easy way to get the DIFFICULTY_BOMB_REMOVED from the difficulty?
@mjkkirschner @danrot what do you think? I'm not sure if this is the right place for the `scheme` URL.
This will be a bit hacky if the `listen` is a `listens` in the listens. We need a test case for `latest_listen` so I'd prefer a list comprehension to make sure that we don't have to pass a `dict(dict(dict).join(dict())`
This should be `apos`
This is the one line of code that needs it be removed.
Was this intentionally removed? Is this a typo?
Why are we passing `2014` to the `C`?
I'm confused by the `hudson.io/` suffix, why is it `json:"preferredChain"`? I'm not sure how the `ISRG Root X1` works here?
Can you please also update the `new` field in the PR?
can we put the keyid in line 262? we have 3 more places where we need a keyid in the schema
I think the `private` can be `final`
No need for `@since TODO` here
why not using a unit test for the case where junit is not junit?
This is not correct. This is called from a tests, it is not a test.
Why is this necessary? Is this necessary for `Set` to set this?
@deads2k any reason to use a custom field here? (I guess the default is not set at all.)
I don't think you need to return an error here. We want it to be an error.
@sparrowDom Should this be `baseFeePerGas` or `sourceOptions`?
I believe this is the only change that affects the changes to our docs
Is this change required to support the old version ?
Can you please also update the `ISEARCHMarshalByRefObject` property? I see that the type is `ISEARCHInstance` and `ISEARCHInstance` are `ISEARCHInstance`. I see that the other `ISEARCHInstance` and `ISEARCHInstance` were `ISEARCHInstance`
why are we using `bridge` here?
I would use `path.execute` here. It is used in a couple places in the code.
Maybe `MaxConnectionConnectionWindowIncrease` is more clear to me.
show -> get
It's a bit odd that this is the prefetch layer layer. Couldn't it be a `URL`?
If you add the transaction to `PaymentTxEncode`, you can remove the transaction.
Is there a reason for return?
I think this should be `ID`
This was a copy-paste error that I found while working on the git_checkout.
This one is the only real change. This function does the same but the one below. Why is it moved?
Should use RTP instead of recommending on a full text here
I think the `order rand` should still be here.
Is the client being created for every server?
Shouldn't this be a constant rather than a hard-coded constant?
import \* is not recommended, better to keep imports sorted
why this rename? even `module.exports` is only used when a module has been created
Can you add a changelog entry here?
@aghassemi This doesn't look right, as you wanna be able to check signed_in? if it's the signed signed signed_in? it should be signed.
We should probably be using the `enum` function instead of the `enum` here to ensure we don't have to do anything with this.
I think this description could be more descriptive about what it is. `autoRowSize` means.
I'm not sure if it's good to use `__OS__` (no biggy) for it, but it will be hard to see what it does.
This octest doesn't have the same problem as the octest tests.
Line is too long. [93/90]
What is the purpose of this method? Since all the lines above are `private const`.
This is the only change that affects the change. I'd like to see that the code is working as expected.
`_data` should be passed as a parameter.
is this needed anymore?
This looks like it would be a breaking change.
this was returning errors when the error is nil.
No need to make this dict.
why are we not calling `destroyChainID` here anymore ?
We should add a log here to say why this check is done
@ruamel.yaml Please remove this extra line
I think you can actually get both lines above and just use `Preconditions.checkArgument(lookback == 0, openFileCost);`.
You should also have an `else` branch to set the `File` in the `try` block
Let's not forget to add a new table to select the service account.
This is the correct way to determine if we should just set the `cltest.panic()` to `cltest.panic(err)`
nit: this line can be removed now (and below)
Why not keep this in parent::taint_flow_graph?
Shouldn't this be `import javaslang.collection.Stream;` ?
Why are we changing the default for `count(*)`?
This was a bug. The only thing I found is that this is not the same as this code. The rest of this code is that this is only used to handle `TTemplateParamClass` and `TTemplateParamClass`.
I'd recommend to move this to a separate file (not part of this PR if you already).
Can you please use the `*` constant here?
This seems to have no effect.
I think you should move this to `debug` block (line 577).
You can use `expect(component.get('selection')` instead of checking `to.deep.equal(['item 3', 'item 3'), 'selection')`.
I assume the `ColumnDescriptor` is the `originalIcebergType` of `ColumnDescriptor`, so it is `ref` and `ref` are both final. Is there a reason why these two can be `final Type originalIcebergType`? I don't see why we need to expose `originalIcebergType` to `ColumnDescriptor` as well as the "originalIcebergType" type in this PR
Why is this in remote?
I think the error message should be improved, since we're using the MongooseError for the error type.
Please fix the indentation here and above.
I think we can just use `InternalRecordWrapper` here to make it clear that it's a type of `AllTasks`, not a type of `Rule`, so we can use `InternalRecordWrapper` in other classes instead. The type of `AllTasks` should be `Rule`.
Let's not expose it in the session itself.
why do we need to else block?
This is the wrong thing.
I'm not 100% sure about this. I think it's better to change `validateParams` to `validateParams` and let's just change this in the constructor, and change it to `_setPersistentData` and change the params if necessary. Thoughts?
why are you using this? why not using the `networkPattern_for_item`?
Let's not use block here.
Why is this change needed? I see that `string` is used in the `setUp`, but not the `setUp` function.
`end` is redundant here, since `end` is the default for `mar`
Why was this removed?
I am confused. If we have two different device names, the name will be the same as disk. Shouldn't this be `if ad.DeviceName != "DeviceName": "DeviceName": "DeviceName": "DeviceName": "DeviceName": "DeviceName": "DeviceName": "DeviceName": "name": "DeviceName": "DeviceName": "DeviceName": "Class": "DeviceName": "DeviceName": "Name": "Class": "DeviceName": "DeviceName": "Class": "DeviceName": "
I think this needs a lock on line 734?
I don't think you mean to keep the `get => 1` property. The `get` is not the case here, as it is the other way around and I think the compiler would have been to change it. I am not sure what this change is doing though.
Why is this change necessary?
Is this needed?
I think `initializer` should have a default value here. I think `null` should be fine.
why not use the `__enter__` method here and below?
This should be renamed `remove`. `IPAddress` is used for `remove`.
I'd suggest not add new properties to `Client` and `Client` methods in `Client` and using them here as well.
I don't see this being called anywhere else. Is this supposed to handle the problem? I don't think you want to set a default.
I think it is not necessary to make the flag private.
I think you can remove the other `fetchMock` imports.
Is the `ExpectData` still needed?
I don't think this is necessary, since it's in a `class`.
Does this test have anything to do with it? If so, should we remove it?
how about logging an error and logging it?
@agaspardcilia can you confirm this will break any other routes?
Since this is not a `var FEATURE_NAME` variable, I don't think we need to change it here. The variable name `FEATURE_NAME` is not very descriptive. The variable name suggests `var FEATURE_NAME` or something like that is confusing.
I'm not sure if this check should be in the first place...
is `error` the right error message here?
Please add this plugin to `StateRecord` in the future.
In general, we need to check `Warnf` as well.
I think it makes more sense to keep this method and not use the interface.
Is it possible to get the flowfile by the FlowFlowFile itself? I thought that it would make the flowfile a "old" version (i.e. without the version) and then just call `getUploadedFlowFile` to get the `UX` version?
I'm not sure about these changes in this PR. I think we should remove these methods and just pull these `dynamicconfig` into separate methods.
Wouldn't it be better if we just return an instance of `NVDAObject` in case `NVDAObject` is not specified?
This is an example of how we do the `.aio` file, not just the `.aio`. This code path is not a module, so you could use a `-c` helper to do it for a specific reason.
This method was not used in August.
This should use the 3-D bug.
Cached_mm........ are there other options? Maybe we should create a constant for the new one and not do a full query for the new one so we don't have to use all the other options?
The if reduction == 'none' if reduction == 'none' seems more reasonable to me than just logging it in if reduction == 'mean' or something else. If the reduction is None, it should return None if reduction == 'mean' if reduction == 'none'
I think we should keep `dilation` around in the padding and add an `f"{dir>` keyword here.
There's no need to change this line. It is still used in `Locking`.
how often does this happen?
nit: I think we should update the changelog to say `log.Label` here. It's not clear what the target is about.
This should be `self. std::move(other.txt[i])` instead of `if (byte i = other.vPin[i])`. Otherwise, it looks like it will be the same for the `if (d.range(other.txt[i])` block, and it will be nice to see that the object has been called as the second.
Is this imported at the end of the line or was it intentional?
`dask` is unused here, so this shouldn't be removed any more.
I think we should give this function a more descriptive name, like `args` or `path`, and `args`. We could give some naming better names than `t.strip()` for example.
I think this should be `.enable_principal_state_updater`
I'd like to see some more prominent error message as well, e.g. `waitForThumbnailsBeforeUpload: false` and `waitForThumbnailsBeforeUpload: false` to be consistent with other options, and the same applies to `lazy: true`
Let's keep these as `USERS` since we're not using SQube code anywhere else
Should we also keep the queue functionality?
This is the bug fix.
You can use the `getSetTagSetting` method in this class.
What about an `PhaseSelector` instead?
Why do we have to add a new field for `tbarrella`?
This should be `input`
I don't think this import is needed
This should be a different fix.
Is there a test that checks if the `cgroups2 path` is present? I don't want to be run if `cgroups2` isn't `nil` here.
I think we can remove `throw new Error` altogether now. We do not have any breaking changes in code.
This is not really related to the PR, but it should be a separate commit, but it is a good idea to make sure that it is an internal API change.
I don't know if we need this struct since it is in `campaignSource` struct.
Is this constant used for anything other than the one used elsewhere?
Can we make this string a const?
Can't we just put this on the same line as the `catch segfaultHandler = node_require('segfault-handler');` line?
I'd like to keep `disposed` as a static variable, but I'm not sure what `_disposed` is here, and if it is, it should be a `_`.
This test doesn't test anything, is it? Or is it because the customboard isn't in the current state?
We could also check the `user` here.
Would it make sense for this log to occur immediately?
You can use `if (disable_timer)`.
This change is not needed.
I don't think you need this. The `addr` is the `Get` and it's the one we're calling for when we're trying to determine that we should not have a `RepositoryatableIndex`.
Is the length check required here?
I'm not sure I follow this change. I think this is the only place where this is used.
@templates = per_map ? Isn't it better to use the same constant twice ?
I don't think this is the right place to do that.
what's the motivation behind this change? and is it not clear why it is needed, but is it?
Is there any reason to keep the check for `STDERR_FILE`?
Is it possible to use `dbm` for this?
why not just remove this line and add a space before the `=`
Is this the best place where we set `nodeToCIDRs`?
I would move this down to the block of code (and only put in the if clause). That way it's a separate file and doesn't get picked up by the caller.
`self._format = None` is faster. There is a lot more places in `set_format()` that do the same thing.
I would have put a null check here (or at least in the `if` where it was before)
I think this can be removed
nit: remove empty line
Why does the `backend` argument need to be a special type of it? I think we should avoid the if statement and just always use `if backend == 1`
Do we need this? We're already returning `ListDeploymentResponse` in the context. Wouldn't it be better to return it in the context.Context?
Not a huge fan of this, but I'm not sure if the original error message was intentional...
how about using minified?
Why are these two lines changed?
The `FATAL` isn't really doing anything since it should be an empty string.
Do we want to remove this? Can we keep it as it was before, or is it a breaking change in API?
Is the `ScheduledJobType` parameter still being used?
I would prefer this to be a global variable rather than a global variable.
Not sure if it is possible to make this change, but I don't see the reason for this change. I'm not sure what the right behavior is here is to set the `tempBasal` to 0 and let the `new` work for the `new` in the first place (which I believe is the original problem).
The `checksum` and `checksum` seem unnecessary.
nit: Can you use `provisioningDelayCondition` instead of `provisioningDelayCondition` to make it more clear what is going on?
Do we still need this?
`// Probably a Create.`
Would you mind adding `T` as a typedef? It's a convention we use in the other places.
I think we also need to update `db` to reflect its service name.
Unrelated to this PR, but I'm not sure why these changes are needed here
Why are we removing this line?
I'm not sure how to test this but I am not sure I like it this way. But I am just missing something or is this the right thing to do?
is this needed?
I don't see any use of the return values. Is there any way to make this method final?
This is a bit weird, the type is the name we want. Can we just call it `addOutputImports`?
I think you can revert this file.
The `json` tag should be `json` not `and`.
I don't see any reason we should do this for UL if we can't use the api version for UL if the api is the name we give to root?
These blank lines are causing the flake8 tests to fail
Should `t.mutex` be nil?
You don't need the `switch` here.
Is this a bug fix?
this echo needs to be removed as well right?
I would expect a test to fail if the tests are disabled in the test so that we don't have to test the exact same file name (e.g. a file name).
Should this be defer only when `err` is `nil`?
I don't get why the change is needed here, it was not necessary to make it work, just the ones below this one below.
It seems like the changes to the `Int` are not necessary anymore?
Shouldn't this be `PersistBlockLevelInfo`?
No need to specify a list of `_`
Is `isView` needed? It doesn't seem that `isView` is called anywhere
I would add a `attr_writer` class that takes an `attr_writer` param.
You might want to add a note here to also remove these if/else blocks.
These should be called `where product_type: 'workshop' ` as the default. Otherwise the user will need to be setting up the entire class.
Why is `receiveError` here?
Please put grpc within this file. It will be a build failure on `grpc`
This is a bit confusing. Is there a use case where the `cancel` value is not a `ctx`? If so, I'd rather `ctx` use a `cancel` instead. I think this will be more clear.
This doesn't seem like it's going to matter much since there are two places that need it.
@deads2k this may be confusing if you run a stack with a specific flag. I'd rather call it something like "config:"OpenstackClosed"` or something
@Sanne Shouldn't this be `[0-9][0-9][2]`?
We need to keep the `AddDiagnosticSourceInstrumentation` wrapper here as we do elsewhere
Rather than having `project.name` use `project.jit.to be_project` I would use that here.
I don't know if the code was a bad suggestion, but I would prefer a single statement instead. <msg> I think this is a good place for this.
can you add this to `Nodes.log` or similar
Do we need to set a `created_at` column to `updated_at` in order to be able to use that here?
This should also be removed.
Should we instead be creating a new deprecated method in the `@Deprecated` section of that method?
Do we need this TODO at all?
I don't think you need to pass true here since the type is the same as true.
Why are these being changed to `IsWindows`? Is this the only thing in this file? Does it need to be in the `Task.IsWindows`?
Do the ZoneOffset always have a null? I thought the visual change to ZoneOffset, but it seems this change is a little redundant.
Not needed since we already know the script is already in place and we're not going to use it in other places.
I think this was the only place I found.
Is this change intended?
Why is this required if it isn't used? If we're going to change this, then this change should be reverted.
not sure why we are converting to 10 here?
Should we only do this in the try/finally block? If so can we just remove this file?
I would make an `if (retcode == 0)`, and let the result be the same as the previous line.
I don't know why this is necessary, but it is better to make the tests pass.
I'd remove the condition.Value here and below.
Should be LOG()
Why is this change required?
Please don't forget to add this. It's not a problem but it's a bit of a mess.
nit: this looks like a typo
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we should use `text/javascript` as the default in the build system.
Why remove the `continue` here? I think the `close()` is the same as the `continue` above.
Remove the declaration
This seems to be the only way I can test the `attr` with a mock response without a `@`
I think we can move `MessageLayer` to `userParams` as it is a common package.
I would have put this line in a few more places, for consistency with other similar functions.
this line is the "value" part. Why is it necessary to change the "t" of the lines below?
why would this not happen?
I'm not sure why we would want to call this twice now. It was a mistake and it was a bit annoying to pass the entire process.
Isn't it sufficient to use the default?
This can be removed since we don't allow `bitWrite` anymore.
The typeName should probably be `typeName`.
Why did you disable all these callbacks?
"boolean" instead of "boolean".
We don't want to do this, but it would be good to have the same data as the `Invaliddl` method.
revision and revision are not consistent with the docs.
This was added to avoid internal usage and don't need to be added to the constructor.
Is it possible to get rid of this code? I don't see where it is being used
There's a bunch of `conftest.py` tests in this file.
Why is it necessary to change this?
This is not right. Should we be storing a 1070296 in the table instead of 1070296?
shouldnt this be called `LogicalType` now?
this is forcing a payment_method to work, isn't it?
Line is too long. [87/80]
I think we should add an `array` for this to the `array[]` field. This would avoid having a `ConcurrentModificationException` on the `descriptions` field.
This is incorrect. If the user is enabled, the user will be created. This is fine.
It's a str, not a big deal, but I'm wondering whether we should not do this. Maybe we should do something like: "if not isodate.date and not note that we don't want it to be called everywhere else."
Please use a single quote for the string representation of the string literal.
I thought we had been using `changed?` to avoid the conditionals as well
I think it is better to have a test case for the operator operator as well.
Why is this change necessary?
How about `TaskQueue`?
Is AccessListItem used anywhere?
Why we don't need a `*` here? The output can also just go to the `v2/teal/store/store/v2/teal/store/lib/client/store/v2/store/store/v2/lib/store/store/v2/store/store/v2/lib/store/client/store/store/client.go`, right?
I think that this logic should be in the `count` method instead, to avoid code duplication
Why is this needed?
Should this be super(SGEJobTask, self).__init__(args, **kwargs) ?
Hmmm this table seems to only be used in a single thread, perhaps it can be moved into the `create_table` table?
I would move this check outside the `try` block.
This should be handled internally in the workspace itself. You should just make it a local variable that's passed in. That way the base node will have to go through each other.
I'm wondering if this should also be contract [0.0], instead of contract [0.0..1]"
Where is the `selectCastSink` field defined?
nit: this was the original intention.
Can you use a `.GetUnicodeArgument` here ?
Can we add a `@coupon` annotation here?
"512s" -> "s"
Can we add a description to the interface?
Why do we need to make it equivalent to `localOutput()`?
Please use `label >= 0`
Probably we can use lowerDomain here.
You could just pass `topics` here to `trail_map` and then just pass `TopicBodyBodyHtml` to `Map` as there is no need to pass in `KeyBodyBodyHtml` in `KeyBodyHtml`.
should we use `this::get` instead? we use `disabley` to generate selector
This will fail in any way. `bundle` is a `string` and not a `string`
nit: can we use `c.Name` here?
This change will be needed if the `batchForBlock` was `nil` in `Byte.WriteBatch` right?
I think the `Void` is already declared before `new CompletableFuture<>()`
I would use `_x( 'Analytics', 'google-site-kit').` instead
@tnozicka this is a good example of what we should have in the future :)
I think we should keep the old name as well
you can also import `listener` in `tests/v1.py`
This doesn't look like it's doing the right thing. If we want to start using the `time.Now()` function we wouldn't want this to be the correct time.
I would rather see this test using the `--local-goto` env var, e.g. for "muk-500-500-parameters" (or similar) that uses the `gulp dist` flag for "python-k-500-parameters" (i.e. the `gulp check-bundle`) to make sure the test is correct and not the "python version" of the test).
This is the actual fix that caused a conflict on #339
I'm not sure this should be `constant\"`
Why this import is removed?
Isn't this a bit of a typo?
This would return string.
`PCollection` could be null here. I believe that `key` could be null. I'm not sure why we need it. It is also an array of `Guard.of` and `key` is a list.
I am not sure this is the right place to catch this... I think this needs fixing. It will be a good change in behavior when we merge this PR to the master.
This should be `TYPE` not `TYPE`.
Can't we just use `localEngine.Color` here?
Can you please import * from the base class, and remove * from the one from the other imports?
This is probably better in the error message.
Why not fix it in a separate PR, that way you don't need to fix it every time you add a new type to `tures`. We can fix the `runtime_call` function in the future.
This is wrong string
Shouldn't we do this on every iteration of the loop?
This should probably stay as similar to what was before.
I wonder if using an `AtomicInteger` instead would be better than a more general package
The icon name does not exist in the `getIcon` method, it is a property
Why is this necessary? Shouldn't it be `golang.org/x/net/context.go` and not `golang.org/x/net/context.go`?
Why do you change this one?
Why are we saving a model here?
Is this change intentionally here, or just for debugging?
Would it be better to use `LOG_IF(debug, logging=0)` instead? That way the code will be consistent. The problem is that `src.c_str() == 0` is a bit ambiguous.
I'm not sure this is the right approach. If I understand correctly, this is the right place to put this in the default list of anything. It should be defaulted to the user.
This file should be put in `import io` block (and the one above).
@bparees can you explain why we need to expose the `ctaLink` to the public list?
This should be nullable, and be `object`.
Please don't add trailing whitespaces in that example.
I think we should have some sort of resource here and some of the other resource options. I think that's what you expect expecting to do.
What's the motivation behind the `W1234` change?
I don't think this is safe, we want to move `localstore: %w` to `b.localstoreCloser`
I think we can just remove this field altogether and just add it to `BaseTree`, no?
Why do we change this?
Was this added to the new PR?
This is now a private field on the request object
Why change it to `Exception`?
Can we just make this a `Blockly-block`, since the block won't have already connected left?
This class was introduced by #310. I removed the corresponding annotation here since it's a class.
I don't like to put the `p` in the `./foo/bar`, but the `--1x` file is not in the `L` sense. I think the `i` is better. It should be `char(i, hex)` and not `char(s)`.
Shouldn't ` writeXML` just take the first parameter?
Should this be a constant?
What is the motivation behind this change? The original code used to do is change.
Can you please move this `if` to `err` so `if err := utils.ErrRequestCancelled {` is faster than `return err err err err`?
I would have used `cpp` here, since I'm not sure if we really want to support it. I think that we should keep `cpp` in sync with @lafyx-1.1 and have a `py` in the config file.
This change is a bit odd - it's a test, but I don't have the idea of it. Perhaps it was a separate bug, since we have the same problem. We have a test for that in `paused`?
I think this logic can be removed from the above `if self.vkCode in self.is_ID` block
Please revert this. This file is now unused.
Why are we using a different value?
The `t.Fatal` calls are not necessary here since we already call `requireBucket` on the `Path`.
I don't think we want to add `.length` here. I believe we should be looking at this code and not only add `.size()` if we are already doing ` whose data is not supported in S3.x. Can you make a `size()` function in `addAndGet(-0)`, and do this in an `else`.
Is this change necessary?
Please fix the typo here
Why do we have to firstTimeEmpySubject?
Is the `transport` necessary? Is there no way to create a container without having an `flow.transport`?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
It seems that this variable should be called `_expands_user` instead of `_expands_user`?
I don't understand the purpose of this change, because `isHidden` was never used to get `actualNode` to the client and I have to remove the `isFocusable` field.
Why not use a constant defined in the class ? (it can be used for other tests as well)
Please rename this to amp-KeyStorePasswordFile since that's the default.
This was a bug, the issue is that the `console` and `console.log()` are only ever executed in `run()`.
I would put this in `for_number` check, since that's what you are setting it everywhere else
Could you explain why malformed is required?
I would move logIdToSend_ to a separate method.
I don't like the idea of having this logic here - it should only happen if the transport transport is active. So maybe we should not do it here. But this is a very specific case, not just for adopted clusters (for example).
what about this one?
Can we make this a `context` or a `private` to match the behavior of the context, and have it contain the same output target (and the corresponding corresponding ones)? I'd rather we expect it to be a separate spec, like `when the duplicate formatter exists but that doesn't really matter.
This is a leftover from the PR
Should be mFirstContent instead of mFirstHomeHome
Should this be moved down into `applyOperations`?
Why are you removing the space after the closing parenthesis?
Why are you adding this here? I'd rather not add this here.
This is a change in the current behaviour. We should just pass the value to it. This is also the reason we need to do it in the tests.
I think we should use json rather than importing the whole file
We probably want to make this configurable.
Why did you remove this?
This is not the best. It is still indeed the case that we are not testing whether the `chaindata` is the best name or not. I don't know if there are any other way of checking for the result, so I'm not sure if it is worth the additional check here.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is there a reason we can't make flash a pointer?
This means that the contract will never be sealed in the DB?
@matt-gardner How do you feel about this?
Should we make this a global option? Or should we just have `Cassandra` directly?
This is not related to this PR, but I think it should be removed, as it's used in other classes, so let's move it.
I think this is not the right fix since we don't need to know if the stuck has been started.
This wouldn't be a good idea to log the body. Instead we should not have a body here. We should not log the body.
why does this default to `None`? I don't know why it should be a `Boolean` here.
this is an API break.
why removing this line ?
nit: can we name it namespace as namespace`?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I would have expected the "db" flag to not have a global container as the name of it is a bit misleading.
Should this be "hive"? I mean, what about "change from 'hive'?
This and the next line below are not needed.
why is this needed? I don't see it being called from within test folder
I'm wondering if this is the correct way to do it, since the `excessDomChildren` property should be initialized with `null`?
I think we need to move this to a list of all parameters. Can you move it to be a list of parameters.
This line is not related to the issue.
Nit: `error_open_zip` might be a better name.
This will fail on GH actions, which should have a `d.SourceSnapshot != ""` case. I think that's a bug.
Let's add an example here to make sure that the user schema can't get the current userSchema.
`local_ip` is not used anywhere else. It is used in a few other places in the codebase. Could this be deleted?
I think you can remove the bool here and remove the bool block (as it is no longer needed in the first place).
Why not keep these private?
I would just use `Math.maxNotRelation(minXOffset, maxeeded)`
This exception handling was not needed because 3D descriptors fail.
I'd prefer to move all the `data_store` stuff out of the file. This is already used by the `torch.lbann/data` library. This way, we could just delete the file and the file.
This should be `ValueTaskValueTask` instead of `ValueTask`
If a user has a `CLIImage` property, it will never get set to `false`.
Can we change these tests for `newTableMetadata` and `TableMetadata` from each one to another?
This test case needs to be removed.
Can this be a debug level? It's not clear from the debug level.
Would you mind to explain the reasoning for this change?
I'm not sure if this is good enough - we should just always set the goodContentType flag when we are not good to know if it's an good idea to have it.
We can't change this to: ``` ```js if (command.getName() && command.getName()); } return command.getName()
do we need this?
Should the flux_respond go in the first place?
I believe this file should be `webpack`
What is the difference between `newSchedule := schedule` and `go` here?
This should be checked only when project is not null
Why the need for the include beforehand?
nit: remove the `break;` part here.
Why not just make the manifest final? I don't know how I can make a VM after the manifest is created.
This should be moved to `ViewerAtStartup`. Same for `NodeView`.
I think we can just add `PercpuUsageInUsermode` to `User-real` and use the same value here.
This should be removed: if check_user_can_edit_record is not set, check_user_can_edit_record is not set
Do these tests still pass without the old `CDP` prefix? Is there an option to use the old one you created for this particular interface?
I think this is still needed.
What about the case where we have a `date` or `CET$`?
Let's not use this for now, since we are not using the `validate` anywhere in the model, which makes me feel like it's the best.
There's an extra newline here that I'm wondering if the problem is with the check for `election` that is not the expected value. I guess this line will be there.
`getMicroserviceInstance()` is not used anywhere, right?
This is a breaking change - it does not appear to be used anywhere.
This is the only functional change in the current implementation.
Can we set this to zero instead of 5?
Can't this be `selector` and `Stateful`?
This would be clearer as `internal override void`
You should use the `SurSur` helper in this file instead of hardcoding the path
here we use the transferred, which means that we don't need the groups.
Why is this change necessary?
I don't understand the XX_NUM_SIMD_ runner?
This will not work, you will get the string "reject", but you will get the string "reject" first, which is the expected behavior for the lower case.
shouldn't this be `null`?
This check should be moved inside `if ( == -1) {` block (line 455).
I would prefer to have this as a `ConfigAuth::setAuth()`
Since this function is only called in `send_block` I think it would be better to have it return `label::send_block::epoch` instead of the assignment.
Please do not edit this file
Can you use a keyword arg to make this `static`?
Please keep the number of arguments (i.e., `-1`).
We have a `plugin yarpc ` flag. Using the `sanitize-tchannel` flag. Please change the doc.
Since you're using the `Process` class, you're doing `API_BEGIN`, `Process` and `Process` already, I suggest doing the `Process` method instead of `Process` to be a `Process`
Do we really need to make this a `DbRound` struct? I would prefer to not have this as part of the API and just call `ReCompileOffsetError()` to get the `Round`.
Can we use `assert.Equal` here? `getCluster` returns the value if the value doesn't match what is?
Shouldn't this be `crypto/base64`?
This should only be done if the `key` is true, right? I think the `prefs` can be true only when `key == true`
Please add this to all of the other ones.
This was a bug that caused an error when the error was returned
nit: I think the word "none" is better.
Why do you need a copy here?
We can't use the `proto` parameter. The parameter should be used as a result of the map. This should be done in the map as well.
I think you could also update the changelog to mention the version number
This should go before the other PR
why did you change the size of the loop to 0 here but not below?
This looks like a leftover from the previous commit, I just wanted to ask if this was a bug.
This is not the right place for this.
What is the idea behind adding the check here?
Is this include needed?
This should be indented by the `ier` module and not here.
this is the same test as the testing case, right? Maybe test with a test case?
I think it should be min.1 instead of 6
@mfojtik why is it changing the order of the parameters?
Let's use something like `ensureUtils.getInstrumentolint()` instead of `tributor`
You should be able to use pkt[TCP] here.
nit: I think our style is to avoid star imports.
The style checker will complain about this change.
This is the only way I'm about it. I'd suggest a different file_add_metadata.inc_set(file_exists('../../release.inc') before the file_exists.inc file_set(file_exists('../../release.inc')
I believe this will work if you make `.spec.action` a singleton.
This one is not really needed, and is not necessary anymore
whats up with this for anything?
I would prefer to call this method `value` (and the more specific location). `value` is not an instance of the underlying algorithm and should be the same as `region-video` (or the same as `typing`).
I think we need to remove this. We're already doing some cleanup by default.
The copyright here is wrong. The copyright at the end of the file is wrong.
This will fail, if the `PathManager` is not present.
This is a good example of why it was changed :-)
I think this is the wrong approach. The idea is to write the result of `execututututututututututututututut can be to write the result of `exes = (write)`. In other words: what happens if `execututututututututututututututututututututututututututututututututututututututututututututututututututututututututututututututututututututut
can we make this the default?
I don't think we need this here.
Can you use `Array.Assert()` to get the timestamp of the byte array instead?
This could return 0, but the function does not accept an empty string.
this is a bit weird, why we have both `types` and `vic-api` ?
Why are these strings?
Hm, why is this a "cluster"? Can't this just be a warning if the service repo is in play?
I don't think you want to make this change. The number of proposal is not negative, but you want to be able to configure the function signature on the next line to be zero-initialized.
We should make it consistent with the other API
Use `log.startsWith` for consistency.
@agramfort this was just a mistake, I removed it because the `_` was being used by the `RefSetter` class.
Should this be checking for a string value?
What do you think about using the session var directly directly instead of the `current_user` variable here?
Please add a new line before `layout`'s. `if` should prevent the warning.
This method doesn't seem to be used anywhere else. Do we need to add this method?
I don't think it's a good idea to use `2.7`, but I'd prefer if you had a better idea to use `3.8` to handle this properly. In fact, I think this would be more correct.
I would move this import to the top with the rest of this file. We should move this to the top.
I'm not sure if you want to make this change. If you do that, then you need to update `and_op` and `and_op` to use the same value for all `inline` cases. If you want to make this change, please keep the original value.
I think we should remove the prefix `bob` and `bob.prefixed_userid`
Does this need to be mocked?
I believe this is the only change in this PR. We should move the import of the import.
This class is unused and should be removed.
I know I'm not sure this is a good name, but it seems like it's a little misleading, since it's an implementation detail of the implementation. It might be better to call this `StartActive` or something.
This is wrong: NET452 is a valid source for NET45.
Do we need the change in the file name?
I think the `continue` is a little bit confusing. Why do you need this?
this change is not related with this change, please revert. Also, why is `[0]` not `[1]` if we want to have to have to change it?
this will be fixed in a followup PR, but I think it's safe to add a new `FormatIsMultiplane` that is passed to `FormatCompatibilityClass` and not need it, as it's a member variable that is passed to `FormatCompatibilityClass`
CachedAccessor is not used anymore
Nit: This line does not belong to this PR.
I am wondering if it wouldn't be better to do a `selectedItem != selectedItem`. Then, we can just have a `||` in the call stack, and then do `selectedItem.has_Media()` (or something similar) instead of making the call stack the same way in the method below.
Can you please explain why we need the EBS Volume option now?
This isn't needed, isn't it?
This can be avoided by adding a getter for `SpecProvider` class
`afterAction` is not used in this class. Do we need it?
I think this can just be reverted.
shouldn't this be the default?
Is this an array? Or did it not change?
This is not the cache anymore.
I am not sure if this should be a copy, or if it is a copy?
This isn't right. The current `.html` file doesn't contain a directory, it should have a file that is not a directory (e.g. `os.path.join(os.path.join(path='html_files')`) so we have a file that is passed to a directory which has a file that's not a directory. The `:html` directory should only contain a directory.
Is this change still relevant?
We could make this const by using a reference to the `nrf sam s` type.
This was incorrect before because the previous implementation was `for (auto atom: atoms())`, so the previous code did a try to avoid that.
is `getConfig()` needed here?
I'd prefer to see this one be allocated_size. The original code is also used for the `type=ID` function.
Should we consider making a new method that has the templateRole defined in the UI instead of using it here?
This looks good, but I'm not sure if I'm missing anything here.
`opt.is_a?` is used only once in this method, so I would not remove the `if`
I think you want a different approach here, since you have a different approach that is needed in `__init__.py`, and then you don't need to repeat the `className` here.
@smarterclayton is this an important change?
Unit is not used any more, we can remove it.
Can you add some description about what the field does, and how we use it?
Please avoid `import {preact';` on line 777
You can just call `t.datetime` here. `cart_item_id` is the correct table to be released.
I don't know why this is being moved here, as `DEFAULT_GITHUB_ENDPOINT` is used in the `mne.utils` module and it is just a `mne.utils` module, so I would suggest `DEFAULT_GITHUB_ENDPOINT` as well.
@deads2k i'm not sure we want this
This seems to be missing test coverage.
I think you need to add a new line before `required=True` and `required=True` to remove all the formers from the log.
If a new `existing_rows_count` is set to zero, does the test pass?
Indentation looks off here.
Was this a bug? If not, please remove. If not, please fix. Also, I don't see why this should be here.
This is an API change and is not related to the fix, but I guess it's because I don't think the "else" case is correct? In this case, if we have a default, I think it's better to change the return value of `_timeout` to `_result` to return `_set_timeout(cls, timeout)` in the case that the value is `False`.
why change this?
This will result in an infinite loop when paths is not found.
In the past, we should be calling `translate.translate()` here.
why is it ok that we don't pass a pointer to the function?
Does the changes to `config.module_install` need to be changed to `node.resolve_install`?
This is not needed. The `free` call on `globalWorkSizeX > UINT32_MAX` will be removed after `maskWorkSizeX`. The `kds` will be determined by `globalWorkSizeX > UINT32_MAX` and will not be defined.
Not related but why do you need to put this here?
I think it should be 1.15, otherwise it will be 1.9.
Is `$options['lazy'] ? '?:` needed here? I mean, it is a BC break, right?
Can this be removed? It's a test class.
Layout/TrailingBlankLines: Final newline missing.
s/captured/captured/captured by the suggestion suggestion/captured/captured/captured
Shouldn't we use `errors` here now?
I'm not sure this is the right approach. The `p->mp_impl` check was there before, but it seems like we are missing a test for it.
Remove it please.
I'm not sure if consumerInt is needed in this case.
Can we also test with `// + 1 in pending` and `// + 1 in pending` ?
I'm not sure why this is a config option. I think it is better to be a `config` or `enable`.
This seems unrelated to the platform checks?
This looks unrelated to the bugfix
Whilst this use case is not needed. We use `/Trait` in a few places already.
@Pearl1594 should we add a check for the existence of the factory?
@mattpap Ahenlancelcelan I think you could do `from enum import Enum, unique`, and then you don't need `scale_id`.
I think we should just keep the ENCFAIL at the top level (just like we did elsewhere). It should be possible to keep it consistent. I think it would be a breaking change and we'd need to revisit the code later on.
This method should be inlined.
Should be 2.0.0 or 2.0.0
I am not sure why we need to set it to `null` here. It's a public API and it is not necessary. `call Reload` is only needed for `null`.
We need to pass the `cleanup` to all the tests and `create` that are passed to `cleanup`.
Shouldn't this be read message: %w
This file has to be reverted.
@dean-peters, this is the right fix.
We should not support these as the spec doesn't work anymore.
Please remove this. You should only need a single `ignore` dict if you are using it for python 3.
We should not use the type from `enumerable`. We should not modify the original value in the `value` of the property.
It's not clear from the name what this is used by any of the other code, is that ok? The `auto end` variable is used in this line of code to read the `auto end` variable, but if you want to make `auto end` variable, then `auton` will be a bit more readable, and it's more readable to have something like `auto end = `IteratorIterator` and then `auto end = getStartIterator(rxn, type);`
Shouldn't `replace_ptr.release()` be called before `Action*` is equivalent to `replace_ptr`?
I'm wondering whether this is better as a separate method
Can we make these nodes configurable, so they're only added to the `.resh` file?
Is there any way to do this without having a name? I would expect that `Table` would always be present and then we would have a name that would be `null`. Then, we should check `load()` instead of `load()`
The `viewTop` variable is unused.
If you are already using `List<String>`, I think you can just call `StringUtils.create(String, String)` here.
This is not right. The `path` should be used to replace the null by `List<String> path`.
Not sure if this is needed
SimplifiedBasicBlock => everything that needs to be added. I think it's better to get the type from the UI of the package.
Should the method be `warn`?
Can you make a method to have `new SparkMicroBatchStreamScan(false)` and use it directly in the constructor?
nit: remove trailing spaces
I don't think `getState()` should be called in this PR? Maybe we should just delete this attribute.
I'm not sure this is the right approach. There is a general rule for `librarygocontroller` and `librarygocontroller`. I'm not sure if the `config` is a good name.
This was a bug, right?
Isn't this just a copy of `.array()`? This will cause the same problem when the `content = content.array()` is `true`
Is this a BC break?
Group with last group of imports.
Why was this removed? Is it a timeout timeout? If so, is the timeout still working?
This is the main change. I don't think this method can ever be used in this class.
I think we should test that `self.put_json("/options", {"wtf": True)` ?
I'm a little confused, you're using `!` here. I think you need to remove `:` altogether.
remove empty line
This needs to be moved to the `abel_prepare_names` list
The convention is to add `cloud-format` to the docstrings that we don't use `FileAccountFile` to determine if it is actually required.
I think you can just remove `Sign in` as you dont need it anymore.
why remove this line?
This is the only place where we need this interface.
I don't think this is right. If `include/timeout-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check-check` is used to update the error message, it will only try to capture it when doing a `check-check-check-check-check-check-check-check-check-check-check
I think it's fine for now to add the `editor` as the `edit` array
`upload` is not really needed, because`upload` is an array.
Why was this changed?
Shouldn't this be `waitUntilAllElected` ?
I think we need a different name for this.
I wonder if we should just have the `BuggyProposalLowestOutput`
This is wrong, I believe this was the first time we call this method, and it doesn't seem like it should be the last thing that was used.
hm this is a bit odd but how can the `action.search` instance be used here? I don't see where the `searches` instance is defined?
The number prefix is always the same as the "ABCDEFGHIJKLMNOPQ�UVWXYZ".
I think this is still a good idea to have as many logs as it seems to be a different story than the others. I would keep the old code here as it was.
I'm assuming IApiResponse isposable because of the same logic, it could also be moved into a shared object
This should be a single line string
I'm not sure if it's possible to have this in `seti_findings_{}.json`?
Can you please explain why we need to keep the old signature?
Do we need `getLogicalLogicalSR` in the `get` function too?
I think this is a leftover from debugging purposes, right?
This should be removed.
I wonder if we could add some kind of type around around this `pubSub` but I think it's not necessary to introduce a new type here.
should be 100?
If you add a custom error message, then this will fail
this error message seems very confusing to me, I think it is something we should look into. I think we should not modify the inputPattern's input, but this should probably have something like "This error message is also used for input "inputPattern".
this is not the `testMatch` you want. I don't think it should be here, but it doesn't hurt...
What does it do, or why is it not possible to return an error?
Why is this being removed? If the goal is to use the template directly, it is safe to remove the template.
It looks like the err is always an error so it should be handled.
Why does this require a variant of `Schema schema`? Is this the only place where we need to use `schema.empty()`?
This is a bit of a hack, but should it be `Module` instead of `ModuleModule`?
If we are going to start a PR to add a link to a redelivered package, we might want a PR to add this link to a redeliver. I think it is fine to add the "add a path to the user." as well.
I think it is fine to just remove this?
Why use `asset_type` here rather than `forward`?
NotFixTopicCopyBugOption() was deprecated in a different PR.
I'd rather we do a short_count here. <msg> I don't think it's necessary to do it in the short_count, but this is the only time I see a single short_count.
I'd rather not include H2O- prediction in the list, but I'm not sure if it's necessary to add anything here. It looks like we're going to use it in other places, so if we can just move it to the list, we can use a list of files that we're using.
This is now dead code.
This is a bit odd. What about `Bytes`?
I wonder whether we should have an `@example` annotation for these so that it's consistent with other RSpecs
This should probably be a `Boolean` constant.
We should only be passing `playback` to the `timeRemaining` object.
I don't think we should be using this to be a number of logs (and the whole of our test case below), we could probably just change this to something like "1000". In other words, I think we should add "1000" to the help, as well.
Why not return the `Enumerable<String>`?
What about creating a `LoadRaw` function for all the `Pool` components that take a `Pool` object?
Why we need to move this file to localization ? It's not doing anything, it's not related to current pull request.
FYI for this change, the `literalSet` is a `literalSet = 1`.
if we don't need this
Why is `h.describeCMObject` removed here?
is this a typo?
This was a mistake, so it was missing the logic in here. The `self._state.prune` was `task.id not in necessary_tasks` was not in the original state of the `get_active_tasks()` being `task.id not in-line.xml` was the only place that was not being used here.
Why are you importing this import from another package?
This is not the right fix. `primary` is a `List<Object>`
Isn't it better not to return `null` as default?
I would not do this for the value of the `setValidatorsForPreviousBlock` since this call will be the same and will not change the code.
Should this be just `longopts[0]`?
Can you rename this to `include/include/fixtures/Blockelmed/prod` or something? I would expect it to be more generic, e.g. `include/fixtures/Blockelmed.xml` or `include/fixtures/Blockelmed.xml` and `include/fixtures/Blockelmed/Blockelmed` instead of `include/fixtures/Blockelmed`
Looks like this is missing a `<%>` after the text. The text on the second page can be removed.
This should be in config, not in config
Why are we using `__future__` in this file and elsewhere?
This needs to be done after DRaching_get(), since that's the default for DRachinging.
Why is this removed?
I would use something like `internal` or `internalTimeoutWithTime` and `internalTimeout` for consistency.
I think this is a leftover from a previous PR.
This is an unrelated change. It will break the build.
shouldn't this be the default if `_` is False?
Is this needed if we add a license header?
Why is it named `Server`? Does `ServerSpec` have a name of theTaskJob?
This should probably be done in `sys_get_meminfo`, since that means the system will be executed twice.
The `mode` event should be `schema`.
Nit: `SequenceNumberForNewDataFiles` -> `SequenceNumberForNewDataFiles`.
we can't really use `1..60` here since we have a default in the url name in this scope (we should not use it in other parts of the code).
I'm not sure if this is correct.
Extra empty line detected at block body beginning.
`@var string` is a BC.
I am not sure if it will do the same thing in current `shell`... I'm not sure if that's the best approach.
I don't think we should change the `record` here. It is a special case, right?
nit: you can call this `downloadProfilePhoto`
@danrot what did we do here? The typehint is the `array` or `int` here, so the type is an array?
(style) trailing whitespace
Is this the right place to put this?
This is the only real change in this file. The previous code did the same thing.
Did you mean to leave this here or was this just for testing?
`signerFlag.Value()` doesn't return errors, so this function doesn't throw an exception
log instead of `.logPrefix`, since the log messages are known by the caller.
I think this may be more readable if you just put boost::numeric::bad_numeric_cast &e as a member variable (see line 339). The problem with the rest of the code is that if you don't change anything, it would have been preferable to have a single member 'parser' with a 'parser'.
This will fail on older S3. The `Simple` package will be loaded with a bucket in a different place.
why not using `CACHE_ENABLED`?
This is a breaking change for the tests I'm confused by by this change?
I think it would be better to have a `with openZK` option instead of adding the additional one.
Should this be `gcloud/application_default_*_separator`?
Shouldn't we just return -1 here? We do that in other places, but if we are going to use `.countRows` we can then use -1 to make it more clear.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
If these are valid, we should probably add some `logger.warning` to the `logger.Error()` call.
This is not related with this PR. If you want to add a `posix='win' not in sys.platform` field, you should also set it to the `posix='win' not in sys.platform`
I don't think we should change the `slack` field here. We don't want people to pass `config.Channel` as a `content/slack` in.
how about `-o ControlPath=~/.ansible/cp/%r@%h-%p'` for clarity?
It should be `shifted_bearing < 360`
I think this should be `FULL_VERSION=True`
this has to be moved outside this class.
It looks like a good candidate to move this to a constant.
This should be in the `spec/features/constants.rb` as well, no need for a single test.
I'd prefer a `List` as a type, not a `List`.
I think `getToolChain()` might be called more than once, since it's not an internal method, so I think it's better to just call `getToolChain()` directly.
`findIdByHash` already does the argument for `Hash $hash`, so I removed it completely.
Is this needed?
I think this is not a part of this PR, but I guess it's just a thought.
Is it possible that the execute() call will fail after the first execute() call returns?
do not bother to add new configs. just inline them.
I'm not sure if this is the right way to check the AWS API. Maybe we can just skip the local backend if it's going to be used by an error.
Hi @chamdzibarr, please review the changes.
We should probably just say log-prot here as we might not log the message?
Might want to call `.mcsIdx` for the sake of readability.
This is the only change that will cause issues. If pendingCountLocked is closed and pending another pool is pending a new pool, it is pending a new pool.
why did you add this?
Why do we need to remove the `loadReactAppOnceIfReady` ?
You can install the OpenMP library by the
Use the new Ruby 1.9 hash syntax.
Why are we not setting the test client directly?
I'm wondering if it would make sense to have `is...()` in the `if (is...) return a promise` that will throw an exception if `frontActivity != null && !isHybrid` otherwise.
We should be able to just remove the context here, since we don't have to pass it to the `NewTimeoutError` anywhere.
This seems to be missing the `== true` check.
This would be a good place to add a space after the `if ($chars[$i + 1]`
There is already an `_upcase` method in `env_array` and `env_array` above.
This should be `var options = variableOptions.count();` I think.
I think we should check if there are no items in the schema.
RuntimeIOException is deprecated, we have to remove it
Is this a tmImplementation?
This is still needed because `getProviderConfigurationUrl` already contains `ForAdditionalLiveTvOptions`, right?
(Pre-existing) Do we need to do this change? It would be great if we could have a test for the reader reader to be sure that we're not testing anything about it.
This would fail in any way, since `UIA` is a `UIA` instance. We can't change the name of the API to `UIA`.
`replace-partitions=true` is not needed since we always replace it
Where is the sorting?
What do you think about moving the check out of the `one_or_none` call to `register_up_sort` so we don't need the updated checks?
I think this should be `node-labels`?
This is not necessary.
"should not set empty string for x-bar"
This is the key that should go, not the default
Why do you need this change? If it doesn't change (it should be `if no '_autosave'):` it should default to `True` in case it doesn't change
The `BalanceRecord` call here is not needed. The call here is to call `.AccountData()` in `BalanceRecord`.
@Jokriks said, I'm not 100% sure why this change (and it is still needed) but I am not sure.
Why is this 1 if we are only setting it to the "1" value?
What does this change do?
Do we still need the job name?
I think this should be `log.debug(groupId, StringId, StringId, StringId)`
I don't think we need this anymore.
Why is this change necessary? Is thecodec variable used elsewhere in the codebase?
Shouldn't the class be renamed as well? I mean the fact that the typeSolver is not a public method, but you're just missing a mock
this will cause an issue on windows if not set.
I think the indentation is wrong here
Why are we changing the default value for `crypto` to `[]` instead of `[]`?
This was the only change that affects this PR.
Please add GcpCredsSecret to the GCP PubSubSource?
OnOnFlush is set to zero?
This can be removed since we're in the pytest fixture. Is there a reason you left `pytest.fixture` here?
You need `echo list_url` here and below
Why is this needed?
should we change the name from " INTEGER 0" to "0000"?
@jeherve - do you know why it's OK to include the "hive.openshift.io/clusterName" suffix in all the packages in the future?
why this change?
`string[]` should be `@method`
I think this is still useful.
retentional change ?
What happens if `--conform` is greater than `--conform`? Should we add an explicit flag for that?
tpfp_func param is used in a different way, why is it needed in the Marlin?
Should we return here as well? I mean, why is the `isDebugEnabled()` needed at all?
do you need this function?
The `feed` attribute is never null.
I'd like to see a test for this, but I can't seem to find any usages of `allowIncompatibleChanges` in this test
This is a bit confusing, I think.
this is not the func/http
Line is too long. [81/80]
I don't think we should be testing this test. We should be looking at the unit tests and not running the tests with `assertThat(...).isIn(1,2,3)`
Can you add a space between the constant name and the constant?
`find(pClient)` is not needed here
Is it possible for this to happen at the bottom of the file? If so, why not make it a member of `fresh`?
The feature is unimplemented. We need to add support for libpod files.
@Pearl1594 should we do this in the esm API? or is there a better solution?
this is an interesting thing to do if you are going to do a "not set" and the "not set" is the same thing as the "if not set"
This is the only change that affects coreclr and I'm pretty sure this is a good thing ;)
Can you explain this change? It seems odd to me that `-1` is a `-1` which is not a `-1`. If it does, you might want to use `1.0` instead of a `-1`.
@jridgewell I'm not sure if it's a good idea to set `inputOffset` here, and if it is, then it will return `false`. If you don't know how to fix the test, let's remove it for now, since it will be a breaking change.
`nvcc` is the preferred version of the package.
Is there a reason you didn't just change these strings?
@bvanessen @mmaxim could we do this for a task instead?
What is the reason for making this a method call instead of passing it as the argument to the method call?
I'm guessing this import is not needed?
is this used anywhere?
this change should not be needed
I'd like to see a test for this (and I have to check for `shows/_show.html.erb`), but if you think you could test it with the new name of the file
In the past, the original implementation of this method does not have to be an argument, so it should be an argument to the exception. I think we should keep it as is as it was before and keep it as is and change the message as `const char *`.
The tensor is unfortunate, I'm not sure about this. Can we do that instead?
This is the only thing that could be triggered in a single place, but in the case of a non-bootstrap string, the result may not be in the same order. This is because the first part of that function doesn't do that I would expect is `x$flux_sec_incdir` (and it is a string)?
This is not right. The returned file is already passed to stats and not used.
I am not sure about the `keyValue` value. Is it always an integer, so it's a bug?
`recording_start` is defined here because it's defined in the `if` statement.
What's the reasoning behind that?
@fmassa I don't see any new code using this, is this good?
I think this is the wrong place for this.
Hmm, this is a bug that should not be asserting `api_response.get()` - should we assert that `assertDictEqual ` is not `assertEqual`?
This should also be changed to `h2o_hpack_decode_huffman()` since `alloc_buf` and `h2o_hpack_decode_huffman()` are also called in the if-condition.
I'd be tempted to remove `private` as well
Can you add a note here that these are version 0.7.5?
Should this also set `metricsConfiguration.isPushEnabled()`?
I think this is the wrong way to check for the other `self.backbone_end_level` if `True` is `False`
This is not a good idea, as the `IsLeaf` is not in the array.
I think we need to check for the case when the request is not present.
I think this is a little confusing, I think the only peer type is `setup.adad(r, transport)` and `setup.adad(r, transport)` is `false`.
I am not sure what the best way to fix this is, it seems like we're trying to reduce the number of arguments here.
loss_normalizer_momentum does not exists in the normal mode yet. So this should be `loss_normalizer_momentum=0.9`.
@jridgewell do we want to add a new function to all `FIONBIO` in the list, or is there a way to fix that in `iooriginal*` functions?
nit: I believe our coding style checker didn't catch this, but I think you'll want to keep code clean!
What do you mean by using normal functions?
this looks like a regression in #1074
`list.size()` is not needed here. `list.Immutablemodifiable` should be removed if you want it to be removed from the interface as well.
@mfojtik did you notice this? I think it was intentional to keep the previous version.
Should it be a ` option`?
Shouldn't we use version to check it is not null?
I think you should use a function `errors.Wrapf` to return an error.
why not keep the #if with the #if defined?
Do we need to call `network-audit-results.json` here?
Why did you remove this line?
Please use `asList`, otherwise you'll have to use the IDE version
`ast.yaml` and `ast.yaml` are both the same, so I think this would be fine, but just wanted to check if we can find out how to handle the scenario where we can find the same syntax for both.
should be lower case for metadata table
I think we don't need this line
if we're going to do this, maybe we could also just `html_safe` and `html_safe` as well, since we're not going to have a plan here?
Nit: this one is redundant now.
This is a good time to put this in a separate const. Is that intended? It's not used in any way, so I'd suggest to make it private.
is this necessary?
We need to keep track of this.
is this a regression? or a regression?
why did you change this? 1.1 should be good to go.
I would move this to the top of all the other files, as it's the only place where we need it.
This is the main code I found.
Please remove the extra line.
The lock lock is not closed, it's a `Lock()`. The `Lock()` is a `lock()` not.
Is this used?
This PR is not related to the PR. It is a bad idea to wait till all the time before doing the test.
Add a TODO to remove the period at the end of the line.
This isn't used anywhere, it's already a package.
This is a breaking change, and should be cleaned up by the caller if you don't want to do anything else
I don't know what this has to do with the other auth providers.
This file is only used for the `LANGChecker` class. Should not be here as well.
I'd rather you add `# FIXME: true` to the test so the test doesn't fail with the `item` property name.
It's not necessary to add `isNullAt(1)` and `isNullAt(0)` methods in the `Identifier` method.
(style) 'nd' may be misspelled - perhaps 'and'?
I think this is still necessary because the component already have the name `_`
I would prefer this method to return a class rather than a class.
This is a bit weird, but I'm guessing it is a bit confusing to see a `tab-pane` or a `alt` action on the server side
does it make sense to put this in `label`?
This is the same logic as before. The same for `wlr_list_get()` in `roots_xcursor_theme` below. We could add a check for `desktop->xcursor_theme == NULL` in `lib/wlr/wlr.c`.
should be TopicsFilter.getBoolean
I wonder if there should be a check for `key == 0` instead, and if we ever do it for `self.keys[0]`, then we can just check it for `key=1` and `key=0`?
We don't do this. In theory we should have the desktop window set to False when the desktop window does not exist. This is a different code.
We have to be clear that this is not the global `Provider`, so I'm not sure it's the best place to change to `VCPULimit` here - it seems to be used in many cases and it doesn't really matter, but it seems like it might be worth to rename it `Memory` or something like that. `VCPULimit` is the `Memory` field of `MemoryLimit` but it does not feel like this is the only usage of this PR.
You need the number of supported Tiers. Can you use a more specific number of supported T TierIndex, which is the maximum number of supported Tiers
Why not using a `using` here? Then we can have `using` as the second arg in `Begin`.
I think this is an important change for the change, it should be in the same PR.
I'd add `@Restricted(NoExternalUse)` here and in all others.
`GenericMeta` is only used in the context of `GenericAlias.py` so it can be removed.
This is an example of a bug I found. This is just a small fix for #4773. We should try to clear this on the template's own, but it doesn't seem like we're going to be doing this at all. I'm going to try to figure out how to make the template happy
Do you need to reset_reporter?
It would be nice to write a test for this in case of linked problem.
You might want to add a license header here to make sure this is not a public API.
The log message will be more clear. "reason" sErr.ErrStatus.Details.Causes[0].Message is the one that we're trying to update.
I would add the `-p>` prefix to make consistent with the rest of this file
Is it possible to continue and continue without a `continue`?
Please keep the space after the `%>`
Do we want to close the pinned tab? If so, wouldn't it be possible for this to be `if tab.pin is True:`?
I think it's better to use the `#market` page for the `#chkRemoteAccess` and the update `#market` page here, instead of having it in the `#chkRemoteAccess` page.
Is this a change of behaviour? I'm not sure if it would have any impact, but if you think it would be useful to be able to make the `src/partial` be an array of values rather than an `continue`...
Seems to be unused?
This should be `BeginBeginSync` as well
Is this needed?
I think we need an assertion that the span isn't in the span name.
I think it would be best if the test fails (which is failing on `src/server/gitea/src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\src\
can you make the default info in the schema itself too?
This is the actual fix, but it was probably just me, and it was a bug in python, so we can't remove this. I can remove the `Bolt::Logger` because it was not used anywhere in the code.
This should also be `reverse(t)`
Please add `takesHeapSnapshot` to the top of the file and add a TODO about it.
why not make_unique<execution_context>?
This is not very descriptive. I'm not sure if we should include this in the main build, but it seems like it could be even confusing. I think we should just add it to the `go` list of `gcc-` settings.
This is a change in behavior, but I wonder if we should make this change?
This is a bit weird - if we don't do that, the first condition should be `if ((getOperatorType() != REL_UNARY_INSERT) && ((Insert *)this)->isUpsert()`
I think this is a typo in the commit message. The refactoring will be a good idea to change the default behavior. For the future, the refactoring will still work. The refactoring will need to be done for the next commit.
change spec back
Should we add a TODO to remove this?
We don't need this change.
This is a breaking change for the add() methods.
I think you can delete this line
This is not needed.
Is this the right error code?
This is not a good idea, but I'm a bit confused by the code here. Is the idea here that we are not using a `ddev_update`?
**suggestion (non-blocking):** I wonder how many users know how many items we're going to have in the DB, but this may be confusing for a while in the future.
This shouldn't be necessary. The logic for `os.path.isVersion` returns None.
Should this also be part of the `omitempty` base class (e.g. `json:"skip_devices"`).
you should use a constant for this
Can you just pass `Region` to `ent2.Ast`?
`connected` seems not necessary, as this is already `None`
this means we will not use it anymore, right? if so, we should remove it.
I am not sure what `getNonStreamingMethods` is for, is this supposed to be here?
I think this can be `continue` too, right?
@bartonjs, @jcotela is `zeros zeros(shape.size(), 0);` the default behavior? I believe this doesn't work with shape shape shape,, like `zeros zeros(shape.size(), 0, shape) - 1`?
this is still not correct, you need to keep the image as a string.
Should we add an example to bring it back to the `=` or we'll have to fix it later
This class should be renamed to `API`
I think it would be good to move this code into a `realmConstructor.Sync` module, and move this logic there. It will be easier to read and understand what's going on.
This should be added to `destinationPodNamespace` and not `destinationPodName`.
It seems like this line is not required?
This change makes no sense.
I'm not sure we need this here.
why not use `chuykdirAll`?
What happens when `TraceContext` is `null`?
I don't think this is needed. The class is already `<a>` so you should remove it.
Why was this added? Seems unrelated to the PR?
Can you please rename it to `ecsMaxIDLength` or `ecsMaxIDLength`? It's a bit confusing that it's an integer.
This field should be prohibited when `other from being present.` (and similar places for other prohibited commands)
I'm not sure why this was here...
I think we should move this to `QUIC_GO_LOG_LEVEL`
Why do you need to check for `byteCapacity` and `byteCapacity` instead of just `*`?
What do you think of adding `data['fingerprint']` to `resp`?
what is the reason for `mkString` vs `string.of()` here?
this change seems unrelated to this patch?
You can remove `[UnsupportedOSPlatform("browser")]` in the `if` statement. If you move this logic up, you can also just do `if (accounting.Stats(fs.Config.MaxTransferMode)`
I don't think this is the right place to put this. This is a change from the scopes to the scopes, not sure if this is the best place to add a new scopes
Do we need this?
Why are we doing the go/go import here?
This file is now removed because the field is now empty, but not in the test suite.
I think this needs an update
If we're going to make the `example_group_block` loop go through, then we shouldn't have to do this for all of the specs.
I would remove the release note.
This should be `envTags`
same here with line 206
If the host is not present, it will not be outputed here. This makes it easier for us to have `Event` and `Event` methods to find the `preserve_host_output`.
I think you should getNodeAttributes and getNodeAttributes can only happen if attributes are attributes.
This can be changed to just `DEFAULT_DDP_BACKBACK_PATH`.
I think we should not have a `default` value for this. `topic}/ws` is a special case for the value of `FixedTows`.
why is this necessary?
Unfortunately this was not a problem. You're still using a real version of the test.
I'm curious why you did not do `if (req.getQueryString() != null && allowedPostRequest(req)) {` but the `getQueryString()` is a bit redundant and should be fine to remove.
This is a private method and should have its own `getTransportImportName()`.
I don't get why these are removed, it is not needed
Use 2 (not 6) spaces for indenting an expression spanning multiple lines.
I think this is the wrong place for this. The new config property should be used for the internal property.
Is there a way to write this would be `ACTOR_DEFAULT_BATCH`?
I would have expected this to be a constant.
nit: `Buffer.isBuffer(payload)` doesn't need a variable anymore.
does this mean that if a user specifies a `p` that has a `p` element? Should we use `padding:` instead?
this is just for testing?
I'm not sure about this. If we are going to send to the file, it will be better to do the same for `git-daemon-export-ok`.
Is this right? We should just be looking up for the whole services to be in the `ServiceBuilder`
we should make it a little more descriptive?
does it need to be public API?
I would suggest that it is not set by the relayTemplate
Please add `io.quorumCompatibilityMode.java` and `io.quorumCompatibilityMode.java`, and use `io.quorumCompatibilityMode.java` to keep the code consistent
Use 2 (not 3) spaces for indenting an expression spanning multiple lines.
This seems like a good candidate for a newline before the last stdlib imports.
Simple S3 -> getting rid of `__main__`
This could be a simple string, since we don't want to expect an output of a string. It would also be nice for the test to expect a string to be run on a non-standard output.
Was this a mistake before?
This test doesn't useOnchainConfig but it does not useOnchainConfig
I'm not 100% sure how to test the attributes here. If the attributes are different, we may want to remove the attributes.
This is not needed, we are setting this to `undefined` on the `RejitInterface` object, right? If so, we can just set this in the `if (this._client.boundingClientRect) { ... }` block. Then, we could just set this in the `if (this._cache.boundingClientRect) { ... }` block.
Please revert this file since this file is not being used
do we need this?
Maybe we should add a `@var` annotation in the `createRecord` and add the annotation here?
It's not a good idea to use the same `filters` in the `filters` folder.
MainMenuItem seems to be a good change here. Why do you need this change? The only thing is to allow a single array, is it necessary to pass the MainMenuItem array as an argument.
Does `API-MS-Private-L1-1` also work for `-1`? I believe the latter part of the `Private` part should be fine, no?
why are we changing the order of the parameters?
Can we avoid this? I see a test for this, but if so, this is a bugfix.
I don't understand that change - why is this change made? It seems to me that it's only for the shallowCopy, right?
this is the same as the volume name above
Can this if statement be moved to the above if statement? `target.Number(unny.messagemessage);` This would mean that the cdpTargets doesn't have to be in the first place.
This is a bit unrelated to the rest of the PR, but I'm not really sure if this should be in a different PR.
It's a good idea to add a helper function to this in their own `UPUP`s. It's not a big deal but I would prefer it to be more explicit.
We have a test for "we have now active enabled" so we have the test ensuring we're not breaking anything.
Is this correct, or does the error apply apply apply apply?
We should add this to `TabConfig` and `TabConfig` as well to avoid potential conflicts with other changes to the `Tab` PR.
In other mutations we create `user` and `userIn DH`, we can check the user in the first place.
I think we can remove this `setUnsubscribed` call now.
I think you meant to do the same in the Sports class, not here.
I don't think we need this anymore.
I don't see a reason to have both of these and the same ones in the one place. The other one has a similar thing, so it's not important to do so many things here as you have done in this PR
Why is this "failed" instead of "failed"?
I don't think this is the right fix.
I think this should be a constant on the media type, not an media. The idea was that this doesn't have the wrong place for it (I don't think it's needed to be a hard requirement to specify a media media). It's not a hardcoded value for the value.
should this be `@view_context`?
This is now handled in `newTriggerManager()`
Is there an issue tracking this?
this is not a valid option. Why not have `self.tab_url(idx).tab_url()` return an `int`?
Is this used?
This is a bit confusing. Why do we need this?
this will cause an issue if `--rune-acc` is set to false
Should we consider making `freeze` public instead of `*` in the specs?
There should be an extension point in calling `javaslang.control` here. Also, you can also remove the `.control` and the `spec['javaslang.control']` (`control`) (or whatever other `ex()` methods you use)
Please use `db.capacity == 0`. It is used only when `db.capacity == 0` and `db.capacity == 0` which will do the same thing in the next few lines (which I think is what we should do)
I think this should be a constant in the module module
We don't really want this to be part of `System.Trace`. Could you please implement it?
Why does C-11 include everything differently from the OS? I don't see any reason to include it for both. I don't see the OS. Do you see any reason to keep it?
why change this?
Is this what you meant @juliannatetreault to ask for a second look at this point? I think it's okay to remove this as it's only needed for mime.
Why are we adding this?
Why not do the conversion when we create a new method in this case?
This is not the case. The space at the end is wrong. The space at the end is wrong.
Why do we need to call `SetDevice` if its called in the solver? Isn't it enough to call `std::Type` and `std::Type` if it's a `SetDevice`?
Is this a typo?
This is a bug, and will be fixed by a follow-up PR.
I think the changes in this file are all unrelated.
We could probably get rid of the `name` here. We could get rid of that if we're already relying on the record name of the API in the `Close` function.
I don't think we should add this. Because this will break any existing models in `WorkingDir` and it will not be available at all.
Why do we have to change this?
Nit, but you've generally been using `cmdcmd.core.core.core.path`
Why change these names? I don't think they are used
This was not needed, right?
It seems that the step step gets attached to the database when it's enabled, and that is what the user wants. This seems to be the same as the step created by the DagsterEventType.STEP_SKIPPED (which may be a different issue?)
Unused import, will remove
Can you remove this line?
The name of this function was misleading because it was the type of `DB__ROOT` in the `include/package.go` file, not the name `conda/api/package.go` file `conda/api/core.go`. This is why the name is not being used in the test file `conda/api/granteeName`. So the change here should not have been removed, as the name is the same in both the `granteeName` file.
this will need a memset to whatever the environment is, right?
driver_.driver_.schedule can be removed.
Why do we need a different requirement here?
These are not needed.
Is this line necessary? It doesn't look right.
This import should not be changed. This is the reason for the use of `errors` not being used anymore.
`unreviewed` should probably also be added to the `<VideoControlControl>` section, but not sure how that works.
Why are we changing this behavior?
these are the only parts of the code that we want to use
I think this should be `m_renderPass_dependencies.insert`
`QUache` is a bit ambiguous and will change the name. Is it really worth it to make it clear what it is about? I would think something like `Scala-helpers` would be fine to have it be `SCOL_IS_IC 36.lowerCommit` or `SCOL_IS_QU 36` or something.
Don't use parentheses around the condition of an if.<br>Use && instead of and.
Is the `ipfixCollector` option still necessary now?
I don't think we need the `sys.exit(1)` here, since it's a `break`, it's always called in `sys.exit`, not `sys.exit`.
I'm not sure if we should make this change.
This seems like a bug fix.
I'm not sure this is the right place to mention that this is a `safe`? I don't see any reason to do it in the first place.
Why does this return `strutils.bytes_to_escaped_str`?
Why this change?
I'm confused, why is the `h5` different from `h` having the view in the list if we don't have a dict?
Maybe we should add a note to remove this import of `ImageDirectoryStructureCreator` as it is not used anywhere in this file?
What about creating a `s.AWSCluster.Spec.AdditionalTags` method to save some extra memory if no `Tags` was found?
Please remove the license header
I think we're already calling initPWMClocks in initPWMClock and initPWMClocks here.
This looks like it can be factored into a common folder.
This line is too long
i'm not sure why we should keep the `oFromPeers` attribute and just call `toAntreaPeerForCRD`. Is it worth adding a new attribute to the base class?
I don't think we need this. Can we keep ascope?
Could we have a more descriptive name like `GenerateGenerateGenerateGenerateGenerate` or something? It's more consistent with the naming we have for the feature.
Is this needed, the RelaxedReclaimPurge is already called from somewhere else? If not, it may be best to move it back to the next iteration.
I'd just call this "Frontier,EIP150,EIP158, and duplication" here.
I think we don't need default param here, as default is `True`
If you add a `fetcher.fetcher()` line here, you can remove the lines above.
this is a bug fix. If you want to keep it as it was before, it's a bug fix. You can just set it to `55` in the `podman run` and then pass it to `podman run` if needed.
Shouldn't this be translated as well?
`currently_fer` might be better
computed anyone ask me from a second look at the code. I'm pretty sure that `#reportreport` is a bad idea here.
I don't understand this one, why was it removed? Is this a separate PR?
remove this line
What's the purpose for this? I don't see where the menu menu is used in this file.
Should we move this to execution.go?
Metrics/LineLength: Line is too long. [83/80]
This should probably return (ev->flags & ASIO_DISPOSABLE) != 0.
I think we can just delete this file, and use the new one.
We should probably also mention this in the docs for `StatusCodeServerErrorRequiredLockIsNotHeld`
I don't like this part, I'd suggest renaming it to `andas.py`.
Is there a reason why we need to keep this around? This will avoid the potential NPEs if CoreChecks can't change.
I think you can remove `public` entirely. It's a public method.
why is this removed?
I wonder if we should just call this method "metrics Properties schema" instead of "schema".
I would use `std::is_hsa_agent()` here.
We should rename this to `Counter.Gauge` to be consistent with the other actions.
This should be constant, it is not used anywhere else
I think we need to be careful with this, otherwise it will crash properly.
I think it's safe to make it `public`. It would be better to have it as a public method.
Could we make `self.f` a global var so it can be set in the constructor?
Please rename to `paginggroup`.
I think `--reupload` is already included by the `svg` option (it is already used for the `Re-upload all` only) so we can leave it in to only the old option.
We need more info to the name of the API, but we may want to change it to `CombineCombine`.
Please use a `Rails.mSession`.
This limit for BMOs is a limit for 100 MB, right?
Wow, good catch! I'm not sure how this change works. :( But it looks like I missed it...
Could you change it to "Tokyo". Because the space at the end instructs the IME to transform the word.`
I removed this line since it's a part of this PR, but this line seems to be a part of your commit.
I think the `TwigTest` is not necessary here.
nit: newline is missing at the end of the imports.
Should this check be FloatToStringt? I mean if FloatToStringt can't be FloatToStringt.
In this function, there is no way for us to import the Manifest interface. It is possible that we use Manifest interface directly instead. The API would be consistent.
I would use `lim` instead of `harparser`.
should we move this to `unitunit/gulp/gulp/`? I know you didn't have any related code to this, but I am not sure about the idea.
@danrot what do you think about using a `new findElements(By by)` method instead of the `By` method directly?
These lines should be removed.
I think it should be `if (opts.feeSat == null || {}) {` to avoid the `typeof(opts.feeSat) !== 'undefined' || opts.feeSat;` check
Would prefer if these were different, but it's not necessary.
We have to be consistent and use this in `core/util/misc` instead of hardcoding the length
Is there a reason for changing `io::FileReader` to `io::FileReader::HasNoFingerprint`?
I'm not sure if this import is required.
nit: remove the explicit `return`
log the info info in info level ?
I don't know what the actual purpose of the memory is here.
I'm a bit confused by this change. Are we sure we don't need a different version of the hash hash?
`if req.GetXattr() >= 0 {...}` is the right fix here to get rid of the `if req.GetXattr() >= 0 {...}`, you can do the same in both places.
Is this change intentional?
This is not correct. This function is only called from the `name` object.
This file is not in the issue
Should we call `findUpVirtual` here?
We can remove the default here.
The token doesn't really have any token either, so this is not the correct place for this. We should probably change that to make it clearer what we're doing.
Let's just remove this and use back to back again. Why not just keep the original constructor and keep the old constructor and remove `this.delegate = delegate;`?
Use a guard clause instead of wrapping the code inside a conditional expression.
Remove the empty line.
Can't do this...
I don't think you need to keep the old old data here, it's not used
do not delete the partial.ian partial.
I'd use `%(such as your application)s` instead of `%s` because `Dockerfile` is the same as `s`. I think it should be fine.
I think this will need a `export` entry as well.
Hmm. I'm not sure that this is a good idea. I don't have a good way to fix the problem and I'd like the idea of this.
Could we please add some details here for the user to be able to use this?
I'd rather remove the "right" part and just use the "right" of "right".
nit, we probably want to move this code to `compileEntityEntity`, which will make the code easier to follow in a different PR. Maybe `compileEntityEntity`? We could also add a `visitEntityEntity` method in `compileEntityEntity`.
Why use promtt?
This should be reverted.
`type` should be a `String.format(s is not supported)`
If it is the `procfh` that is the default, should we remove this?
If I'm understanding this correctly, this should be `django_headers` instead of `g.auth_header`?
Isn't there a need to have a separate variable and then call it `TLSMap`?
I don't think you need this
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
This is what was there before?
If we don't want to do that, we should also remove the `&&` part in the message below. I think that's ok as far as I see the issue is on line 166.
This looks like a breaking change? I don't know how it should be.
Is this a bug fix? Can we keep it as it was before?
This should be `tmpInt > 0`. It's not necessary to use a value that we're passing in.
let's keep the order in the test
If this is a `MPI`, then you could just do `if batch_queue_module batch_queue_module batch_queue_module batch_queue_check_enabled;`
(style) externs should be avoided in .c files
Is it worth adding a file for the license header?
This seems to be the wrong way to do `mkString(", ", ", ")");`
I would prefer to avoid using `Reason` for signing and avoid a duplication.
This is a little strange to me. What is the `!accountID` for? Why not just `!user.accountID`?
@lucidd what do you think about making this `try/except` or just `alterTransport` to make it easier to read?
@mhoemmen I think this is the correct spelling of the old "source" option.
I'm confused. Is it possible for a user to change this to a `PRIu`?
I'm curious: What happens if `--strict=4` and `--strict=4` are set?
this seems a little weird. Why is it in master?
@bparees this would be a breaking change (I'm going to assume it was already here). The reasoning here is that `get_file_test` is not just `winVersion.winVersion` and this is the only one that will be used.
This seems like a reasonable default, but I don't think you want that.
what happens if you add @indistdistdistdistdistdistdistdistdistdistdistdist? then it will be nice to have it in the same way as it is done in the view.
I would put this in a constant somewhere
Nit: remove trailing whitespaces
Is the default here to avoid the warning?
I don't think this import is needed, since we don't have any other code in this PR.
Can we also add `historyId` and `historyId` in the table?
I think you can just do `instr_is_scatter(instr_t) || gather`
The `.Once()` function calls here are no longer necessary.
This function is only used in a single function. Why not do it in `m *LBFargateManifest`?
Please add a license header here. If you want to add the `vpn` package to `MapConfig`.
It looks like you're missing a `body`.
Shouldn't this be `return` now?
I think we should keep the previous behavior and just retry through the `retry` block (I think it should work with either the `create` block).
Do we really need this?
Please keep the same constant
This should be `verify.TxnPool(&txn, spec, eval.ID(), err)`
I think we should also keep `ply>=3.4` here.
can you make the validation take advantage of the read and see if this is what it's doing?
Why are these lines changed?
I don't understand this. When an empty list is created, we are calling the API for an async request, which is not the case for syncing.
We don't want to do this, right? If the latter, the `if err != nil` should always be equal to the value.
This will need to be `Optional[NotNullWhen(true)]`.
end at 47, 4 is not aligned with if at 43, 22.
I'm not sure if this is correct. If the function is not used, it should be in the else block.
This will be a breaking change.
Why adding the extra parameter?
Just `data-capabilityFirelensFluentd`?
Why the change?
What is this change doing? I don't see it being used anywhere.
This is a bit hard to follow - maybe `PMIX_RELEASE()` could be called directly in the `fetch_if_last_fer()` or something like that, but it seems that it's called everywhere else?
Could we add a `installError` to this test?
I'm confused. If we don't need to `array_now()` we can just call the class `callAction()` instead of `array_now()`
Not sure why this is necessary?
Is `extra` the only place where `extra?` is set? If yes, then why don't we just use `nil` here instead of `Redefining`. If it's not, then we could remove the logic from `extra?` and `extra?`?
Is this change intentional?
`if (variableInMap) {...}` would be more clearer
No need for this - it's just finalized and finalized in all words.
This is a no-op, right?
Is this change intended?
Why is this line changed?
The name `TracerConstants` is confusing because it's not really a const.
why would this happen?
I think the order here is wrong? The order should be fixed.
I think this is the right place to put this file. It's probably best to just make this change in the `libbeat/` module. It's just `libbeat/`
This needs to be passed to `EnableApplication`.
I don't think this is a good idea, because we are returning an error instead of returning a string... But I don't think there's a need for this. You can just return a string here, and then use it to get the typedef in `assert` if you're going to.
This seems to be unused?
I don't think the save should change the old version.
`_u.date00': startDate, '_u.date01': endDate`
should we make `execution summary` optional? Or is it just `extend`?
This isn't a typo, right?
Why was this removed?
Just curious: what's the rationale for switching from `ncr-layout` to `18f-layout` here?
This check is not needed anymore since `unsafe` will be called on `nil`
I think we may need to use the new method in a `Map` here as well.
I don't understand the logic here: I'd say `GetSlot<T>(group)` would have to be a string that's not null in the method body. The difference is that if the value is null, then the byte would be `null` and the result will not contain a boolean.
I think it might be better to use `string&Size` instead of `string&&`. Then you don't have to do this in the test.
is there an option to just initialize theges here?
Is there a linter rule that we can put here where `healthcheck` is set?
Why do we need this?
why not `SubnetGatewayIPV4Address` ?
I think it would be better to use `find_by` here, since it wouldn't be called by the caller and wouldn't need the `find` method at all
Cool, I don't think this is the right place for this, so I'm not seeing what this is for. It's better to do it in the code, and then we can add the `from` statement in the `Cube.__init__` function in the `_init__` function.
We could have just used this in the `else`.
I'd prefer a different name than `test_reactions_function`
I think we should have an `where` instead of having a shared `role_values` attribute.
Should we make sure the CA isn't `intermediate`?
Would this make the whole block slower?
Why do we need to use this?
The `newsessionqueuer` is already being created.
We should change the return type of `GetStream` to `GetStream(filePath, access)`.
I think we can use `qutebrowser.multi` directly here and elsewhere in the PR.
I think you need to do `esc_html_t ` and use ` neve-tans` here
I don't think we should change it.
please use `get_zmm_caller_saved()` and `self.zmm_caller_saved()` for both cases
nit: remove trailing whitespace
Why not `version.contains("-ee", "") ? version : null`?
Why is this needed, when you have `*`?
this is an unrelated change?
We should rename the taskilot-task to taskilot-config.html.html.erb
why would we need a value here? how does it relate to the "input" type?
This should be the latest version
Hum, I wonder if this should be `if (strncasecmp("OFF", val, len))` or something like that
Why do we care to perform this? I don't see it in the PR.
I'd prefer to see this as a separate sentence (and a few more places that just check for the first sentence).
This looks like it's just a test that we have to say `CatchBlockLog` in the list.
I wonder if it's possible to do this in the `__init__` of `VOLTA70` but I wonder if we want to avoid that.
I don't think we should be changing this here - we should just remove all of the `type` keyword arg from this list.
is this actually needed?
Why is this here?
Should this also check for repo.IsPrivate? (if it doesn't work and it's still present)
This is a different fix for the `computeIfAbsent` feature, so I think this is what you want here.
You don't seem to be using this any more. If it's not an error it should not be removed.
Why we need a `omitempty`? Why not just always use an empty struct?
This is a very old code. Can we get rid of it?
It would be good to use `getMap`, if possible.
I'm a bit sad to introduce a new `os.path.dirname()` method to `os.path` as well. This seems like a better way to achieve this right?
Can't you make this a global config property and define it in the `getineEngines`?
Don't we need the if in both cases? Or is this a `break` for debugging?
I'd rename this NetworkID as well to match the other one in "EVM Network ID"
This is the only line needed.
This constant is not needed, `clusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclusterclustercluster
Please change the default value of DEFAULT_REVISION to DEFAULT_REVISION
this is the same code as theloginOptions.getOauthScopes() can be called with empty objects
nit: this is not needed since the `noteTextViewer` property is already in place
I think this import is unused?
This was a `__init__` error. You should fix that.
if string is empty string, should we use empty here?
Why did you remove this?
Can we call this `RetryForever`?
Nit: This assignment should happen after the return value of the previous iteration.
do we really need this key? why not just inline it in line 1064?
can this be removed?
I think it's fine to use `float16` for this. But I'm not sure if it's worth doing, but if we ever need to make a change in this PR, it might just be better to do ` MatchPriority(priority uint16)` rather than just `return b.Match.Priority`
@liggitt I was about to add a new version of `pack` and `make` to the `install`.
This looks like a typo and should be `path`.
@adamjstewart And this line is redundant.
@cramforce is it possible to use `.get()` here with `.btc(testnet)`?
This import should go up, right?
This looks good. Thx
I don't think we should add this block, it should just call `destroy` on `this->destroy`.
This is a very minor thing I noticed that you can import `torch.shape()` instead of `torch.shape()`
This error message is no longer correct, since you have to return an error that is not `nil`.
Let's not forget to update `complete` for now, but not for `complete` as it's not a new feature.
I think this can be removed
this is probably the actual fix for #1640
Maybe we should use ` PutHash` instead of `Unimplemented`?
This is wrong, but I would rather have it have a `static const` attribute. It's not a `static` but it's not a `public`. But I think this is a good change to make.
Is this still necessary?
Can't we just use `.moves` instead of `.net` ?
this will not work. `check.getState().getSimpleName()` will always return false, so you don't need this function.
I would use the same `secondary_info.renderPass` here. I think that it is more clear.
I think you can remove all this call to `clear` now.
This is the wrong place for this.
Why do we need a `-t` here?
This is an example where the `MRIType` is used. `icmpCode << 8` is an integer. `MRIType` is the correct value, so you can change that.
This is not the same as the `InitializeStreams` method, I don't think it should be removed (and this is the default implementation)
Can you use `settings.icon` instead of `ico`?
I think we can remove this too.
chunks2f is not a good name because I don't know how many bytes are even in the UI, but maybe it's better to keep it in one line?
Please add `let` to this file and the other CSS functions like this: `let label = node.getAttribute('alt');`
We should use `continue` to avoid this exception.
I think it's a bit too bad to check for a string like `template.IsNullOrEmpty`? It's the string that is passed by the config file
I think this should be called `updateLibrary` to match with the other methods in `AdminAdminController`, not `AdminAdminController`.
Do we have a constant somewhere to cover this? We don't use `.published`
Did you change this back? It looks like a bad merge error
Can you add this to the `TracerDomain` interface? This will make the code harder to read.
Just curious: why is JsonRpcError not deprecated?
This function is now unused.
What is happening here?
Isn't there a test to check the amount of function name?
Can you add a TODO to remove this?
Is it necessary to include `skew` and `skewFromParent` ?
should be mock_entry.go
This one might be a little bit confusing. I'd rather pass a reference to `RunQuery` to `RunQuery` in the name.
Can we add a type hint that this is now the default?
I think this should stay as `icon.classList`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why not just use the `hand` variable from `getPlugin`?
Should this be `User`? I know you are in here already, but I don't know if this is actually a problem or not.
The wlr_drm_monitor calls wlr_init_monitor ultimately does not support this yet, so I'm not sure why it's necessary.
This line can be removed now?
is this related to this PR?
I think this can be removed if we are not using unlink_display_sockets
Why this function is not called in `BaseModule`, so this function can be called from `BaseModule`, right?
There's an extra space missing before the `icon` here.
This won't work for the non-Deptiness of the `.set` file.
You can use `if (!projectJsonPath)` instead of using `if (!projectJsonPath)`
@kennknowles should this be `User != ""`?
I don't think we should change this, since this function is only called in one place and the other place that calls it. The function is only called from one place, and the function is called from other modules, so it should be called only if the first element is in fact used.
The method name should be `supportedModel`?
Do we need to check for `child.props.children` ?
We should be able to remove this now that we're using `--mode` everywhere.
is there some reason to have this default as true if you want?
We have the snapshot's own `ctx` that is passed to `init` instead of `init`? I'm not sure that it makes more sense to have the snapshot in `validate` and have this `debug` handle it.
Is this change intended?
Why not simply use `double positive`.
I think this is a better name for "proposal"?
I think the new key is correct. This key is also used for key `COMMAND`.
why is this a pointer? why not a pointer?
This is the only change required to ensure that anyone who knows its purpose.
This will cause the build failure on windows. I think you can just remove this
Can we also change the error message to "Can specify credentials that are disabled"? If we want to do that then we should be consistent in what we do in the error message.
this change won't work unless you use `blazer.env` directly.
We should change this name because it makes the API a bit confusing. Maybe we can name it as `ExSampler` instead of `name`? It would be a bit more future-proof if we can name it `AlwaysSampler`, as it's a name of the name of the table.
This is the main fix. We should be able to keep the `HttpResponse` in a more general location.
The `PMDException` is still unused
This seems like a leftover from previous pruner
Should we make sure the test fails if it does not fail? Otherwise the test may not have any effect.
The only way this test will work is with the `Varly.Tensor`, which is now just used in `Tensor`. This also requires the `Varly.Tensor`.
does it need to be public?
I think you can remove this and use `typing.Type` below. <msg> I think `typing.Type` should be fine for both type and type.
This is a pretty common pattern for Sorter.
This is not needed.
This should be `enumerable: boolean`, since the `Function` is now used in the `UpdateGraphWithSchema` class.
I don't think you need to do this since you're just doing a `@private`.
Can you please add a validation to the new hash?
I don't think this is right. This is the only place where we actually want to do the first condition, because the second condition is not really needed and should not have been set to `false`.
2014 should be updated as well
Is this really necessary? I thought no `tail` was being passed here, but it seems like the only place this was used is when `tail_` is `null`.
@matt-gardner, what's this change for? Does this mean it is actually a valid `admv` object?
Hash is not allowed in IE.
Why did we change this?
I would prefer to avoid the `rescue` in this case. It is not a valid option but it does not seem to make sense.
I think there is some indentation issues here.
How about using the `calledThrice` function in the `rerender()` method? It seems it is only used in one place.
If this is not a private method (and it should probably be private) this function should just return False if it is not.
This was removed from the PR.
We should also print the `basename (cmd)`.
Ditto on bad import order.
I would use a different name for this than `if`.
Why not just add the `type: Jack` to the `deep_thoughts`?
We should also support `EnvironmentFiles`, `EnvironmentFiles` and `locationName` for consistency.
I don't think this is needed any more, since the controller classes don't have a public key
why not using an admission plugin?
I think you should use the `default` helper function here as well.
I think it is better to use a new version for this. You can do `xhr.h`.
I would prefer to see this in `reset()` instead of `reset()` since it is part of the "folder" folder
`DAYmolops` is a better import than `DAY`.
I think you meant `wait()` here. In other words, the logging is redundant, as it is redundant, and the call to `ListenBrainz` is wrong.
This change is unrelated to the PR but it should be in a separate PR
Can we rename this to `sortByColumn`? Or rename `saveUser`?
this is not a test, right? is it?
This is probably a bug in `gofmt/util_test.go`?
shouldn't `QueryVisitor` always be `null`?
Why is ` cv.lengths` not null, and now we have it be an integer? It's not that expensive to do this.
Can we just make this `str = 3`. This is the only place you need to use this variable.
Style nit: This condition is not really correct. We have a default value, which is only `safe` if it is `not_a_peer`, so we should remove it.
It's not really an `unsigned OPENSSL_platform` but I think it should also check `OPENSSL_platform`. Otherwise it would be fine for the `OPENSSL_platform` and `OPENSSL_platform` to have it in.
don't we need to keep it to avoid breaking changes like this?
What does this do exactly? Does the parent have any side effects on the `Keyring` already?
Could we call this `policy` to be consistent with other namespace?
If you're using `--outfile` here, you'll probably want to remove the `source` parameter from this line.
Please update the phpdoc for this string
Is this true even after c.IsApiToken?
we should not allow a apply mode here but set it to `false` when it is not a request
This can be removed
I'm not sure if this will cause the key to change. We should not introduce new field `HTTP` as the default. I think this is the right place for this.
This should be a sentence sentence.
nit, you have to change some of the other places too, to make the change consistent, just for consistency.
I don't see `|| PrivateKey._getRandomBN();` used?
@dantleech do you know if there is anything we should do to add this here?
The sentence "then all the fields in the fields ..."
I think it would be better to have it return `""` instead of a new one.
This is a bit confusing, the previous code was very confusing. How about a "getMaximumCommonType().getGroupId().getMaximumCommonType()"?
Can you use the full import of `knative.dev/eventing/pkg/logging` instead?
I assume that the span is still used by the form, but it's not actually being used? If yes, then the span should not contain the `operation string` attribute.
I think you can remove the "127.0.0.1" part here. I would say that the default should be 0.0.
Why not `define-format`?
@c3dodo @bvaradar Any idea why we are defaulting `KBFS_ENABLE_JOURNAL` to true?
do we really need to have this on the `X` itself?
Is this true or false by default?
This file should go at the end of the line, with a period at the end.
`config.val.url.searchengines` is a function that is passed in. This function is called in the `searchengines` class and has a default implementation that can be used.
Why was this removed? I'm not sure we need it in the code. Could you remove it from `IPLocator::IPLocator()` and add a new constructor to `IPLocator::IPLocator`?
I think you should add `Use pants.links.MaterializationOrObservation`
Isn't this an issue?
Please remove the empty lines.
I think you can remove the file here, since you've removed it from here. You should not be using this package in the other templates.
same here, the `typeArguments` should be `type` instead of `typeArguments`.
Can these include be removed?
this is not the same as above, can we just remove
why not use `NewEvent` here? we should not use `StateReader` in the state.
Isn't this the same behavior as a `method = nebula::cpp2::SchemaAndHost`?
This makes me wonder why we have a diff_res parameter defined in the test. It does not make sense to have this in the first place.
I'm not sure about the use-case for the `1000` here. If we are not going to have any code that is currently in a `common/1000` directory, it should only happen in the `load()` method.
I would rather not call it either `Stop()` or `Stop()` or `off()` (in the same line).
I'm not sure this belongs here, as the configuration is not produced anymore?
Why was this moved?
inf -> parallel?
I'm wondering whether we could make this a private field in TagField.
rollbackTraffic needs to change to rollbackTraffic.
I wonder if it would be better to have a `const` for this and just use `guidVSPackageString = new Guids(guidVSPackageString);`
I think we should change this to be `h.clientPort = zkDynamicConfig.getServers().stream() + h.clientPort + 2.1`
I believe the `MessagePack` property is unused.
We don't really need this, it should be in `BaseMutation.py`
Is there a specific reason for not caching this file?
Is this actually just `Promise_class` or `andasLikeIndex`?
Can you use the `subnets` helper instead?
@marimano @danrot @jglick Shouldn't we also check that these region are set in the AWS region? I'm not sure we should change them for any reason? If not, maybe we could use cn-rorthwest-1.
why not just make this test take a `GetAttribute`
can we do this for all reasons (use `@activity`)? It's a bit of a nasty!
what if Puppet is empty?
This is not necessary. It will allow a new thread to create a list.
Line is too long. [82/80]
I would rename this to `getDisabledMetricAttributes`, just to make it a bit clearer
Why did we remove the version check here?
Why are we doing this before, when we create the `done`? Shouldn't we close it in a `close` method?
Shouldn't this be called "rclone"? Or should the config be used in all cases?
I'm not sure if we want to make this clamp. The same is for `clamp`
I think there should be a `#if` here
I would not do this. You're calling `&subsurface->parent_pending_link` here, but I don't really see a point of making a `Debug.Assert` call that was being done.
Can you remove the second sentence?
I'm a bit confused by `(:keybase1.UID, min[1, min[0]`, and I think it's better to have a key to set `tlfID` to `undefined`, but this is a bit too much for the tests I have added.
Group with last group of imports above.
Can we keep `new AspNetScopeManager()` here as well?
why not just throw `Error` directly?
I'd prefer to keep this as it was before and not to use the existing key.
`null` should be `IllegalArgumentException`
In the past we were talking about the non-testing case, but the `GamePlatform` API was already added.
I think the other UUID is `queryID` and `UUID` are valid, we can use the name `UUID`
Missing space around string interpolation detected.<br>Operator `:` should be surrounded with a single space.
why is this needed?
We could have used `accept(yak).build()` here to make sure that the test fails.
I think this is the wrong way around (I'm not sure how to do this). The current solution is to use `default: 6` instead of `7`, but I'm not entirely sure we need this for the other way around.
I don't think this is the right fix. The `value` array is expected to be the same as `[ setValues, value]`
Wouldn't it also look better to use `setIgnoreCase(set.property())` here?
why not just `initialState`?
I think this makes more sense to me. I think you can change the code to: `Teacher.joins(:video).video || None`
What's the motivation for this change?
Is there any way we can use `tests = [unused.python,asm.UnitTestDocTests.py", {})` instead?
Why do we need to remove this?
It's probably a bit more of a hack to use link here.
I wonder if it would be better to return an error that is nil?
Should be `/user` too?
I think we can skip the assertion that the deprecation is still in the deprecation specific test.
I think this is better named `make generate`
I don't think we should use `code.String()` here, as in the case of `tb.new()` we have a return value that we want to make sure it is actually a string and it has a cast to another.
The check is not needed since the variable is a `var_type`.
We should probably update the entity `W3CBridge`.
why is this change needed?
I think we should remove the "pmix_pid, "%s/pmix-%d", just the last 2 lines.
We should make sure we don't accidentally break these.
I would add `use` statement.
I think the convention is to use `@VisibleForTesting` here, but this one is a bit of a change in the past, can you check?
I think we could move it to `pkg/api/RefreshAndGet/Get`. Then we can call it `pkg/api/RefreshAndGet`
this is for backwards-compatibility.
Shouldn't this be inside the `GetAllPids()` if we're not returning?
Do we need to change the partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition partition
Block has too many lines. [28/25]
Why did the test pass here?
What's the benefit of having the notebook? From the name it is a bit confusing...
Should this be an `AtomicInteger` or some other `db` extension?
This is wrong, i'll open a PR to fix it as well. (I think we'll have a PR to fix this, and probably don't want the change to make the change in the file.)
do you need to update the k8s environment variables?
This seems to be a regression in `gobblin.8` and `gobblin.8.3`
I'm not sure what this is doing, it might not be necessary to store it in a local variable
This is not needed.
I think we can do a null check in `_spectra = null;` to avoid code duplication.
I would like to have the option to always be empty. It is possible that we don't get here and just call `WriteDeadline` once at each call site.
This isn't used by reflection, right?
I think you can remove this now
I assume this was accidentally committed?
If you are using the ` isinstance(ip6,Net6)` function, then you don't need to use `ip6.getns`.
I think the function name should be renamed to something like `returnPartly` instead of `Result`
is it worth adding a `tmp` field for all output types? Or is it not enough?
why did you change to430?
This is the right place for this line, we can remove Write(write, nil) if it's never called.
This should be split across multiple lines.
Why is this in the `let` block on the `account` model? Seems like the `step` factory is only needed for the `account` view, so I think we need an additional check here.
Isn't this the same as `->`? If so, maybe use `||` instead of `>`
Do we really care about this? I would have thought that was `<=` and the default behavior would be the same.
This will not work if $params is empty
I think you can drop the `binary` argument from this function. The default argument is `binary` in `compressed`.
controller is a function?
I'd prefer a static method to be used to make these static methods static.
This should be `f.metadata['metadata']` and not `f.metadata['websocket']`.
Do we need to make it `separator` or is it a string?
How about we make the alias controller a class member? Then you can directly use `method` directly. Also maybe use ` alias('model').reverse()`?
GetMetricPointsAccessor is used in GetMetricPointsAccessor. Why do we need this method?
Should we also include `dependent` types as well?
Nit: `net/http` is not a good module name and it's more obvious that this is used for both `net/http` and `jit.glass`, `jit.https`, `jit.https.net`. IMO it should be `https.RERooting` and `nethttp`
@tvalentyn - This is the only place where the checkpoint was started with a non-checkpoint and the last line is not the same as the other changes. Can you please change the behaviour of the code?
Is `v2` not needed?
This spec doesn't need to be a separate spec for the new user, it just means we're missing a spec for the new user
This is fine. But I think we need to keep the pattern of the code here
This file should be removed.
I think we should rename this. Also please rename it to `recover_process_config_spec.rb`
`runtime_type` is now an optional parameter, this way you can just call it once at the top of the method, and it will be cleaner.
This is what `selection` means. We don't want to have a different selection type for it.
Remove this line.
Let's remove `privacyMode` from the config file as well.
use static imports
@slavkap do you know why the resulting resulting `ICommands` class has been renamed, or is this just me to remove it?
I'm not a fan of this. What do you think about using our own `make codegen`?
In the past, you can use `In-predicate` to set this property on the config.
I don't think we need this, as we already have `id` and `index`
Why are you using `std::uint64_t`?
I don't think we can actually remove this.
This should not appear in `gulp test --test --Simple`
I think it would be cleaner to use a struct here, rather than an overloaded one... I'd rather have the latter and use the one in the struct which makes the latter more readable
`stdbool.h` is a bit ambiguous, it is already included in the header (the others are the same)
Why do you need a searchScope in the config file?
Why was this changed?
This is just an example of how to do `a := strings.Split(string(s), ":", 2)` would be nice
does this need to be public ?
I'm not a fan of this flag. @tgamblin Do you have an opinion on this?
Should be `import org.shredzone.flattr4j.model.User;`
It might be better to use a `.String()` instead of `.Bool()` since we don't have a single `.Bool()` that can be used.
This is not needed anymore
What about `private final`?
why not just use `g_value_dup_object` and `g_value_dup_object` directly?
Can you make this `in.Status.ChaosStatus.Experiment.Phase` please?
This looks like something that should be kept in a separate commit.
This is a test, I'm not sure if it is worth it. It's just a random number of resources that is not necessary.
Should we make this a constant? I.e. if we ever add a file to the `Config::get_config_source` then we would not need it at all.
What if arg is nil? Shouldn't this be an error?
I don't think we need this file. There is no `LoadGroupMembersPipeline` field.
I think the name of the variable is a bit misleading. I think this variable name is better.
This is a change of behavior that is not correct, because we are adding the `privateTransactionHandler` to the interface, but it's not clear to me what the method is expecting to do.
This will be set on the next line when the previous line is removed.
This seems to be unused and can be removed.
I would have named it `[shared_utils]` instead, but I don't know how to do it if anybody would like to use a version number.
nit: `toPackages` instead of `toPackages`
I would suggest to extract this method into a constant.
This is a no-op, right? It seems to me this is not thread-safe, right?
This method should also be public.
I think this is the wrong fix. The code is still showing TRUE when it is actually created.
As this is a part of the task I don't see why we need to expose it here. I would just remove the if condition.
I'm not sure if this is good. If this is the correct location for this field, we should also have to add it to ConfigFor(interface{}) in the config struct, as it will not require the plugin to be managed by the registry.
Let's move this to the `JSON` module.
This doesn't look right to me. It only affects IMvxMainThreadAsyncDispatcher. It is the same type of IMvxMainThreadAsyncDispatcher. It is used to get IMvxMainThreadAsyncDispatcher.
Why is this being changed?
I believe this was causing the CI failure - we want this to be reported to the next commit, but I'm not sure it is the right thing to do here
Why did the original name change?
Just to confirm. Is this the name of the error correct? I thought the error was a bit vague
You should probably add an `_` to the `site#locale` above.
I think we should add this to `saleor/compile/resources.sh.template`
This assertion is no longer needed because the `is` function can now be removed after it is removed from the function call.
Can we put it into utils?
Let's make sure this is not part of `KIE_CONFIG.getRefreshInterval()`?
I'd prefer if you put this line back in `ixin.php`.
what is the weight_?
I think you should use the `findTagged` method in `config_pass`.
We don't need the `master` here, the default should be `current_user_tmp` (the `current_user` is used by the `configprint user`.)
I don't think we need to import upload here, since it is not only used in the tests
The `wx.Dialog` is unused, right?
Should be const.
I believe the `else if` should be redundant here
I think this needs `AuthFree`, `AuthFree` should be `public static final`
this is not needed if we already have the output on the inputWriter.Close
This class contains methods that were deprecated and deprecated. I'd probably be happier if you remove the corresponding deprecated class and add a private class.
Line is too long. [87/80]
This should be `ovs` not `numpy`, right?
$this->getRequest()->get('category') may return null in some cases. So this is a bad idea.
Should this be nullable for `IEnumerable<T>`?
I think it would be better if we didn't have to do this in the interface.
This needs to be added to the `ClientImpl                            `. It's not being used at all in the file.
It is not necessary to make the `IValueFormatter` member variable private.
Why change it to axis? I see it's optional.
Can we move this so we have the same naming pattern everywhere?
why remove the update here?
I would move this to a new method `RootSpan`, since it is already called for `google_config.go`.
Why do we need it? I think I'd be fine to do it for now.
This seems to be a regression. Is this intended?
This looks like it's not a 250 anymore
should we throw an exception here? I mean, should we throw an exception here?
I think this is the only place where we need to do this. It should be nil, and we can check that s is nil.
I'm a little concerned that the Ember is not a thing to do, and this will break our tests for the next release.
This is incorrect, because you don't have an empty map in the loop
The formatting of this looks weird, can you update it?
Can you remove the spaces after the opening paren please?
I'm not sure why we have `freeBytes` here. Should we free the bytes before the free bytes?
There's an interesting question about the lock being passed to the `if` here... why not make the mutex an `if`?
This function doesn't do anything, and should probably be removed
I would suggest `configureCluster(Test)` to be consistent with all the other tests
Was this just a mistake?
Same here, we should remove those `type`s here and let `type`s do the trick.
Why do we need the h2o__tokens + (i) in h2o_token_t?
I think it's nicer not to do `no_docstring_rgx.pattern and re.match()` here.
this change is not required
Is there a reason we can't just use `describe` here?
Should the checkpoint path run at least be at the end of the checkpointPath level?
Why not `private`?
Minor NIT: `+` => `+` is fine. No need to change it.
Can we set a DateTime instead? That way it is easier to understand when the DateTime is set.
This `if (! footerText )` seems not necessary, but the error handling is now handled by `Row` in `ParseExceptionText`.
why the change here? I think the original code was fine.
could you explain this change?
Please put this in the config config file, and add the check to it in `validate/constants`
This needs to default to an empty string, otherwise the user may not have the selected layout. You should use that to make sure you don't accidentally enter `--transpose` without changing the default value, but it's not obvious to the user.
"drive-use-created-date" -> "drive-use-created-date"
hmm, maybe this should also be called self.tf_alpha?
Not sure about having a "MasterIndex" property as a dependency in a class.
can we just make this a constant and not change it?
Technically, I believe the sorting here is not necessary because `&` is already an object, so it is always true. I'm not sure if it is a real fix here, but it would be nice to have the sort by `:` rather than a list.
Why do we count at all if it's not set?
I think you should do `if defined?(Mongo::QueryCache)` because `QueryCache.cache_table` only accepts the cache if defined.
should we make this a `Concurrent_video` or something? Or is there a reason to have all of these live somewhere else?
This seems like a bug fix.
Is this correct for all platforms?
shouldn't that check `return` to prevent any potential crash?
I don't see this used any more.
Would you mind adding a docblock here?
I think this was accidentally committed.
We can add an example here.
Do we have an example of a test for approval?
I'm not sure this is really required, but it seems to work on info level, because `serialized` is not a public API, it is possible to be called on `LOG.info` at this point.
Can we use a more generic name?
`math/rand` is now unused
I think we don't use `Environment` anymore, it might be good to remove this `use` statement.
Should this be `pendingRequest.configuration.remoteHost = pendingConfiguration.remoteHost;`?
Why is this line removed?
This seems to be a change in behavior that we need to fix the issue.
nit: this should be an `else`
why are we calling this 'openv'?
This message should be more specific, something like "A remark" and the message should be different, or something. What do you think?
I'd prefer not to include `postageTopUpHandler` here because it will be a noop if it's not a post-merge.
This is not a internal function.
This was not needed, right?
why is it ok to remove the long line?
I'd be tempted to use RamUsageTester instead of RamUsageTester for consistency
I think we want to add this to `main` to make it more obvious that there's a `common.go` that is used for the service.
These are not in use
We don't want `null: false` in our code so we only need to set the default if a default is `false`.
Indent `when` as deep as `case`.<br>Line is too long. [81/80]
Please don't do this. Just use the common class in this class.
Is this the right fix? I don't see a null check on CloseableIterable.transform
This needs to be removed.
Should this have a default value that was passed in from `build_token`?
Why not directly use `clean up` directly instead of using the `Workflow` variable?
This is not needed since we have `REDIS_PORT` already.
Please add a todo to ensure this should be a Dataverse type.
can this be a one liner? you might want to do something if you need a test with your name as a whole
Why not just make it final, and use `unusedunused` ?
`local.Duration` is not used.
The build was failing because of the build was not yet initialized. This means it is effectively effectively `// +build !cgo`.
Just a note: this should probably not be an error. If we are going to change it, we should raise an error here, otherwise there will be a bunch of error codes in the future.
`sfun` is a list, and the default value should be `False`.
This is the only change that needs updating as well.
I don't see any new code that is used anywhere
Is this supposed to be `<binary>`?
This package should stay stay
Do we need to add the `project_name` column as well?
This is a test, so it's not necessary to put the node name in the view
We could add the ExternalToolHandler class to the External, it's already in the External, so it is not required and can happen in this case.
Do we need both `LocalPrefs` and `LocalPrefs`? Is that really needed?
This will need to be split in multiple lines for testing
This is not the right place to put this. The new test should be in the "HIP_PLATFORM clang".
object is a string, why not use `list`?
This is not used anywhere, right?
This should not be part of the pull-req... but I think it's not a big deal either way.
I am wondering if the `PipedSpec.PipedSpec` is the best option for this check, and if the check is done for the other `PipedSpec` check it is actually `e.deploy.Input.HelmChart`?
This looks like it is an API break.
Maybe `remark` instead of `parent`?
This is an example of how we handle a `Policy` object. Can we have a test for that ?
I think it's better to keep the parentheses around. It makes it more readable.
I would rename the method `catalogName` to `createMetadataTableInstance`.
I think this should be an early return, not an `Iterable[].VersionAsString()`
Is it possible for `SSL_peek` to be expanded to all users?
Please remove the extra spaces here.
I'd rather have a function called `TransactionTransactions` here to indicate the length of the table was changed.
I would move this to the bottom of the file.
I don't think you need this line. It can just be `null` since 15 seconds is enough.
Wouldn't it be better to make `RejectRequest` a `DecodingException`?
Is this a change in behavior? I don't think we want to support supportsDts. It looks like this is a change that is just a small change.
I think that the new code is a bit confusing. I would just return `dstCtx == src` and then `dstCtx == srcCtx` at the end of the function that does nothing.
This looks wrong to me. We don't have an array anymore
I don't think this is the right place for debug_output, since it is debug output.
`listener = config.registry.statsd.timer(on_resource_changed, ResourceChanged, ... )`
I am not sure why you need this change? The `@team_page?` is for `page?` and `@team_page.present?` below are both the same as `present?`
I would suggest adding `getDecryptingCipher(encryptionKey, iv)` to the Next check.
`__hypervisor` could be a method on the baseclass, so there is no need for this extra method to be a class instance.
I think you forgot to remove this setter and setuptools.setupuptools
I think `MetadataManager` is not used anywhere, right?
inconsistent naming, this one is pretty specific, and it is a bit confusing for people looking at it
This `Unwrap` call is not needed anymore since it is now being called by the `ByteSize` method above.
why is this change needed? It doesn't seem related.
no need to change the content here.
Why does the convention in general use `Constants` here?
I'd use `assert True` here, just to make it clear what the actual content actually is and what the homepage is for.
We should probably just make the call to `emitContainerEvent()` in the context of `if err == nil`
Just for readability, would it be better to put this in `*orequires.h`?
This can stay as `jobjobCallback` and `JOB_ID` is the default for the job id.
I think you can get rid of this line
Why do we want to make this property private?
This check should be done in sync with `fullSynchronization` and `fullSynchronization` sync.
Nit: Add a `var` to this condition?
Why do we need a separate container controller for both a container and a container container? Shouldn't this be a separate one (and the others above).
We usually do not use wildcard imports. Just use them.
I would have used java.nio.security.GetP_DIR, and java.nio.security.GetP_DIR, so we can get a test of java.nio
I think you want a space before the `%`
This is a no-op change, no?
I think `unless excluded_portallink` is enough.
@gmail.com is now an internal function, so this is no longer necessary. It should be removed.
would be better to do `path = full(key, props.props[key])` to make it easier to understand what is the expected way to do this.
Please use a data instead of a symbol
MDC is not needed, we import `org.apache.lucene.index.Terms`
This is a public method
Hey @bvaradar : can you please take a look at the changes in here?
This should be imported before `createMetadataTableInstance` since it's a static import. We don't use it in other places in this PR.
`__eq__` shouldn't be required here, since we're using it in both places.
I think this can be simplified using `delegate_for_github?`
Please revert unnecessary changes in this file.
This is a bug, we need to check the `bundle` argument.
Why not just call `this.circularBuffer.Count` directly?
I'd prefer a different name for this, e.g: `g.NumCommittedSectors > 0` `g.NumCommittedSectors.vm_imperative` `g.NumCommittedSectors.vm_imperative_to_entityentity`, `g.NumCommittedSectors.vm_imperative_to_entity`
Use the new location `ReflectionFunction::getReturnType` instead.
I think `fileModified` is better. Maybe `fileModifiedModified` ?
I'm not sure if this is the right place for this, it should be `.setVisibility(View.GONE)` but it doesn't work
@nmittler - Should we deprecate `AuthorizationAuthorizationException`?
This should be a newline
I think this might be too short for a better one. The other one below is to have a `vm: ...` and `rvm:` in the future.
I think `l == len(pay)` is redundant here, since `len` can be `nil` by default.
Why do we need to use `receiveIsAdBlockerActive` here?
this is a no-op, right? Why is this no longer relevant?
Shouldn't this be `@SuppressWarnings("unused")`?
This is going to be a bit weird. Can't we just pass `Long BASEFEE` as an argument to `Map` and `Map`?
Can you please also move the `const` below the imports? Thanks!
Does this need to be public?
I don't like this. It's a bit hard to understand. It seems like this is actually not a scalar but in-memory case when the check is just for examples of the logic of the logic that should be changed to just check for the `||`. What happens when the device can be null?
There's a slight performance hit in this file. I'm pretty sure this file isn't used anywhere.
Why not `from .data import SA(cls, dataset)`?
Is the `Uri` underneath?
This is not the only place where we need to do this. It looks like it would be better to keep this debug message. This way we could also make sure that `c->resp.data` is the default, and we won't see that it's a debug message.
I am confused. I don't think this is needed for the app to be the copilot directory. The reason we don't use it when running the app.
I think we can get rid of these, we'll just get a `:` at the end of the line.
This line was not needed. `SabreEvent` is already being used in line 39.
This is the main change. It is not clear to me what `Stop()` returns. The function signature of Stop returns an error, so we could simply call `go Stop() { get... }` or something similar, since it is no longer needed.
I don't think this belongs to `deleteAccountID`... if we are going to make sure the API doesn't parse it, we'll always use the `accountID` in the `createFetchStore`, which we should never know what is the expected behavior for.
Why are these tests not required by the new tests?
Why is this necessary? I think it is a little hard to follow. Maybe a little further and I could be wrong.
Is the interface used anywhere?
I wonder if this should be `User.where(client_slug: client).where('?)', observations.count >= 0`
I'm not sure if we should be doing this in the test.
I'm not sure about this change. The only bundle of the `cdn` bundle is the name of the file that is used in this file.
This is a public static method, so it shouldn't be removed.
This is a little odd... do we still need the R group numbers for the `getAtomicNum()` function?
I think this needs to be kept in sync with the `try` block above.
@mmaximus do you think it makes sense to have a `FeePerGas` here as well?
I don't think you want the `dvc repro` bit in this PR, but I'd keep this here for now. It should work, because it makes it more obvious that the `dvc repro` is in the `pkg/util` package.
I don't think this is needed.
Could this be made visible to the user? It's probably not used anywhere else in this PR, but it might be worth moving this out into the `SpecCSIMountOptions` package if we are not using `mount_options` anywhere.
I don't know if there is a reason this was removed.
`self.scripts[:]:` and `self.load()` both are enabled by default, so you should `assert(self.scripts[:]:` instead.
This can be removed because it is public.
This file shouldn't be included in this PR.
Please use a logger as we use it in the standard library.
Nit: I would prefer to keep the old constructor around and just use `Unhashable`.
Is it possible to get the test with the `@2017` annotation?
I believe the original idea was that we can remove the `const` here.
I think this is not the correct fix for this bug.
You need to check that the buffer is set in `lib/mobile-mobile.md` - that is why the buffer is not running. This means that this buffer is not set at all. The first step of this function is used to update the buffer, but not in `lib/mobile-mobile.md` - which is now redundant.
Shouldn't this be `hierarchical_name`?
Is it possible to avoid the `isRay()` ? We can add it to the `kubernetes.io/docs` namespace.
This was a bug before.
I'm not sure why the original `null` is required here.
This is not a valid update. The `create` function is used in the `error` function.
The `glog.Error` here will throw an exception.
I think we need to raise the exception if the error is not defined. We need to check the error in the response response before we start a new error.
You don't need to copy here.
Remove this class because it's only used in the base class
Why is this change required?
This works for now, but I think it's worth adding a script to this script so the `mvn install` can be a little bit simpler.
I would move it down below `iotex` as well. The protocol ID is only used by the protocol ID, so that we don't need to be able to remove it if needed.
Why not set the window of `Status.FAILED` here?
why is this check necessary now?
For now just do `json:"xattrName"` as it is the name of the index, and not the name. It's a little confusing, but it seems like it's a special case.
I think it'd be better to move the test to a new test function (and test_assert.h) that calls the test method in order to get a different test function. This is the cause of the problem that the test is not passing in the original implementation and it is not possible to test both at least the same time.
We should use use plural plural names for these groups
Why is this line not required?
I think you could just add `skip_after_action` to `send_deprecate_if_xhr` and `send_http_state` to skip if you think they're a wrong place
What's the point of this change? I think it should be a `aliasalias` instead of `aliasalias`
Shouldn't it be `clientconfig` instead of `clientconfig`? I think we can just call it `clientconfig`
I don't understand why it is different. Is `admins have a non-admins` different from the one in `application.go` ?
Can you please update the docblock for this new parameter to be `(null === $acceptedContentTypes)`.
Isn't the `debug` key still in the destination? I guess it was added in the original PR
What happens if the user didn't specify `stEWASMTests`? Is this the right way to do it? Is it the case that the user didn't specify it?
Can you move this to `src/utils/object.js`?
I don't think this is needed
feval is a public API, so you should use `[feval]` and `[feval]`
Why was this made private?
Why was this changed?
I think this should be a `error` instead of a `*`.
I'm not sure that this is a good idea. It seems to me we can just pass the `string.size()` to `func()` if we're not going to do it?
Why the change to 0? It doesn't seem to make sense to check for status code.
You could make this a global var and use it here to determine if it's a global var or a string. That way, if the user doesn't have to provide a var, you can add a `_user.subscription` property and a `_user.subscription` param.
If it is an easy match, please add it to the `if` and add a space before the `if`
Please revert unrelated changes.
Remove empty line.
Can you use `assert="result"` here, rather than `assert="result"` in the test, rather than asserting it in the file?
Why are we not setting the default now?
Can you revert this file?
I would make a new `go-selinux` import. It would have been easier to just use `selinux` when we have multiple models.
I'm not sure if it is a good idea to have this in the database as well.
Should the enable.quartz be false?
This is a very minor nitpicky but I wonder if this is worth noting that a user could just use the block of a `...` and then use a `...` to disable errors.
is this used?
If we're already doing the `d != null`, maybe we should just return `d.key == null` if the filter is already present?
what happens if the default is false? I think this would allow us to define the global setting. I'm not sure if this is the right thing to do but it might be worth checking if the port is nil or if we don't want it to happen. @mstruve can you double check?
Can we make this return `Iterable` ?
can you remove `strtosize` altogether?
The `GetTipSetAndState` is a function that is only used once in `Component`
Is it safe to remove this?
why is the name of the SQ config now required, i.e. in the config file, i.e. no config for each of these configs?
I don't think we should error here.
Maybe we should not introduce a new option here, as it is not used anywhere, and we will have to add it to `Object.prototype.scores.scores.scores.supported.to.root.root.root.to.root.root.to.root.to.root.to.root.to.root.to.root.to.root.to.root.to.root.to.root.tototo.root.to.root.to.root.to.rootroot.to_root.validate_root_async.to_sce.
Do we still need this change? I don't see it being used anywhere
I think this needs to be a default case?
Can we use `event.Content` instead of `v` for consistency?
Maybe we should use a more meaningful name for this. BibEdit is more descriptive.
Why are you changing this?
The test is not clear. I'd expect a test to fail because it is an integer and not a integer.
`{@CheckForNull},` would be better
I think it's better to remove the private constructor altogether now.
I think you meant to change the type here to `const int int`
@jjolivier23 I'm not sure that this will break the tests that are running the 32-bit environments. Is this something you have in mind?
Why not using a method like this?
Could you change `azure.abc.net.py` to `azure.abc.py` and `azure.abc.net.to.int`? `azure.abc.path.py` can be `abc ` ` and `pypypy.py` and `lib/lib.py` to `lib/key`?
Why is the `recursive_mutex` needed here?
If the endpoint exists then `issuerName` and `Solvers` will be defined in the same place?
Nice, but this import is out of date. Please let me know if you want me to merge
why are you removing the `source","DVN`?
Maybe this should be `s.rest.Repositories.CompareCommits` to match the other method's `CompareCommits`
I'd rather not use a `IsInUpdate` function to check if the annotation is present.
Please add a space before the key name to make it clear that the field is not inlined
I'm not sure about this change.
I think the URL could be more descriptive, maybe `endpoint.tus_url`, and `require.tslf(t)` should be `endpoint.tus_url`, then the URL wouldn't be needed.
Please add a TODO about it :)
This is the fix to the one above it. The previous assertion was wrong. The previous one was the new one that was wrong and the old one wasn't wrong. The new one had a new one, but it was a simple fix which was incorrect. The original one was wrong in that the previous replacement was more accurate.
`++` is an instance variable so it should be a list.
This is the main place where `AppendHistoryNodes` is called.
Should we make `SPIFFEID` a global parameter for the `SVIDStore`?
`vpnServer` should be set at the end.
I think this will break all the old SDKs, but I think we should keep a separate separate SDKs for backwards compatibility (and the corresponding SDKs that don't have to be changed)
This looks like a typo
I'm not sure this is the correct way to go - we can't assume it's a subtleties, because I don't know how to deal with that
Why do we want to disable it in dev?
I would prefer to see all these changes in the PR
Why is this interface being added here?
Is there a reason for not using `lodash` here instead of `lodash` everywhere? It seems to me like `lodash` should only be used for a single file.
Why are you adding this line?
I would prefer a check in the `if (noteId == null) {... }` check. Then if we ever call `isinstance` it would also make the check below `if (noteId == null)` it would be clearer than the check above.
why is this not `Rpc-Header.`?
This should be go with the other standard library imports.
I don't think we should set `mset.config.MaxConsumers > 0` here. It's a little bit confusing, and is also wrong in the `MaxConsumers` case.
Why do you return cls instead of cls?
You need to check for `if` here.
I think this should be a warning?
There should be another `messageTimeout` value in the message.
is there any concern here that this will break if it is not present?
We can remove this variable now that we are using ` values.handler` directly in our API.
I'm confused by this change. Are we sure that local temporary processes are always available?
don't use the `False`
closed is not supported for other channel filters, but is it intentional that they're close?
Is the idea that enium and knew are the same?
Why the changes in this file?
This needs to be indented by the definition of CartDecorator for consistency.
Can we get rid of the variable declarations?
This was the only place the test was testing this. If I run the tests locally with the `ws` running.
I think the one in line 989 should be removed as well?
It looks like we're only passing the `Converter` argument here, not the one you're changing?
I am not sure if the other "max_count" is the right thing, but if you have to do it this is the correct count, and it's not the best of the previous line
Remove extra newline
I'd prefer to have `A-Za-z_][A-Za-z_.0-9]*)*\\` as the default, and then just use the new constant.
I think we can keep the same here for both, and the `_visible` fields to be `RetryLimitExceeded`
Should this be a different pull request? I'd prefer if we moved the `application/json` there instead, to make this a separate `application/json` module.
This test is not really necessary. `Task.TimeoutAfter()` is a `TimeSpan`.
Why do we need to check for the exact same thing here?
Why are these strings changed?
why is this `load_time`?
Why can't this be music?
This should be `options.session = 0` and then `options.session.blank` right away, right?
I think it would be more idiomatic to check `Time.HasValue && EndTime.HasValue`
Since you're in here, do you need to set the `laAdvance` as a `_` in the `.horizontal` function?
these should be `boltdir_type`
I'd rather we have a `ruby-` prefix for all of these.
why are prec and 0.0 ?
why do we need this sleep now?
Can we move these swap files to a common package, please?
Why not make the condition in line 233 to check that the return value is not equal before doing the special handling ? I think it should be possible to make the code more explicit.
Why not use `contains $_` directly?
I would suggest to put the original `_get_value` on the top of the file and using `UIProperty.get_value`.
As far as I know, it's not a single-character string, but this is a string.
remove empty line
Why not make this a constant?
The `types.Basic` is already in the `highType` above, so it doesn't need that type here.
can you make this package-private and move it to `src/server/pfs/`?
why are you using a copy? shouldn't the user be able to copy this on?
I don't understand this one
`getComparator` is only used in this context, so I would rename it to `getComparator()`.
This is going to break backwards compatibility for users who are using the old `.properties()`. Is this a problem in order to avoid a potential leak?
nit: spacing after the assign
I don't see this used anywhere
This is a different type than the other commands, not just the default one.
Just to confirm, do you need to include it in the ` Set` block? I think the file `include` should be included?
The equals() logic should be moved into the equals() method, so that it can be used once in the first place.
Please check that `aria-valuenow` has noImplicit value.
Let's add the docblock here too, it is a bit too much.
This Service and `ServiceId` are both needed.
I think the indentation is wrong here.
I'm not sure about this. If we do have `methods = block.returns(...)` then we don't have to worry about the performance impact. But I don't think this is worth it. I think that we need to do this. If we do, we should add `[returns(...)]` to the `ModuleModule` and `ModuleModule` to the `ModuleModule` and `ModuleModule` that we're using.
do we care about 3.0 in Spack?
I think we need this on the next line
Why not have the schema in the name?
I think this should be `open-file-cost-file-cost`. We can use the name of the properties.
How come you're not using the new `AC_DEFINE` variable here?
I think this check can be removed now since it's in the constructor.
`data["server_conn"]["source_address"]` ?
Can we use a const.exit() here instead of ex.start()?
I don't see this defined.
Please move this to `StandardCharsets.ErrCodeBucketNotFound` so it can be changed after the change.
can we test the win/hosts/hosts/HSLx/yoda here too?
This looks like an optimization to me. It's not just a fix.
not sure if we should revert this one.
Do you think we can remove the `ConcurrentNonces` here?
why is this needed?
Should we use `Error` here too?
Don't use a full url from the `db` environment.
Do you think it's worth noting this in the first place.
I think this is fine. But it is better to use a `ConfigurationKeys.EnsureNullOrEmpty` instead of using the `ServiceNameMappings`
You could use `from builtins import unicode` here.
Why is this needed?
In the future this should be in `_test`
Why is this a switch?
Why not keep the System.Net.StringUtils.isBlank()?
You should use a different version of this function.
why do we need `Name` at all?
If `body` is `POST`, what is the difference? Can you make it a property?
I'm not a huge fan of "loadClassCache()" in a test suite. Can we not get rid of that method and just have the call to the method?
I think the key of the key is clearer, but it is not really clear to me that this key is none of those, so we could also just say `t Keys#COMMAND`
Please replace "import org.junit.Test" with "import org.junit.Test"
I don't think this is necessary since `scanner_index_id` can be any type of `resource_id`
I think we should call the other methods `beforeClickOn`. I'd rather just call the existing one `submit()` or `beforeClickOn` to make the change consistent with the rest of the code.
Could you use `<%_name?>` here, I think it'll help future readers when people need to use `service_result` as the most common case for those non-fatal conditions.
You can use `private static ImmutableList<String>>` as it's an immutable type (e.g. `List<String>>`), and `public ImmutableList<String>>`.
this is not needed because it will be a smi1
Does this need to be moved to the `modules/application.go` file?
This could be simplified with `default: false` since it will be never null.
Can we wait for that here too?
Line is too long. [82/80]<br>Use the new Ruby 1.9 hash syntax.
I think you can just change Expression(arg) to Expression(arg) directly
I would prefer this name as `preinit`, but I think it should be `preload()` or `preload()` since it's an instance of `heapSize`.
Consider using an enum for the variable name: `g_autofree`
I'm not sure why we need to remove these.
why did you change this?
@rhymes this one is actually wrong (I think), but the `rm` here is a bit confusing. I'm not sure if we need to do this in this PR, but I think if you want the `./pants help`, then it would have been easier to find a way to handle this.
Returns a parameter set to MSM
We should move this after the `try` block
Can we keep the old constructor around? I think it is a bit confusing to have a property to the existing one.
The property should only be accessed from the RawWrite code, not from the RawWrite code.
I'd prefer to set the cache size in the first place.
The same thing here. If you want to use dagster.core.definitions.pipeline_definition_sensor, I would prefer to move it to a separate file (as in `pipeline_definition_sensor_url`), since the same is used in the `acme.py` module.
Is this really needed? Can we just make it an enum ?
I'm not sure what the best way to fix this is, is it to just add a `@Deprecated` to this list?
I think you forgot the last parameter.
Can you use `--network-host-project-id` instead? It's used in the project.
Is this change necessary?
`public virtual virtual` should go in the virtual class
Do we still need this function? Can't we just always return the error?
This will always fail on windows, right? Is this a problem or a problem?
I'm not sure if this is necessary, but is it possible to return error when the resource is being created in the code?
Please update the changelog.
This is probably a good idea, but it seems like we can just use `fstatat(..), ...` and then just do ` ...`
This is a test case, right?
Why is this necessary?
`final` for consistency?
this is not related to this PR
If we're going to be reactive this function, why not return the error? We can also make the return type match to make the function match more specific.
I think it would be better if you put a description in the `title` description, e.g. `workshop-convertable`
This is not a valid test case. It should be removed.
This is wrong: `if (string.IsNullOrWhiteSpace(tracerHomeDirectory))`
This is a good candidate for `dvc.path_`
seconds is probably not a valid option. so no need to specify it here.
Array => escaping
Is there a reason you didn't add `MUST` to the constructor? We don't need to do this for other types, and we don't need to use the other way around, so I think it's fine to do that
I think we should check `telemetryConfig.Enable` when `telemetryConfig.Enable` is not set.
Not sure how I feel about this. I think `if` would make the logic more readable. I think `if self.headers` is more readable than `multipart/text` and it wouldn't affect the boundary of the header if the boundary doesn't exist.
Is this the only place where we require it?
@tlauda I think this should be `IBL_UNLINKED`
Should be `opt_verify` for clarity. Did you mean `client/verify`?
why is this here?
The `auth#oauth_callback` should be removed.
Is this change necessary ?
Why is this removed?
Should we use the same constants as in the other places where we name this and how they both represent?
@adamjstewart Is there a reason why these are being moved? If I'm reading this right, I wouldn't expect them to be included in the PR.
We should include TransportPubSub as well here.
This should probably be a separate PR
This is a bug that will cause the manifest to be removed.
@danrot @jridgewell I've added a new constant for this.
I don't think we want to have a way to override this variable. I believe it's a good idea to do the `access` call on the `userInjectedExpandableRowHeaderColDef` in a variable that we can use. We can add the `access` property to `userInjectedExpandableRowHeader` and then use `get` to check the value.
I'm curious about the situation where the directory is cached by the cached info, but not cached info?
We should consider using `ignore-label`. It is not a prohibitedAttrs, as it may be a prohibitedAttrs, and we don't need to do any prohibitedAttrs.
Why do we need to do this for us ?
Is there a reason why this is not `SparkTable.class`?
These 2 lines of code are a method, they were never used and it was never used.
Should this be encrypted?
I think that the `ClassHeaderFunctions` is already in here, since it is used in `ClassHeaderFunctions`, and the `ClassHeaderFunctions` is not being used in the `ClassClass`.
`Tags` is not used anymore, right?
I think the default `parers_type` should also live in `get_extents`. It's important that the user can get the range type, so we can get the range type from the `get_extents` method.
This import can be removed now.
Should be IF EXISTS?
I'm wondering what's happening in the `Shuffle` function?
this is an unrelated change ?
I don't think this will work for every request. The `response` property is already set on the response object, so this would not be needed.
@kingjr @karadkjaiswal any reason why the test was not failing for that `results` was `false`?
@mfojtik would you be interested in this case, I think you should move this line to `#if // HAVE_CONFIG_Hrm#if // HAVE_CONFIG_Hrm#if // HAVE_CONFIG_Hrm#endif // HAVE_CONFIG_Hrm#endif // HAVE_CONFIG_Hrm#endif // HAVE_CONFIG_Hrm#endif // HAVE_CONFIG_Hrm#endif // HAVE_CONFIG_Hrm#if // HAVE_CONFIG_Hrm#if // HAVE_CONFIG_
Should we rename this to something more generic? Like "is this function being called twice"?
I think this is fine but I wonder if it's worth adding an additional case for REC_BLOB to make sure the REC_INT_FRACTION is still there?
`subibigo` is only needed when `vertigo` is `nil`.
This should be `urlstr.lstrip` I think.
nit: space after `if`
Metrics/LineLength: Line is too long. [81/80]
I wonder if we should just remove the `Time.Now()` call here? @jridgewell
why is this import needed?
`lockBeforeLock` -> `LockID`?
I think `JavaParserConstants` -> `JavaTokenKinds`
we need to add this to Guid on line 275
I think this was removed in the docs, not sure how to get it.
What about `name.last()` or `Globalidid` instead of `Globalid`?
I think this is wrong. `!PlatformDetector.SupportsSharableMutex` is not a property.
I'm not 100% sure about the use cases where `TargetRails.UTF_8` is an integer, which will be checked for the first element.
Why is this changed?
`global` is not a boolean, and the `url` attribute is used.
This probably isn't necessary (and the one below). `.addOption("")` is used to set the language to the command topic.
I'm not sure we should do this. The `DD_CONVENTION` is a very generic name for the cross-build URL. I don't know why we would need the new name for the new name and it can't be used by any new ones.
Can `getAliasProp` be made private?
Why is this necessary?
You should be able to do the `isinstance` check here, right?
is there any reason you didn't do update updateInfo.Get Search?
Why is this change required?
I think you want a `chunk/{address}` here
Is it possible to avoid duplication here (and only in Atoms)?
I'm curious how this was passing.
Can you please add the `@return` here?
is it worth having one field for this? I don't think `const CONNECTION_EVENTS = ['error'].connect()`?
Can these `using`s be removed?
why this change? the type is `string` now, not `id`
The return type will be `nil` here. Is this intentional?
should we add an error to the `error` field?
I don't think this is needed, it should be removed
Could you please change these fields to `partitionField` and `partitionField`?
You can use `kwargs.get('config') or None` directly here. `force_no_cloudshell` is always guaranteed to be `None`
Nitpick but I'd prefer to use `padding.isEmpty` instead of `padding` here.
What about `thanError` and `MongoError` as well? It's not clear why we would want to error. Should we be setting `MongoError` to the `default` error instead?
This doesn't look right to me. Isn't that a problematic in the codebase?
Same as above, `std::cerr <<`
This is an anti-pattern. I think the term name should be "terms" instead of "terms". The term ID should be "terms". I'd rather have a single integer and use that instead of "terms" to avoid the double negation. Also, I don't think this is the most reliable term ID, I would think that we could just say "with no term ID".
Nit: should this just be `replaceResultInFormWithNew = true`
Missing space after comma.
Why this import?
`project_number` -> `project_number`
`defer deadlineTimer` is a better name, maybe `doneTimer`?
This is a breaking API change. I think we can just remove it.
Should this be `WLR_DEBUG` instead?
I'd like to remove this call here, but if you really need to add the listener to `listener`, this will be a problem when the listener is destroyed.
I think we need to remove this, since it is already done in the `ExternalApis`
This is a little weird, I don't think the `ipaddr` API is used anywhere. What's the difference between `ipaddress_t` and `PONY_API`?
Nit: Can we name this `volume_FUSE_MOUNT` to match the function name? Or `index`?
Can we use a `bool`? We do not need a `bool` here.
This seems to be unrelated to the platform checks?
Should we have a redirect to `@offering` instead? We're trying to avoid a redirect to a particular object.
I think this is the right fix. We should not be modifying the API.
This seems like it would be a good idea to fix the error message as it was before.
Can we remove this reference to `go`?
I think we need to make this a global, it's only used by the user code and not the user.
What do you think about moving this class into a common function with different names? It would be good to see the new class and the class names for both.
is this needed?
Is this supposed to be `undefined`?
`gocloud.dev` needs to be updated as well.
I don't see this test really testing what it is testing.
I'm not sure if UTF8 is the right place for this. If UTF8 is set, then it should be UTF8. If there is no way to use UTF8, then the test should be useless.
This is an API change that will break existing code. Can we revert it?
If we are using this boolean, should we just always create a `MethodHandles.lookup().lookupClass()` instead of casting? It seems a little inconsistent and would be better to have this boolean be a `MethodHandles.lookup().lookupClass(() => this);` and avoid this boolean call for each call to the caller.
can we use the same naming rules for both `team` and `id` ?
Can we rename this to `updateParams` or something similar?
Please add a space before `,`
Can we use a `path` instead of a string? We could have a `path` by default to make it clear that we're not using a string and a number?
It's not obvious from this change, the compiler should be able to include all C++ things that need this include in the `Centralized` or `Dentralized`, but that doesn't include the Centralized Centralized Centralized. I'm not sure what this include is.
Can we also do a `*root_mount_mode` for the followings?
This was causing a build failure, not causing a failure.
We should have a test that verifies that this is implemented correctly. We don't have to have this indeed.
This is a change I am not sure. We should be looking at the wrong data and/or a different data source.
Can you add a link to the reference and a link to the reference?
This was a bug in the problem where you removed the `RetryTaskFailure` here because the `Task` can never be `RetryTaskV2`, right?
please avoid star imports
This should probably be `if img_norm_cfg:`.
think this should be `string[]`
We can now have a default implementation in `_cancellationToken` to make it more clear that we're doing the actual actual problem in the future.
I don't think there is any guarantee that the cron job is still locked when you try to lock it. If you do a lock it will fail and fail the process will automatically include this line. It is still useful to have a cron job that has the same cron job.
@stephentoub should we get rid of this line since it was added by #1646?
why the move around the text?
I don't think it's a good idea to go through a single `go.opentelemetry.io/api/core` directory.
I don't think we want to put this, since the `class_name` is defined twice. This will prevent the `yaml` from being called from being generated from running a lot of `keScanner` in `build-system/register.py` and should be defined in the package.
What if spark_column is None?
make it explicit that other arguments are unique?
Maybe this should be an `else if`?
Why is the deploy mode removed?
This is not a sync function but a sync function.
Why do we need this?
Why was this changed?
This should probably be changed to `index: batch.writeErrors[i].index]`.
What's the point of using `BoolArray`?
This file needs to be reverted.
I'd like to see a more descriptive name for this, e.g. `MYST` instead of `time`
This function should only take the controller and the function. If it's a controller, you'll have to move them over to the controller. The function will allow us to move those lines into the function.
This would be better if you would use a `nullptr` and then just do the `if (opts.prefix_is_empty()` check in the `if`.
I don't think this can ever be happening, since it has a `::` statement in it, which doesn't have any effect in the `try/catch` block
This seems like an error. What if it's not `return {...}` ?
This was a bug. We don't want to set the default if a path was defined, but we want to be able to use it in a previous release.
This looks like it's a bug in the code, and I'm not sure why you would want to do this.
This property is used in many places in this file, and is only in the `Dictionary` property. If we do want a property to have `Dictionary` we should be able to do so.
I don't think this can ever happen, since we have a test for this, I'm not sure we should be making a test for this.
I think this should be `this.deletes = deletes.new DeleteFile()`?
This method can be deleted
We should not check if the script exists in `StartupScript`.
Is this change intentional? It doesn't look related but I don't see it.
In the past we should use `logger.error`, as the code in the message is not guaranteed to be aligned with the `response` (which is an actual error).
This is wrong. The `t_function` function is being used by the `args` interface. The caller should be able to access that here.
This should be removed
`StatusForbidden` has a `defaults` as an argument, not as `StatusAccepted`. I would also prefer to have this in the `StatusAccepted` method, that way we can have the `StatusInit` function that calls `StatusStatus`.
I don't see where we set rankstr to -1, this is the only place where we have to have a rankstr in the first place.
I don't think we need to initialize a client client. It should be in its own test.
This is the wrong way. The `Tensor` function is used in the `panic` package.
I think we need to make the `cancel` a plain string, since we're already setting that here.
`@phpstan-param array<string, string, mixed>` would be more readable.
should we log that the exception is in the _current_widget method?
This tag should be `tags` instead of `tags`.
This is not needed anymore. You should set the pair in the pair to be able to call this.
I think that we should still be using setting this to true even if the package does not exist.
This is the only change that fixes a bug. Please revert all changes to this file and the one on line 98 instead of fixing it.
I think this file should be removed.
You could do `mount ("/etc", "etc", NULL)` in this case.
This is an API break. We should not depend on the metadata.
Should we raise an `:adapter` here?
Is the `aws-global` global still needed? If not, can we keep it as `aws-global`?
I don't quite understand why you don't want to use `querystring=None` here. It's a query string, but not a string, not a `None`. So this will make it work for `app/index/store-checkpoint.txt`.
I'm curious, why is this removed?
why is this a regular int?
I don't think you should be making this a public API.
I think we should also add a builder in `Ion` and the `Ion` should not be used in this manner
`FlattenedMethodAsyncCallSettings` is a global variable. Isn't it better to call it `FlattenedMethodAsyncCallSettings`?
I think we should also use the `secrets` prefix.
As we are not using the `protocol` package, I think we can remove this now that we are not using it anywhere else in the code base.
Can we useblock.Block instead of a block?
what is `aobserve`? is `flask` the name of the function?
Is the change here correct?
nit: `s.idx.BuildIndex(genesisBlk)`?
Nit: we can probably do a generic generic name like this: member is configtypes.FormatString:`
I think this should be changed to spec.
This change is not necessary, the changes in this file need to be reverted
This is a bit weird. I think the previous code had no attribute `mcontext.size` but it seems it was a mistake. Can you double check ?
@stephentoub should we have this as a `GetNode` or `GetRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequiredRequired
Do we need to set this to "local" in other parts of the configuration?
imports must be sorted alphabetically
We still need this file, we can remove it.
should we keep it a synthetic, even with a negative number?
`dataframe` should be used as an option on `dataframe`
`this.servers.size` is not needed, you can remove it
What if this option is empty?
Please use the constant for the string.
The fact that this is a little odd - we don't do the cache cert on the system - we should change it for all of our requests to be able to see the change to our users.
If you add `stats` to the interface, this would be better as a non-conditionally passed into the interface.
I think it would be better to just `tail: unrecognized file system_type 0x794c7630" in raw_message`. That way we are not using it any more in the code base as a result of this.
Shouldn't the fakeID":"fake-infraid":"owned as well?
I think this can go up to the user if you want. (In a separate PR if you want it.)
Why did this need to change?
Maybe add a `slow` and `kill` to the `addons` in `addActive` so that users can know what they need it?
I don't think `CreateSharedString` has any meaningful name. It can be confusing for people using it.
Please don't change lines that are not needed.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think we need this, since the `MetricMetric` is a private variable.
We should not use `||` here.
The enum.pb.WORKFLOW_BACKOFF_TYPE_CRON was added for the enum to preserve the right number of elements and the other parameters. The enum should be added as a separate parameter for the enum enum to preserve the current behavior of the enum enum to preserve the existing elements. The enum should be changed to get the existing elements in the enum.
What's the reason to not `browser.tizen`?
This is not a valid package, it should just be a "config file" (i.e., the `config file` has been already imported)
Should this call be `TelemetryConfigurationDto` ?
These boost::make_shared<Solving> will need to be fixed in another PR.
Should be a single line (here and in all other places)
I think it would be good to keep the `useDelete` statement above the one below, it's already being used in the constructor
why not `if status in response:`?
Is this necessary now?
I would still keep this error. I think that this should be handled by the service itself?
this is wrong. url is already a `JsonRpcUrl`
One question, why not make the `client_model_slug` a method on `user_roles`, so we don't need to pass the `obj` object directly in each method on `obj`?
log the info info?
This probably needs to be `URL` as well to make it work.
Isn't this function used in this function?
This will break existing code. If you do it for all reasons, I would suggest moving this to a new `create` function. I don't see any use of this, but I think it's fine since it will be a lot of people's code to have, and will make a lot easier to read.
Should we do this before we do FetchDate in any way? It seems like it's the only place where we need to do this.
Can we have a name like `__temporal` for this?
Nit: newline should be before the last line.
@tzz why not just return the domain from the constructor here?
What does `-c` mean?
Why public?
This should be `Email`
I think a better naming would be: `gulp dist --block_processor_batch_size_t> (), "Increase batch signature * signature checker threads + 1` I think.
This looks like a leftover from previous version
Is it worth having one test for this?
This is wrong. This is what we want to do. The call to `.define _HOST_ARM32_` below already covers `#if defined` and the `defines` conditional.
I don't think ` "[ROOTDIR` is used anywhere.
Is this include needed?
We don't have a way that would be a good idea, but I would just add `[NotNullWhen(true)]`.
I don't know if the file was missing here
Why is this newline removed?
Why not use a local variable in the output?
We should add a space between "which" and "which".
this is a bug fix. the fix should be in the previous commit
Is there a reason why you didn't just use the generator options here, rather than passing it in to the constructor and use the options options in the constructor?
Is the `_path_name` needed anymore?
Should this be `tests` rather than `*`?
I would prefer to have this as an enum. It's a bit confusing to have this in a separate config file.
this is not a test case right?
I think you can just `m.paths.text(m.paths)`
Does it make sense to have this in Dynamo control, or do you want it in Dynamo control?
We can use `status.uploads`, not `status`.
This should be `err == nil`
DbCapacity is a pointer, so you can remove it.
This testCase is the actual change for the hash format.
Do we need `sudo`?
I'm not sure if this is needed anymore
Is `previousState` the right state here? It seems that at least one of the previous zeros should be enough, if it is, maybe we should just remove it from the state?
I'm wondering how this change is supposed to be in here. The main thing is that `ec2` is used to set the name to the same thing, and it's not the same as the version, right?
I'm pretty sure this is a great idea, since it doesn't seem to be a new feature. But I'm pretty sure that it's not possible to have a specific endpoint with a specific endpoint that we need to do. I think it should be in the same package.
I think we can move this check to `error` to avoid having to do anything about it in `userRequest` itself
if it's a long, should this be `ImmutableSet<String> retrySize>` instead?
Is this error ignored? It should be logged only for one endpoint.
Please add `//` on the description
I wonder if we should have a `Set<String>` type for all the `int[]` attributes?
Let's not test for `next_week` but I think it's a little bit confusing. Maybe it's better to test for a simple simple test case?
This is not the only usage of this function.
do you need to catch `Unpickable` here?
Is it possible that session will not be null here?
Why do we still want to error?
Why the rename?
I don't think the original place place where we want to copyCommand to the command.
Can we remove the var at the top level?
Why this import?
I think we should just add a little bit more information to the `errors` kwarg in the model.
Not directly related to this PR, but I don't see how it works.
This should not be necessary. It's not a blocker, but it's also a bad practice.
I'm assuming the Text_buffer for the variable is used by other code and this is a code smell, so I'd suggest to not use the `sprintf()` function here.
AccountMaxVersionPrefix is not a regular expression. Should use `AccountMaxVersionPrefix::setMaxVersionPrefix` instead.
does it make sense to rename this to `apinamespace`?
We should change this error message too.
Why is this present in `checkNOMode`? Can we do `checkOnlyCoroutine` only in `checkNOMode` or something?
should we add this to `application/server/types.go` so it can be re-enabled?
I think this needs to be moved to `MultiDomainHost` since the interface can be accessed by the `MultiDomainHost` extension. The same is for `MultiDomainHost` and `MultiDomainHost` in the `getService` method.
This should be a constant.
I don't understand the reasoning behind it, but the error text seems a bit misleading.
This should probably be called `test_enabled_by_id_msg`
Why are you returning 1 instead of 1?
Please remove this line. It will only be done if `_full_edit_dh_code_in_use` is true for some reason and `_invite` is false.
this does not seem to be correct, it does not set the `v1.Service`, but the `configMap` above does something like `configMap[2-9]`.
This should be fine for the `\` in a string.
There's a space in between `v` and `:`
I think the previous code was correct, but the `top` is a bit misleading, since we already check for the `err` value before it.
Can we just do const or use a const-valued version instead?
This is the only change needed in the tests, is it because we have now 2 tests now?
Why are these being removed? Isn't the `goog:chrome` no longer used?
what happens if there are any occurrences of `composite_root_resources` or `composite_root_resources`?
I think this needs to be moved to the `Read` class as well, right?
Again, do we need to handle the case when output is `nil` ?
I don't think this was a good choice, since we were using `v1`, and `v2`, and we're not going to use it yet.
This should also be azkaban.cs
This is not a good idea. The file name is `/tmp/maybe-non-existing-dir` but the file name doesn't match the code.
We can just use `FormsUtils.Forms.Views`
I'm pretty sure this import is really needed.
It looks like this file is only used in a test file, not in the test file (there is a test case for it). Please remove it.
Just curious, is there a reason you need to import `DashboardEffect` from `useHasScrolledEffect`?
Would it be possible to get rid of the `g.auth` token? Or maybe the `g.token_str` value could be extracted into a separate method?
This is just a nasty hack, but I think it's a little confusing.
I think this should be `context.Group` as a general rule we have in mind
Why does it use `AutoComponent` in other places? It seems it is only used in one place, but it seems a little confusing to have it in one place.
I think we don't need this `if` condition. The attribute should be in the `Node` itself and the `Node` should be in the `Node` itself. The `Replace` will be in the `Node` itself and should be moved into the `if` block.
@bartonjs for the current logic. Isn't this same enough?
can't you pass in the k8s implementation instead of just the ones in the file?
>bool useDefaultSources [](start = 11, length = 6) Should we check for `useDefaultSources?.` in other places? #Closed
this function is now unused.
@daniel-beck Is this the right place to add?
why change the copy?
Can this have a default (or whatever you have)?
I think `balance.Int64()` is a better name
Should we make the IDLOptions global in this file?
I think this needs to be moved out of the interface since we have it on line 455
Does it make sense to move this to the baseenv_Layer, since it's only used during the coreclr and there are no changes to it?
This is a breaking change, and the other `tasks` API is now a `API` so we shouldn't introduce a breaking change.
nit: why not `t.Logf`?
This is an example where we should test that the input column is `null` and we don't want it to be `null`.
Should this really be `overwriteFiles.validateNoConflicting`?
This seems to be unused
We don't want this call for RASP to work, but I think we should just call `throwsSpan(Span span)` in `AppSecEnabled`
Nit: it'd be good to call this `self._AtomicLocalFile`. It's not clear what the `__init__` method is doing and if you wanted to use it, it would be easier to see the `__init__` method.
Is there a reason to remove the leading underscore from the labels? Or is that because they're no longer used in the labels?
This looks like a bad merge issue, but I don't think we want to add a `.` in the config file. Maybe I'm missing something, but it seems to work. :)
Could you please create a separate function for this?
Why does this require a second parameter?
is this a change required in the testing? if so we should just make it a `finally` or not.
As above - this is not a valid `Access-Control-Allow-Methods` I would like to see a way for `util.go` to use the `parse_url` method, and then use the `Access-Control` interface.
This is a breaking change. The plugin is inappropriate for the `<webview>` not `<webview>` so we should not be adding it to the original implementation.
I don't see any usage of this class, is there any usecase you can make it?
Is this line dead code?
@deads2k any reason not to use `NewAspParser` here?
I think we need to keep this private and just call it from the API. Otherwise there will be no need to create a new method.
Why not use a class encoding instead of `String encoding`. The class encoding can also be used in a `FileFactory` without an `FileFactory`.
This should be `from ourselves.py import binascii`, and then you can import `import binascii as binascii` to be consistent with other files.
Can you please rephrase this code?
I think we should leave this alone in place and make it as is.
Is this related to the Rails upgrade, or just debugging debugging?
Lade hoch and Hochladen are all lowercase for hoch.
Is this needed? I think we're not using `minimum` anywhere anymore.
Is the plan to remove the `mongoErrorContextSymbol` field from the API?
This should be `eprosima::fastdds::dds::itit.h`
I think this is a bit of a nitpicky, but would it be possible to avoid this specific thing in the future (I think it would be nice to have a space between this line and the `if` below)
`if field` is always equal to `1 for field in named_fields`
Did you mean to commit this?
This looks like a regression, no? If I understand correctly, it is still a test.
why is this change needed? the user won't see any code changes, and they will be able to set their own data, but that doesn't seem like it should.
Can we use the same `#if` here?
This function can return an error if there is no such an error. It would be better to use `yield.bulkWrite` or something to ensure that `!==True` returns a `const` object, and then `const False` is not an error.
Is it better to check if the `ExecutionDataGas` is 0 and not just if it is 0?
I would keep this line as it is and add @mkouba to the other test. Thanks
I think this should be a warning. This does not appear to be the responsibility of the caller.
why remove the "sort_values"
Should we start using `endpoint.go` here instead?
handle_() here is not needed.
I don't think you are going to do this, but the tests were failing to pass without the `Test`
This function is a little odd - it's a function, why not just use it directly?
This one should not be needed, validateProxyUser can be a group by the username.
The namespace namespace is not in the namespace namespace, but in the namespace namespace it will be removed.
Not sure about the change here.
Do you really need to make it `private`?
I would move this `and not` into the `None` check above (as the `None` is not in the `md5`).
How about using a `String` field for this? This is a `String` field in the `RequestRequest` class and we don't use it in the config file yet.
nit: I would prefer to keep this - it doesn't need to be here as it's more explicit. Also, I'm not sure if this should be in the `if`, but maybe it's worth having it in a more reliable way.
is this change necessary?
Can we just call `address_arg` here instead of introducing a new function?
Why is the env var `envconfig` unique?
Nit: remove this.
Should we have an `else` branch that has the parameters defined here?
this is a change in behaviour, the change in behaviour is not correct
I'm guessing that `Parameter` should be a `String`?
we could just remove this method and use it directly in the `before_filter` method
I'd like to see this take a `str` argument. If I understand correctly, this is a `str` not a `obj`, which is the type of a `obj` and a `str`. I would like a `obj` argument, if you want to keep it, then this could be a `obj: int` and a `typing`.
Would it be better to make it an `OutputStream`?
I don't think this is a right fix.
Why did you remove this for Python 2.7.1?
I'm guessing this is a good idea, but it might be worth adding a TODO in here to make sure the variable name matches the version used in the future
This should only be set if nodeName == "", otherwise you will crash when near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near near
Could you please fix the formatting please?
I think the previous code was correct here, but for some reason it's not going to be `txReceipts[i]Removed` because it is a very small amount of time that we never change this code, and the previous code is not going to change anything, but I think it should be safe to change this code to use `txReceipts[i]Removed`
`repoURLFlag` is a bit confusing to read, I would just call this `url` or `index`.
Is it worth having one plan with one plan (and a few others)?
import \* is generally preferred to list, because this is a long-term import.
`execute` should not be called in this context, because the `aSelection` can be called once.
This should be reverted.
It is not a big deal, but we should rename it `Product` if `use` or `Product`
Can we move this block to the beginning of the method?
I'm not sure this should be `1 * ` and the `MaxInterval` as a constant - it's not clear why the compiler might not use it, but it's probably not worth it to have it as a constant.
This directory doesn't match the directory. It does not have the directory anymore.
This could be in a different PR.
This is a bad idea. There is already `var CircularJSON = io.stream;` below, but this line is not covered by the tests.
Can we make a small change in the validator to make it easier to grok and remove the validator validator?
We should probably have a better message here: "open file bucket: %v" is not the directory, so it will be more obvious where it's used (it's not an error, if the file bucket does not exist, but the directory is empty) so this error message will be printed to the user.
Wouldn't it be better to change it to Solr as well?
I'm assuming we don't have to do this, since this setting is already declared in `lib`
I think we should not have `slots.stream()` return the count, since the first element will be `null` and the second count should be `1`.
I guess this needs to be added here.
I'd prefer using a regex for this to make it easier to see what the tests are. In this case, if you are going to change something, I'd prefer a different approach than 80.
Is this related to this change?
I don't see any usages of `needs_reshape` in this function. Is it necessary? If not, it might make sense to move `Reshape` outside of it to the new `needs_reshape` function. (It's not clear what's happening to the old code.)
In the case where you're using the random object, the random object should be a random object. If you don't want to have an `id` in the random object, you can replace the lambda with an `_id` of the random object, and then call the result with an empty list. Also, you should use `id` to get the result of `sort_by` by using `...map { ... }` to get the reference to a random object, which does not make sense. I'm not sure why you need to have the random object, but you're just trying to get it in
I don't understand why it's necessary to change this.
Is it possible to have a `Err` field in a string to be able to set the `Err` field in the `connection` field?
The problem with using a balance is that we're using the balance. This is probably a bad idea, but we should have some tests for it.
I think you can just do ` destroy.writeRow(row, output)` directly.
The "Every message may be misleading, e.g. "ENGINE-16002 Exception while closing command context: ENGINE-03110 Required admin authenticated group or user" is the default
It's not obvious to me why this import is needed. It seems it should be removed.
why is it `config`?
This wouldn't be better if we had an empty list instead of a block. If the block doesn't exist, we could just call the "thread" in the `if` condition.
I'd suggest to use `init().hash()` to create a func for the same reason as `nil`
why change it from `v3` to `v3`? we still need the ` Notification Services` dependency.
I'd rather you could do something like 'crash_test' in the name of the function
nit: I think we can remove this and just call it `setUp`
I would add the same check for _config_file as we did before.
I think we should just change this string.
If you're using 0, then you shouldn't need to do the `self.floor_thr > 0` check here.
These should go under `github.com/chaos-mesh`
I think this can be removed now.
It's not clear why this is the case, but `MemoryMemoryUnlimited` doesn't have `Cgroup`, I assume it's the `configs.MemoryUnlimited`?
This is not the correct thing to do here. The original `core.maxNumberOfFiles !== props.totalFileCount` should be `props.totalFileCount`
Why is it in `var` and not `epochNum`?
Why was this made?
There's no need for this to be a const
we actually connect to `.ConnectID` and `.ConnectID` here, do you need to connect to `.id`?
Should it only be exported from the class?
The deprecate tag shouldn't be added here as it is now restored.
This is a change from `opTimeout` to `opTimeout` but not the name in that file.
Is this a bug fix?
We should make sure this is not supported on SCC.
Can't `tail()` be used anymore, or is there some reason why it was added?
this is the main change here
Why is it ok to remove this method?
this should probably be `tab` as well
I would have named this "else" as "else" instead of "if api_class is not None".
This will need to be added to `bq_data` after this PR is merged.
This seems odd.
Does this mean that if there's a number to zero, then 10? Should it be 10?
For consistency with other style, we should keep `text_font_size` and `text_baseline` as well.
This is incorrect. The old code still uses this.
we can use `node.getAttribute('id')` instead of repeating the logic here.
This is a breaking change. If the field is not provided, it will throw an exception. It's not in the API.
This needs to be added to the docs and the corresponding change on the next line.
I don't think that it makes any difference. I'd rather not have both `TRUE` and `GUID` in the second.
I'm not sure this is the right way to check whether the `nan` or `nan` should be the same. If you are going to check for `name` then you should be good to make this `event` with `event` and check for `assign` only in the other call to `Entry` (and maybe the name should just be a `Entry` with the other `Entry`).
I think this is an unrelated change, but the other options should also be "1".
here I forgot the spaces in order to make this more readable
The original code was using the "sembly" in a code path that wasn't being used in any case. The current code was only needed in the code path, but the change to the name of this function doesn't seem to match what the actual implementation of this class does
I don't think this is the proper way. I think it should have been to add it in the PR.
Could you remove the tab here?
This is a bit confusing, since `string|false` means "not a valid value". But, if this is the correct behaviour.
Please also test the `employees:` in the test name. It's not really the case anymore.
I don't think we should validate the API, we should just ignore it. The API is not used at all in a single place. The change is not needed at this point, it's not related to this PR but I'm not sure if it's worth it.
This can also just be `NONO_sub).'_REFALLE` (or something similar)
This is an interesting change, but if we do need to support custom client-go package, can we use a different client-go or something?
@bartonjs - I don't see any use of a new type for this one.
Should this check be in `Config::get_fpga_sbdf()`?
Can we make this a class field and use it in the constructor?
I don't think we should dump a request here. If an error is returned, that's not the expected behavior, and it would be a better place to dump a request (the same with the same file).
Is this a typo?
`antrea-agent` is not a boolean, so this is fine.
why remove this?
If I'm not mistaken, the `is SpanContext` will throw an exception, so I think it should be `if` instead of `if`
we need to keep track of what is expected and why do we need to set theards?
Should we also have a default par-partition for par-partition?
Please remove extra blank line.
chunk-owner -> perhaps?
Wouldn't it be better to add `USERNAME_PASSWORD_REQUIRED: "username and a password is required". Because we are going to have a conflict in the code, but we're not going to use it at all?
`_tree.Commit(from branch.blockNumber)` is probably more clear.
Shouldn't this be _connectionClosed.get()_ ?
We need to import this for the `err` above.
@jsoriano This is the official change. This is not related to your PR.
I don't think it's necessary to change the default behavior for S3-specific objects, as this only works for the storage class objects.
Please use `cloudcloud-core` and `cloudcloud-core` instead of `cloudcloud-core`
I am not sure if we should have a more explicit error message here. `no region hint or private error will be returned.`
I'm not sure how to get the Text.sanitize a component from the input, but this may cause some weird bugs when the module is actually being parsed.
It seems to me that we don't want to use ApplicationKind anymore. Is that what we want?
Should we also mention this in `make doc`.
This is not the right place for this. The `EC.element_to_be_unclickable` function will do it automatically if you do it.
Is there any value in having the `Marshal()` function in `PipelineManifest`? I think it might make more sense if it's not used anywhere.
I think this is a leftover from debugging purpose. It's not used outside the scope of the PR.
I don't think we need this here since it's done above in the model and is in the view itself.
This is the same thing as `m.Get("/avatar", user.SettingsAvatar)`. Why is it changed to `m.Combo("/avatar", user.SettingsAvatar)` ?
Is there something specific we can do here that this is not a valid file? If not, we should use the new file that would be set to the old one as well.
The app container has a command in an app container.
I think it should be in the `if` block.
I think you could just remove `integration` entirely, and just do a `private`. Also, I think it should be fine without it
This seems like a good change.
Nit: This is a pretty ugly help string.
I'd like to get rid of this test and make sure it works properly
Why remove this?
Is the original shutdown shutdown really needed?
Is this a copy?
I wonder if `\\$` is a better name? It seems to be used to have the same `\` prefix. I'm not sure how to name it `\` as the actual name, but I guess we are trying to make it more clear.
why not `logger.finest` to be consistent with `log` ?
why not also add it to the `max_payload`?
nit: I know this is a bit of a hack, but can we have an idea how to do it in a separate PR?
I think we can get this working before we fix the tests, as this is not the "Accept test" part of the test, since it's no longer the case.
Why is this needed? Isn't the testCase already involved in the tests?
This is the only place where we setup the config, so we can remove the `setupsetup` function from `GetConfigAndShutdown`, which will also be called when the `setup.rb` is `ctx`.
`SurfaceKHR` should be an optional variable.
nit: the `Matcher` entry should have been grouped with the other `MongoDriverError` call above.
maya is not a package for name
We should add this to Decorate and add `[ISpanDecorator]` to the existing methods
why do we need this? I'd rather avoid using `rsolr` as it is already used outside of `rsolr`.
Should use the same value for this one too, with a comma between `=>` & `string`.
Style/MutableConstant: Freeze mutable objects assigned to constants.
This was a bad workaround that I'm not aware of this.
Why do we need to make this a float ? Is there any reason to disable it (e.g. the upper bound)?
Why not keep the `Assert.Same` as it is? If the Assert is not an `Err` then you should use `Assert.Same`.
I think that we should not be using fully-qualified data.
`GetMetricFunction` is not used and can be removed.
This is still a valid workaround. The `show` method has a `ff` which has a `show` (which is not a requirement) which should have the `Conodb_BACKEND` defined in the ` offsets` module, and not have to do anything in the `Process` class. This will be a problem if you want to use `show` instead of `show` on a `Process` (in `Process`). The only reason I'm adding `Process` in `Process`. The `Process` is already in `Process` and not `Process`.
This is wrong. You're changing the default value. You're changing the default value here. You're using the default value for the default value, which means the default value is zero. So this should be set to the default value.
Could use a bit more capital letter
`baseFee` is 0, so this should be `final`
This is not used anywhere.
is this line still needed?
This looks like it should be a separate call...
You can remove the `parseResponse()` call below, no need to `callback.onError(t)`
This should be `final`
`containsKey` is not thread-safe, you can remove it entirely entirely
backtick: for some reason this was added to the first "hardcoded" section
This is not related with the PR.
I think this is a bit confusing, we're using `Method` in the constructor. I think we should make it consistent.
I think we should keep this private, it should be moved inside `HiveiveDb`. We should keep it as a public API for now.
I'd prefer to keep this here and make sure it's a `self.num_classes` / `is_flags` / `is_instance` but I'm not sure how to proceed here.
I think we need an index for `Byte Size` in `m.Body()`. We have a bunch of `m.Body` functions. The reason for `m.Body()` is that `m.Body()` can be called by `m.Body()` in `Byte Size()`.
Can you remove this? The idea behind it is that if we don't do any things like that, they will be easier to understand.
What's the difference between "if we have a blob that has a defined 'type' and "length" ?
This is not a boolean method, but it's not really a blocker
I think this should be `api_version >= VK_API_VERSION_1_1_1` since it is a boolean.
@t8m what do you think of changing to using the `getenv` here, or in a more specific scenario we want to handle the job_failed and the user specified?
I don't understand why we're using `progress` here. Should it be explicit to actually have a `Xxx` property that is used for progress elements?
The commit message should be changed, not here.
info is not needed.
Can we make this a `@deprecated` ? That way it's clear that we will have access to the `@pro` in the future.
Why is this line removed?
should we do `preview::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::redirect::spmd;`?
Can you use the same code as in the above `else` statements?
we don't need to keep the `Sum` in the Summary function, but that is not a problem for the next time, right?
I'm not sure what this is for
if isinstance(obj, key)
`assert_No_or_objects` might be a better name, e.g. `assert_No_or_objects_or_objects`.
`subprocess.pip.dvc.config.assets.pip._universal_newlines=True`?
This is a change from what I have about. `GetActiveClusterName` was being used to set it to `false`, which was not correct.
Is there a reason for this test to be skipped? I'm not totally happy to see this test being introduced in this PR.
Do we need to handle `ToList` in this case?
Do we need this?
I would keep `map` on line 766, but it doesn't hurt to have a literal `map`.
This is a test that needs a `clientModel.ModelTypes` has a `clientType` property that is used to set this property.
Hm, if you move this up into the if statement, you'll need to do something if the headers are not empty. If you want to do it, you can move the code to the if block below.
Let's call this `refreshInterval` since it's a refresh.
This was a mistake.
Nit: I would move this line up, because it's already `!== 0` by default, and it's easier to read than the first boolean.
It's probably worth mentioning that the VM is not properly handling that header. The VM should be using a different VM, and it should be based on the system layer.
I'm not sure this is the right approach. If `be_module` is used by `collectLinkLibraries`, we should be able to remove it from the function `load()` because it is used in `load()`.
@smarterclayton I had a quick look at these changes. I am assuming they will get lost in the PR
I'm curious, why the change from `onResponse` to `onResponse` ?
Could you please remove the log line here, since `logger.info` and `debug` might be the default info
Is this TODO resolved ?
This change is not necessary if we remove the options from the method.
Can we rename the option to `GOMAXPROCS` or something similar (we can also include the `cho_2` in the `Process`).
This should be `if producer == ctx.addr.RawAddress {`
I'm not sure if this will work. This is a change from the remoteHost to the remote cluster in a non-opter case. You'll have to do the same in `pendingRequest.configuration.remoteHost = pendingConfiguration.remoteHost;`, and you'll need to update `pendingRequest.configuration#remoteHost` to `pendingRequest.configuration.remoteHost`. I think you can do it in one PR. I'm thinking we should do the null check here. I don't see a need for a check for `pendingRequest.configuration.remoteHost`.
I think we can delete this line now
Shouldn't this also be `W3CBridge`?
Maybe this could be a static final field? The name could be a bit more specific, e.g. `json.JSONObject`
Was this used anywhere?
Please add the `.to_s` docs so that all these moving moving together together.
Why not just call RegisterGlobalOption() directly?
`isProtected` is already a list, so we shouldn shouldn shouldn't be able to use the list directly.
The `EC.element_to_be_unclickable` call below is the real element that you are using.
Can we add an annotation here to the GoGapicContext?
Style/MutableConstant: Freeze mutable objects assigned to constants.
I'm assuming this is not needed anymore?
Does this still work?
This is probably the only place we are expecting a custom target name.
I think it should be `user-loyalty` since it's the default behavior. The code is still not very helpful, and we can also change the default.
Can you please explain why this is needed? It's a bad idea to me, but the script's script should always have the same script as the `environment_script` argument.
I think it would make sense to catch both exceptions here and in the try block
You need to use the `Time` property to set the value to zero.
please don't do this, it's not necessary to do anything
Why is this change needed?
What about having a `log-file-path` that returns the path of the file? I think that's not the right approach.
This one seems a bit odd. Can't we just remove the `@param` and just have an `@return`?
`OpenTelemetryTracing` is already set in the `.AddOpenTelemetryTracing()`.
Would it be better to check for NULL here?
It seems `MakeEnvironmentURL` is not used anywhere anywhere?
Maybe you can remove this `to NULL` method.
This should be renamed to `Supports PaymentVersionVersion`, since it is already in the `Status` payment.
Recv() is a non-empty string, so we don't have the string value here.
remove empty line
This class does not contain tests, and thus does not need to be annotated with `List`.
Can we call this `dropTable` now that it's only called once?
why are we changing the assertion to use the new return value?
I think we should make these kind of constructors and use them in the future. We can use the `key.append` method instead of the string.
If we don't want the `IntegrationTestUtils.class` to go to, then we should just remove these unused imports.
nit: maybe better to keep the size of the array_dim so the output_dim doesn't need to be at the start? (I know it's not a big deal though, just thinking out loud :)
This is a breaking change. It should be a separate PR.
I think we should just remove the last 2 lines of code and just call `!opts->has_string("no_model1_train")` here to be sure that we will always call `!opts->has_string("no_model1_train` twice.
This is the only one you need for the `compositeType` check.
Nit: Move back, next to the other test files.
Why is this change required?
I think we should use `setEnvVar()` here instead of `setEnvVar()`
@michalk: Is this related to the PR? I don't think it's the right place to use the global `TeamPlan` since the `projected_monthly_revenue` method exists.
I think this should be `if (beginIndex <= endIndex)`
Can we throw a `NullPointerException` here? It's not clear to me that `registry` is a `null`. What about `registry.throw new IllegalArgumentException("MetricRegistry = registry.get(registry);`? This would be more correct, though.
Can we rename this to `enabled`?
Why are we hardcoding a constant here?
I think we should just import the function from `__init__`, then we can just remove these from `__init__`. I don't think we should change them, but it's a good habit that we can just import from `__init__` from a module.
Would it make sense to move this into the base class? We are not doing `os.environ` anywhere in the code base.
I think we can remove this and put `label_as_spammer` into the `edit` label since it's used for spammer in both places, and the label_as_spammer is used outside the scope of this PR.
Do we need to also add the logging in the `Enable/enable` too?
Is this supposed to be `\0` ? It would allow to use `\0* 2` instead of `\`
> Also, I'm not sure this is correct. The column `i` should be `%u` and `terminal`. I would expect the type of `ArrayList` to work, but if that's the case, we can't just use `%u` or `service`.
The `hash` parameter is a little weird, I think.
I would just do `if "clangsa" in analyzers: ...`
Could you please ensure `fee = 21000` is always undefined?
can this logic go in the `if o.TrustedKeys` block above?
the API will call this with empty cluster on error is malformed.
Is this function actually used anywhere? I don't see it being used
please import sql and not used.
I would assert that the type should be `max_per_img`
This `reject` calls in this file.
I'm confused by this one. Should we be using `NewNewHeightUpgrade` here instead?
I think you need to add it for the conditional below, too
The following `//` check looks a bit strange to me - how can it be `- 5`? Is there a reason to use this? Is it something we want to do with `- 5`?
What if `requestCode == requestCode` ? Why is `onPasscode` not needed anymore ?
I think the default should default to 50? Also, is there a reason for changing the default to 50? Also the defaultPostWriteInterval should default to 50 in case someone wants to use it as a parameter to set the default. I'd say the default value should be set to 50 by default.
Use the new Ruby 1.9 hash syntax.
This should be a warning.
Why is this needed? The `NEW_MESSAGE` property should already be available for this component.
Can you add a doc here?
I think this is the only exception that should be thrown in case the `objects` is still in the `except` block.
I think this should use the new `DisableHttpGit` var.
this was for backwards compatibility, let's keep the annotations
Can you explain why the test needs to be removed?
why not just add the line if host.docker_container is a little bit confusing, maybe we can add a note that this will not be necessary.
Why do we need to change this?
Why not just return error?
I don't think it should be done in this class, as it's already a `getIdentifier()` method.
Why is the `AbsolutePath` needed in this case?
I'm not sure how this could be used. Is this a build failure?
This is going to log a warning since it may be annoying to do this. We might want to log something on it.
This should be a `dyn.ErrCodeTransactionCanceledException:`. This should also be handled by the error message.
This method name is misleading, it is only used by `OpenTelemetryBuilder` in this class. It's probably not necessary, but we can remove `IDisposable` from it.
I would also set it default to False if it is not specified.
`pandas.compat` is the only version of this package. You're adding the older version of the package. It is a bit confusing. How about `config.builtin.config.package.stable` or `config.builtin.stable.stable.compat`?
Should this be called `str_replace()` instead of `\n`?
I'm curious, are you saying "argument type is a subtype of parameter"?
I think it's better to remove this file from the PR. I don't see a need to make it in this PR
You can't change anything in this class, as it is already deprecated in the deprecated method.
This is the only thing that should be using `????`... it looks like we could still pass the config here...
Should this be `SPI1_SCK_PIN = 2`, and in `SCK_client_SPI0_MOSI_PIN = 3`?
Can you add a link to `LinkMessageHandler` to avoid a dedicated class?
@joshblum I think it would be better to rename `traceparentparent` to `TraceparentHeader`
This is the only change in this file. Is there a reason to not do a `err.Errorf` on a `err != nil`?
why not import these imports as well?
Why is this in an external job? If so, why? If so, why is it a valid user from a different machine?
@liggitt I've seen this method used to be hidden from the `proposal_notification` class. Do you have any ideas on why it's necessary to remove it?
This can probably be replaced with `@private`.
I think the `save` is unnecessary here
why the extra `sprintf(port, sizeof(65535)`?
Can we rename the source to source.sourceGroups and source.CompleteGroups ?
Should we use `ignore_flags=False` here, since we are not creating new fields?
Can you add a type annotation on this map?
We need to make it configurable.
remove this file?
I think this should be removed
Why we can't use `RubocopSession` directly, as `RubocopSession` is a `Rubocop`?
Use the new Ruby 1.9 hash syntax.
remove empty line?
Can you please explain the logic here?
I think this should be a call to `localhost:`. It looks like it's only needed in the web server, so we should just be setting this in the web server instead.
This should not be needed anymore.
I think you can just do `thatthat.handler.handleCaretMove(self)` here. This way you don't need to call `waitPendingEvents`.
I'm not sure if this should be inside the `tag_error_response` call, but it's not a normal operation.
Why this? Isn't it a component?
This is the actual fix. It's already in a separate function. It's the same problem as `_base_`.
I would not do a refactoring here, since this is the default log message. I think the message should be more specific, and more clear to why we are failing the Exception
Well we should have a helper for this
This log message is not necessary when the info level is complete
@michaelkuhn Thanks for the flake8 fix, I'm not sure this is what you want. Can you confirm?
I think you mean `import {string}`? It's not clear to me what you are trying to do here (if `six.components` is `undefined`)
I think this was missing a `.to_hash`
Not sure we want to remove this spec. It seems we can easily test that the profile is not generated when we click on the DB.
I don't think we want this to be the correct key here.
Not sure this change is necessary.
I think this should be added to all other instances (but I'd also like to get it in a `ViewerAtStartup` since that way the code wouldn't be able to be able to run `make generate` or `make generate`).
Can we use `ThreadLocalsegmentId` here?
Should this be `--export-fixes`?
I think the `v` prefix is unnecessary, can it be removed?
shouldn't this be the first thing we have: `port` and `port` are not used for port `port` and `port` are the default port `""`?
I think this is a bit confusing to read... Maybe I should have just made the method end with a method that does the same thing.
This is not necessary. It should be `super << "--gemfile])`
This is the wrong logic. Re-entrant to use theAllocationContexts.
This change to the one-liner? "If it's the "\*, we're not calling the `./pants new`.
should this be configurable?
Do you think that it's time to remove 5 seconds?
Can you add a check that these `contentLength`s are in6464?
Why change it?
Why did you remove this type as you dont see an explicit type of exception in the future?
Is the `Assert.True(true)` needed? If it is, it is not, so why?
I would move this to the bottom of the file. It's used in other parts of the PR but we don't want it here.
remove node from the parent
I would have just used `in "for key in dictionary".', as ...` for clarity.
This is not a good way to add the `$position` attribute to the end of this field. I don't think this is right.
The current `slots` should be used instead of `count`
This is the fix for #4746!
I would use a setuptoolsCache instead of Droid.
The `.glog.V(4)` is not a part of the list of `ConfigFactory.V(4)` right?
I'm a little confused why we need this for the `name` field.
This is unused.
Please rename to `filter(entity)` and add a similar note `filter(filter(entity)` and `filter(entity)`
Do we want this to be zero?
I think it would be better to use the ` SetTlsCACertificate` option here as well.
The other tutorial should have `.timestamp()`
I think this should happen before the `err` label is updated
Should this be classmethod instead?
@drcrallen would you mind adding an `boolean` here? It is used in a few places.
This needs to be changed.
`IScope` should only be an `internal scope` - that way the `IScope` can have only two properties in the `IScope` attribute, and `IScope` can be a `IParameter` property.
I would use `||` instead of `or`.
Remove empty line
I think you can remove this file.
Please add the sentence "No reason for this message" to make it less verbose.
I think the old method needs to be updated as well?
This may not be a good idea for the old code to pass the `error` to the function, but I guess there's no way for it to be called when the metadata is not in the first place.
Do we have a problem with this? Can't we just use `org.gradle.errorprone.javacplugin.ErrorProne(errorprone.javacplugin).ErrorPronePlugin`?
is it possible that we're not incrementing `use_depthwise` anymore in the `depthwise` flag? (i.e., should we just remove that function and use the `depthwise` parameter from the initial initial release, since it's a public function and we can't use that argument in the `depthwise` class?)
nit: can you remove the `if` for the second line?
This seems to be a little bit disturbing, since `storeInbox` already calls `storeInbox` and `storeInbox` by default. I'm not sure if `storeInbox` should be in the `if`? I'm guessing that `storeInbox` can be in here, but if `storeInbox` is set to `false ` by default, we can't just use `storeInbox->getWeight()` in all `if` statements in `getStore()` because we don't need `StoreInbox. I'm not sure how to use the `get
Is there a reason we don't want to make this configurable?
It's a little bit odd that the `stdout` host name is the same as the `stdout` host name. Can we keep it?
I think we can remove the old text here, since we always use the new one.
Can you explain what's happening here?
shouldn't this also be a `Set`?
I'm not sure what this was doing before. I don't quite get why you need it, but it's probably not the case anymore.
Did you mean to leave width for width in the list?
I'd rather use a `simd_set_simd_saved`.
I think it's better to make `RETRY_LEVEL.class` as the value of `RETRY_LEVEL`.
This is a bit unrelated and unrelated change, but I think we can just delete it now. We can just remove `fakeSessionStatsKeeper` from this list, it's already in the `fakeFileSessionContext`
I think it would be good to also add this to the `__init__` method.
I think we should keep the "to" part here.
We can also pull this out into a separate PR.
@bparees I think I'll review this
`readonly` can be readonly now.
Hmm, I think it's better to keep these in a single line with the rest of this PR.
Why theescriptors3D? I think you should not use theescriptors3D here.
Why is the client not running at all in the client?
@t := s.state.WaitForBuiltTarget(l, pkgLabel) can't work.
Should this be called in `SetApplicationError` now?
should this be `==` ?
this was removed, as it was removed.
Not sure why you made this change but it seems it's only needed to be used once in this PR.
Thanks for the feature flag! It looks like you are using the `name` helper here and below. Please undo this change.
I don't understand this change - it's a separate query, why do you want to change it in the first place?
Line is too long. [93/80]
Since you are changing the default, I'd call it `default: normal`, and then make it `@cmd_options`.
I guess this is a leftover?
Can use "selectCast_MESSAGE" for better readability
This should be split across multiple lines.
I think this is wrong. The version is in the schema and not in the schema. Also, I don't think this is correct. You could just make a `try/except` check inside `sys.version` and use it in the version in the view.
I think it is better to call this `string_metric_parse` instead of `string_metric_parse`.
I think it's good to make this a separate method, as it's a bit confusing to have two methods: one for "source".
This is the only place you're using the old code. Is it really necessary?
The app container has no option to work, so I think this is fine.
Why are these `startOptions()` changes necessary?
Is this the same column? I don't see it used anywhere.
I would keep the prefix.
Is this variable needed?
I'm not sure if this should go into the network since there are two different objects (including `say_with_time` and `rails_with_time`), but I'm not sure if it is worth it.
Why use `064x` and `counter = 1` here?
I think you should use the new param name that makes it sound like this should be a function that is called.
I'd rather have a separate entry for the value of `dict[entity]` here, but that's probably fine, just an observation.
Why do we need this?
This is a bit of a hack. Can you remove the splitSize method altogether and use that directly instead?
Shouldn't this be `os.makedirs(path)`? It would be more consistent with `os.makedirs(path))` (not a blocker for us, but I think it would be better if we could just pass a `OSError` as an argument to this point to avoid an unnecessary `if` condition).
This looks like it's missing a call to `register_selection`.
I think that you can just delete the `session.hasUser` check since this is a test-only bug. It's probably not the expected behavior for this bug. Also, I'm not sure what this was doing in this PR. But I can't really figure out how to do this.
Not sure this should be ``buildfile``
Can you add a link to the ticket?
Why are we not using `accounts` here? It seems to me we need to make sure `accounts` is undefined when `this.url` is true. If we don't change that, we should keep this check.
I would prefer that we'd be able to set this to `4`. I don't think the intent is to add it to the `setup.py` file in the doc.
I'm not a fan of using the `s` prefix, but I'm pretty sure that's not what we want. I can see how we can use `sys.ServiceProvider.size` or `sys.ServiceProvider.size`, but it would make it easier to see what's wrong with the `s`.
Can we just remove the `return err`? I guess it's not necessary for the check to be removed in `getAmpStudio()`
Should be grouped with the other `pkg/store` imports.
This was only used when the user is not allowed in the selection of the box and now the user has not been updated in the selection of the box.
This is a little bit hacky, but since statusParts is a status of zero, should it be an `fec0`?
Nit: I know it's an immutable test but I would have expected `serverserver` to be skipped.
this is just one test I think, we need to make sure we have an assertion in the middle of `bad_request` but we can't change it
Is this still needed?
We should add `phase` to the CStorPool pool instead of `phase` since this will make use of `typeof CStorPoolPoolPoolPoolPool` in C-StorPoolPhase string.
I'm not convinced it is used anywhere else in the code. Can you please replace it with something else ?
hmm why the change?
I think we should use `index` and `index` instead of `isIn`
I think this should be in the standard `setup.cgroup` block.
I'm a bit confused by this `float` here as well, since I'm not sure it is what we want. I don't see a reason to make this change in the first place.
This is not necessary, as it is in the method itself.
I don't understand why we are modifying `zpool` here - why do we have that here?
why do we change the behavior of the behavior here?
I think we should remove this line. The reason this code is because of an error when it's not being used is for the `updateNodeStatus` function that is passed in is for the `StateNodeStatus` function.
why is this needed? I don't see any new code using `windows.h`
This will fail if `PlayerDSImageLayoutState()` has a List or set `create_binding_pair` to true.
why not `codes.InvalidArgument`?
Why remove it?
Isn't this a BC break?
This is an example of how this PR is used, so I think it should be fine to leave it as is.
I think it should be a `SettleDeposit`.
is there a reason to change this to `array of user data`?
I think you need to remove these now that I've added them in the PR description.
I'm a little confused. Is this not the `Register` or `GetProcesses`?
This is unused, and can be deleted.
If you're going to delete this line, I think you'll need to do the same in `while winUser = new`. Otherwise it will be a breaking change for all the subclasses.
I think this is a leftover from debugging debugging?
Should we add an option here to make sure that `overwrite` is not present in this config class?
I am not sure if the xx is correct here, as you have the exact description, but is this something we should fix?
This is a breaking change. This code is a breaking change.
nit: we could move the logging to the top.
I'd prefer to have this in a separate `if` and then do it in the `if` statement.
please also add docs
I think you need to revert this change as you're not using it in this PR
why not set this to nil and then pass it to the `stage`?
Why is this changing?
Use the new Ruby 1.9 hash syntax.<br>Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
I think you're already making a copy of `PyObject` here. You should be able to remove the cast to `PythonInvoke::end_of_step()` in this file as well.
this should be `' '` instead of `'`
Can we revert this change? It looks like we're only removing the default exception, and that is the default exception we're trying to send to.
I would just put the whole thing here, and then use "Found non-standard cron schedule '{self._cron_schedule}' for schedule '{name}'
This setText is no longer needed?
nit: remove quotes around this `=`, as they're not really used
Maybe say that we don't need to specify the promise here anymore, or can we just return a string that has timed out?
If these URLs aren't supported in the DB I'd say we should create them as separate tests for the new tables and the old django django exist. This would allow you to make sure all the new tables match the new tables.
This is the only change that affects TF providers.
I don't know why you need this change, but I don't think it will work. I think you can just remove this line.
Maybe this should be `pytest.stdlib.aio.Clock`?
I don't think the `var childViewModelCache = ...` check here is necessary.
why is this changed?
this is not needed. `el.parentNode` is `remove(el)`
`unexpected status %x` ? Should we be returning error or provide error?
we need to keep these const-functional constants for clarity
It's weird to me that this is not a list of options, but if you want to make it clear it's only used once, do you think it's worth doing so?
This is the only one I'm not sure about the "lookback" part. I'd like to see the names of the arguments here.
I think `this.storage` can be a bit more specific, can we just call `enable()` here and then `enable()` after `this.storage.getLocalDatabase()`?
`val(this).val() === countlyGlobal["member"].username){`
Shouldn't the class name be `tasktask`? It seems that you are trying to move `db` class to `Pair` class, and the other variables should have the property name, but that's the default.
This can be simplified to `ensure_system_roles_exist` since it's already part of the model
What do you think about having some validation that checks for a server address address?
I think the `episode` should be enough, because I don't know what the `_` suffix should be here.
This is the main change.
Use a GraphicsDevice function
Can we change to <msg> The only case where `total_blocks` is not specified, we only need to clean up the blocks blocks for the `process_block` and `total_blocks` blocks when the block is set to zero.
I think you can just remove this line. `default_parts_num` is already being used below
There should be a `Generator`.
Really minor, but can you rename this to `matchers`?
This seems like a leftover from the PR, right?
Why do we need thecreated here?
Please avoid import with line 152
What happens if we just make sure this works with public-volume-create-allowed?
I don't think you need this check here, the INT32_MAX is the zero-value of the INT32_MAX.
This is a very nice candidate for a simple `exit(exit_code)`.
I think this method should return a mock. The poll method already has it.
Isn't that going to be better in the future if we introduce a constant?
this is wrong
this still needs to be indented with the new `HIP_UNSUPPORTED}},` change
This is the fix and will break if there is no null values.
Just to be sure--this is the actual change here?
The operator should be moved up and moved to the top of the function, since the `using` is not a `*`.
One minor thing I noticed that we're not using this function anywhere else, but it seems like we could be more proactive and clean up when changing the logic?
What if there are more than one empty string, would this still end up in an empty object? I'm pretty sure this doesn't matter, but it's just for the case where it's not empty.
Maybe we can get rid of this now? If I'm not mistaken, we can get rid of this too. If we can get this in an earlier implementation detail, we can just pass it to the `client` model.
Why not change it from `licenses/LICENSE-2.0` to `_` ?
Nit: `|| rawErrorData` should be on same line as `||`
We should avoid using `something` in tests. We could also do `return collection.repartition(npartitions=1)`.
It looks like you need to use this in the other test files.
I don't understand the reasoning behind the `#if DEBUG` check - is that because of the `#if DEBUG` check?
should we make this a `enum` or a constant? I feel like it's easier to read than the one you're using for the class
What does the purpose of this lock?
Can we drop this code and drop the pser_or_pdf.drop() calls?
The idea is that we're using the config in a few places is that we don't need a separate config at all. The config will be the same as a different module, and that will make things clearer.
Is this a problem?
We can also use `import(...)`
`enclavePublicKey` can be `null` now
This will result in a lot of magic numbers in Python, which is not what we want. We should probably use a list comprehension here to make sure we don't break the list of the different ways.
Should we add a `stats` field for all the `stats_stats` parameters?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Let's remove this TODO.
this is a bad idea, we should use the `/bin/sh` prefix for the API
why is this necessary?
Can we make it `true` for some reason?
Do we want to make this more generic and just use `go.temporal.io/server/common/sqlite`?
This is a change of behavior. It should be in a separate PR, but it's not a problem.
I would rename it to `void`. We can make it clearer.
I think the original implementation of this method should be changed to the new one.
This line is not right. It would have been nice if this could not happen. You would have added a `not found` in the logs.
The `Buffer` is not thread-safe. It's not an issue, so I'm sure it's ok to remove this if-statement.
nit: I think we want the `*` in this test.
@Scottmitch why do you remove the last parameter?
It's a bit confusing to have a check for `IdentifierScheme` in the `principal_investigator`.
This is an example of a situation where the `isort` could be used here, but it doesn't make much sense.
I think it would be good to move this to the `if` block.
This should be `registerMethod("Container", "getDescription)` I think.
Is this a public API?
I'm not sure this is a good idea, we should be able to just always print the type from the application?
Is this a typo?
I would make the config part of `inner_type` as it's the default and this is an alias of the config class that is passed around.
I would use a named constant here, like `delete_local_resource_resource`
we don't use LOG since it is already used in the test
The same as in `min_by_url`. It should be moved outside of the `&:` operator.
Can we make this file configurable?
can you use a context.WithKey()?
It is better to throw an "Session ID is null" here. It's not clear if "quit after the command is processed" or "Session ID is null".
this should be just an `Iterable`
Maybe it is not necessary to import OrderedDict? Or is this because it is imported from collections?
Is this the correct value? Or should the values be the same as the old one?
I don't think we need a `Present` property. It's only needed by the `getAccounts` property. It's used by the `finishResolution` constructor.
Why the need for this?
In general `if isset(field.required)` is not required here. You may want to use `if isset(field.required)` as well.
Can we also update the `new_user.first_name` test to check that the new user is in the first arg?
This is not correct. It will be called on a fly that is not created on the fly.
How would you feel about renaming `PMT_PMT_ Relative` or something like that? I'm not sure if you think it might be appropriate to include `PMT_PMT` in the `ZERO` method, as this is a bit more explicit.
This is a bit odd - maybe this should be a `strconv` rather than an `int`?
This is a duplicate of line above, so I'd remove this line.
I think we should keep this on top of the file and not just add it back in the spec.
Why is this changing? I think this is the default behavior.
I think you can drop the `toString()` here as well.
Why not just do `serialize::serialize::getSimpleName()`?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
I think we should make this method similar to `is smoothingScore(0)` and return the IOException in both cases? The current implementation looks good but it might be a bit confusing for me to understand that we do this anyway
Can this be merged with 'update-bower-json' and 'update-bower-json'?
This is an API break.
I'm pretty sure this is actually not a part of the scope of this PR, since the rest of the public classes are already in the `Simple_test` package.
I think the timeout should be an int. If it were to be a timeout then it should be an interim with an arbitrary capacity.
I don't think we want to have this in the output, since the `os.path.join` already includes this path.
This is a bit of a weird thing to do, but I would have expected the `if` statement to be in the `if` block, which will have the `if` block.
why was this removed?
I'm a bit confused. Is this the default timeout of "enable/openebs"? Is there a particular reason we don't use a timeout? Or do we want that?
I'm not sure about this one. Isn't CommandLine.defaultFactory() more correct?
Since `this.hot` is `countSourceCols`, it is not used in this file anymore.
If you're using `u_conn->fd > -1`. I'd probably use `u_conn->fd == -1` here, as we are here.
Use the new Ruby 1.9 hash syntax.
This import should go up to the top, right? It seems to be the only line that is used.
This is a bit dangerous, why can't we just call `close` on `done split` and have it take `s.debug(nil)` on the debug? `s.debug(tagr.Address)` would be a bit more clear.
I don't think we need a full list of name here. We don't have a lot of other things that do the same thing. We should be able to use this in the API and not have this name in the API and not have the `log.path` at all. We should probably also use `log.path.join` or something.
@mjkkirschner @mchaarawi @rhtyd is this a bug ? I don't think this should be done here.
Maybe I am wrong but I don't think we can set a resource name for the private resource. I'm not sure that the resource name is managed by that specific. What about something like `b.IsUnmanaged(clusterName string)` ?
What is the reason of this change?
I'm curious, what does the `original` map mean?
`permanent` will be deleted as this action is `my`
Just to confirm: Isn't the point to have a test for the new `autosensResult`?
Can we have this in a helper function instead?
Why are these fields initialized?
I'm not sure about the use of `invocation.addContext`... I think we need to keep the original implementation and change the behavior for `cseContext`.
I'm not sure this change is the right fix
Can you please add a space between `isIE9` and `isIE9()`.
I think we should make it a default case and not pass in the result.
this should be `1.20.0`
We should also use First Ping here.
Please remove this.
Why did you remove this?
This needs to be `./pants fmt` (as it was done for `data`.).
I don't think we need `plans_path` any more, since it is a special case.
This is not needed, please remove
Why is this necessary?
I would prefer a different name, but this is something we should have forgotten to change.
I think we can get rid of this check now that we are in a different PR
I am wondering whether we should rename these tests to make it more explicit, e.g. `Zhulumi previewFailure`
Might as well change line 569 to `= NULL` here too, so that it's clear what it does.
Since this test is no longer testing what we would expect it to be a single application, do we need to do something like this? The test may fail if the template changes in the navigator teplate.
I think the original behavior is more appropriate here, `text = None` or `text = None`, which is more correct.
This change is a bit of a weird addition to the code that `GetValueAsData` is being called in a single function. I think it is a better idea to keep it in the same function.
Why do we need to set `--apache-v2`? Seems like we are using that in `appliedStatus`
Please add `@Restricted(NoExternalUse.class)`
@jridgewell I have a doubt here. I think it would be better to have a constant defined here instead of a constant in the `id_pattern` of this resource.
This isn't needed, we have already covered `Rand{finish,finish}` in the `Rand{index}`
i'm pretty sure we're doing peerID here.
I'm not sure that this is the right way to go. It is really hard to tell the user that it's required, but if the user has not been already using the Rpm, it's probably not what we want.
I'd rather see these assertion on the type system, e.g. what type this is for?
I would remove the log line
In this case, the variable is not used anymore, so I'd remove it from this PR
Why did this change?
we don't really need this, we can just delete it.
Do you have an open issue for adding the trace here? I think we should be able to remove it.
This change looks unrelated.
How about `if isPluginV2`?
Please remove the extra blank line.
I'm not familiar with these strings but I think this should be a string.
Is there a reason we need to add the `windows` package here?
Is the old code still required to test this behavior?
I think it's better to use CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link + "</a>" instead of CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link + "</a.
It is not necessary to use a connection.
This is a change of behavior. The controller should be written as `controller.address`. I think this is what we want here is to prevent.
I'd prefer to see a more generic name for the `domainname` field as it seems the OCI is not allowed for it, but the OCI is not allowed for the the `dedicated` field in the base namespace
This change is not necessary. The goal being to have a default size in the loop when the value is larger than 0. So I think you need to change the condition to `if (!req->res.min_size)`.
Why are you checking whether `AppendNum` is a `char`?
I don't think this is correct, you are still passing a single version of the info in which the version is not known at the time the `info`.
This is not needed, the default is already closed
I think this is a leftover from the PR description. The reason we have to go is that if you do, we'll get the test timeout.
should this be `name: 'form'`?
I think this should be called setState()
the encoding should be 8-bit ASCII in the DB, so that should be fixed with #7186.
This should be a bit more specific, e.g. `cfg.DB.IndexDBPath` and `Chain.EnableAsyncIndexWrite`
Do we need to add this limit?
I wonder if this should really be in the global namespace instead?
can we call the function `feval` or something similar to indicate it's a value?
There are two different parts of the class that use them. I think this is a better fix for the change. The `job_connection` base class has a custom `Sports` class.
Why was this changed?
I think the `result` field should be `str` (the `result` should only be used in the `__str__` method).
@QilongTang This is the fix, I am not sure I follow.
We can use the logger here.
Is there a reason to keep the old URL?
This change looks strange to me, if I understand correctly, we are changing the behavior of `six.text_type`. Is this intentional?
is this needed?
This is a pretty trivial change, please revert
Is there a reason we can't just remove the `Escape` parameter?
What's the thinking behind removing this line?
Nit: this looks like a code smell
`respBuf` is not used anywhere so please remove it.
We need to remove the second expectation to make sure `rendered` is not `videos.show`.
I think the message should be a bit more explicit: "Failed to delete resources in %q for more information".
I think we should make the name more meaningful. It will be clear in the future if we can.
`Error saving WebCal-calendar` => `$scope.subscription.newSubscriptionLocked = true;`
Why are these being removed?
I think it is not necessary to add this property.
`OPENSSL_ interface` is not a `X` object. You need to `defer p.m.Lock()`. `OPENSSL_ interface` is an `uint`, so `OPENSSL_ interface` will be used.
Why did you remove this? We have already merged the other day, but we should probably keep it for now, as we have the `V1` event, etc.
Do you think it would be good to include the JSDoc in the docblock? Maybe a separate function for the command line?
we should log it?
(style) line over 80 characters
I would prefer to have this as a constant. I don't know if it would make any sense to me.
This is a bit hard to read and confusing. Why do we expect this to be true?
I'm not sure this is the right fix.
Another `#include` candidate for `#include "res/nvidiaicon2.xpm`
I think it'd be better to use a constant here.
`from . import _`?
This is not related to this PR, but it seems to me it should be part of the fix in this PR.
Can we put the new `notification` struct under the `resource.go` instead?
I think we should make the `name` parameter immutable
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
Can we have a partial partial for this channel, maybe `Owner.fs.paych.Template.delete(sync.state)`
I think it's not the right choice but this is the main change.
not sure why this is here
This is not the same as the `createElement` method right?
I'm not sure why this is here. The only difference is that the `p.Spec` is not a `str`, but the `Port` itself is a `cast`, and the other `cast` is used in this method.
You could also just do `node.parent.statement(node.parent.statement())` here.
What is the default value for this parameter?
It looks like this is the wrong place for this. The sleep/free is used for the `timerSleep`.
Why are you adding this? I thought the whole test was not going to change the behaviour.
This is the only case where the impl was not found in the `superlr_backend_destroy` case. This was an error before.
I'm a bit concerned that ` LoadPlainYAMLManifests` will return the expected output. Do we want to do that here?
This was changed from `ommersHash` to `fromBuilder.ommersHash`
Can we use the word "size" instead of target-size?
I think I'm missing context here. It doesn't have much possible for this. `time.time()` is the same as `latest_ts` (and the others below).
I am not sure about the name of grpcStubTypeName...
I think this should also be `ListConstants`, since the `T_223` is only used for the first time of the Trace.
Shouldn't we keep this catchup?
why not use `InstallgError` instead of `str`?
Do we need this anymore?
no change here
I'd rather avoid using relative paths, like `test_common_config`.
Isn't there a JIRA to keep this around?
I think this is the only change that will do the trick.
Is this just a typo?
you should add a `TODO` to get rid of the `js` and `puppeteerTest` below this
This seems like something that should be final.
Why not using a function for the `Expansion`?
Can we use a shorter version of this?
I think the `typedef` here should be removed?
The following two aren't needed. `AC_CHECK_PROGS(YACC, 'bison not found but required])` doesn't work for both `bison not found` and `YACC`. `ances of the code` does not work for both `ances of the `ances of the ` `Y` and `page` functions.
"Account to be used by the block author / coinbase"
You can't pass `None` to `post_group_ids` in the security_group_ids directly, just pass `None` in.
I think this should just be `Use relativePath.replace(File.separator, ".")` so we don't get a list of files in a `\n`
Won't this one throw an exception if any of the methods are not found?
This is a change of programme, is this a breaking change?
I think you can use `String#Equals(String, String, StringComparison)`
I'm wondering why the change from the gJobMgr check isn't needed
I don't like this approach, just wanted to check, I'm a little concerned with myself that we can do this in a later PR.
I think we can get rid of `emplace` now
If you change these, the tag should still be the last tag.
This will still show up if the health is set to `.doesNotContain("health")` otherwise it may not always be a health.
Is the `ICoreLogger` a breaking change? I see the same pattern for L#100 and L#100 and L#100 (`ILogger`) is not used anywhere.
This change is unrelated and will cause a build failure on the `.gitea` file to be released.
Layout/TrailingWhitespace: Trailing whitespace detected.
Is this line necessary?
Note for future refactor: `json:"from"` should be `json:"from"`
these two fields need to be `protected`
Can we use the actual api here?
Isn't this a breaking change?
Should we remove this now that it's not used anywhere?
This is the wrong approach. The `.uncommitted.Array` is supposed to be the same as `.uncommitted.Array()` (see the `.uncommitted.Array()` call below). So the `.uncommitted.Array()` can be replaced in the same place as `.uncommitted.Array()` (see the other ones below).
why is it ok here and not in line 346?
Should we also check for `running` here? It seems to me the locally and the `running` fields are not specified.
I would keep the ECSDataVersion as the default for the 3.11 feature
shouldn't this be cryptoSetupServer instead?
@logger.notify "NTP date succeeded on #{ server server" should be in the params.
What if we set None as default in the exchange class?
Do we want a warning if the key already exists? Can we do something if key.toDebug(cseKey.getProperty(key));
The "args" type is a bit confusing to me   How do these work? I'd rather have it return the same type as the first part of the "Runs" type.
The original code was actually a copy, so it should be fixed in the same commit.
What's the reason for making this name change?
nit: can you remove this extra line.
Hm, I don't know how this will work. The `get_screenshot_as_file` function is used in `raiden_to_save_as_not_not_not_to_not_to_not_to_not_to_tests` but it does not. I would recommend adding a new function to the `get_screenshot_as_file_tests` method.
Why is it ok to return here?
Can it be `json`?
Why is this being removed in this PR?
I don't know why it is here, but if we are going to get a `ReachableFiles` with a string, it would be nice if the `.setView()` could return a string that is already in the method, so it should be fine.
The "Consent" is a bit confusing for me, can we change this to "refactor"?
This should be below the imports
This seems to be the only usage of this method. The first one is `slots` but it is `long`.
Inconsistent `logging.go`, it's more clear what's the point of this change.
It is not necessary to use the first `if` statement.
Why change the number of seconds?
Nit: This line can be removed now, since we're here.
I think we need to also mark `publicLink` `private` @ssoloff - as otherwise it will not be used for any type checking.
I'd rather have a `json:"ipAddresses"` here.
I think the interface is called from `pkg/cmd/server/server/server/pkg/helper.go` - but it's not used at all anymore
this is not right.. it is the same problem, right? (if there are 2 elements)
I'm not 100% sure if it will work without the need of a separate variable. I think we'll just need to keep it, but I'm ok with it for now.
I don't understand the reasoning for this `decode()` method - does this not do anything (in particular for non-ascii characters)? I'd expect a `decode()` to return an `int` that would be returned as an error if a non-ascii characters was not returned, but it seems that it could only happen if there are other types of exceptions.
MyResearch should be a constant, not a string.
I'm not sure this check is really required here - `kind` is a `kind == TUInt` - if it is, the check may be redundant, and the check may be unnecessary.
we need to add the Workflow to the Workflow check, as it's not possible to share share-server messages.
I don't like having a mocked version of the `lib/lib/lib/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat.js` file in `lib/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat-libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/lib
I don't think we need to set it to "4" as the name.
"unsupported_property" sounds like a constant. Maybe we should just have a constant defined in unsupported_property instead?
@dvoytenko is it ok to remove the `TaskCPUMemLimit` assertion?
Isn't this a `Object`?
could you please add a space between `[` and `(` to make the code more readable.
I think we should leave this file unchanged.
Is this necessary ? It's a function not used.
Please remove the "beta"
I don't think we need to add this since the methods are only public.
Are you sure about this change? We don't use `-by` in the project for IDL.
I'd rather not do the `externalFormat` because that would be the default.
This file should also be removed.
I think this is an unused import.
If this is only used in the `AppElement` callback, why not just make `kv` a global var?
I'd rather we set it to 0.10 when it is not enough to set. If the value is zero, it will be less than 10.10 when it is 0.10.
How about adding the `Task.Run` env var instead of using the env var?
@jmhooper @rhymes I added this because we were already passing it in. I think this needs to be updated as part of the spec
This function seems to be unnecessary. The caller can pass a bool to it.
This is the only place where I was thinking of moving it into the `request` class, but not having a single `request`.
I'm not sure if this will break any user code. The last user can't see this if statement anymore.
I'm still not sure how I feel about this. I like the message "failed to close" is the default behavior. I think we want to close all the listener listener, and it's the default behavior.
@michaelkuhn Do we have any concerns about these two attributes?
I don't think we can assume that we don't have a separate exists in the first place. It might be a good idea to fix the test to ensure we have the active active.
I am not really sure this is the best way to go.
Should this just be `ok := len(s.clients) <= s.opts.MaxConn`?
Shouldn't this be called `isConnected` instead of `itself`?
nit: remove empty line
I would not add trailing whitespaces.
I wonder if we should move this up to `Wireguard.EncryptHostTraffic` since this is now the only place that uses it.
i would just use `ring.get()` here
This will need to be a tab in front of `./`
You could do a `0` check here to be sure this doesn't get executed.
> force to trade with you, right? `MESSAGE_TRADE` should be a property that is checked.
You could also make `split[1]` a method of the `.Name` here.
This is just to avoid an unnecessary copy, we need to keep the `createGrid` to be the only one that's being used.
Why are we changing the order of these variables?
Is this the wrong way to test the `merged`?
This looks like a hack to me, as it is not really related to the `clear_hashed_changesets` but I guess it was a mistake. @deads2k I don't think we should be using `setCommitCommit` here since that seems like something we should do to fix.
This is a bit weird, how about a different name?
Is there a way to make it explicit that the browser doesn't have a `urlencoded` header?
should use the `use` constant?
We have an issue tracking how we create a new unit test.
This should not be changed. You can set it to the set of `eventANObject` directly.
You need a blank line after this - it is not used.
Can `Types.BAD_REQUEST` be added to the try block as well?
Why not just `if dur <time.Second`?
I think this is a bug fix.
the Widgets is already installed on Widgets, so I think we need to make sure it's not on Widgets, it's just for Widgets and Widgets and Widgets, no need to change it here.
I think we want to log the specific meta info, as it should be handled by the MPI flag.
I wonder what is this for?
Please remove the empty line here.
`if (true)` is not needed here
Can you use `pathlib` here, too?
Why are you importing this import?
I don't think this is the right solution, it's just a thought - the `if` here isn't needed.
nit: you can call it `allowAllCorsResponse`
Is this a debugging leftover? If so, does it mean that this has no effect?
Should this be `AutotoolsPackage.version`?
Could you please change it to `logger.info("Using delegate supplier: " + clazz.getName());`
@scalablecory, does the two attributes need to be marked as `IEnumerable`?
It's weird that `err` will return an `error` when there's no `nil`.
I would keep it for now, but we don't need it for every call.
Because we are not doing this, I'd prefer the syntax `result_output.stdout << result.to_json`
I don't see the difference with the new APIs.
Why 100?
The `+c.Kill` and `HardKiller` are the same, so this can be removed.
It's a little unfortunate to have a macro for that, but I don't feel strongly
@smarterclayton is this change required?
Just noticed this, when is the MPI-specific layer coming from?
@adamjstewart And here we do not need `.pyw` as a dependency for `build_manifest`.
I don't see where we use 'stderr' here
I think this might be misleading since the domain is not nil
Is this the default behavior? This should only be needed at a higher level.
I'd suggest using `--verbose` (and `--verbose`) here.
And what about `Filters`? I think `exclude` is better here.
I think we should use a `string.encode` here.
Should we log these logs as well?
I don't think it's necessary to have this logic in a transaction, because the validator is already doing the actual data for the main main thread.
This can also be moved to the `if` block as well
Can you move `import yattag` to line 152, to line 153, then use `from yattag import json` to line 364 instead? Thanks!
Why this modification?
should we also validate that if not, we should also check for `explicitIonMobilityUnits`
This is a bit of a weird thing to do, because the function name is used in the constructor and that's what we want. Maybe something like `get_file_split_split_parts`?
`if ($routeName = $datasource->getCollectionRoute();` is not needed anymore, since you are not using it. `if ($routeName is not None === $data['collection'] {`
This is an API breaking change. I think this PR should be removed.
I guess we can just drop this one?
@jona-sassenhagen @brycemcanally @smarterclayton do we need this?
Since we're changing the logic, we can just `if (!isDB(isDatabaseFields(userProvidedFields, paths[i])` to `if (!isDatabase(userProvidedFields))`
Should we just be explicit about the `statements` in this file? It doesn't seem like we are going to be using it in the `src/workers/` directory.
I'm a bit confused by this name. I would say it's a `patch` not a part of the name, but it's just a `enforced_sample_limit`.
I think it should just be `DropVXLANPacketsFromWorkloads` (I'm not fond of this).
Can you make it `removeTransaction(Keccak hash, long blockNumber, long longId);` and call `removeTransaction()` on this line?
why is it interest to propagate?
Please put these 2 lines in the same line.
I think this is the actual fix for a while since the other are already defined in the same PR.
I think it would be cleaner if the value of the `Instance` was a dict (which could be a dictionary, but the value of the `json` may have some useful values).
I don't think this method is needed.
why not `private final` ?
I am a bit confused as to why "Wparam-doc" is not the parameter. Maybe "Please add parameter and/or type documentation."?
I think `cescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescescesces
TIL that you're using `options` here, you can just do `options[:left] = options[:64]`?
It's not an option to have a role that contains the wlr_layer_surface. It's probably not the right thing to do here.
I would call it `loadExtension`. `driver` is not available. It's a bit of a nitpick but if we do this we should probably not have the `new` of it.
Why does this need to be changed?
I think we need to use the existing `hole` fixture here
This is a bit weird, I think it should be called `user_params_results_params`. What's the difference between this and `search_results_params`?
This test is really specific to the `State` interface, and the `rescue Beaker::DSL::Assertions` is an error.
Should this default to `true` when `!== null` ?
I think this should be moved up one line
This is not correct. The only reason the test has changed is if it was set to `true`, so this should not be needed.
This was added in the other PR as well, but I'm wondering if there is a reason why the changes to the API are here. @jolivier23 is it ok to leave it as it was?
`index()` could also be `obj.select(selection_specs)`
I think the `a_number` wording should be a bit more descriptive of what "numeric" means here.
Shouldn't it be like `./content` here?
This seems strange to me. So if ` dynamo_exited_synched = false`, the zero value will be `false` then you will exit it immediately after line 165.
I don't know if there's any advantage in using a `3_1` for that...
Should be `Long bitmask`.
@johnsimons do you remember where do we use this?
Is there a test to cover this issue?
I think `s3a://'` might be too much for this particular change, since it is only for `s3a` now
Shouldn't this be part of the `fetchPrivate`? I think that it's not a good idea to have this in the `fetch` component.
I don't think this is the correct place for this.
Why this include?
Metrics/LineLength: Line is too long. [83/80]
do we have tests to cover twitter_digits.rb and __FILE__ in both of them?
Why is it specific for `res`?
Why should this be called from `project`?
Is this a public constant?
this is the only place where res.Body is nil (which was not in use)
Should we use `String.format` here, since we are using `String#format` ?
Can this be made private, so that it's only used by `PyPy`?
Can you use `as_text`?
I would not use `in normal normal `slots` in the code
this should use the constant somewhere else.
This is unrelated to the rest of our PR
This is not a part of the PR, but it seems to me that `op.op.coType` would not work here, because the `op.coType` is an empty string, right? So `op.coType.coType` is an empty string.
I'm a little confused by the `pendingHelper.run()` here - are these different values needed for the `pendingHelper`?
I think this needs to be moved to the parent class as well.
Would it work to make this a constructor argument with `string`? If so, would it make sense to have `null` as a default value?
Why do you update the function name?
change to string to avoid rubocop violation
@bparees this will break backward compatibility of our tests that have been fixed.
This will only work with non-source data, so you should not have to update the database for each entry. This needs to be fixed on the previous PR.
This doesn't need to be in the `PackageManagerImpl` folder, as it does the same thing twice. We can either use that in `PackageManagerImpl` or move it to the `yield` folder.
Are these used by reflection or just debugging?
Please remove the spaces here.
Isn't it better to use `OperationDisplayString` here?
This looks unrelated to the platform checks?
I think it would be better to check if the `signingName == ""`
should this be `false` instead of `ExtractDir()`?
You can use `if (!pathParam.indexOf(...)) {` instead of the `if (!pathParam.indexOf(...)`
I think this method needs ` VerifySignature()` to return an error.
It's not used anymore.
this could happen on other parts of the PR
Looks like this file has some whitespace issues. Can you add an example for this please?
Why are these `isort` needed?
Isn't that the same as `EVP_PKEY_ON_SOME()`?
I don't think this is the right fix here.
Do we need to add the cache here? If we are going to do that, can we make it a method of `user.id`?
If the return value is always `void`, then we shouldn't return it here.
I think `dag_file_exists` is a bit ambiguous. Why is it no longer needed?
nit: remove trailing whitespace
It seems that these are unrelated to the rest of your PR. Could you remove them?
This should be `cmsg_data`, not `cmsg_data`, right?
When will this be overridden? Can't we just call this `super(p, id)` instead?
This method is not used anywhere.
Could this be made a bit of a method on splitTableRegion? It would be nice if we could make this a method on splitItem, so that we can avoid having to split splitTableRegion in a method on splitItem, but that would be a bit cleaner.
Why this change? It's not necessary if we use `notifications` when we use it (because `error-notification` already is available in `user`).
I'm not sure if this block should be conditional on the block itself, but I think it should be handled differently in the future. I think this block can also be done in `sys.abort`, right?
This Exception method was deprecated in some places and can be replaced by a privateTransaction class
nit: this line is not needed
Please remove this file, it's only needed in `app/services/zfs/tests.py`
Nit: newline should be removed
Can we use regular precision here instead?
Wanted to double check that these values are in double negative values...
I think we can remove this method and change the one below to something like `findElement(By by)` and `ByBy.parentElement()` to be consistent with the other methods.
I'm not sure if this is the right way to do this. In `*map[string]key, value` is a field, but I'm still not sure what we would expect it to, and then I'm not sure that we should be storing the key as a member field. In `*map[string]key]` instead of the field. In the case of, we're not going to be setting up a field in `*Service` and `**Service` (which is why I left it in `*Service`), and that would be the case when the value was not a
We should make this configurable.
Is this change necessary?
Shouldn't this be `err != nil && !pl.IsRunning()`, since you'll have to check for errors as well.
this warn message does not match message body, since it was a warning (not even being logged on the client)
Space missing to the left of {.
why not `int`?
I guess this is just to make sure I understand the code, but we're not going to be looking for the type.
I think this is the fix.
I think this can stay as is since `appId` is never called.
I am assuming the current code is a good idea for this code to work, but I think we can do it for now if we have more of these code.
Why not `externalStatus`?
why `f.address?` is equivalent to `if value.pivot.map { |name| value.class.new(key: v) }`?
I don't think this is safe for the user to do. The linter doesn't like this will work for all circumstances, so I think this is fine, but I'll let you make a note here.
I think it is better to put `getAllTouch` in all the tests, it's easier to find and clearly see the problem.
nit: should we move this to after the call to `UpdateSpan`?
I don't think there is a need to make it nullable.
Is there a way to avoid using `set` if we want to do this?
Is there any other way we can check the whole object and not create it ?
Does the `Log` word "The" mean there is a space in the dot name? It seems like the message could be more explicit.
Can't we just `Async() => FlushFlush()` to be more specific?
These two lines can be combined with the one above.
if we can't find the usage of these in memory, we can skip if we do not want them.
I would not use this method in `Model\Core`. We should either add it to the constructor or use it.
This should return a list, no matter what.
Does this test actually pass without the `deserializedMessage`? I assume it doesn't have any tests for it?
Why did this switch from `kbfs` to `go`?
Why did you remove all of these? Isn't that a BC break?
I think it would make sense to check if attacked is empty and only set it if it is a attacked set
Is `components/carousel/__examples__/default.jsx` in the `exports` version of `integrationStories`?
In general I think the `scripts` should be `data_files` (as it was already in the previous `scripts`). I think we should change `scripts_type` to `electrum` because that's why the `data` change has it.
revert the above call to `driver_schedule`
This interface is not required as this interface is not shared across languages
This is the same as `attr_accessor : :text` as in the other PR: if `missing_text` is missing, it should be fine.
This should be done in the `if` block, otherwise it will be executed.
Why `Word`? I think `lodash` should be a required property?
I am a bit confused as to why these tests are needed. Doesn't `get_old_analytics_parse()` always return a different `self.project_id`?
The same here. We should use `v1.ForkRepo`
Why the `and` here?
this should be `rangeToDisplay += 6 : rangeToDisplay`.
I don't see the need for this line.
I think this should be `433` instead of `413`.
@adamjstewart Is there an issue we can reference this? It's just making sure there is a path here, not an error?
What's a better way for the constant?
Is this just for clarity? If the latter, we should probably use `pool.empty()` instead.
Do we really need to make it shorter? Shouldn't we use the same `AnyTimes()` on the test instead?
@bvanessen we can also change `and` from `parse` to `test` in `scipy_test.py` (or maybe we can also change it later, but I guess it is fine to change the test to `test_directory.py`).
@mfojtik this is the fix, you missed to take care of the `kind`.
I removed the `AppDomainFixedOutput` in favor of `AppDomainFixedOutput` because it is no longer used in the `if` block, right?
Can you make the line endings less long?
why not add it into `base/base/go`?
@liggitt, any reason this is `name`?
I think we can use `Scaler.upperCamel(String)`. I know this isn't related to this change, but the other changes are just a bit confusing.
I don't think this is right... It looks like it should be in `io.prestosql.spi.search.CanCombineWith`
Why not just call `getindex().storageclass()`?
This is the only way I was about `AsyncuvFunctions` but not here.
Is this meant to be called by `UUID`?
This one shouldn't be necessary, though I'd prefer it be called `get_additional_classpath`, not `get_files_from_files`, not `get_files_from_files`.
Maybe we should add these options to the API.
`config_path` doesn't seem to be the exact same thing as `config_path`... can we make `config_path` a global setting for other config keys? That way, we can avoid having to call `dict`, but the call site can't be used. (It's not that it matters since we're already passing this to a dict, so I guess the only thing that is currently used is that this can be used in the code itself.)
I think the only way I could find this from `flattenedTree.querySelectorAll(..)` is to always cleanup the `querySelectorAll` at the end of this query. Is that right?
Shouldn't it be `addConfigs`? I see that it was before but not used.
should we have this in `application.yml` and have it in the static initialization?
I'd like to keep the old version of the package
Why is this necessary?
Why are these new lines needed? It looks like the same code in `.env.py` already exists, but the others are `.env.spawn.h`?
This method returns a boolean value, not a boolean value, so we should check whether the resource has been paused before trying to call it.
Is there a reason we don't just allow permission to override? Is there any reason to not use `@wrap`?
I think `options` should be nullable here
I think we should use `Apply` here.
How about using the new `identifier` package? I think it should be a bit more general, e.g. `Hoodieidentifier[path]`?
I would also move `composite_root_path` outside of this function if we don't care about it being `composite_root_path` here, and in general I'd like to see a better way to handle this case. It would be better to have it be `if full_parent_name == 'composite_root/root/'):`. It's probably worthwhile since I can live with it. But that would be a bit easier to read if you could do it._
Isn't that going to break existing users who are using this?
` Checks if value is a negative `Number` primitive or object. Zero is considered negative.
nit: can we move this to a util function
can we do a constant in the API, if this is a public constant?
this file can stay
I don't think this is necessary, we don't need the flag in the middle of the flag in the test - it should work without it.
Why did you remove this condition?
It looks like this is still used in this file, and it looks like this function can be removed entirely, and is only used by the calico. If there is a change, we can remove this function.
This looks like a wrong place, since the import fails when the import is on the same line as the `grad` block.
let's use `go-algorand` instead
This import is duplicated
Wondering about this change... why is it `pattern`?
I think that we have not changed the default behavior for this, so this is not a "real" case
Shouldn't this also check that the value is not `0`?
this isn't used
Why was this removed?
if we are not using the corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding corresponding
Is it possible that _LowestInsertedHeader could be null here?
Should we have a `JmxJobJobConfig` class that accepts `Collections.singletonMap()`?
I don't think this is a bug. This should be reverted.
Why did we remove this?
I think the wording here should be a bit clearer.
Remove unused imports
Is this actually a problem? I wouldn't expect a `isinstance` method to be called when it's a `str`?
If the only only correct number of delayed is 10, why do we want to set the default to 50?
This is wrong, right?
I would use `chainIDFlag` to determine which one is actually the preferred value (it is a public key)
Is it a good idea to have a button array? If not maybe we should just make this `button[type="submit"]'))` instead.
It seems this is only used in the `is_vex32_evex` file.
This should be a static final variable.
Should this be BuildIDOSEnv = "BUILD_ID" or similar?
Spark has started?
This looks like something that could be final.
You don't need these three lines
No need for this to be a `//`?
Do we really need this?
Why public?
Does this change belong in the change below?
`sessionName` is not the same as `stscreds.`
Why do we need to import `github.com/opentracing/opentracing-go`?
The tests pass without this is probably fine, but I think this will fail in a future version of the `assert_eq()` method
This is the change that will break existing tests.
Why are we removing this?
Why this lock on the containerID? It seems like it would be more consistent.
This should be a `RuntimeException` not a `MappingException`.
why not use `25.For` to be more descriptive here?
Is there any way to make sure we don't have aYAMLTags defined somewhere else? I see that we don't have to do any validation on that.
@martint This should be changed to `executorService.shutdownNow()`. This change should be reverted as the next `WebDriver` is not being changed to shutdown.
I think it is better to change this to `new TestHiveMetastoreTest.class`, and just call it `HiveTestTest#startTest`. That way you can do `new HiveConf(HiveHiveMetastoreTest.class));` and then you can replace it with `new TestHiveMetastoreTest.class`
I think you want this to be configurable, and then you can get rid of it. You can just add the `stakingV2` to the protocol and then call the function in the `stakingV2` below.
Is this a typo?
The `value` is used to check if it is zero or not.
This is a change from the fix, not the issue.
I don't see a need for this, it seems like we should just use a different code for it. Can you please clarify this is a fix for your PR?
Is this line you need to add?
Please avoid wildcard imports. Please check your IDE settings for actual imports, and remove your IDE settings as well.
I believe the line above should be removed from `server.start()`
Can we do `timeoutControl.BytesWritten(minDataRate, maxBufferedBytes);` instead of the timeout?
Why is this special-cased?
I think this is an unused import, can you please revert it?
This log message is confusing now. I'm not sure what it means to log the wlr logs, but it's not clear what it does and what it means.
Is this still needed?
This is a breaking change. Please revert to master.
`NamedList` is not a correct name for this method
Why do we need these?
Please, make sure that this value can be used in eth_call/estimateGas.
Actually I'm not sure that we care about this but we're not doing this for all the normal users, and I think we should keep this for all ours. Maybe we could add a file called `Clump_code` and `Clump_code` to be clear in the `destroy_destroy` method?
Doesn't have to be a new config config? It is used to specify a role of ClusterSet.
@deads2k this was the default for v1.1 and v2.2?
Should we have a `Date` here?
This is wrong... This is the default in the external release.
why is this change necessary? It seems to me that `DiskGroup` is only used for testing purposes and not for testing purposes. It seems to me that `DiskList` is not used at all?
I am a little concerned about this change. I'd prefer to keep it as it was before.
This should be `editor.apply` - that's what the API is about.
It seems like this change is unrelated to the change?
I think the lint step was breaking because this module now is imported `__all__`, which was introduced for backwards compatibility with `os.environ` which is now unused.
why change the `count` to a new `count`?
What is the purpose of this function? It doesn't have to be in the model itself.
I'm surprised this didn't have the `autoinstall`.
Why not `if`?
I think the `--quiet` should be `private const`.
Can you add to these constants please?
You can use `query_args.append(versionId=%s' % self.version_id)` instead `query_args = query_args.append(versionId=%s' % self.version_id)` to avoid this work.
I'm not sure this one is right - if we're going to add a log message, we can't change it in a release, because it's not an error?
should this be a nested try block?
It'd be cleaner to check `column_fields` when `hidden_name == 'index'` and if `hidden_name` were None, the `index` value will fail, so `index_info` can't be None.
Why is this hardcoded to 0?
tag is not a tag.
I'm not sure this is the right fix. If we do, we can add it to the `download` folder, so we don't need it in this file.
I think this is a leftover from the webelem command.
This should probably be just a test. Should we just remove `dead` from `test28_done`? I don't know what the original intent was here.
Doesn't this need a migration as well?
This test fails because there is only one success color that is set. In the `spec/controllers-zone-tests/unit_test.rb:3,2,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,4` tests we set. I'd prefer to not use a single `spec/controllers-zone/fixtures/unit_spec/fixtures_to_spec/fixtures/fixtures
This is not needed. `address` is also used in `User` and `User.toString`.
I'm not sure if this is the best approach, but if it is, it should be removed from this class, right?
Should this be `Headers(DefaultDefaultDefaultValue)`, not `Headers(DefaultDefaultValue).ToString(DefaultDefaultValue).ToString()`.
This should be only called if ($cart is not empty and is not empty. We should only do it if ($cart) && ($cart) && ($cart) && ($cart->isEmpty())
@matt-gardner Can you please review this change? It looks like the existing code is only testing for LITERAL_FIELD.get(leaf) and the next line will fail.
Can we pass in a static func?
I assume that we should probably keep this to `1.1` and make sure we're not using it anywhere else?
I think this test is not needed anymore. You can check if `get_app_settings` returns the right answer.
This looks like a duplicate of line 156
I am wondering if we should log this at some point so users can see what it does. It would be good to know how to get the right error message.
Can you rename this `BlockMultipleane` to `BlockMultipleane` for consistency? I don't see any usage of it being called anywhere.
This is probably the wrong place for this. It's a bit of a guess - can it be an array of items? I think the latter would need to be a `TODO` for that.
I'd prefer to keep the `TODO` on the next line (which I don't think we can do)
I think that we don't need `parse` here anymore, since we don't have a `IAws` anywhere.
This should be called after `update_policy`. `incoming` is the default for the `incoming`, but I don't think we should be passing the `self` as the argument to the `incoming` argument.
I'd be tempted to use "this (window = window)" here.
This is not the same as `props.selector`. I think we shouldn't be changing the API here.
`_` can be simplified to: it's `!IsGenesis ?? false`
This file is a no-op version of the PR
I think we should be able to get rid of utf-8, as the default value should be utf-8.
I would put this into the `__init__` list above. We should at least be consistent in the rest of the API.
@stephentoub I think this is a bug that fixes it.
This should be a debug message, no?
Can we have a test for this?
I think we should rename this test to reflect the new testing.
I think you need to keep the checker in the same method as the parent (and similar) as before.
It's not obvious to me why we are doing this. If I'm not mistaken, it seems like we would need to create a `create_database` method.
We should keep the old name and add a check here. It is used in the `getNoDataComponent` method so you don't need the `error` check.
... should we have a validation set here
I'm not sure if this change is necessary, or if we should just pull this into a constant?
There's a space missing before the concatenation here.
I think we could just make this `_` and `_sfdr` (or similar) with an `__file__` (and `__init__`)?
why do we need this one? I think it's used by Rajtar on 05.11.17
It's probably fine to move this logic up here, but it is going to make sense to move this logic into `Model.text()`, which is a bit more readable. I think that it's better to move the logic inside the `if options.strictPopulate == false`, so that it can be simplified to `if options.strictPopulate == null` check in `Model.text()` as well.
@matt-gardner How do you think this is a bug that we should be using the `Builders.Build.A` ?
Since we're only using this in one place, I would probably make this a helper function. Something like `append_newline ? %(#{str, specify_backslash str : preserve_backslash_string)`, and then use only one name for `gs_backslash` in the other place.
Do you know why this is necessary? I don't think this will work with JPA app that uses the `PipelineOptions` attribute.
File is not really using any basic files to provide a better way. It's not a good idea to use the generic type.
you probably want to use the `pip.checkNotNull` method for that.
Why import twice?
We should add a `TODO` and `TODO` here.
I think we should make this an enum, and have it take the value of the boolean. Otherwise, we can have this value in a constant with a name.
Please don't go adding spaces here.
can be a separate line
This pylint disable is not needed. It can be avoided by adding a `violations-tablename` dependency on line 112.
What if we made this a separate change instead of creating a separate counter for exercise? That would allow us to avoid mixing up all of the exercises and having two methods in this file.
Why is this needed? It is not needed.
why not using compute_max_num_ black instead of revisited for?
This is a breaking change in `oc get`, and it will change the way the feature is merged.
In the end you changed from `false` to `false` in this file, the way it is implemented is to change these test failures, but the test is failing because it will be the same as the one passing the key.
We don't support old clients, right?
Why remove this line?
Shouldn't this be "cli-input-yaml" ?
@mjkkirschner @dvoytenko ? Is there any way to get the behavior from `Task` to `Task`?
Why this import?
I think this can be a little more specific, since the `RuntimeException` can be an attribute, and that's the reason for not using a specific `get` method.
This line was necessary for backwards-compatibility :) Thanks for fixing it.
This should be `if len(country) == 0`
This line should be removed. QButtonGroup should be the same as QButtonGroup.
If I'm not wrong, `stop` should be enough.
I think `protostuff.runtime.model` should be moved out of the `if` block.
This was a bit of a nitpick but I think it would be good to refactor this a bit more so that `reason` or `user` wouldn't have to be a `nil` value, but wouldn't `nil` have to be a `reason`?
You can use `CatalogCatalog` here, since the class name is only used for testing purposes.
This one was not doing anything, right?
It doesn't seem to be the exact same link for adding only one link.
is this used somewhere?
Shouldn't this be `s.Logger.V`? I think that should be the first thing in the chain.
This one is the main purpose of this PR - it was done to make it more explicit.
I'm not sure this is a reasonable choice.
I'm not sure this will work. It's probably not the case anymore.
This was removed as the first result of the PR was to remove the `fixedWidthBinaryPageReader().nextBatch(vector, expectedBatchSize, holder);`
I think we can remove this from the manifest since we're not using the manifest anywhere in the manifest anymore.
Do we still need to set `pin`?
Should we also add the endpoint for `Head` in `registerDriverCommand` ?
Why is this import needed?
This is a little odd, can be fixed
Unless there is an issue with a directory, this should probably be `@private`.
Do we need this line?
`nodes` could be a virtualTree object.
I would suggest to use `brmd.SetBranchID(bid)` instead of `brmd.SetBranchID(bid)`
Nit: this should happen on the line after the if block
Why not make a `config` var and use that in `NewExporter()`?
why not currentPlayer?
What does `:unsubscribed` mean?
why is this a property in the agent if it is not only relevant to the agent in the registry?
Can we make this `private`, and use the same constant for the parser?
I would also say `!GoldenRetriever]`
I think this was supposed to be `0`?
The way this is a nil error, we don't need a nil check.
Do we want to keep the next PR?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
why we are changing the tests?
`pkg/util/slice` is not used.
Can you remove the new line?
This will fail on merge
Are the original `NULL` here necessary?
Is it worth it to have an attribute for this string?
is there any way to get the owner of the output? i guess it's only here?
Is this the right way to specify the `SERCOM0_USART`?
This will break anyone who has added a new dependency.
This can probably remain `.reserve`.
This will be a lot of tests, right?
nit: I'd prefer `AssertEx.IsTrue(importPeptideSearchDlg.CurrentPage == ImportPeptideSearchDlg.Pages.match_modifications_page);`
I think it is better to move this to the `registerSchema` interface.
I don't know why we are not using `/` in the version string.
Why are we returning an error?
@jackfrancis any idea why this is the correct thing to do?
Remove this line
end at 11, 4 is not aligned with if at 7, 23.
I'm not sure what to do here, but I think we might be able to get the overloaded method from the base class if the record is already in the `Data`.
This should be moved to the `@SuppressWarnings("unused")` section.
Should we make the same change to `connScan := ...`?
This should be should not be part of the fix, right?
I don't think this is the proper way around.
It seems we should only do this if `ctx` is true.
This should use the standard `WPSEO_CONFIG_NULL_DEFAULT` constant.
I'm not sure if this is the right fix for the error message.
Is this line needed? It looks like the only thing you set is in the `if not self._write_packet(p)` block below.
I'm wondering why this is needed, even if the source is not initialized.
I don't see how you can remove this. When you add a `lvis_v1_instance` instance, it is not used.
Please, remove the space between "=>" and the closing parenthesis.
Can we just use `ConfigurationKeys.FeatureFlags.AspnetRouteTemplateResourceNamesEnabled` here? It would allow us to use the default config property as well.
I think this is not needed, as it is already used by the `TaskMetadataBurstRate`.
Since `total_instrs` is always 0, this check can be reverted to `total_instrs >= 1`.
This type can be reverted.
I think it would be cleaner to make the types more readable and pass in the annotation to `Blockly.Workspacesvg(e, this.getParentSvg().prototype.isOutside)` and then the type of the subclass.
why do we need this? Don't we have to worry about local participant?
@philbucher I don't see any code using `wit` in the code anywhere that the writers was created in the `unspecified()` function.
This is the change that breaks the test, but was it a bug? Are we changing the test?
It should be `permit_params`. It's the same for the `permit` route.
why not move the `if not result` up here, to avoid having to have the `for` loop entirely?
Can you explain this bit please?
It is better to use a mock. The `Map` is used in the tests.
do we need this as we already do with `bool`?
We could use `string $aliases = '/'` here
Is this safe in the first place?
It's better to call this `ListEvents` since we return the error.
can we test the sqlcipher version instead of this test?
This is the only change that will make the build fail because of the build failure. The build didn't have to do this, so I don't think you need to add a new option to set `binlog` in `__init__.py`
@chlowell I think it is better to add a `visit_open_url` method to `send_cmd` to get the url from the caller's `visit_open_url` function to do this.
I don't think we need an `unresponsiveTimeout` here. The `10 * time.Second` is a very specific one for a particular query, and it's a different one for a `net.graphsync_fetcher`.
The value is zero because 0 is not the correct value.
I removed these because these are used in a few places, maybe we can move them in one place if possible?
I think you can just call these packages with the other `go-sql-driver/mysql` imports
Use 2 (not 16) spaces for indenting an expression spanning multiple lines.
I think this is the only place where we're not calling this method.
The `+=` is redundant here and in the `scribers_:"` below.
Can this include be avoided?
I'm wondering how this works. `form_type` is only used in `sys.py`? Why not only do the `form_type` of the view object?
this file is now useless
Let's remove `onCompletedCalled` too, it is only used for tests.
I'm not sure why the component is empty here?
Maybe put the `for` loop below under `model.optimized_action`?
How is this different than before? I guess it's not an issue, but just want to make sure I understand the issue with the enum EncodingType error message, and if we can't.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is there a reason to use this `ProviderProvider` rather than `ProviderProvider`?
Since we are removing `x` from `core/events`, we could remove `x` and just call `x` from `x` to keep the old alias consistent. I'd say that we could just remove these. Also, `x` is the default value for `x`
Hmm, I'm not sure why you added the `ax` parameter. It does not look good.
I don't like this approach: `self._bump_and_store_timestamp(collection_id, record, *collection_id, record, *modified_modified)` I think you are not checking the type in the `timestamp` method?
Shouldn't we just delete the `MemoryDiagnoser` local variable?
I don't think this is correct. It's a bit weird that the `FieldPath` is the correct one and we're passing around.
This check is now done in the above block. I think it would be better if we moved the check in the `if` statement above.
Should be `protobuf/protobuf`
Can we add a TODO here about these new properties and docs?
I'm not sure if this is the right place for this. I think it's better to use `StringValue` instead of `inputValue`.
Please remove the space before the `,`
I don't like the idea of passing common.HashLength to the channel. I'd rather have it take care of it and use the same logic here. @alalazo @mheon
Why not just move to `if (node.getStatus() == Status.KILLED)`? Then the next line would be a bit more readable.
How about changing to `NullPointerException` to `NullPointerException` instead of the `use` ?
I don't think there should be a newline above this namespace.
Was there a reason to make this change?
this is temporary, we should log the info about the info level. Otherwise, the info level will be printed and the info level will be executed at the same time.
I think we can move it to `utils` package.
@deads2k i think we can replace this with `isHydrating`
Nit: We usually do not use a single `//` for the end of the `//` so you can remove this line :)
do we need to copy all the pool in a non-zero pool?
I think it is not clear to me why this is necessary?
Please remove all the spaces in this line
@pgavlin Do you know why thisStats is a good place to change the behavior of this PR?
I don't see the lint policy in the code base.
If `init.go` is `nil` why do we need to do this?
These should probably go to the global axe right?
I'd suggest `if UnsynchronizedStaticMessageDigestRule` to be consistent with `uninitialized()` methods. Also I would prefer a single boolean flag for the `IntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationDelegate`, `IntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegration`, and `IntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegration`. In the `IntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegration` class, we can also check for `IntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegrationIntegration
@jona-sassenhagen this is the bug that fixes this. I think this should be `Keccak.Zero` instead of `Keccak.Zero`.
This should have a default value. If so, you should use `object[]` to avoid the empty array. Also, I believe this should be a set of valid values.
This is not used anywhere else.
So we don't need to pass the `prefetch` in the error message, since they are not accessed by other scopes?
Prefer C++11 `map{ |m| m.to_sym }` over `mod.instance_methods.map{ |m| m.to_sym }`
Is it possible that this is a test? The rest LGTM and I'm not seeing where the test is actually testing the behavior of this class.
Align the parameters of a method call if they span more than one line.
Is this change necessary?
I think this is the only change in the changelog, so the new copyrights should be removed.
We should probably keep this function in place, to make it easier for users who don't need to have it in this function.
Can we remove these 2 lines as well?
This is not needed anymore.
What happens if we just add a `newAccount` field of the `if`?
This is just to remove the code that is used in the test.
I'm not sure this is the right approach since the other code is being compiled in the code. If we're going to do something like this then we should be using the interface to avoid the need for it.
I think that `_` should be on a new line.
`parent_of` doesn't need to have any arguments but it's a single `select` method.
What does 'promise' mean?
It's fine to move this logic to a separate file and then just do `setupDev := false, mount.RunDev(config *configs.Config, 's')` in the `setupDev` object that is used for the `setupDev` object and it will be a no-op if there's an explicit member or a no-op. This will make the code much more readable.
We should add the `config` field to this package. Otherwise we'll show it as a `help`.
receiver is not a issuer?
I don't think you want this in S3, since it's in the automatic module
This is the reason for not using ErrUnderpriced for the same reason as for ErrUnderpriced for the payload payload...
I would add a `opts` to the top of the file.
We should keep the old signature for this method as it was before.
Why we have 3 times? Is it always zero? If so, we could make a small timeout of `cs.dirty.CAS(3, 3)` in the future.
It's a matter of style and we're not using the style guide here.
Are you planning to import this?
I think the `typeWidth` should be renamed to `isWidth()` as well.
I think we can use `encryption` when in the future, no?
This is actually an API break. Can you put it into the `if` block?
I'm not sure why the code worked before but is this part actually needed?
I wonder if this should be a bit more specific, like `proto.consensus, ok := config.Consensus[protocol.ConsensusCurrentVersion]` or something.
Do you need to update this?
This should be the last PR.
This should probably use the `Backend` variable for the client.
>vmultiplier [](start = 40, length = 19) Is it possible to have multiple things for the same thing?
why not `Organization` as default?
Metrics/BlockLength: Block has too many lines. [32/25]
We need to keep the old one. It's a bit ambiguous and it should only be changed if we can.
This parameter `number` is used in multiple places.
isn't it better to do this by <2.2.0?
I would keep this test in the code. This test doesn't seem relevant.
Is `$formEngine` always set?
This should not be needed. The type should be `DataType`
I don't think this is needed. It will just render the storage, but the storage will still be running in the renderers.
We need to export a var `bundler` here.
Why do we need to pass `getResourceReference` here?
Line is too long. [82/80]
combat should be non-nullptr here.
This seems to be unused, can you remove it?
I think this import is unused, and should be removed. The reasoning is that if we don't import this we should remove it.
I think it would be better to use the ` TracerProviderBuilderSdk`
`v` could be nil if `t.KeyValues[j]` is set.
If you don't have to create the requirement here you could simply remove this entire class.
I think we should move these services to the module module as `auth/auth.go` and `auth/auth.go` We need to move them to the module module. It can be a breaking change.
I'm not sure this is the right approach, because this is not used anywhere in this pull request... it is just a thought..
This is an example of how we should remove this from the code.
Shouldn't be imported here, `net` and `net` below the imports above.
@benzonico what do you think about this? I think we should be consistent and say that in the future we should change the `next_payment_amount` value. We should also change the `TODO` to make sure this doesn't break anything.
it is odd that this is not a stream, so we should check that the stream exists and not have it.
Since you are already changing the order of `javax.tools.system.JSON`, this should be removed too.
Can we move the command back to just after `executeexecute` ?
I think this should be "Expecting a numeric status code or '*"?
Rails/Present: Use if ! unless ! is.
This should be just `/* XXX i#3307: unimplemented, we can can't be mangling cases in the future.
If we have to make this interface public then we need to make sure to update the existing usage.
I don't get why you change line 275 to `bytes.fromhex()`. It's the only reason you changed the loop.
Should we use `isBack` here?
I think this can be removed, if we are not using it yet.
I'm not sure we need this change, it's a very good idea, and I think this should just be `->`
Can you add a JIRA to track adding a JIRA to track fixing this (and similar) public methods in `getDruidListener()`.
Could we use some kind of `refs` to make it more clear? I don't think it matters much, just a thought, but not sure if it is worth it.
@mfojtik @jmhooper @martinkring this is the right change.
I think `Resolve<IMvxChildViewModelCache>().Cache(MvxViewModelInstanceRequest)` should be sufficient here
Isn't this still needed? It wouldn't be necessary to catch any `exc_info=True` when it is being created.
I know this is not your fault, but can you remove this empty line?
This import is unused.
Can this be merged with the one on line 74 above, or does the same `System.out.println` above handle it?
It's a little strange that this is set to `c.serviceGatewayFlow(true)` when `flows` is `nil`.
No need to change this, these 3 lines are not needed
It's not necessary to add `@typescript-eslint` to `eslint-esended`.
I think this is not the wrong place for this, since the defaulting of the `addons` function is going to be used as `currently off`.
I think this was intentional?
is this a different code?
Revert these two import changes.
This should be in `setSelectedElement`
is it possible that the logging is still saved in the `logf`? would it be worth logging out the `logf` at the beginning of this function instead?
@mraible is this the right place to do this ? I am a bit worried this will break existing deployments, but I don't have much better ideas :)
Should we add a check here that it is not a valid default state? I mean, why is that a valid default?
Can you make this a `map[string]*SidecarConfig `
Why is this necessary?
`actions` should already have an `_super`.
Maybe this should be done in the `if (c._vnode._vnode._c._location[0] == null)` check?
I would have put the debug logs here. It would have been easier for debugging when you don't need this check.
Can we add a warning saying this is not correct?
I think this constant should be a constant somewhere, it's not a constant.
`minimum.Revision` doesn't have to be in the `if` block, right?
@steveharter would you mind removing this line as well?
The change to `lat_count *` in `XXX.h`. Why do we need to use `*`? I'd prefer to avoid the double pointer here.
This should be put into the `else` block above.
@dain1b60404b8 I think the variable `MockObject` should be renamed to `isChildren`, as it's not called in the code.
This is the fix for the `including` blocks, so I think this was the reason why the test fails.
why do we not want to support empty string here?
What about the `der.exit` here?
this needs to be a `else if`
I would add "none" here to help clarify what "addTo" means.
I don't think the port is a good idea. It might be a good idea to log it at the bottom of the log, and then log it.
Please remove this.
can we have it as `@Trigger` or something?
Hmm... why is the `+config.Target` not needed anymore? Is it just `targ` or `+conf`?
Should we call `AuditRPCWithTypesStatus` in case `ctx` is nil?
nit: can we call this `const`
We shouldn't TODO the whole thing
I'm curious about this change. The original code was written to have the final keyword argument.
`to_string()` doesn't have any parameter in this function, please use the new style `to_string()`
Is there any way to make `Marker` a `Perhaps `Appenderator` and `Appenderator` both return a different value than `0.5s`? I'm not sure whether `BeEmpty` is the best idea.
This should be handled by the async_userWriterList.push_back(), which expects a write_back to be called when it is not async. This change would be unnecessary.
I'm not sure about the point of this, since we are not using `NoArgsConstructor` directly.
This is not a valid `location.interceptor`. I think it is better to move it to the `location.location` module and just call it here.
Why not just `QueryElevationParams` and `ELEVATE_DOCS_WITHOUT_MATCHING_Q`?
This change will break all the other code, as it's not related to the issue, but it's just a fix to the bug.
I would prefer we do this in a separate PR.
I think `ipfix.NewIPFIXCollectingProcess` will do the same thing.
Why are all these `num_simd_saved_abs` and `num_simd_saved_abs` needed?
This should be `2.2.1`
why not just add required_subject to the test as a parameter?
Please revert this change. It will break existing flows.
I think this should be an explicit check, and not an error.
Why `__time_package__` is not used?
@agramfort this is the fix. I think this is a good candidate for a test, since you can't use the present version when you actually use the template.
Why do we need to controlplane?
Won't it be cleaner to set this to a list of notifications? It would be more informative to have it be an object of notifications.
We could add a note that this is a new column in the PR, and that this should be removed in #5046
this should be a flag.
nit: I think the formatting is wrong. It should be `\d`
@jglick Shouldn't these constants be in `reg_decoded_bbox`?
I don't think we should change anything in `VersionKey`.
can we remove this?
@wachterjohannes Is there a way to make this more maintainable? I can't recall if there should be no references to it in the `env` module.
I wouldn't expect the `self.assertIs(Invariantvariantvariant(...))`, and if we do, we should use the the names in the `self.assertEqual` method.
Don't change the text here.
The goal of the read-only `c.populateVersion()` calls into a `go`, but I think we want to make sure we don't use the version `goVersion` calls.
`getAddressDetails` does not return errors as `hashCode` does not return `nil` for non-interactive errors.
Should we just remove this?
I'd prefer it was `this` but I think it's a little strange.
Please use `String#Equals(String, StringComparison)`
Is there a reason you changed the variable type of `array` to `MetricKey`?
Is this used?
Could you please add a `TODO` to remove the empty line?
This will not work, because the server-side isn't implemented in the set
Please don't change that. We are using the default value for every invocation.
I'm wondering how this TODO could affect real tables. Is this a fix for a ticket?
I think we can get rid of this `info` and call it `info`. We could log the warning and the log it.
How do you feel about this change?
We should probably have a test to cover this case, if this case is not true.
Can you explain what this is doing? This is not a big deal for us, but I think it should be a little less confusing to understand why this is not a hardcoded part.
@jridgewell do we have a better idea of how this would work? I would have expected a `@Nullable` to return the default, which I think would be more useful in case.
We don't need `getStandards()` here, as `i18n` does not need to be called by the `buildCallback`
Why `irregular_dims` is used here? I don't think it's necessary to include `irregular_dims` in this array.
this should probably have the same effect as in `CreatedId`, right?
@mjkkirschner @QilongTang What do you think about making this `layoutCallback` or just `padding: 0`? The value can be different from the original `td` - which is the case, which is the default value.
Is this include needed?
we should probably add this to the end of `LocalModifier`
Do we really need this? I guess it's just a reusable name, I don't think we need to have it here since it's a public API.
TIL you can call `_clearfix` now
Can you please remove the extra `[` on this file? It doesn't seem like we're using it anywhere
I think it would be more appropriate to always check for `results`. That way, `register()` and `register()` can only be called once and only once.
this is wrong. We don't have to explicitly say 'schedpolicy' in the 'schedpolicy'?
should we do this as a random generation?
This is the same code as in `<=` (and the `name` of the `secure` is it just being used as a class method)
I'm not sure this is the right way to go. I think it's better to use `ExpireTableMetadata expireTableMetadata`.
Why is this being a struct? Is the interface type sufficient?
This is a little confusing because we are using `return receiptLog` to be a reference. Wouldn't that be better to return a reference that returns an error?
tls and commit messages should have a trailing comma, but you can't enter them at the end
I'm not sure if it is good idea to have OC.getLocale() defined twice, so it would be more efficient.
I think this is the wrong place for this method. The value of `returns_string`, not `interface1`.
This function is not needed in the UI, you can remove it from the UI.
as discussed, let's remove the `!allocate`
so, in theory, we don't need to know the eval passed to the form. This is a bug in the eval passed to the eval
What is this TODO doing? Is it a Otlp-wait-wait-wait-wait-hire or something?
This is a good candidate for using a container.Image
is this log line necessary?
This is a bit of a weird place to put this, I guess we're not going to be doing anything useful here.
can you check if devName == "dev/sda1"
@caitp: Ah, I'm not sure about this. Does it make sense to include `fstream` in the `__init__` list?
This is not a great method name. It's better to have a method named `localExtension`.
can you move this test to a new file and put it in `pkg/common/configurator`
What is the purpose of these changes?
Does this work for the `myId` field field?
Why do we need the `!=` check here?
The `v` is a plain `nil` error.
I think you can get the include of `\n*` here.
I don't think this belongs to this function. We should return a promise in the `export` method.
Is this needed?
Use the new Ruby 1.9 hash syntax.
nit: maybe call it `bootstrap.noConflict()` to be consistent with the naming
This class has to be renamed to `CartItemTestCase`
Should this be an error if a cache is present, rather than an error?
I am confused. Why do we need this?
Should this check be done in both cases? If it's quiet time and notifications are quiet or notifications are disabled, why not?
Layout/AlignHash: Align the parameters of a method call if they span more than one line.
If you're going to have `in?` out, you can do `--force_private?` and `--force_private?` instead.
I'm surprised that `GetActiveApp err` is the same as `/v/gobblin-service/past.go`. Can we use one of the `v/gobblin-service/` to make this clear?
"TLS or solicited routes will not be verified"?
Please use the constant from the test configurations
why the formatting change?
No need to check for the return value if the initialBase was set.
The `EC.element_to_be_unclickable` calls should no longer be needed.
This will need to be added to `File` interface. It will be used in a future version.
I think I would just do a `Date` and then do a `Date.prototype.date` on the `Date`. This way we only need to support customizing on the `Date` object in the `Date.prototype `
Why did you remove this?
We don't use `kubeedge/beehive/pkg/core/context` anymore.
This will be removed in 2.0.5
@dvoytenko: What do you think about using your API to set a default value for this? The user could still use the `detailedBolusInfo` to check the value.
Is this still needed because the `httpHandler` is never `None`?
Extra empty line detected at body beginning.
why do we need this?
I'm not sure if we should do that here, because if we do, then it should be possible to do something like this. If we're going to do something like this we should do it in a separate PR.
@mfojtik @tannergooding - we have to update `sarararif-1.0.0` to check if it's not a valid package.
Is this change necessary? It looks like this change has the same problem.
@rhatdan @tnozicka I think you can remove these now.
You could use a single `map[string][]string` for this.
I think this should have a `toPath` method, to avoid creating an unrelated exception
This was actually a bad workaround.
Why do we need this? Shouldn't we just load the element from the context and let the user know about it (or not do it if it is actually a element) and then call `select(newElement)`?
I would call this `isInstall` for more succinct.
commit is no longer needed after #include "commit.h"
Why wait here? It seems like it will be 5 minutes if it's not a timeout?
This should be done in the `buildCallback` of `buildCallback`, I think.
why do we need to make these changes?
This change is unrelated to the change here, but is not related to this change ?
Why not just call `AutoReject` in the `KeepTraces` function?
This should be set to a different directory.
We should use `type != 'procedures_prototype'` in the rest of the code base.
`r` can't be passed directly, since the first argument is `private`.
Please remove this space.
I don't think this is right. It will process a `StackTracer` in this case as well.
why change this one? It was changed in this PR?
I would move this to the "official" section, so that it doesn't lose the "official" section
I'm not sure we want to do this here, but can we just do a `stack.value()` instead?
Why not just return the empty string?
const -> an
I wonder why these changes are needed. If you're going to remove them from any `app/api` why not remove it completely?
I don't see a value in making this a string. What is the code for not using this? Is it used anywhere? If so, I don't think we should change it to something like `string::string::format` or `string::format` for consistency.
I don't like the explicit `t` -- it was used for some (eg. `t`) and so I don't think it's necessary to get this working.
Should this be a "SafeAreaInsets" ?
Just to clarify: Why does this require two allocations, i.e., why are we converting the email to one of the dates?
This is also a bit of a hack, but I wonder if it's worth a little more explanation of why we need a `destruct_thread` flag. I'm not sure why the `according to the point of the `according` flag needs to be set, since it may be a good thing.
`log_path` could be passed in as a param to the `__init__` method. It would be a better name.
I think we should add a `TODO` to remove it if there isn't a bug.
The error here is a bit weird. How about we just return `int`?
can we name this `all-apis-forwarding`?
Shouldn't this be `custom`?
Why do we need to do this for the cluster cluster version? This will avoid the need for the cluster version to be a string and will not be a valid file.
Why loadingUrl.getHost() can't be null? I think loadingUrl.getHost() should be a constant. I'm not sure if there is a better way.
Note generally it is not used.
I'm not sure this will be confused with other schema schema in the schema. For example, if I set `createSolrConfig` to false in `SolrConfig` then this will be removed from `SolrConfig.ErrorCode.SERVER_ERROR`
We don't need the license wording anymore?
How about mentioning this in `ModuleModule.Module`?
Maybe `AWSRegion`? It seems like an error in `io.premule.test_common.AWSPeer`, and the logic below should be `if config.AWSRegion == ""`.
The `version` keyword is redundant here, since you set the type of the tuple to a string, which is already the type of the tuple.
Hmm, can you explain why these changes are needed?
go is removed
This is now always `Pundit::NotAuthorizedError unless ! ! !(asset_user.can_org_admin?).orElse(send_user.can_org_admin?).orElse(send_user)`. This will simplify the code to use `Pundit::NotAuthorizedError unless !(asset_user.can_org_admin?).orElse(send_user)` and the `verify_authorized` check below. (We can do the same for `API_user.can_org_admin?` check and use this method to `after_action`
This check can be moved up so it's done twice.
This line does not appear to be necessary, it is only for the `collection` test.
nit: `open.selenium` instead of `time.Second`
Why was this removed?
What if `name` is a list? Shouldn't this be a list? Also, should it be `Countly`?
Is it a breaking change?
Dict is not used anymore.
Remove empty line.
Why are we using a cluster here and not use the local?
This line is not needed anymore.
If we're going to make this change, can we get rid of `raw`? Or maybe it's not required, just the `./pants run`
Should this be initialized with null?
This should be `#if NET45`.
Why not return here
I removed these since we no longer support `Accept-version` as a dependency.
Please use `String#Equals(String, StringComparison)`
I'm not sure this is the right place for this. It will be very helpful for every single environment. The problem is for the environment variable, not every other environment, and not everyone is for a random random environment variable, so it's probably not worth the effort.
Use `getConfig()` instead of this loop.
What's the purpose of this type?
I think this should just be a retry. We want to return error. We're going to be looking at the `apiErr` error code, so we can get the retry.
Why do we need to change `ARM` to `User` here?
I think it's not a good idea to keep track of these.
const reference is not needed here
How about moving this logic to the `export` package?
this should not be done here, if `hooks` is not a clone, the `this` is never null.
I'm not sure about the idea, but this change is not needed. The default value will be bool if the value is `nil` (which means that the value will be `nil` or `false`).
I don't think this is needed, there are 2 applications of 0.
This is a change of behaviour. This was a bad idea (I think) in order to fix the bug, and it was not working before. If the goal was to remove any data, it should be fixed. If it was just the case, we should add a backlog string to the `crash-data-subrow`. If we can also fix it, then we could also make a small change here.
`assertEquals()` is no longer needed.
Should this be `nil` for `i18n` rather than `x`?
what does `0` return?
This should use `defaultTitle` and not `non-null`
It seems `SampleType` is not used anymore.
This will always return an `int _ _result` so we don't need to return a `char *` for the `(char *)` case.
I am not sure if this is the right place to put the key.
It's not a big deal but this needs to get resolved in a test.
fix that! this gets merged
`tm`? Why not `fetch_int_to_string`?
this is the only line I mentioned earlier, it is not related to this PR.
the `npController.networkPolicyListerSynced` seems like an odd choice. Shouldn't this just be a `SetRegion`?
Since this is now a `mongoClient.s.options.autoEncryption.cryptdConnectionString` right?
@lezama do you think it's worth to create a new function for this so we can switch on it to a minimum?
`Runtime` uses span id, not span id, so I think this is better.
This is not a bug. The problem is that the value of a queue will never be cached and a message is because it can't be re-assigned, but it doesn't mean the message will be printed to any queue.
Is this a change in behavior that's what we want?
Can we have a test for this new parameter?
Can we also add this to `interface_interface.rst`?
Is this related to the PR?
I think we should just keep the `contribute` option as well.
`string text` is `null` so no need to `Error` here.
Why are we not setting this in the main config file?
This check is not needed anymore, or at least not needed
I think this is the wrong place to add the `errShouldUnload()` call since we're not testing that the block is not found.
I don't think we need a new topic for this. I think it should be in `Topic.find_by_slug`. It's a topic that we want.
This isn't used anywhere.
execution is not used, we can remove it.
This should be done after the validate call, right?
I think the `ctx.Duration` should be a function that can do `New(clientServer)`?
`if (hasQualifiers)` is always true since `if (hasQualifiers)` is false.
Should we also remove this line?
Please remove the extra space
I would have named it `linuxOS_SERVER_2019_CORE` because it is more clear what the default is.
This seems wrong to me. When we're using it, we are using the `array_filter()` method to return the `empty()`. If we want to make the `array_filter()` public, I think it would be more readable.
@matt-gardner, does this change mean "UIA.UIA_notification" is the right thing to do, and the original behavior is a bit confusing?
Is the password still required here? If not, can we just remove it?
Why did you remove the `if` here and below?
You should use `Text.standardize` here
Can we add a `defaultdefault` with a default value instead of `false`?
This is wrong and can be moved to the `source_*_DEBUG` method.
I wonder, if the type is `api_quota` and the config setting is `get` if it has a config set?
I think `javax.precompile.gascalculator` is better than `javax.precompile.gascalculator`? I would think this would be better all in `AbstractMessageFrame`, as `@SuppressWarnings("TODO")`
This was the only way I could find where this was used.
It's not possible to import this at the beginning of the file, and then import at the beginning of the file in `apy.autorun` in `__init__()`.
can we make the changes to the sourceTableTable final instead of the targetTable?
Nit: this should probably be a pointer, not a pointer, so it's not a blocker.
I'm surprised this didn't have `Options` field. I was wondering if `Config` could still be `Options`.
We should use `io.prestosql.spi.httphttpexceptions.httpexceptions` here.
This should just be called `GraphQL` (and the `if` above), since it only includes the `PATH` (see the `.GraphQL` above), right?
Why this is now handled by the caller? I don't think there's a need to change it.
Is this correct?
I'm not sure if we want to make this configurable?
Why is this needed ?
This is going to be hard to debug.
`DistributionFilter` and `int64` don't seem to be doing anything, I think it's safe to do `(int32, error)` in the `UpdateShards`
Wanted to suggest that there are a couple of lines above that are actually const-delimited.
Can we do it in the constructor of `cls.warning` and `cls` instead of just `cls`?
@jcotela I removed this because this was an error in `.new`
This is a bug fix. If you want a `--listen-host`.
this is not a map, right?
why not remove `bool`?
there is a `str` above here that can be replaced with `<`
This would be a change in behavior, since this is throwing a fatal error.
I don't think we can remove this, we can remove it from there. We can keep the old ``locustio-taurus-wrapper.py`` and the new ``locustio-taurus-wrapper.py``
`ListServices` can be removed now, since it's now using a list.
I think this should go before the `v2` namespace, right?
Why is this change needed now.
This isn't necessary. `globalVars.appDir` isn't a normal normal version.
For consistency with all the others, should we have the struct struct struct, and have the default value of `DisableInMem`?
Use 2 (not 1) spaces for indenting an expression spanning multiple lines.
Not sure if we should rename this. It is really unfortunate that the observer might be a problem for the future but I'd prefer to have it in a separate PR for the new one
I think the `try` block should be in a `try catch` block. `except (message = message['message'] || {})`
This is the root cause for all is being fixed in #4770.
Rails/DynamicFindBy: Use find_by instead of dynamic find_by.
This is the fix.
Same here, `update_all` should also be called when provided.
Should we just remove this field?
@johanste @cston for a follow up PRs: this should be fixed with the rest of the PR, as it's the one we're using.
why would we throw an exception if the previous check was added?
I'm not sure if this is a good idea, but if it is the case then the default should be 10 instead of 10
I don't see this being used in this module, it's not a good idea to keep it for this test, but can't see where the `org.joda.time.Period` is used.
Missing description.
what's the reason for this change?
Please revert this unnecessary change.
Isn't it better to have a separate method for `keybase1.UserOrTeamID`?
this was not doing anything before?
Style/UnneededCondition: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
`streamHandle` should be in both methods (e.g. `isDisposed`)
I am not convinced we should be using `cursor.command` everywhere. We should only do this for the command options. This will allow for an `cursorState` to be `false`.
I think it was already intuitive that we were not relying on `[examples]` here
I don't understand how this works with bucket. When the config is used, the code will be executed.
This was a bad merge, but I can't see how this works. You can see how `ApiModel` and `Bail` are used, but `Bail` are available.
I don't see why this was here.
Why is it necessary to define this as a containerized flow?
role is not allowed in the role
Can we use Boolean.getBoolean(property, defaultValue) instead?
I don't think you meant to remove this.
this is not the same as `as Live` (as node is synchronous).
Huh... I wonder why the blogSvidPath has a special case, maybe?
Should the return type be nullable for `string`?
This doesn't appear to be used anywhere
I don't think we should do this in this PR, but we should try to avoid having a class that can do something about the type.
This is the only line changed in this file. Is it really necessary?
We don't really want to use the `#` module here, as the code does not have the `/` module. I think we should make the `/` module required as well
Seems like this should actually be moved to the `if` block.
Use safe navigation (&.) instead of checking if an object exists before calling the method.<br>Line is too long. [82/80]
Do we need to check whether the `Iterable` is set or not? Isn't there a need to check for `Iterable` in this case?
I don't think the `none` field is still used in this function, since this should be removed.
Why is that needed?
this code should be moved to `models/log.js`.
Should this be in a static instance?
I would move this function to a common place to be able to use it here, and in the function `public static `public` to keep the original behavior (e.g. in the `processShouldAttach` method).
Just curious, why is the `root` and not `let rootId`
Why is this change required?
This return statement is no longer necessary, because it will break compatibility in the future.
why is it a pointer?
revert the new line please
@nashornornEngine.createEngine() should be in the context of the context manager
This is a bit odd but why are we using `capture()` instead of `rand`?
Why do we need this parameter ? We should set this flag to `true` by default and only set the default to `true` if there are no additional flags. Also, I think `false` should be required if it's not used by the default, and we don't want this flag to be there.
