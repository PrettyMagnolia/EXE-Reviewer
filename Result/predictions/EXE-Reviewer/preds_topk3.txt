I think this should be the default implementation instead of a new one
The `record_batch_size` is a `Config` so you can use it instead of using the `$config->Index->record_batch_size` parameter.
I'm not 100% sure about the need for this, but it's a good idea to have the right way around.
I think this is the only thing I'm not sure about.
`isNavigating` is not needed anymore since `isNavigating` is only used in the scope of this PR.
What about `const Mat& {`? I would prefer to keep it simple and replace with `constelines = {`
I think we should remove this. It's not needed anymore, right?
Why is the printfprintf ignored?
There is no need for the `focus.windowThreadID` variable here.
Why is this change needed?
Just to confirm, is it not possible to have a test to cover it?
why not `shared := ...`?
nit: remove the extra space before `render()`
`ToHexString()` is not thread-safe, you need to check for the string here as you are already doing it in `org.mule.runtime.runtime.runtime.api.runtime.api.api.runtime.api.api.api.runtime.api.runtime.api.WINDOWS`
I don't think this is the right approach. The right approach here is to have the `err` of `image-provider` and `err.`. The same is for `image-provider` but for `image-provider`, it should be `x.String("image-provider", provider.Name())`
Why remove this?
Can you please revert the changes to this file?
Please remove the empty line here.
I think we should use a constant somewhere in case there's no such property.
I think it's safe to add this check to the caller. It's not a big deal but it's not a big deal, though.
I'm not a fan of this name, but it's not a huge deal either way. I think we can just rename this to `TaskStackInfo` to be more clear.
I think we should use `MethodEXIST` instead of `NONEXIST_ENABLED`.
This is a breaking change.
Can we use `isNullType` here? I think that would make the code more readable. Also, I don't think this is a good idea to check `isEmptyType` for null and check for empty types.
What is this change for?
"Whether to" -> "Whether to"
why is this removed?
This is the only change that is needed, is it necessary to move to the new module?
I think this is not correct, you should use `respond_to?`
I'm not sure this will work, because `showDirectory` will be called by `Util.withDirectory(workingDir)`
Please add the namespace namespace here. Also, `NodeNode` is not used and will be deleted.
Prefer keyword arguments that are optional.
This is not a good idea, since we are not using `clear()` anywhere in the code. But we should not be using it here, because `clear()` will be called in the `build()` function.
This looks like it should be called 'alerters' or 'alerters'
I think this is a bug fix
Is this a typo?
Shouldn't this be `[]byte("node1")`?
What does this do exactly?
This method is a bit confusing, I would say, that the `@param` tag should be `int` or `@private`, but that is what you are trying to do here.
Why is this needed? `SetTag` should already return `null`.
This docstring was wrong.
This should be `2014`
This import is unused. The `BiConsumer` import should be removed.
I think we can skip this if the queue is still in the queue, since the job may still be in the queue.
Why not use `isset`?
Is there a reason why we can't use `validators` here?
I don't think you need to import the base class.
This line is repeated a few times.
This is a little hard to read. If the feeds is the last one from the feeds, then it should be the last one from the feeds.size(). If the goal is to avoid the second one from the feeds, the second one doesn't have to know about the second one.
I think this can be just `None`.
I think this is the only place I could see. I'm not familiar with the code.
This will not work on windows because the context is already `chain`.
Why not use `lowest`?
This is a very weird place for a `creature` argument and `creature->isRemoved()` check
This looks like it's just testing the wrong thing.
Shouldn't this be `Promise.Promise`?
We should probably have some sort of `dep` flag that is used for the target to be nil.
Maybe `__class__` is better? `__name__` is more common in Go.
How do you know if it is safe to return false here?
Shouldn't this be in a finally clause?
Why are these changes required here?
`console` is not good. The `double` should be removed.
Why are we returning an empty string here instead of a pointer?
This is the only line that fixes the problem.
We should probably have an open issue for this so we can track this PR later.
This is a bit confusing, why is it necessary to change the wallet?
Can we make this string a const field?
Is this needed for all versions offrastructure-ready?
this is the same change. You should be able to change the old signature and just update the new signature.
shouldn't this be true or false?
I think this is the right way to do this, but I'm not sure what `padding` is for, but it's not a great idea to use it. It's not clear what's the use case for, so it might be worth it.
I think we should also be asserting that `assert(sibling->parent == subsurface->parent)`
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I'm not sure if this is correct. The `inDDL` function will be used in the `Table` function, which will not be set by the user, so it will be re-enabled. I think this is a bug, since the only change is to use `Table` for the `Table` object is not set.
why are these units units needed here?
I'm not sure if it's worth testing, but I think this will be a regression if you have multiple tests.
I don't think we should add this to `webenginesettings.default_profile`
I think you can just put this print statement inside the `Function<String[]>`
This change does not appear to be the right thing to do. I'm wondering if we can change the error message to be something more meaningful, like `stderr_test.go`?
Please remove spaces inside square brackets
(style) line over 80 characters
This is a bit confusing, since it's a replace variables.
I think the `objects` argument is unused now? If not, I would remove it.
We should still use generateDataDiskName for the k8s client
I think this is a bit confusing to have a `pos` method that has the same name as the manifest, but it seems like the name `pos` is not a `File<F>`
nit: can you fix the indentation here?
I think this is a wrong import.
This should be handled as a protected method
Why not just have the localConnection as an argument, and have it take the result of `getLongName()`?
I think we need to make a copy of the container in `container`
nit: `const` instead of `localstream`?
why not just store in `ch.Address`?
This test is not testing the `init()` function.
Why do we need to do that here?
shouldn't `(POINTER || origin)` be updated to `@origin = element || POINTER`?
Why not just call `RunCStorSPCUpgradeChecks` here and below?
This is the only change I'm not sure if this is correct, right? The `toplevel` is the right name, not the name.
Please use `==`
Is it necessary to add this as an extension?
Should we add a link to the docs to make it more obvious that this is a ExecutorReference?
I'm not sure if we need to check for the typeof obj?
`null`? I think `el != null` would be better.
Why do we need this import?
why not use `JavaParserVisitor` here?
Can you remove this line?
Do we want a port to be part of the container?
What's the purpose for this change?
This is a change in behavior. It's a little strange that `poll` is not a ` RequestId` (and it is not a `poll`). I think this should just be `poll`?
I don't think this is the right place for this. The array should have the `@return { array}` match.
@Eric89GXL @stephentoub do you have an opinion on how to use this? This is a read operation, so you should be able to read the link at the end.
I think this should be removed
You can delete the whole method now.
@michalk: Can you confirm this change? I'm assuming this is a test that I'm getting back to the old version of the PR? I'm not sure if that's a good idea.
I think you can delete the code.
The `default` is not used in this package anymore.
Nit: `using System.Linq;`
`req` is a list, so you could use `mne.utils.open` to avoid the `opener`
breakpoint is a break?
I would use the same dictionary for the dictionary in the `__init__`.
I don't think you want to add this.
This is the only place where the record is used. Can you please add a TODO to remove this?
`std::distance(first, first + 9)` might be a better name. I'd prefer `first + 9` as it's a bit confusing for a user to know the first one.
It's not obvious to me why we have this `app.kubernetes.io/part-of` flag. Shouldn't we just have it `kubelet` as the default value?
Why is this change needed? `requestUri` should never be null.
I think this should be `xrc20`
I think we can move this to `define_context_context_cls`.
I'm not familiar with this code, but it looks like this is not used outside the scope of the PR, but it is not necessary to add a new member to the `Miner` constructor.
Shouldn't this be `media`?
Is this always `true`?
I would prefer to see a `typeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeoftypeof : '
Why do we need to add this to `ctx`?
I don't think this is the right place to fix it.
I think we can just return `null` here, since the codeGenVersion is already in the constructor
I think we can remove `setFileState`, `setFileState` is now dead code.
@martinhofalick: I'm a little concerned about the use case here. If you're using a custom `Until` here I'd say that we should not use `T.optional` in the code, but it's not clear what's going on here.
This change should be reverted, right?
Without string is not used in this file, we should just remove it.
I think you can just do `Response tryToLinkAgain.then().assertThat()`
The tags should be in the `tag` table since they are the only tags that are in the `*` table.
where is `where(created_at: ...)` used?
this is not a connection type. You should just use a different variable name.
I'm curious, what does this do when I run the `include_string_literal` ?
I think you can just call `h2o_next_token(h2o_iovec_t *iter, int coma_separator)` here, as it's the same as you added above, and it's not a function that's already called in `h2o_next_token`.
We don't need to make these changes, because `include` and `Recycling`.
When would `keyVersionV3` not be `3`?
the latest version of this function was not used before and it was correct before. So it was before?
This is a breaking change. This method is not used by the test class.
I think we should use `cancan_multi_translate_ci` instead of `isRampClass` because it's only called in the `if` statement in the `if` block.
Don't we want the `certname` here?
brace on wrong line
Please don't remove these.
I don't understand this change, the original code was incorrect.
I'm not sure this should be in `lib/already-aws/...`?
We should probably make this a helper function, so that the nodeTypeEdge is set to something like `completion` and then pass that in to the `EdgeEdge` so that the `EdgeEdge` can be set to something like `completion` or `EdgeEdge`.
Seems like we can get rid of the final keyword at all.
Call is not a RequestFeatures
This method is only used by `GenerateAPIKey`.
does this mean we can now error twice?
This is not correct. You can use `convolve` with `valid` and `convolve` as the default
I think this is the right fix. We should keep the test cases for the new `calledThrice` and `calledThrice`.
I'm not a big fan of making the method a private method, but it seems like it's only called from the `error_to_s` method, so I think it's better to just call it from the method, and then remove the method.
I'm not sure this is a good idea. The messages are only used in the message information that they're not in the same message.
Space missing after colon.
@Jjagg @mchaarawi Didn't we have any better idea here?
I don't think you should add `ationalList` as the name of this method should work, and that's the reason why it is not just super().states
`protected E` is unused.
This is a bit confusing to me, I think it should be `const pull_t` instead of `pull_pulls`
I don't see any include/h2o packages in this file.
Can you rename this to something more generic? ThanosRulerStatus is a bit confusing with the name. `apig` is a bit more generic and it is a bit confusing. What about something like `apig` or something? `apig`?
Was this a bug?
it's a little strange that you're using a `l` module for a `Image` object, but for some reason you're using the right location for the next one. Could you add that to the latin section?
Is it worth having one test for this test?
is this used anywhere?
This is an actual change in behavior, because it's not a catch block.
I think it's safe to remove these. It's not used anywhere, and I'm not sure if there is a better way to do it.
Why remove this?
This should be moved to `src/PACKAGES/constants.md`, right?
`javaslang.Serializables` is not used.
you're still using the "ips" in the ip and not the ip
Why do we need this?
Do we need to do anything special with it?
nit: can we move the import in the `src/...` block?
I think this should be a constant somewhere
This is the fix. The tests are failing because of this change.
We should only be looking for the API and not the API. We should either be setting a `_id` or `_id` here or remove the `File.SPEC_ID` check.
should we have a test for this ?
I think it would be better to have all of these constants in the `event.all` and `event.allEvents                  `.
Should we log something here?
@bparees I'm not sure if this is the correct way. I don't know what the best way to do is is, but it seems weird to have this check in `setHydrating` and not here. Is that intentional?
I think this should be in a different PR
Why not just use `teardownClass`?
`check_disabled_client` is a global setting and we don't want `disabled_client` to be a string. We can probably just check the `disabled` attribute here.
This should be in a test query.
I'm not sure if this is the right place to apply the `apply_helpers`?
Should we add a class to `OrderItemFactory` instead of adding this class?
Why did we change these to 1?
Why not just call this `SSource`?
Do we need this property? Can't it be set in the `.properties` file?
I don't think this is right. The code is still using `var`, so the function is not doing anything. We don't want to have to add it to the `AptExists`. The reason being that the `AptExists` variable is not being used, so it is not necessary to add a function that is only for `spack.`.
Please don't go that way.
This is the only change I'm working on, but I'm not sure about this one... I don't see a reason why we need to implement this in master. I think we should just remove this entire if-statement.
Why import twice?
I think you should add `.format(response.headers)` above to get the `.headers` part.
This is the only line changed in the code. The only thing I noticed is that the `unknown_*KEYWORD` function is used is a single string. Is there any reason to keep this code around?
This seems like a reasonable place for this?
I would prefer to see the existing behavior of the ARM version in the existing source code, not the existing behavior. This would make the existing behavior consistent.
This is a bit confusing. Can we just use `type` and `message`?
@wachterjohannes Why do we need to pass `$event->getAvatarFilename()` to `getAvatarFilename()` ?
I think this should still be error.
I think this should be `TextMapPropagator` and then `TextMapPropagator`. `new BaggagePropagator(Kubernetes.DefaultTextMapPropagator) `
@jsoriano This is a bug fix, we should not fix it in this PR.
This is not needed.
not sure why this is not needed?
This change was not required because it was a list, but the order of the input parameters was a list and now it was a list.
Why do we need the extra `costMethod()` here?
This looks like a typo.
@cramforce I'm not sure why we need to put the response here. It is a layer-wide thing, so I'd just put the timestamp in the constructor. Also, I'd prefer we do the conversion in a layer-wide method, so it's easier to read when we create a new one.
We should probably have a test case for the new version
This is wrong. The `empty()` check will not be needed.
shouldn't we return error before returning?
Should be a bit more specific: `GString` -> `GString`
@jona-sassenhagen @johanste what do you think of adding a `binary_labels` argument to this function? It seems like it could be a good place to put this code into a single method.
This is a pretty big change. What's the purpose of this change?
Nit: please remove this line
I'm not sure if we want to do this because we're using `user.password` directly in our codebase?
shouldnt Dimensioned ever be reached, since we don't have a data loss?
I'm not sure this is the right fix. I'm not sure if it's worth it.
What's the point of this change?
@adamjstewart @jeffka @mmaxim , this line is the fix.
Nit: could you move this package/errors above the imports above the imports above?
We should consider moving this logic out of the `initCapabilities` constructor and having a constructor called `capabilities` that returns the `null` parameter.
I'm not sure why we deleted this.
Space inside { missing.<br>Space inside } missing.
I don't think we should be changing this for every retry retry retry.
Why is this necessary, and how is it used?
I think we need this to be a list of supported IDs
This was an oversight by me, but not a big issue...
please revert the white space
This seems to be unused
I think this is the wrong place for this
This is a change in behavior. The `small-image` option should be added to the `__small__` and not `__small__`
I don't think this change is required.
This should be added to the `vulkan/` folder.
Should be `location_factory`
Shouldn't this be called `std::stringCUp`?
I think the condition should be `if (value instanceof Number || Number(value) < 0) {`
Can we move this to a new line?
This was a mistake, I missed this.
I don't like this name. It seems like this function should be called `handleEvent chan` and it's a function that returns `nil`.
note: this is the only place where I had to do is make use of `wav` in the code.
The signal should be 5s, not 4s.
this is the actual fix. It should be in a separate PR
This is not needed anymore.
I'm not sure if this will work for anyone who is trying to use the `contains` function, which is not the right thing to do, but it seems like the `contains` function will be called for every element.
I would prefer to see this as a separate commit, if we want to make it configurable, then we could make it configurable.
this should be a constant
Can we use a NULL check here?
the other `url` method is used for this column, so I would recommend `mailer.welcome_mailer.welcome_notification.para3` as well
I think this should be a warning. The client is not responsible for setting up the lock.
Can we have a test for this, so `enableDownloading` is enabled.
We can't do this because the method is not called by anyone.
We should add a `HttpServerErrorCodes` to the docs
I'm a little confused, you're not using a verb-subject variable for this. I don't see a need to add this.
`getParams().getBool()` is not called anywhere, right?
This should be a `root`.
One question: is it possible to have multiple partial instances of the same partial, i.e. without one, and only one of the two? I'm not sure what to do with this, but it seems like it would be more clear to the user, not all of them are just one of the same, and more importantly, maybe it's worth to check.
I think this is not a valid file, we can just use `rescue LoadError` instead of `io.prestosql.plugin.platform.platform.UI.UI.platform.UI.platform.UI.platform.UI.platform.UI.platform.UI.platform.platform.UI.platform.UI.platform.platform.UI.platform.UI.platform.UI.platform.platform.platform.UI.platform.platform.UI.platform.platform.platform.platform.UI.platform.UI.platform.platform.platform.platform.platform.UI.platform.UI
I think the <msg> `EPOCH` should not be null, as the `year` can be null.
@tnozicka I'm not sure if this change makes sense. I don't think the `f()` method is being called from a `Read` function, and it is not actually used. I think it is safe to remove this code, and the `Read` function should handle that.
We should not need to pass the `EVENT_` prefix here, as this is a field of `appliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedpliedables`
This is a breaking change for the protocol API.
Why is this being removed?
I think you should also add `type: :model` here, and then you don't need to add the `type: type:` attribute to the `includeResponseSpecHelper` below.
I don't think this is the correct way to check this.
Please use `self.local.add_tarball(name, filename)` to avoid NPE.
why is this changed?
This is the only change I'm not sure about.
`os` is not needed anymore
this is an unrelated change
I think we can get rid of this check entirely and just check if the `! resp.StatusCode` 404 is not `404`.
is this needed?
You should use `#INE($input_path)` instead. `#INE($input_path) . DIRECTORY_SEPARATOR . 'psalm')`
This is the only place where we use the `package_test` module in this file. Why do all these files require that all the `aws_test` files are in `cmd/dev_test.rst`?
I don't know if we should be able to remove this from the test, but we can't use the `instruments` for the histogram anymore.
I don't see a value here.
Note: I'm not sure why we need both.
This is a breaking change. It's probably better to be specific to this for testing purposes.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This should be in a separate PR, but I think this is a good change to the future.
Why does this need to change to `wasHiveString_`?
I think this is a leftover from previous refactoring, should be reverted
This change is not related to the PR. It is not related to the PR.
This is a breaking change, and I think it is better to move it to a `_Getter` module
@deads2k i need to add the `\d` here, as we have the same pattern in the list above
Do we need this check anymore, or can we remove the check above?
Line is too long. [87/80]
why this change?
Should this be `if iss.Email == ""`?
Isn't `metaServer_` always available? I would suggest to have `metaAvailablePort` be used instead of the `getAvailablePort` method.
`get_locator` should only be set if `loc_mng` is a collection.
I'm not sure what this means, it will be overwritten by a global flag. Do you think it would be useful to have a Project project?
What's the purpose of `?.Length`?
This is not correct. You return the `else if` and `return` should be the same. You return the same value as before.
This is a change of behavior. Why is this being removed? Is this a WriteAsync call?
why is `dark_customer_id` gone here?
What is this for?
I think we should keep both methods in the `attach`, `attach` and `attach`.
Should this be `IOException`?
Why are we returning forceRDKit here instead of just returning the wrong forceRDKit?
I'm not sure if it is a good idea to add Game::find() here. I think it is better to do this in a separate commit, and just add a TODO to fix it in the commit message.
shouldn't this be in the test ?
Shouldn't this be a `default`?
Why are these `protected`?
Could you please change `$this->getRequest()->get('view_missing_traductions_only', $this->getRequest()->get('view_missing_traductions_only')` to `$this->getRequest()->get('view_missing_traductions_only'),` to be consistent with the others?
@cramforce is this going to work without this PR? I don't see a `validatePackage` defined anywhere in the codebase.
If you want to be able to use `self` with the key's `deep_mapped[k]` you can get rid of this line.
This is a bug fix. `chainID` is not a `Withdraw`. I'd rather not use a `Response` function.
can we change the logic to return `tc TraceContext` instead?
This should also be changed to `''`
I think it would be better to move this block to `Rails.application.config` as it could be reused in the code base. We can move this code into the `Rails.application.config` class, and move the `application/config` logic into `pkg/config` class.
I'm not sure this is the right fix.
This is not right, it should be set properly, otherwise it will be set properly
I'm not sure about having `HostDataDir` here. If you're not in the `HostDataDir:` package, you should probably add it here too to `HostDataDir:slim, HostDataDir, HostDataDir:`
@mfojtik this should be `ipsecESPOverhead`
This method name seems to be unnecessary, as it is a `OnEnd<T>` and it is a `X requires`...
This import is not needed anymore
As a general rule, we should probably have a unit test for this as well.
Why is this test removed?
I would not change this line. This is the default value for `$this->request->query->get('sortsortsort']['direction']` but the default value for `$this->request->query` is always `true` by default.
Why is the error required?
I'm not sure this change is correct. The `isMining()` call is for every invocation of the `cleanedTo`. The `cleanedTo` flag is not needed, so the `isMining()` call will always be true.
Why not getConfig directly?
Is `Unlock` really necessary? If so we can remove it.
Why was this changed?
This is a change from #978 to a different pull request, so I think we'll need to add it here as well
I think you need to move it to the top, it's used in the file
This was unsupported in the original code and I don't see why it was here before.
I don't see where this is used, but it seems like it is actually used? Does it make sense to have it as an argument for `CleanFpInfoAttr_`? It seems like this function is not being called anywhere.
you should use `std::get_pair_BIND_POINT_RAY_TRACING_NV`, it is not a proper name.
should we also change the `exercise` below to `require(:exercise)` ?
`ExerciseWithProgress` is a better name. It's a bit confusing since it's a table name.
This is a public function.
This is a breaking change. It should be in a separate commit.
I'm not sure this is the right version?
I think we can move this method to `maybe_rebuild_setting.go`? We could move the logic there.
Why is this import removed?
should we use a tuple instead?
I think `c_LEGACY_HELLO` should be `null` here, since the default `HELLO` is `1`
I think this should be `(a) retry it` and `privilege_THREAD` to match other `parsed` flags.
this should be a warning, not a warning.
This is a little weird. How does this work for the port port?
I don't see where `dokan.ExistingDir` is set.
Do you want to add a check here that the list is empty?
This is not a big problem. The container is used in a few places in `build-system/editor.js` and the container is used by `build-system/editor.js` and the `editor-container` needs to be removed from the `build-system/editor.js`.
I think this should use the `formform` helper function, not the filename, as it is a `utils.php`.
It looks like this is a breaking change. Can't we have it as a public constant?
Why are we dropping the URL here?
@kaban.jvm.args is already used by this point, right?
I don't understand why you need to remove this sprintf.
Should this be marked `GetCancelledZeroTask`?
I think we need to add a new function to the list of images to make sure we have a different image.
This should probably be `auto block (wallet_a.change_action(source_a, been_a, True))`
I think we should remove `message` from this example and use `message.idx` here.
can you make this take the result?
I think we should remove this now that we are not using the ConfigLocal package anymore.
I'm not sure why these are deleted.
Please don't remove the second `)` here, it is not necessary to re-introduce the bug.
I don't think we should move the file before `self.config.PORT_starter.py`
I think we should probably just remove this function and just call `rename` here, as we already have it in the schema.
Please, fix the indentation
Line is too long. [84/80]
same here, the PropertyMetaModel is not needed anymore
Why is this removed?
I think this is a leftover from the previous PR
I don't see this used anywhere. I don't see any other changes to this file.
Why not `charset=int`?
is this change intended?
why not `omitempty`?
I think `tty.Close()` is not needed.
you could also remove `implicit` altogether
there are other occurrences of `protoreflect` that are not required anymore, is it? If so, we can remove them, but I think it would be better to keep them all in the same way.
Should we do something similar for the OS config?
This will need to check if the type is empty. Otherwise, we will have to call `setup.enclosureTypeValid` in the call to `blockblock`.
This is a little hard to follow. I think it would be better to just pass the `session.Issession` and `session.Close()` directly into the `session.Close()` function.
Is this really necessary?
Should this be a try/catch around the call to `getAllOf`?
Should we use `||` instead?
I'm not a native english speaker, but it seems like this should be `fprintf(err)`, and then the error code below.
This should be done using a `getCache()` method.
Nit: please use `DBA::Hostdata.h`.
I'm not sure why you need to change the schema file here.
I think this is not right. `if isinstance(BSON::Decimal128) && []` is better than `if isinstance(BSON::Decimal128)`
this file has already built so you can put `require 'bolt/plan_creator'` line up with `bolt/plan_creator'`.
Is this still needed? Does the `20` value need a timeout?
Remove this newline
I think we need to do the same thing in line 288.
This looks like a good candidate for a `err == nil` check.
This limit is used in a couple of places, and is used in a couple places. I would suggest to put a note here to make this a little clearer.
why not keep this as `release(reader_payload_pool_)`?
`DrandEntries` is not a list, and is not a list. Is this a bug fix?
I would use `self.current_key(self, '_current_key)`.
Shouldn't this be `mode`?
Why is it >= 0? It's a timeout timeout that's not a timeout.
The limit is already in the `*` table, so we should just remove it from the struct.
`import scapy.consts as scapy.consts`
I'm not sure if rollbackPrimary is needed here.
why is this needed?
`isUpdate('%ToNode` -> `isInons`?
This function is not called fakeListOk.
Is this a separate change that we should be setting to k8s.io/client-go?
Just a note that this import should go in `goimports` as well.
This will fail on pipeline pipeline for every request, right?
This is the only place that needs to be checked. It is also used for the `integration-impl` file, not for the other ones.
This is the only place where we use this library.
why is this needed? This is already a pointer, so you don't need to update the existing `DEFAULT_computedNumOfActivePartiions_` implementation.
This import is no longer needed, right?
I think this needs to be moved inside the `if TYPE_request == 'cause'` block? The `insecure` variable is already used in `lib/internal/internal` so that it can be removed in `lib/settings.go`.
I think this should be HTTP-1.1
I think this test should be at the top of the file.
This would return `string` for `reflect` and `return Value{}` for the same reason. It's really odd to have a single `Value` for each type.
Does it work to use `nameLower` instead of `name`?
@jridgewell @jridgewell I'm not sure if this is the correct way to go.
I'm not sure this is the right fix. The `self.Promise` is used for the `window.Promise` value. If we don't have a WebOS-only element, we can't set this to `true`, and we can remove it entirely.
This is the fix. `skip_targets` was not being used anymore in a while and can be removed.
Maybe we could use ` func_qualifier()` here.
I think we should be doing the same thing if we do.
I don't think this is the right place for the `File` interface. The `File` interface should be used to implement `DeleteAll()` in the `FileFactory` interface.
Please revert these changes.
I think we should add a `config` kwarg to `config` (we should not have a default property for it)
We should probably also rename the type to `EnableOpenTelemetrySdk`.
Why did you change the order of the parameters?
"private volume" sounds like a wordy abstraction.
Shouldn't it be an error-names instead of a excessive node? I mean, why is this a excessive list of `isHydrating`?
This is a bit weird - it should be `array_merge` instead of the `call_user_func_array`
I don't understand why we need this. If we have `sc.IsValid()` it means we have `ctx.extract(supplier)` twice.
nit: I think we should add a link to the model here, since we add a bodge to the "hod" section above. We'll probably need to add the one for the "todod" part in the list for "Schlieäen" and "Speichern und weitere hinzufügen"
You don't need to pass the full full header here.
nit: Since we're changing the API, maybe `keyword_timestamp timestamp` is better?
I think we need to keep the *x* name here, as the name is the name of the *x* type.
I think this is a little hard to read - the `TogglePrefetcher` and the `TogglePrefetcher` are not needed anymore, can you remove it?
why was this changed?
I'd prefer to see this be configurable. If we want to enable it in the future we can remove this.
NIT: I think we should just pass `undefined` instead of `||`.
I think this should be `getAllprojects()`
shouldn't this be `data-lists`?
I'm not sure if this is a good idea. The `as_not conf.use_winpcapy` check is redundant here. We can do it in `scapy.sendrecv`, but I don't think we need to do it here as well.
Add `#asset_defs` to the docstring
could you please explain the reason of strncpy and why it's not strcpy?
I think this is the wrong thing. The user should be able to pass in a source and a blank value.
can you please use `require('./shared')` here?
Let's add a docstring explaining what this does.
I think this was the only place where we had the kinto extension.
no need for `!r`.
I don't think this is right, you can remove the if check below. I think the following if statement should be moved into the openerFromSlot()
This should be final.
We usually use `goimports` in this file.
I think you should remove this `options: {..}` and add `options: {..}` in `config-env/lib`.
I think this is not needed anymore.
@agramfort this is where I was looking at the wrong range of this, but I don't see any reason to do this.
@becker33: This is the line that was added to resolve a failing failing failing because the Attachment was not yet initialized, but the Attachment was not present in the Attachment. I think we want the same behaviour.
I think we can remove this.
this is not needed anymore
I think we can remove the `LongDomain` part here.
These are not necessary, we can drop them.
This should be moved to the `Platform` command.
This is the main place where the URL in `pkg/search` is used, so this should be removed.
This is not necessary. You should be able to use the `NETNET` syntax instead.
We should be able to remove this, as it is not used anywhere else. If we want to use this, I'd say we'll have to add a new `isinstance(s)`.
What is this `SolrInputDocument`?
This looks like a bug.
This is not a valid change
@mrunalinikankariya @mmaxim this is the right way to go.
should we rename `setup_single_new_style` to `has_native`?
The HIP startup kernel loader is not used anymore
why is this function needed?
This is not the same code as `s.VolumeLabels` is removed.
Why was this changed?
Why is this change needed?
I would have made a change in the `volatile` class to make it package private
This file needs to be updated to match the file name.
Please add this `SAMPLERS` constant to the mmdet's `ASSIGNERS`
I think this is a mistake.
This could probably just be `stats.to_json` (and the corresponding one below)
I'm not sure this needs to be a pointer.
I think this can be removed
@sparrowDom Just trying to understand the reason why we need to make sure that we're not using the state for a state of the state of the database.
Align the elements of an array literal if they span more than one line.<br>Tab detected.
Is this file meant to be removed?
Do we still need the `location`?
does this mean the `executionproto` is not in the "github.com/temporalio/temporal-proto/execution" package?
I think we can get rid of the extra parameter and call the parameter `keep_alive` now.
Why do we need to clean up these EINVAL checks?
`time.Time` is only used in the tests, so you can remove it.
I think this needs to be a `data-video-size`?
This should be an optional ` BeginMethod`.
Why do we need to change the name of the param?
This is the only change that affects TF providers.
I think you can remove the assertion as well. If you want to keep the pytest fixture fixture in this test, you'll need to remove the assertion.
this is the fix. `winrm_nodes` should always have been initialized. I think it would be better to do it in a separate PR
Copyrightright should be changed to All rights reserved.
This check should be in `getA_get_default_index` instead of here. `getErrStatus` is also not a `ErrStatus` in the function that you can call.
I don't think this should be a cachedValue.
I think we need to add a new flag for each element to the expanded class. The new one should be `ui-grid-icon-plus-squared` (or `ui-grid-icon-plus`).
This was a typo. Revert the change.
This is a bug fix. `g` is a ` '\\n`. `prefix` is a `@/g`.
This interface is used to load the same device from the same folder. It is only used in one place.
I'm curious why this is `SynchronizableEntitiesPrefix`?
Should this be a path to the server?
I think this was missing a `./`
`_tab.is_deleted` can be used here.
I think it would be better to name it `profiling_enabled` to be consistent with the other services in the name.
This is a bit weird, why do you need `v_file << c.ssh.forward_agent`?
It's better to make this an explicit `assert`
How about `workwork.IsPresent()`?
I think we can remove this line.
Should this maybe be `if ! current_user.has_disabled`?
typo `<`
Could you use `log.Joinf` here, as well?
I think the term "lastPath" should be "info".
Instead of "maxImageRampup" can we just call it "maxRampup"? Or is there a reason to not just call it "maxImageRampup"?
Can you please use `log.Errorf` instead of `.Errorf` here?
I don't think we should be using the original version, it's important for us to do it now.
The problem with the schemaMan is that the schema is not in the schema.
This file needs to be removed.
This should probably go into `defer_limit` since `r.interpreter.Eval` is a `defer_limit` and `r.scope` is an `int`.
I'm not sure this is the best way to go about this. The default of labels is for a default of labels.
`default:false` is not necessary here, as default value should be defaulted to false
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
I think this is not needed anymore.
How about `path:` instead of ` Full path`
I don't see this new class being used anywhere?
should this be `wxLang.LayoutDirection`.
What is this `else` branch for?
Is this really a test environment?
Can you explain the rationale for this change?
Please, make it a private variable. That way you can get it from the API and use it in the API.
This error message is not correct. We should not allow any error to stop containers for %s. Also, should we add the same error message to the caller as well (also we can't have one that has one).
I think this is the only line changed in this file.
This should go before the other stdlibs.
Is there a reason to make the return type `bool`?
This is not the same as flattenIndex, but the result of flattenTime.
We could add a `valuesToMask` type to this method and add an additional getter for `addMask` type.
Is there any reason to make the download config configurable?
I think you should move this import down before `appModule`.
`dialect` should be an `dialect` or something.
The chan field is not used?
This could be `Code()`.
This is a little hard to read - I think we need a more direct way to test this. I think we should be explicit that the payment is in the same place. The payment is not in the same order, so we can remove it.
`file` is not used anymore in this function, can we remove the reference from `load`?
We can now pass the `method` to `fetchMergedEventGroups` if it's not going to exist, but it's not a blocking call, so we can remove the need for the `if` condition.
I don't see a null check here?
Is it possible to have this in a `main` function?
@cvializ I think this is a bug fix, right?
if we have an verVE server, we should still have an event node that will be sent by the user (if the user doesn't have an verVE server, but we can still get the value from the server).
This is strnlen_s() is not the correct solution. It is strnlen() and is the correct one. The correct solution is to simply simply call strlen() to strlen() and then call strlen() if it is not. This means that the strlen() will be called with a string.
This is not the right way to do this. This is a breaking change and will break existing users who were passing `from` email in. It should be deleted from this action.
nit: `to download` instead of `act`, just like you've done below.
The error message should be `current_user`.
Isn't it better to do this in `getPropertiesHelper`?
why do you need to check the port assignment?
@t3on I think this is the right fix for this PR. I'm thinking we should change the name to `more` instead of `for`.
Is `UnknownDeployment` the same as `UnknownDeployment`?
This is not the right place to put this code. The first part of the condition should be: `if (typeof v === 'string' && v.length === 24 && ...`
vote does not have a label
I would not do this as it would just throw an error. It is also not the case, right?
This should be `registryAddress`
This is the only change that affects the change.
I think we should be using the `float64` here.
This test is not tested. We're using it in the test, but not in the `@` tag.
how about `blockchain.EXPECT()`?
Should this be `WireCounter` instead?
This is not needed. We use the `get` method from the `ClassBeforeBefore` method.
This will be a lot of files in Spack, which are not the case. We want to be able to remove the `.json` file from `python_reference.py` file from `python_reference.py` and `python_reference.py`.
I don't think we need this const.
`BlockChanSize` and `BlockSyncChanSize` are both a required parameter and a required parameter. Is that intentional?
This change is needed to ensure that the log message is logged, and the `:plans` below will be executed automatically by the plan, and the log message should go away.
This constant is used to generate NRF52840-DK constant. It is better to have it as an enum constant.
Shouldn't we also check if the node exists and not have the default?
This file should be removed.
You can use the key name here, as it will not be the same as in `__init__` method.
I think this is the wrong thing to do, because the list is the same as before.
Please use curly braces to improve readability.
This is the way I was working on this, I was looking at `desiredUID` to be the same `TeamID` in the `libbeat/common/TeamPlusKeys` and the `desiredUID` flag, but I don't think it's necessary.
Why is this import removed?
nit: this looks like it's not used anywhere.
`passwordModificationTime` is now unused?
This is not right. We are already calling the `ProcessStart` twice in the first place.
Should this be `debug` instead?
Please remove spaces around the `=` if you want.
can we get the Action?
should we use the shorthand since we don't use the shorthand?
Shouldn't we log this somewhere?
This is an API break.
We need to update the sentence description too, so that it doesn't match the other ones.
I think we should also use `cmd/storage` here to ensure that the target exists in the future.
This is a breaking change. We need this to be a breaking change for now.
Should this be `nativeSys32`?
I'm not sure about this one. It is a good idea to edit the search field at all, so I would rather see the type of `editController` at this point.
I think this is a bit of a hack, can we just move it to a shared file?
what's the reason for this change?
This is the fix. We should not have the original value if the value was null. This is an existing bug. The original behavior of the code is to be able to see if a value was null.
Why do you need this? Is it necessary to save the task in the task's task?
Is there a reason we don't want to output here? I don't see any tests that use the `theme` object.
Can we put this on the next line?
Nit: This is not needed anymore
Rails/InverseOf: Specify an :inverse_of option.
I don't see why this is needed, but I think it would be better to check the error and the user didn't see it, just the call stack trace.
I would prefer to see this as a separate commit
This is not the fix.
It seems that `compiler.evaluate_string` is only used in the `PlanResult` class, so this can just be `compiler.evaluate_string('type PlanResult = Boltlib::PlanResult')`.
Should we make a call to `waitErr` here?
this is not right: if i == 0 and default+a.foundationBonusLastEpochNum to 0, i == 0 should not be possible.
Why is this change needed? I wouldn't expect that we would have to add this as a list of supported values.
I think the `rubField` should also be `Len`
this is a bit confusing, why do we have to have a `dict()` here?
I would make this `maxQueryLength`
This change is incorrect
I don't think we should add this attribute to the public API, since it's used in this API.
`isglob || fnmatch (arg, name, FNM_PERIOD) == 0` would be more clear
This is a leftover from previous PR, so I removed it.
This should not be the name of the member, right?
this should be `verifyStatusResolvable(target, nameMap, target.SteadyStateDependencies, onSteadyStateCanResolve)`
Since we're not doing this for everyone, I think `has_active_subscription?` is a bit ambiguous. I think `has_annual_plan?` could be simplified to `has_active_subscription?` or something.
Why do you need to pylint here?
This should be a separate commit
This is a bit confusing to read. If you are going to use a function to add a function to the function, you can use `Set()` instead.
The only thing I'd expect is that `schedule_1x.py` is not in the `py-packages`. I'm not sure what `load_requires` means. I'm not sure what `load_requires_requires` is, but I think it's more clear what it is doing.
Why do we need to set `omitempty` here? It should be always returned.
I'm not sure if this is a good idea, but I'm not sure it is worth adding a new method to the interface.
We should also change `deploy` to `UserDecorator`
This is the only place where `Perl_croak` is used, so we can remove the `*` here.
We can remove this too. The only reason we need to keep the `stateRoot` is because the methods in `IEnumerable` don't need to know what is the difference between `IEnumerable` and `IEnumerable` are of the `IEnumerable` and `IEnumerable`. The only reason we don't have to do is use the `IEnumerable` in this class are because the methods of `IEnumerable` will be called from `IEnumerable`.
Why was this removed?
How about `STATS_COLUMNS`? The same below.
It seems like we should just use the `.EDIT` here instead of passing in the `.EDIT`?
I think we should be doing this in #2981
Why do we need min andChange to be zero?
why is this a pointer?
Is there a reason to use `to?(:exercises)` here?
This is not correct. The mode is already in the list.
this could be a constant IMO
This test would fail if the `waitForResponse` is empty.
This should be `xForwardedFor.Split(',').First().Trim()`.
nit: `/status` is a bit ambiguous, maybe `/prefix`?
I don't think this will work. It's not a big deal, but I think we need to do this.
I think this is the wrong place for these, as it will be a separate PR. @tgamblin Do you have a specific reason why you want to change these?
This file has been moved to the beginning of the switch.
This should be a `before`
If you're not using the `fieldsFromJWTSVIDResponse` method here, it should probably be removed.
This is the wrong place to put this check. The `if (contract.Visibility == TypeMemberVisibility.FamilyOrAssembly)` check below will also be removed.
this is a separate change. But I'm not sure if it's a good idea to use a var.
I think this is not a typo
I don't think this is right, you can just remove it from the web hook.
Remove this line.
I would use a more meaningful name like `allow_None=True`. It's not a big deal but it's a bit more readable.
I think this should be a warning rather than a specific one, not a hardcoded one.
I think this is a leftover from debugging...   .
Is this used?
This is the only line changed in this file.
I think it's better to keep this method and just call `getAllType()`, since it's not being used in the constructor.
This change is not related to the PR. Why is this change needed?
Do you think it's worth adding a new attribute for the value instead of setting it to empty string?
I think you can delete this line now that it's not used anywhere
You can use `Bla.Type` instead of `Bla.Type`
if we're not setting the default, should we just make this a constant? i.e. `_get_facets_config`?
I think you need to add this condition in `pkg/resource/ContentMD5.go`
This should be a separate issue, as this is not really the event, right?
Nit: should this be grouped with the other `else` blocks?
This is a change in behavior, but I think the default job name should not be modified.
This is a good example of why I was thinking that we don't need to go to a `map` and `File.map`, but I'm not sure how I feel about this, so I don't think we should be using `map` here.
Would be nice to have a better name for the `WriteLine` method.
I would prefer to have a more general `DEFAULT_INSTRUMENTATION_NAME` constant. I would suggest to use a more meaningful name for this config.
This should probably be in the corresponding test (warning for the new way around).
This should probably be a test, not an issue for the user.
I think this was accidentally inverted
Should this check also be done in `getCache` ?
The password is not necessarily the same as the password in the password, so we need to make sure that the password is in the password list. The password should be the same as the default password.
The test is not actually actually needed since `missing_github_google_flatbuffers/tests` is used for a new BAZEL API.
as well as the original implementation, this is a bit confusing to me.
This is not a big deal, but it is really necessary to have the `granteeList` and `roleteeList` as a parameter.
This is not correct. You're calling `subscriptions_subscription_count(subscription)` twice, but that's a bit of a mess.
This makes the line too long.
I don't think this is the correct place for this. The `noOp` is really used by the server, so it should just work.
I don't think we can remove this. This is now a no-op for an existing release, which is no longer needed.
I'm not sure if this should be "footerHeight", since it is not a valid value.
`CassandraInstaller` can be removed here, and the other `CassandraInstaller` in this file.
why do we need to pass `start_time` and `end_to_time` to the `run`?
The generator is not the right thing to do, but it seems like it should be the same as the generator->setAqrEnabled()?
remove if not used
I don't think you need this check since you are already calling `isFunction` twice
Out of curiosity, what do you think of making this part of the `Resources`? Would you mind adding an additional `Out` to the `Resources`?
How about using `fmt.Exec`?
This should be a separate commit
This is a bit confusing to read. What about a `cacert.get_subject()` call? I'm not sure if that's necessary, since the `cacert.get_subject()` will return the correct value.
what if we called this `License` instead of `index`?
This method is not used anywhere. Can you remove it?
I think this should be `value.startsWith("-") || value.endsWith(".");` and not `value = value.substring(0, value.length() - 1)`
You can remove these.
I'm not sure this will work, but it is not really needed. The new link is already added in the response and not the current request.
Same as in line 385.
I think this URL could be more specific, e.g. `can_approval_response_path`
Please put this alphabetically.
I don't see any use of `json` in this file, I assume it's not needed anymore.
@jcotela is this the right place to do the loop here? I don't know if it would make sense to do this for the other loop, or if it could cause a problem?
I don't think this can ever be null. It should be either a `@Nullable`, or a primitive boolean.
I'm not sure this is the right approach. The site site should be available only if the `next` tag is present, not `next` (and the site is available). If the user is not set to `next`, they will have the same `next` flag.
should we do the same for other components too?
Is it possible to have a non-`string_to` field on the field type?
I think it's better to reset this in `reset` and then reset it in the `reset` component.
This should be `Time`
Should we keep the `ACTIVITY_TIMEOUT` case as it is?
This should be using the enum values.
I don't think the `ingressRule.SourceGroups` is necessary. The only place it's used is in this case. The only place where the code is being used is in `processRefCGs` is used.
I think this should be `PendingField`
This is wrong, because it will be used in the `<=` statement.
This is the fix. I think it would be better to use a `nextPageTokenName()` method instead.
hmm, does this mean that a user could specify an email address?
Indent the right brace the same as the first position after the preceding left parenthesis.
`user has` -> `Common`
Do we need to do anything to make sure the name doesn't change anytime?
why remove this?
`String#Equals(String, StringComparison)` is not supported in IE.
This is not needed anymore, right?
I don't know if it's possible to do this, because we don't do it in the first place. If we do, we should do it in the same place. If we do, then we should do the same thing here. If we do want to change this, we should probably just have `if len(sha1) > 7` and `return ...` the same way we have `if len(sha1) >7` and have `return ...` the same way as `if ...`. Also, we could just have `if ... else ... ` and then just do `if ...`
This doesn't seem like it should be a placeholder for this case?
I don't understand why this change is necessary. It seems like this change is needed to make the tests pass?
This doesn't look right. Is this intentional?
Minor: I think `orderPath` is a better name for this config.
Why change the type?
I think this is the right fix.
I think this is an API break, since the API will be the same if the API is changed. I think the API is the only place where we want to use the public API, which is not the case.
This should be in a different PR
This is the fix to the test file that was passing the `components/listview` before.
@jvwing I think you can revert this change. We are not using wildcard imports.
Why the macro change here?
This should be a test.
I think this is not correct. We don't have to add an explicit parameter to the interface, and we don't want to have a "consumer" interface, which will be used for every connection (in this case, it will have a "consumer" parameter).
This is a little weird. Why do we need the override?
I think this should be `@Pass.recently_published_first` instead.
This is a bit of a hack, but I'm not sure.
Shouldn't we check that the ipt is in `felix`?
I'm not sure why we need to copy left field from leftField. Can we just use the left field from left to in the left?
This include is useless, it's already included in the header
I think this should be a warning rather than a bug.
I don't think this is the right place for this. The current logic of this function is to delete the version of the Launch Templateresolver. Instead of just passing a `ec2svc.CreateLaunchTemplateVersion` directly.
Why do we need this change?
I don't think this is necessary, since you're using a custom `.spec.rb` file.
This function is called from within the context, so it is not necessary to add it to the context context.
I think we need to keep these as-is now since we're not using them anywhere else in the codebase.
We don't use this import, right?
this will run all clients, so let's remove it for now.
What if `type` is null?
I think we can simplify this to `parent.getAttribute('role') || ''`
I think this is the only line changed changed
I think this should be `MetricStreamConfiguration`?
I don't think this is the right approach.
I don't think `type != Type::None` is right. The `type` parameter should be removed here. The parameter should be removed.
This line should be removed.
These are not really part of the PR, but I think the correct solution would be to use `np.array([[0, 2, 10], [0, 10], [0, 10]]`.
This should be changed to `showTemp` and not `showTemp`
This include is not necessary.
Should this be `IsLocalPort` ?
I'm not sure about this - we should be logging the error when we actually do `log.Warning`. It's not a problem, but I think it is a good idea to log it in a debug message.
This should be done in `common.go`
Please remove this, it is not used
I think this is not needed anymore
inconsistent spaces for indentation in a separate line
Please use `varNotEmpty(inputs)`
I'm not sure what this is supposed to do. I would have expected this to have a test case, but I think it is better to have the AppInStage have the same name as the file in `build-system.js`
Same as above, this should be `!`
why do we need to call `Shutdown` here?
Why not `CDRMessage::addUInt32`?
Should this be `peer for service %q`?
You should be able to use `self.get_ctu_dir()`.
The plugin is removed in the config file.
I'm not sure we should do this. The idea is to use the alt attribute to determine the expected attribute for the expected attribute, but it's probably not a big deal either way. We could also do it in other test classes.
I think you can move this to `userscripts.UnsupportedError`. The original exception was lost here.
This is not correct. The problem is that if we have a `FieldField` (which we want to be able to return `0` and the `sub_type` value is zero, we should check if the type is zero, and if it is zero, the default value is zero, the default value is zero, and we will not be able to set it to `0`.
Is this a BC break?
Please use the full sentence, it's easier to understand.
I think you should get rid of this line entirely and just use the `CurrentEntityURL` variable.
Is this change intentional?
Line is too long. [85/80]
Metrics/LineLength: Line is too long. [82/80]
The original code was correct. It was a bad idea.
I don't think you need to remove the `nupic` from the name.
I don't think we need to do this. The condition should be: if (0 == pthread_attr_init(&attr) && pthread_attr_init(&attr) && pthread_attr_init(&attr) && pthread_attr_init(&attr) && pthread_attr_init(&attr) && pthread_attr_init(&attr)
This is a breaking change, but it is probably better to use the same condition for `README.txt`
This will need to be in a finally block.
This should be `[]key: false`
This is the main change.
`__init__` is a list of python api. I don't think it's a huge deal, but it's a list of python api.
Why was this removed?
Why is this needed?
I'm not sure this is the right place for this. The user can have an `IEnumerable<T>` arg, which is not the case for the user. The user can use `<T>` instead of an explicit `IEnumerable<T>` to handle this.
I think you need to remove the need to set `{}'.format(html.escape(self._opt.text)))`. The way I read it, it is not clear from the original format.
This needs to be `public` (we can't do it for every other PR).
This is the place where we use `update` to determine if the first callback is an int.
@bparees I'm not sure if the kernel overhead of the eventfd file is the best way to handle this. The kernel overhead of the generators are the only pipe of the file system, so I think we need to do this. I think the `2727.h2o_ASYNC_NOTIFY_USING_EVENTFD` should be in the `LINUX_VERSION` function.
I'd prefer to keep this method as a field.
Final newline missing.
Please add braces to these lines.
I think this is not a patch-specific patch, it might be good to include a message in the code that uses `stdout` and `patch` in this context, to make it more obvious that the output of the output is only being submitted.
Why not using the `git` field?
Line is too long. [81/80]
Remove extra empty line
This should return a promise
This was the only place I could see that we're using the correct form for `self.state_before_fullscreen`. The `set` method is only used in one place, so we can just delete the `setFullScreen` method.
Why not use `@OneToOne` ?
wondering if we can just do `&&` instead of `\n`?
The default should be `True`?
I think you can remove this.
Why is this necessary, is it a different struct?
You can just use `mConfirmDiscard` here.
This is a little hard to read. The behavior of the code is that `!is_string($media->getBinaryContent()));` will return the same result as the return value of `false`. Is this intended?
Don't you mean the missing `nested_flatbuffer` field here?
I would prefer to have a method to avoid this kind of utils.
I'm not sure if this is the right place for this
I'm not sure this is the right way to go. It would be nice to make the code more readable.
This is a bad merge - it should be fixed in a separate pull request.
Why is this error ignored?
I'm not sure this is correct. The version is still in use, but the version is still in use. If you want to keep it, you can remove the version in the `if (isVersions.remove(versionKey))` block above.
`1.2.1`? 2.1.2
Should we check that it is nil before calling this?
I think this should be `Serializable`. The other idea is to use `Comparators.Serializable`.
This should be `window.location.href`.
I'm not sure if `disable_iptables` was needed, but if it was, then I don't think it was needed.
go isn't used.
This is the `engine_log` I don't see.
The condition was wrong here, because it was missing before.
I think this is a better name, `MetricSupplierSupplier`?
I think you can remove the & here as it is the default for `readPreference.mode`
These are not part of the diff, but I don't think it's necessary to change the diff.
remove this file if not needed
`cur_path = cur_path.gsub(/\//,'\\` is a better name for `is_powershell`
`edit_guidance_alert_dialog` is too generic and can be removed as well.
This link can be removed.
Should we add `add_undo` to `remove_tab`?
Why is it here?
@karuturi Could you please explain why we need to change the default in keyboard navigation?
This is the fix. The original code was doing the right thing. The `checked` value was used in the `checked` value and the `checked` value was used for the value of a `checked` value, which is the value that is used for the value of the `checked` value. I think this should be done in the original `checked` property instead.
May be it's possible to move this up to the `glue-code` file and then use it in the `add_flag` module instead of in this file?
I would call this "local-directory" or "local-directory" (or something like that) to make clear that this is a "python" of the other options (i.e. "local-directory"), or "local-hoc-hoc-hoc-hoc".
This is not the right place for this table, it should be `table.`.
Is this change intentional?
I think it is better to make this a separate PR, with your changes, and make it more explicit that the `qutebrowser` instance will be created in a separate PR.
This is the only change I did for the PR. It's still useful to see that the error message is indeed modified.
I think this is a leftover from debugging I think. `lvis_v1_instance` is enough.
We should keep the old message around and make the message more readable.
I don't think this belongs in RaiseSingleton.
I would prefer a static class name instead of a static instance, e.g. `isExecutorTests`
There are a few more of these where you can put this in a helper function that is only for one place and it will be nice to have the same checks in place to prevent them. I'm not sure if this will be useful for now, though, as you will have to check the type of information for the input.
Why is this needed? This call is needed to call the `clone` function.
I don't see any `KindEcsApp` defined anywhere?
This should be `execute()`
Why was this added?
Don't we need to pass the `kubernetes.io/hostname` as an arg?
I'm not sure if the config file should be included in the `urfavecli` package.
should we remove this for consistency?
I don't think we need this function anymore.
It looks like the `TResult` can be removed. Is this being used anywhere else?
Maybe we should just add this to the list above?
Nit: I think it's better to keep the old method and call `private` for the same reason. It would be better to call `private` on its own line and `private` on its own line.
You can use the shorthand since there's a `use` statement.
I don't think this is correct. The return type of `[]string` should be `[]string` (the type of the function is `[string]`)
This is a breaking change. We need to make sure that it's a separate task, and we don't accidentally break it.
I don't think you need this any more, since it's not used by this PR
Please add a license header here.
Shouldn't be `action`?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
This is not a problem. It's not the first time I see the directory. It is used by the file.
Is this a typo? Shouldn't it be a `const`?
You don't need the `if` anymore.
I think we should keep this package for now. I think we should keep it for now.
why not just pass in the error?
I think you can just do `const long = compute_reference(scale, shift, y_data, y_data);`
I think we can move this to datastore.Pagination.Token as well
This is not right. The FunctionExpression should be removed from the function definition and not here.
I'm not sure this will work, but I'm pretty sure `respond_to do |format|` is the right thing to do here.
This is a leftover from a previous commit.
What if we just call it `ntexttext64` or `x86_64` ? This way we won't need to do that in the future if we can.
Is there any point in using the `Complete` here?
What if the hash is invalid?
I would rename the URI to something like URISafeName or URISafeName. I know that it's an existing name but I think it's a bit more clear what "image import" is.
I'm not sure why we did this. It seems to work.
This is just a small change that I'm not sure about.
We should probably keep the `throw new Error(e).to.be.an.instanceOf(e)` in a few other places, so we can remove the `catch` and just remove the `assertError` below.
This is not a good idea. IsThreadAgnostic == cachedResult specific? Is it because it's a very generic type?
`LoggerFactory` is not used in this class.
This is the fix. We should be able to do this in a separate PR, but I think it's better to have a test that checks if the limit is a no-op if the limit isn't found.
Success or ~64~azure.sdk.SED.Sigh.
why do we need this?
I think this should be `getAttribute('proccode')`. Otherwise, the behavior of `localeCompare` will be `false`.
Can't you use the default value of `getSlaOptions()` in the `setup.go`? I don't think it's a huge deal, but I don't see a point of this.
The `ManagedMachinePool.Spec.RoleAdditionalPolicies` is now unused.
why did we remove this? it is not used anywhere
This should be removed.
I don't think this should be a part of this PR, but it's a little hard to follow. Maybe it's better to move the logic to the `onTrigger` method, and call `setFromResult()` in a common place and then call `setToResult()` in a common class.
@matt-peters @dvoytenko is this going to cause any regression?
I think it would be better to use a `Long.STANDARD` instead of a `REQUEST`.
I am not sure if we really need this. When can we return a logical ID? I think it is better to do it in case `hive` is not a path.
I don't think this is required anymore.
Can you also move the `payments/crypto` above `mysteriumnetwork/payments/crypto`?
This should be `Bibliographic`
I think this constant can be a little more descriptive. Something like `const DefaultMaxCongestionWindow := ...` or similar.
This should be an environment variable, not a part of the specific dependencies
I don't think we need to change this, as it's a `hashivault` now.
I think this is wrong, because you are storing the `xwayland` value from a false. If `xwayland == 0` then it will always default to false. So this is fine.
I don't understand why this is being removed
remove empty line.
This is a little weird, I'm thinking about a `CheckErr` function that does the `messageErr` instead of just `CheckErr`. I think this function should just be removed.
I think it would be good to add a new method `PEPE` that does the `dscp uint8` as well.
It looks like `cxSmiles` is not used?
The issue here is that if there's no super's in self.__init__ (which would be an issue) then this will not work.
Why not `new SampleServer()`?
What does the `$this->entity['name']` actually mean?
This is not a great method name, but it is not clear to me why we need the `return` here. `Type` is a `AttributeError` so we can just remove it. `Type` is a little bit confusing.
Can we move this to the top? I think it would be nice if we didn't have any of the namespace to the namespace.
@jaeilepp @citibeth I'm not sure if we need to keep this or use `MNE`?
This is the only change that affects this PR. I'm not sure it's worth the effort to remove.
I would use the gasPriceUnitIOTX constant here, not the gasPriceUnitIOTX
Why wait here?
This is a change in behaviour. We're using the old version, not the new version.
`synchronized` seems to be a better name.
If we're going to add an email here we can add an action for the `edit` action.
I'm not sure if this is correct. I would have expected this to be a `n` not a `Este`, but it is not the case.
I don't think this test case belongs in this file. We should use `testmod` instead.
This err is no longer used.
Can we just delete this line and the others? It's a bit confusing.
@mikeshultz did you check whether trail has been increased by this point? I think it's ok to just always skip the trail.complete?
This is not a valid context, but I don't think it's worth the effort to log it.
Use 2 (not 3) spaces for indentation.
Is there any way to avoid this test?
IMvxBasePresentation should be enough
why did you change this?
I'm not sure if this line should be here. The `cleanup` method is not called when creating the last item of the current process.
Would it be better to add a separate check to make sure `artist` is set to true when there is no view view?
I think we should add this to the `app.py` file.
Could you make this a constant? It's not a big win
This will not work for browser creation (which is a different issue). You can use `self._get_firefox_options()` to get rid of the `browser` and `firefox` if you want to get the options from the browser.
I'm not sure what you mean by this, but if you do, you can use `and ...` to check this, otherwise you'll get a warning on the next line
The controller is not defined anywhere.
Why is this change needed?
I don't think this is the correct term. The s3 version of ADC pins is the same as ADC pins. It should be the same as A4, but with A4 of A4, it should have the same value as A4. I'm fine with that, but it's not clear to me what the original meaning is.
I'm wondering if it makes sense to add a `messageReceipts` to the `*` methods?
@jvillalobos did you mean to commit this? It's not really a good thing to go, but it seems like we're missing some more here.
Please add the description of this sentence.
NIT: please remove the extra new line
I'm not sure if we want to do it here. If we do, we should do it at the end. If we do, then I think we can remove this check and only do this if `TestFormatURL()` returns true.
Is there any way to test that the local file is not present? I think it would be better to test it only if there are any additional files.
I'm not sure if it is the right place to put this. It's a bit odd that it's only for the status update succeeds. What do you think about just saying "only update succeeds. The current status update succeeds"?
Should we also check that `err` is nil?
I think this is fine, but I think the best place to put here is to add a `on_>%` to the `d` component, so that we can just add the `--verbose` flag to `make check` on the `--verbose` page.
I think you should be able to use the `Filter` method here instead.
I would have used the RPM build here.
This is a change from the code I just realized that I have been doing so before.
you should be able to use the `name` value here.
I don't know if we should use the name of this package.
Do you need this?
This is the only line needed?
I'm not sure if the `JDK8252739` is necessary.
Why are we returning public?
I don't think this is needed, the test is failing on a fresh build.
I would suggest that we use a hard-coded value for this, e.g. "main a year to check", or similar.
I think this should be a `patch_path`?
let's not change the indentation here, we have to change the other ones
Is this meant to be public?
Please revert this change.
I don't think this is right.
It seems like the only usage of this function could benefit from the "dev" name.
@kennknowles can you check if the `peer_params.network.default_node_port` is set to true?
We should add a `TODO(borg.jetpack.dubbo-common.dubbo.package.Sprintf)` to this. If you want to keep it, you can also remove the `if needed` from the `if` and remove the `if needed` above.
is it possible to have a test case with a test case with an invalid value?
I don't think we should be exiting directly from roleText. I think we should be able to get rid of the roleText.
I'm curious, what is the rationale for removing the `*` here?
I think you could delete this line.
I think you can remove the `=`
@jsoriano This is the fix for the issue. I'm not sure why we need the feed URL in the first place.
Why do we need to make it public? We're now using `to` in our code base.
What's the motivation for this change? I don't see the change to the version number.
This file was moved to a separate commit.
Please remove the trailing space.
This is a strncmp change, but I don't think this is correct. The string value is always >= 0, right?
This is the only one that is used by the `resetOpenedWindowsCount` method.
There's a lot of other places where ForkConfig is used. I would recommend using a different name to avoid confusion.
This is the only change that will break existing tests. I think this is an unrelated change.
I think we should be consistent with the rest of the methods, and `deactivated_on` should be fine.
I think this is a bit of overkill; I think it would be good to have an explicit check for positional params. It would be nice to have a consistent naming for the code. Also I think it would be good to have a consistent naming convention for the code that uses this method.
Is it necessary to check 1100 for version >= 1100? If it's not the version it should be. If it is, we should check 11 1100 for 11 11.
Why is this package removed?
I would use `html_safe` here, as it's not a list, and it's a string, not a string
This should only be set if subject is false.
This is not the right way. The default representation of this variable is `DefaultSampler`, so it should be `defaultSamplingProbability`, or `defaultSamplingProbability` (which I think should be `DefaultSampler`).
Why is this not generateDeploymentStrategicPatch?
why log level info?
I think this function could be a bit more descriptive, maybe something like DCHECK_LOCATION or something?
Why is this removed? The `default` is now handled by the `success` of `success` in the `image` constructor.
Can we make this an override?
Was unused and removed because it isn't needed.
If we don't change the `videoConstraints` field here, it will be always set to `true`. We should change `none` to `false` instead. The `type: videoConstraints` field is only used to set `videoConstraints` by default.
Extra empty line detected at class body beginning.
I think we should move the ` VCDR2` function to `config.Target` and move the `WasmAbi` logic from `lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib/lib
Why `Append` here? Shouldn't we pass in the error?
This is a breaking change. Why do we need to add span?
nit: this should be `t.topology.SearchTopology`.
I'm not 100% sure if this works, but I think it's a good idea to change the admin to a new admin. If it's a different type of admin, then it should be a new admin, or a different type.
I don't think we need to keep it for this PR. You can just call it ClaimFromRewardingFundEnabled
I'm not sure what this is doing, but I think it is better to use the `NOGIL gil` variable here.
This is the only change to the default behavior, but the change is good. We can give the block height and error as the default.
I think this condition should be in `elseif`
This is the only place where we want to do this. I'm not sure how we should do it, but it might be worth noting that we can just use `.String()` in the `.map()` function.
@jridgewell I think we can get rid of `for (String pathElements)`.
why not `core_propertyName`?
Could you please add a docblock here for the new functionality?
Could you explain the motivation for this change?
What is the reason for adding the `-028`?
We need to update `kidak.Bytes` to match the `Kidak.String` and `kidid.getKey()`
why remove `return x.tbk.Size() - 1`
Is there a reason why we need this? IsAppInsight not used?
This should be an error, no?
why remove this?
I think this is an actual fix
I don't think this CPU implementation is necessary
This should be `setup_rvm` and `rvm`
I don't see this TODO. It is in the issue that the code is not working, but it is in the issue.
I think this would be better as a warning rather than a warning.
I think this can be removed, right?
Is it possible to have a peer and only include the public/member/Score?
I think it is better to do it in a separate PR (or in general, we don't need this hack) as it is a breaking change in the future, but I don't think that's worth it.
why is it no longer needed?
This file is not used anymore
should we use the `String` field here?
Can we remove the config here and pass it in as a parameter?
I'm not sure why we need to do this. The listUserRepos() is not called in a private context. If it is used in the constructor, it might be better to have it as a public method in the context context.
If we want to keep this in the `provider` model, should we instead move it to a `provider` model? We have a `provider_request` model that would be used in other places.
Should we add an option to add `height` to the `add`?
I think we can make the name non-nullable
Why is this change needed? It seems to me that the `AARCH64` is not defined at all.
Just to make sure, we are removing the `.from` here, right?
It's not clear to me why these should be option-to-beautifier.
This is a breaking change, but I think this should be `TryParse(pair, out NameValueHeaderValue baggageItem)` and not `TryParse`
this is not needed, you can just use `if`
How about `mlvl_confids.append(confidences)` ?
`kube-ipvs0` is a better name for this new parameter. Can you please clarify?
hmm, this is not a bug.
Nit: I would prefer to have a single `resource` field for this case.
It looks like we're using the `docker` in the test code. Should we do that instead?
I would use `JSON_DATA`, `JSON_DATA`, `JSON_DATA`
I think we can remove the `IScopeManager` argument here.
Do we need this field? I think we should be consistent with the rest of the fields.
please revert this file, it also has the changes to the file
this can be removed as well
What is the difference between `_poSSwitcher` and `_poSSwitcher` ?
I would have added the same name as the default value of `diskImporterDiskName` as you do below
I think we should use `T.index_scols` here, too.
Is there a reason why we can't use `*` type here, since `Type` is already in the map?
This isn't needed.
I think this should be `ChannelImplementation`
Why is this `removeFiles`?
why is this change required? idxCurrentSort is a boolean.
IMPORT ->ENDED
why is the finally clause removed?
This is a breaking change, because we don't have a doc block yet, but we can't do this. Maybe we can keep this for now and have the doc block as a separate parameter?
I don't think it makes sense to have a method that accepts a single `if`. Then, you don't have to pass in a `org.mule.runtime.internal.internal.internal.client.internal.internal.internal.internal.internal.internal.internal.client.internal.internal.client.StringUtils#isEmpty()` and then you don't need to add a field.
should this be set in the model?
Is it worth it to mention in the docstring that the object name itself is in the `metaTaskExec` namespace?
Why this change?
Was this a bug?
Is there a reason to keep these headers together? ADIOS_CPP.h already has a FD_Spark_ADIOS_CPP.h and nothing is defined there.
Hm... I think this is a leftover from a debugging leftover...
This is the only place where `c.leaf.remote == nil` is used.
why is this being removed?
It's not clear why the name is `<%= trail.unstarted?>` but I think it's more readable to say that `unstarted` is the preferred name.
why do we need to call `Stop`?
I think we can use `pkg.util.GetDev` here, since it's a standalone standalone file.
We should log at least log at debug level.
Can you explain this change? I see it's used in a test.
as discussed, this is a separate PR, I'd probably just make a copy of this class class.
I know this is the way it was, but should we do `should include_sexp` instead?
I would not change the variable name, it is actually a property. The `REQUESTED` will set it.
Why not just make `lodash` a local variable and use it directly in the `WordPressWidgetTopLevel`?
I think we should make this public and just make it package private. Also, if the file is already in AvroSchema, we should not make any public methods in the schema.
I think you forgot to remove this `dependencies` import as well.
@michaelkuhn Do you know why we have both `index` and `index`?
Hmm, this is a change in behavior. What is the reason for not using `new`.
So now we have `12288` as well?
Why are we removing this?
I think the `logger` is redundant, because it's used in several places.
Why was this removed?
zip is not a part of this PR.
I would prefer to have the same naming in `reason` for `BrokerStatus`.
We should avoid using the namespace in all the other php files. It's a good idea to add a new line before the namespace.
This is not the right approach. If you don't want to support TLS, it's fine. But I don't think we want to support TLS either.
The `res` parameter is not empty, so I removed it. It's not necessary to add it. It is also used by `Rails.Now()`.
I think this is a breaking change, but it should be a breaking change for a version change.
Shouldn't this be true for the category?
does this need to be public?
What's this change? Is it related to this PR?
nit: this should be `VXLANVNI`.
I don't think this import is used.
Is it expected?
I don't understand this change. It seems we have to do the same thing for `get_multi_ERR_GOTO`. I'm not sure why this change is necessary.
This is a little hard to follow. We could just have a single statement here. We could also have this return a `lookup.Protocol()` instead.
why not just `avaava.something. EMRFS commands`?
I would have used "maxrequestbody" instead of "maxrequestbody", but I think we can use "iop" for consistency
Why is this being deleted?
Could this be `dialect = toReturn.dialect` ?
Maybe say that we're not in the service account?
This class is unused.
@deads2k i'm not sure about this, we should be using `ActiveRecord.FindFind` instead of `ActiveRecord.FindFind`
Should we check `tmp` here?
I think this is not the right fix, the key is already in the list.
`Status::Error` will be removed after we use the contents of `Status::Error` to be consistent with `Object#Preloader()`.
Why are you using a package for this? This is a very specific test, and is not a big deal, as we have a test that checks for the rpc, and we have to test that it's a good one.
this is the fix
This is not needed anymore.
I think it is better to do `t.root.lookupPath(buffer[:0], cidr)` and avoid the duplication of `t.root.lookupPath(buffer[:0])`
I think this is a bit confusing. If we do have a `c.state.StateView` and `stateView` to pass in the state, we should use that.
Can you use the `hash` variable here?
Remove the declaration
How about "this.flowFinished", since this.flowFinished will be finished."
Is there a reason to have `Workflow` as well?
Why not `symbolic link`?
@danielbachhuber Is it `@param string` ?
Please remove this.
We should avoid using `getAttribute`. `getReindexFromAttribute` will return a value that will be used for the attribute.
Is there a reason for this change, @jcotela ?
Is it worth having a default value for "isFocus=False"? It looks like you are setting it to False, which is why I'm doing this.
Why do we need to skip this? I think we're not doing any validation before we're trying to do that, but I'm not sure what the best way to do is is to just do `494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949
Can you explain why this is needed?
I think this is the only thing I'm missing. We should probably have a test for it.
Why not use `return FLAGS::NetworkUtils::toHosts(FLAGS_meta_server_addrs)`? It will be a bit simpler.
I don't think you need the JSON here. The only thing I've seen is that the `JSONBool`.
Why are you changing the return type of `sampled` to `sampled`? The `sampled` is a bit ambiguous and we don't need a separate `sampled` variable.
This will cause a new test failure, since the new one doesn't really need to be updated.
Do we need this?
The limit will always be `posNext` if limit < posNext. The problem is that we are making a limit < posNext if it's not set.
I don't think this will work. The checkstyle is "if" - that is what you do if it's a new line.
I don't understand why we need the klog package here.
Line is too long. [82/80]
Is this change necessary?
Should this be `(int, int)`? I mean, the test should probably be `(int)` instead of `(int) -1`?
`config->http_proxy` should not be set to "".
This should be `if ($settings['height'] != null) {`
I don't understand why you change this, is this change necessary?
This is not the fix. It should be `options.get(TableProperties.SPLIT_SIZE))`
I think this is a typo.
Is this line needed?
This isn't necessary because `_commands` is already in the `_commands` method.
We should not be able to remove the encoding. The caller should not know what encoding are available and can be returned by the user.
I think this param should be called "positional=False". It's not clear why it is called `positional=True`.
Could you please add a license header here?
why not just make spark_session_local a constant?
Maybe we should add a `TODO` here to ensure that the `Client` method is not present.
the `sp` space is not needed anymore
this looks like an unrelated change?
I think you can delete this line
Can we remove the extraneous new line?
Does it make sense to pass the `NewTestCtx` as argument to `NewHostConfig`?
I think you can remove the last item item here too
Why is this needed?
This will be a very large number of times.
Why was this removed?
I'm wondering if there is any way to make this change?
These includes are not part of the PR
Why is `isFirstAdmin` not `isFirstAdmin`?
What's the reasoning behind `Type`?
I'm not sure this is a good idea...
This should be a `omitempty` type. The `Id` should not have any type.
What's the purpose of adding this option? The class is not meant to exist, and it's only used in a single place. The class is not a "old" method, so I think this option should be renamed to something like "add_argument_coco" or something like that.
Why not use `$rootCategory` here?
I think we should keep this here. It's the same logic that we have for the task API and the task API.
I wouldn't expose the file to the `config` package. I think it's a good idea to import the module and then pass the `template` into the `config` module. It's a bit more general and easier to read when to use the template, but I think that's the reason for that.
Please use `String#Equals(String, StringComparison)`
Remove empty line?
Please annotate with `RemovePeer`
I don't see this being used anywhere.
Do not use parentheses for method calls with no arguments.
Does this need to be here?
This is not used anymore.
What do you think of renaming this to `pauseContainerName` to be more clear?
I don't understand this. There's a null check in the process. Is there a way to avoid the NPE? If it's not, then I'd prefer to keep this as is.
This could be `VectorLEa`
This is not needed, if `bb->instr` is already in the ifdef below, it is in the ifdef above, right?
I think we can get rid of this check now. It's still called after we have a call to `element.translate`.
I think this test is testing the wrong thing. It's testing the exact number of nodes in the tests.
`TlsHandshakeHook` is a `SearchOption` now, so you should call it `TlsConfig` here.
This looks like something that should be moved to the `FullSyncBlocksKnown` block
I would use `getUrlFromRouteCache()` instead of adding the `RouteCache()` parameter here.
I don't know if this is the right place to put this. This code is a lot of other code, but it's not a big deal.
Is it possible to have a non-zero exit here?
I think you can just remove the `Aggregate` call now that you are not using the actual `allLayouts` anymore.
@jridgewell Is this file still relevant?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Metrics/LineLength: Line is too long. [82/80]
This was unused.
I'm not a big fan of this `return`s. I think it would be more consistent with the `if tokens.string` above and in the `return tokens.string` above, but it might be cleaner to use a `str` instead of `return tokens.string(...)` here.
I think this should be a separate migration file, not a part of the PR.
@jridgewell We can't change the name of the component.
I think the `c` is not used anymore
Why is this line changed?
I think you can use `Task engine [%s]+` instead.
This was the only change I made.
I don't think there is anything else we should do.
I think it's better to move this method inside HttpsConnectionFilterOptions. That way it can be called from HttpsConnectionFilterOptions.
I think this needs to be done in the `getQueryBuilder` method as well.
Can you remove this file?
@danrot @dvoytenko: Why do you need a `readdirSync` here?
Shouldn't we have a test for this as well?
I think we can get rid of this file.
I think it would be better if we could add the `url` as a global variable and then use the `get_package()` function.
Can you make it private? We're not using it anywhere in the code base.
I'm not sure how I feel about keeping this in all cases. I think it would be better if we made the host_tags a static constant so it's clear what's going on with the host hosts.
would it be possible to get the session id first and then only use it if not required?
I don't think this is the right approach. The `zh-tw` package is in `currentCulture`. I don't think it should be in `currentCulture`.
This is not a query. It is not the same query as the Query's Query.
Line is too long. [82/80]
I'm not sure this is the correct way to test the new way, but this should be the new way to do it, not sure if this is a correct way to test it.
This is a bit confusing. If you have a `InnerObjectWithSelector` that does something wrong, you're not using it anywhere.
Nit: `init()` is a better name for the context, since `context` is a `context` instance.
I think it would be better to have the infrastructure here, rather than to pass the `command` in the `if`. It would also make it easier for us to add the `command` argument to the `get_package_window` method.
We should probably also check for the value here.
what if we moved the `--verbose` option to the `--verbose` option?
Shouldn't we be supporting the `incrementalKeyKey` here?
This is the only change I'm not sure I care about this. I don't know if it's worth it.
I'm not sure if this is a good idea. It is a good idea to add the same value for every `X` processor, but that's not a big deal for now, since the same value is used in the `WorkerESProcessorBulkSize` and the other one is not the same.
@bryevdv, but I think we should probably remove `ChecksumAddress` from the `String` and just return `String` in this case. It would be better if the `String` were already being used.
HeaderRestart is not a valid column name. Do we need to use it anywhere in this PR?
@matt-peters, what's the benefit of having `__hash__` in a `ClassOrBlock`? That's the `Header` property that is passed to the `KeccakRet` property. Is it the right place for this?
@deads2k this is the main change I am not sure about. I am not sure if this is correct or not...
Do we need to add `# type: 'Topic'`?
I'm not sure why you removed this.
I think this should be done in another PR, since it will be a BC break.
`index` could be `index.alias(index)`
`skipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskipskip
I think we should remove the event here, it's not being used anywhere
I think that this is not the right way to do this. The value can be None in the `if` statement, but that's not a big deal. I would suggest to add a `bool(value) is None` to the docstring and then `if None` to make the code a little less readable.
I think this is a leftover?
This should probably have a unit test.
What are the cases where `cast` and `cast` don't have `cast`?
(uint64_t)mmap_errors may be defined in the same order as other kinds of function.
Is this change intended?
I don't understand why you're using a mock here? I'm not seeing if you're going to have a bug here?
This is not a bug, since it's a new function, and it's a different one.
Why do we need this change? I think the old code still uses `t` as part of the Span context.
why not allow quality matches. This is the name of the feature
This was the main change from config to the new config option.
This is not the right place for this. The `label` field is used in a few places, so this is not the right place to put it in.
Why not `int=0.2.0`?
Should we also mention this in `beforeAutofill`.
Is this file meant to exist?
Can we add `isinstance(element, dict)` to `locator`?
Remove the const.
This is the change I was under the impression that the `druid.ini.Export` func will not be executed if the `context.Context` is `nil` (which is the case for a user-specified service). I think we should just do a function `return nil` here, and use that function instead.
Do we have a test to cover this?
Should we be using `[ConditionalTheory(nameof(nameof(keyof(keyof(keyof(keyof(keyof(keyof(keyof(keyof(keyof(keyof(keyof))` here?
We should probably change this to `dep BY trigger_dependencies WHERE dep_status`
I'm not sure if this is a good idea, but it's not a huge thing to change.
Shouldn't the appsec_blocking_enabled be checked somewhere?
These are not meant to be in a separate PR.
This should be `log.debug("Freed with parent console process.")`.
If you change this to `see` it should also change the corresponding `see` to ` - see`.
Is there a reason for this to be a constant?
Metrics/LineLength: Line is too long. [101/80]
Line is too long. [85/80]
Do we want to keep the `HiveNamespace`?
I think this can be simplified to sleep(1) instead of sleep(1)
I think it would be better to return KV without the error. This would also be a breaking change.
@stephenroller Is this a typo? Should it be `NodeAttestorV0`?
I'm wondering why do you need this change. I would just inline it in `pkg/api/v1.js`
remove this line?
I don't think this is needed.
Is there a reason for this change?
@danrot what do you think about using the `HostFactory` variable here instead of using the `libp2p.Option` variable?
I think it would be better to use a different `goDuration`.
How does this setLanguage(self.getElapsedAndTotalIfPlaying) even if no elapsed is set?
I don't think this change is necessary
This is a little hard to follow, but is there a specific reason for this change? Can we add a `new revision. To obtain` to the `doc Document`?
This is the only thing I don't like.
Is it expected?
this is a very old code, please remove it
This is a test that will likely cause issues, but it seems like this will cause issues when running in a test, which will not cause trouble.
I think this is not the right place to do this, but I think it's worth having a single `#if`.
I think this is the fix for the test.
This was probably a bug. The `StartTime` was removed in the `lib/aphost` and it was still in the `lib/aphost`.
I think `dump_puppet_log` should be renamed as well, because it's a `is_pe` method.
do you need to check that the time you get is the same value?
I think this can be removed.
This is not a bug fix. The only reason we need to call `AddTxResult?)` here is that we don't need to call `getDefaultValuesValuesValues()` in the `getDefaultValuesValuesValues()` in `getDefaultValuesValues()` because the `getDefaultValues()` returns a `ConcurrentDictionary` and the `ConcurrentDictionary`. The only reason we need to call `getDefaultValuesValues()` is because `getDefaultValuesValues()` returns a `Keccak?` and `getDefaultValues()` in `getDefaultValues()`.
This is not the same as the `NamePiece`. The same below is true for `newPieces`, but for `NamePiece` variable. The `NamePiece` variable can be set directly. So the `namePiece` variable is not used at all, it should be removed.
This is a bug fix.
does it make sense to use the "InstallCRD" as the result?
why is this here?
We can probably remove the `rescue` here and just return the `nil` below.
I think this should be a separate PR
This will remove the indexes from the repo.
This is not a blocker for me, but I don't think this is a blocker for us.
Shouldn't this be `if (!this.toolbox_.position())`?
This is not right. We're not actually using the `ReSharper*` version of this function anymore, right?
I think it's better to use `./plugins` rather than `.dbConnection()` here.
This isn't necessary, you can use `info` instead of `string` here.
This is a bit of a hack that should be added to the `@sig` annotation.
I think this is fine, but we should just have a `@PolicyRule` annotation that will be used for a flow for the `v2` key, and if we want to use it for the `v2` flow, we should have a similar flag for `PolicyRule`. I think we should just remove the `@PolicyRule` annotation from `pkg/resources/pkg/resources/resources/resources/resources/resources/etc.go`
I think it is better if you pass a functions and a new one you defined, like the other functions you have.
I'm not sure if this is the right place to do this. If the state of ActiveExecution is important, we should not be calling `get_steps_to_execute` here.
Use `Subscript` to `Subscript` instead of `Subscript`.
why did this need to change?
why remove this line ?
I don't think the define is needed, since this file is not in the RPM code.
Isn't this going to break all the code that uses this?
It would be better to check the error here.
Maybe `first count` is better?
@fmassa Can you please explain what's going on here? I don't see any visibility changes or it is being used anywhere else?
This file should be removed
Is this the right way to do this? If I'm reading this right I'm going to change the name of this option. I'm assuming this is a bit of a great assumption that the default should not be allowed to open the `FIPS region`.
These two test_tools.sts_stubber import is not used anymore, right?
can we add a license header here?
currLimit is a better name for each item. It is a bit confusing to have a list of those objects.
I'd prefer a more descriptive name for `RSpec` because it is more consistent with the rest of the codebase (e.g. `/api/util.skip`)
Can you use the `podaos` struct here? That's what I meant by the `podaos` struct.
I don't think this is a good idea, since we're using a hardcoded `codecs` to get the `lambda name`. The code will not work for any `utf-8`/`utf-8` or `cp65001`. We should use `self.product.dependencies` instead of the hardcoded `codecs.register` if we don't use `self.product.dependencies`
`invalid` -> `invalid`
I think this line should be removed. The param name should be the same as the `name` param name.
No need to specify the `# NOQA` here.
We can remove this to avoid having to repeat the `Widget` in every request.
This one was a bug, right?
I don't think we should be changing this here, but I don't think we should change anything here. We're just trying to make sure we don't change the `if err != nil` branch below.
I think we should move these backoff to a separate package, since we don't really need the `agent` dependency.
I don't see why this include is needed.
I think you should add a `Stop()` function to `configure()` in `configure()` to make sure that the function returns the last time the file is created.
This should be `GroupGroupGroup` and then `reportreportreport()` should return `null` if ` ALWAYS_UPDATE` is true.
I think this should be `tab difference at "clang-format on"`.
I don't think this import is needed.
@cra0zy - It looks like the `methodConfigs` variable should be moved into the `for` loop above?
Shouldn't this check also be for `--help` and `--labels`? (i.e. in `utils/v1` and `os.Stderr`)?
InitialPackageDir should be translated
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is a bug fix. It's not really important that the value of the 15ms is the same, but the value of `dstack_offs` is zero. I think it's ok for now.
Why not just call `getermsOfUse`?
What's the reason for adding the new config?
This is the only place where we need to send a different notification. I would rather just send the notification in `sendAll`
I think we can just use `RELEASE` here.
This change is not correct. The hash will be removed.
Shouldn't this just be `EnableLogging bool`?
@bparees you can't find a way to get the existing metadata, but I don't see any new metadata, so I don't know why we need to do that. The `evloop_latency_ms` is only needed in the first place, so I'd like to see it as well.
`_getHash` should not be necessary, as it's already in the array
what is this code for?
Should we also add the `CloudCacheFraction` interface?
Is this still relevant?
Could you please add a spec for this?
I'm not sure about these changes, as the `list` is a `List`, not a string, but it's not a `List`.
@mattcaswell this is a good example where we should be using the `<p>` tag.
Revert this change.
I'm not sure if we should be using the state machine for window.
Why this change? I think it's necessary to change the test.
this is a bit weird, the cast can be replaced with the casts in the loop, and it is not necessary to cast it here.
Can we use `ConfigProto` here instead of `getDefaultLanguageFeatureConfig`?
It looks like the logic of this code is repeated in multiple places. Can we move it to a helper?
This is a bit weird, why not just use `skip_links = -%>` ?
This is a little weird, I think we should just always use the `GetPhysicalDeviceDisplayPropertiesKHR` directly.
Is this the right place for the `IsDockerEngineRunning`?
Why `get_string_by_dialect(dbengine.dialect.name, 700)` ?
I think this should be moved to `*` so that it doesn't get updated in the base class.
act_cfg is used to be used to grok? (And I assume this is a public API, but just wanted to point it out).
I think this could be done in a different PR, but it might be worth adding an example for this feature.
Why not `folly/ssl.h`?
I don't think this should be right. It's a `dom` tag.
Can you explain this change? Is it a bug fix?
I'm not sure we need this change. The fixture fixture is used for testing.
I don't think we need to do this here since the controller doesn't use `user` model.
why min miny is 0?
Does this mean we can remove the maxp check in `batchSize`?
This is a good example of what the error message was. I think it's worth adding a new column `Internal` to the `.spec.BigDecimal` file.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
@francescoBorzarek Can you review this?
I'm not sure how to get this change. If you're using it, you should change it to `~/.pilers` or `~/.pilers`
This is the only change required to address the tests in this PR.
This is not a valid endpoint, we should create a new endpoint to create theMarkerTransaction, and not create aMarkerTransaction. I think we should remove this endpoint.
`RequestDefaultErrorMessage` is now unused, can you remove it?
I think we should just remove this method. It is now done in `TestBaseTest` and it will be a bit confusing for people using it.
is it possible to use underscores in the condition?
`fla/` should be `zfs/opensearch_description_tag`
We should not be doing this anymore.
I think we can probably get away with just `.toMatchElement( 'p' ).toMatch( 'p' ).toMatch( 'p', { text: /need to give Site Kit permission to create an Analytics account/i ) ).toMatch( 'p', { text: /need to give Site Kit permission to create an Analytics account/i ) ).toMatchElement( 'p', { text: /need to give Site Kit permission to create an Analytics account/i } );`
I'm not sure if this is a good idea. If the `TableMetadata` is a single location and the `base` will be a single location, then it will always be a file, and then we should add a `TableMetadata` to the `base` list and add it.
I don't think we should be calling this detach every time we call this function. I think it should be enough to do it for detaching.
I would prefer to keep the `__init__` method in favor of `cls.__a__`. I think that would avoid breaking the code and use `cls.__name__` in the `__init__` method.
I would add the `log_path` param to this function and add the new one to the docstring.
Style/Next: Use next to skip iteration.
I'm not sure if this is the right fix. It should be in the spec file, but I think it should be in the spec file.
I'm not sure if it is the best name for this parameter. It seems like it should be `[options.causalConsistency] Enables or enable.`? I'm not sure what's going on here.
This is not a good change, please revert
can we add this to the `parse` function?
nit: this could be a `Namespace: "",`
$this is an array of ids, why not use a set of ids instead of a boolean ?
not implemented by the Go SDK?
Shouldn't this class be renamed to `private static final`?
This should go before the wildcard import.
I don't understand this change.
This is a bit weird. What about the other uses?
this should be `// +build !`
I'm not sure why we remove the whole test.
`options.Histogram` will now always have a list. I think we can just use `options.cwd` here.
What about `::Hx2` or `::Hx2`? This is the only thing that uses the .xx2 library. I think we should just keep the .xx3.
This is not necessary
Why remove `throw new KeeperException.NoNodeException(...)` ?
This is a bit weird. Is there a `:download_url` that we can include in the `:record` table and not the `:record` table?
TIL that `Bolt::Logger` now does the same thing. I would say that `support will be removed in Bolt 3.0.` -> `support`
I think we can move this to the `filter_options` method, since we don't have to do it in the code
I think we should just delete the delete. It's not a blocker.
Why do we have both `row` and `t`?
I think you need to do a similar check for `is_errors_to_leader` in `service/server/server/service_client.go`
This should be `nil` instead of `if in.HTTPMatch != nil`.
I think we can get rid of this and use `self.relationship` instead
Maybe rename this to `optional Encoding`? `Encoding` -> `Resolve`?
We should probably add a link to the setup and link it here to ensure we have the metric metric available at the start time.
I think we can remove `Gauge` now.
Why did you remove IsProcessBackground here?
should we set this to `nullptr` if we don't have to. Also, if we have a default method for the method, we should also set the default to `false` if the method is `nullptr` and set it.
This is a bit weird. What is the errorDialog being raised if the caller has no errorDialog? Can it be extracted into a variable?
Please use `print_resource_changed` to be consistent with the other `register`s.
This is a bit odd - how can this happen?
is there any reason to keep the `t0`?
Should be `The solid colors are supported.`
Can we use a `common.path.join` here?
This is a change in behavior that is a change in behavior that is not related to this PR.
why is this removed?
Just curious, is there a reason to do this same thing in the PrometheusMetricBuilder() method? I'm not opposed to doing this, just curious.
Why not put it on the `if` branch instead?
I think it would be good to add a check to ensure that the segments isn't NULL, and if the user is not aware of it then it will be able to see it.
I'm curious, why do we need to check for `first_name`?
This is a pretty trivial change, but the rest of our code does not appear to be related to the PR.
@jaeilepp is there a reason why this was changed?
If you're using `braille-patterns.cti` you don't need to use it here
Why remove this? It will be removed in general.
Can you add a `TODO` here to remove this `HttpMethod`?
Use `if (!parse->EventPlayer(EVENT_LOOT_ZONE))` instead.
The `.to_sql` calls are only used in `support_by`, so it should be safe to call it here. The `paginate` is only used in `support_by`, which is not used by the `support_by` method.
Unused method argument - `_tuples`. If it's necessary, use `_` or `_tuples` as an argument name to indicate that it won't be used.
This is not needed anymore, right?
why is this change needed?
Can we also add this to `implemented.js`?
This is a good candidate for a helper method, as it's a little bit of a mess, but I don't know if there's any other code to put this code into a method that's not a subclass. I'm not a big fan of this, especially since we're doing the same thing here.
I don't like the idea of having a `scheduler` module to create a new scheduler, and I don't see any use of `get` methods in the `get`.
I would prefer to see the method in this class, but it's not a big deal either way.
is there a reason why you didn't just use `HttpHandlerDiagnosticListener` here? if so, we can use `HttpHandlerDiagnosticListener(t, s) => new HttpHandlerDiagnosticListener(t, s)`.
The `HttpParameterType.BODY` should be a constant, so it can be used in several places.
We should not need this check anymore.
nit: remove the `status` here since we are not using it yet.
I'm a bit concerned with this change. I think we should have a separate "real" function for memory pressure and decreased.
this should probably go into the `test_data_with_many_channels` function
Is this a bug?
I don't think this is the right way to do this. It is a bad idea to stop a lot of nodes.
Should this be `authConfig := docker.AuthConfiguration{Username:      authData)`? I think it's a little bit more natural than `authConfig := docker.AuthConfiguration{Username:      authData)`
This doesn't appear to be used anywhere. Can we remove it?
why not `regex`?
I don't think this is right. I think `reporepoDir` should always be `CreateRepo`
@deads2k @jsoriano This will be a bit more clunky, but I think we should probably have some sort of "auth" in our type hints.
I think we should raise an error here instead of trying to log the stack trace. In case we have a `try/except` block, we want to log the stack trace, but we want to log the stack trace.
Do we need this in the database?
This is a pretty stupid question, but why are we making this change? It seems to me like it would be a breaking change if we are using it elsewhere.
why not use a `String` here?
this should be a debug level, no need to log it
remove empty line
We should probably make this trad by default and use the new trad state instead, to make it more explicit.
This function is not used anywhere. You should be able to remove it from the API.
`QUORUM` -> `UBUM`
Which is this change about `checkCoinbase`?
This is a very minor detail, but it would probably be nice to make the `require` package private to keep the code consistent.
This file is no longer required
I would prefer if this wouldn't be a problem if we could make this `guid_save` instead of `a.save`, and if so, we could have this as a `defaults` as well.
Shouldn't be `context` or `stretchr`?
i think this should be a service, not a service
I'm not sure if the idea here is to make sure that the user has to use the correct `.filter` method.
I would move this line outside ` warn_if_key_taken` so it can be reused if the warn_with is not there.
I think it would make sense to expose the `const` block to the top level model.
We can probably do `exists` instead of `actually` here, since we're using it in other places in this PR.
This can be removed.
It seems like we should be using `Filter` for the `key` type here
why is this static?
This one was missing.
I think it's better to keep the old `example.weld` test since this test doesn't fail and it will be fixed by a new PR.
Can we keep it for backward compat?
You don't need the `_VOL_SUPPORT` attribute here.
Do we need this line? It is already checked by line 488 above. We can also remove the NULL check from here and the next one.
I think we should be consistent about how we do this. For example, when we're using `node.doc` in the first place, we can still use `doc` to get the value.
This change should also be reverted.
This should be marked as `CSCSchain`
For the record: this should be a warning. Otherwise it's not a valid file, right?
@tgamblin This is a change from 1.1.1 which is the reason to do this.
This is the main purpose of this PR.
Is this field visible? I thought it was only used for testing purposes?
Is there a reason for the extra namespace change?
This should be: `cci->num_simd_skip == 0 /* save all regs */`.
I don't know if this was intentional, since the user doesn't have to remember to set this.
Please don't make use of this, please.
This is the only change that affects the `type` below. We should not do this for every `Create` method.
I think this is not the right fix, but I don't see a better way to do this.
Do you need to do this to avoid the `Enumerable`? If not, can you use `.nil?` instead?
Is this related to the rest of our API? I think it's fine to just add this as a public API. You could just make the `__init__` as an input argument.
Style/RedundantSelf: Redundant return detected.
This should be added to the `config` package. Otherwise the service is available in the `config` package.
I think we should use `DATA` instead of `DATA` here, as in `getInputFile` returns a new `ReaderReader` object that we don't care about.
Would it make sense for us to use `contact_us_url` instead of `contact_us_url`? Or would it make sense to use `contact_us_url` as the default value?
This looks like a typo.
I'm not sure about this one. It is a good idea to have a method named grpc in the config class. It is not really a good idea to have the API call to `grpc` in this class.
delete this if statement to make it clearer that the caller will not have to do anything about it. Also, if the caller doesn't need to know about it it should do the right thing.
I'm not 100% sure about this change, but it seems to be a bugfix for the change in the API to pass a value from a different package. If you want to do it in the API then you can remove the `return impl__->remove_all_changes(removed)` call below.
This was a bug, right?
I don't think we need to do this. If we do, we can just call the `GroupMember` method from the `Pods` method, and remove the `GroupMember` field from the `Author` object, and then remove the `Author` field from the `Author` field from the `Author` field.
What's the reason for changing the name?
We should probably have some sort of flag for this, too. I'm just not sure what this is about.
This should be a separate PR
There is a `8` here.
You don't need to add these from environ_info. They're not from the environ.
Use the new Ruby 1.9 hash syntax.
Why are we returning here?
Why is this import needed?
The problem is that `nameof(maskKey) == 'instanceID'` is to create an instance with the `_shared` instance and we can remove the `_shared` instance from the `additionalTags`. The reason for this is that if we change the `additionalTags` field from the `id` to the `instanceID` field, we can remove the `additionalTags` field from `id` and the `additionalTags` field in the `additionalTags`.
Is this the only place we need this? I don't think we need to introduce a new attribute.
Why do we need this?
The method is called "dataset". I think this is better.
I'm not sure why this is needed. It seems to be the same as the `blockProcessor`
I would have preferred to see a different name for `insightfil` in this file.
I think this would be better as `return super unless unless `force_round_started`
This line is a bit pointless. Can you use a set here?
Why are these Symbol removed?
This is the wrong place to put `\u2E00-\u2E7F\\'` on line 874, which is why the `\[\` is not in `py3`.
Let's not do this for now. We'll need a dedicated dedicated for all the `flake8` links to this package.
This is not correct. The `out_dir` variable was used to set the out directory to `true` in the `out_dir`, but it does not.
@bparees this looks like a good candidate for a `\b` to get a `\b`.
Why not make this a constructor argument?
I'm not sure this is the right fix. The `https` function should be used by any of the `https` implementations in this function.
I think you can remove this
Would it make sense to have a `ErrorListener` as the `ErrorIdProvider` here?
This is not the same as `ResourceType` as it was previously.
I'm not sure if we need to pass the whole `ChainID` into the `BlockchainCtx` function, but I'm not sure if it is worth the additional `Tip` function, and if we're going to add more things to the config - it's not a problem, it is just a `ChainID` function.
I think we can remove the NativeClient class entirely. It's not needed anymore.
Thanks for the PR @dvoytenko @dvoytenko @rsimha-amp to review. This change should be in a separate PR. The `rule_name` value of `resource_name` is the `rule_name` property.
I would suggest to use the `texture->width()` option for the `texture->height()` and `width_from_buffer()` as it is the same as `texture_height()` (see `create_texture_from_buffer()`).
I think this should be a `proof_as_index` instead of a `""` in the `BaseEpochs` class. The `Throw` method is a `Throw` and it is the `Throw` method, but I think that's fine for now.
`s_val = malloc(flb_sds_len(tmp, flb_sds_len(tmp))`
Doesn't `make check` need thepackage?
this is the bug fix.
Why are you removing this? I think it should be a pointer to `github.com/sonm-io/core/proto`.
This is a very minor thing, but it seems like a lot of notes could be moved to some common function.
We don't need to set `bucket` here.
Line too long.
(style) please, no space before tabs
`^` is not supported in IE. `if x.with_nms, 'with_time augmentation'` is `True`. The difference is to remove `NULcordingcordingcording to value, 'develop' and 'develop' and 'develop' and 'with_nms=True'` from the test.
Missing module member variable.
Shouldn't we be using `validation.pages` here?
I think that we can get rid of retrying in this file. It is not used anymore and we should get retry in a more general design design
Can we add a note that this will be added to the page as well?
This is the actual bug fix, but it should be fixed in this PR. Also, `Player_type` should not be needed anymore.
Thanks for the PR! This was just a small bug!
Why not remove it?
Why not use `StringUtils.isBlank`?
i think it's better to move it inside the `if (softmax_param.clear_loss_weight()` block and move it before the `if`
I don't think this is necessary. We don't have a conflict here. We just don't have a conflict in the first place.
is it necessary that `apply_prep` doesn't get set to `True` here?
This is a breaking change. We don't want to have this in the public API.
I'm not sure if this is the right test.
At this stage should be in `setup_environment.py`
This should be a `static const` `static` `static` `static const`
why not just `int64(dataFee, ones)`?
This should also return self.extras
Why is this being removed?
This test was failing due to the bug in the CI due to the failures failures to the `llnl.util.offsets` -- no need to test the case when the `llnl.util.offsets` was disabled.
I think we should remove this, as we are already passing in a `Set<version>`
was this a bug? or was this just a copy paste error?
I think it would be better to use `cmd/`. Also, I don't think the `local/ghc` should be used in this file.
Why do we have to change the order here?
Does this change the default behavior? If so, should we update the default behavior so that users can change the default behavior?
Should we just change the type to `i := mathrand.Int63n(100000000000000000) if serialNumber == 0`?
This should be `public` (or `public` because it is not actually used anywhere)
@jmhooper @mjkkirschner @mmaxim do you know if this is correct? I think we want to remove the herender check in `be.a()`?
Why do we need this?
I'm wondering if we should have a test for this?
We don't need to pass in a block. Just call the value `BlockAPI` and call the value `BlockAPI`.
Is it better to have an `AttributeAttributeCode` attribute for it?
nit: can you remove this file?
@jsoriano This is the bugfix. I think we should ignore the `time` from the `DurationField` here, since we are not using the `time` anymore.
Should we be setting `p.err` here?
Is this needed?
Why did we need to change it?
This is the only change that fixes the issue.
Please update the Sandcastle example to use the `Cptables` lock instead.
This seems like it should be an error if the user explicitly tries to use `Key_Enter` and is `ControlModifier`. Is that what you want?
I don't think you meant `wlr_gles2_tex_shader`
I don't think you need the `decode` call here, you can just call `collection_path.decode`.
This should probably just be `respond_to?`.
This is a bit of an unnecessary change. The variable $chars will be used for the variable value of $chars, which is a string, not an array of $chars.
This change is not related to this change, but it seems to be unrelated to this change.
(style) trailing whitespace
This is not a boolean. It's an array.
I don't think this method should be called anywhere. It's not a blocker and should have a `@private` annotation.
Why not `!linux linux,android`?
This seems like it would be better if you used `if v == "" {` instead of `if v in ""`
This is a breaking change. It's not related to the change, but it is not related to this PR.
This should be replace with the `replace` call above, right?
@jmhooper @stephentoub do we need the `list_db` here?
this is probably for the right place for this
I'd prefer if you used `#include <sys/types.h>` instead of `#include <sys/types.h>`
this is a bug fix.
I think it's better if we move the `ipsets` imports from `kuma/felix/ipsets` to `config.yml`.
I think this import is unused.
Why are we calling this `guid`?
This should be just `use`
This is the same as `new values.NewUInt(uint64(col))`
This class was only used for the cache friendly docs.
Please remove this extra line
I'm not sure if we should do this. In case we have a UpdateUpdateEvent, we should not have a UpdateUpdateUpdateEvent. I would prefer to have the following: 1. Add a `UpdateEvent` method to the `UpdateUpdateUpdateUpdateEvent()` method, and add a new one. 2. We can add a `UpdateUpdateEvent` method that returns the event and then use the existing one. 3. Add a new one with a new event.
Shouldn't we use `reverse` here?
I'm not sure what this assert is about.
this is going to be a bit confusing, why not `updated_at.to_i` or `updated_at.to_i`?
How about creating a separate method for appExe? It will make it easier to read and read.
Shouldn't this also be `StandardCharsets.UTF-8` ?
I don't think we need to import astroid here, since we are not using it in the `install` module.
I think it would be good to have a test case that checks if `_corruptedRequest` is set.
I think this is a leftover from debugging...
This seems like a change that is just a mistake, I don't think this abstract method can be used.
can we change the description of this to something more meaningful? `it 'only includes active plans' do 'plan'`.
This seems like it should be a `nano::transport::mapped_from_v4_mapped_address`.
Why is the name change required here?
Why not just use ` ChromeDriverCommandExecutor` here?
In theory, you can also check if the `type1.getType().isEnum()` is null, and if it is an enum, it will return null.
Why do you need a separate dict here?
Why the change?
not a good idea, why do we need this?
I don't see the need for a log here.
This is not needed. The `prepend` argument is only used in the `T`.
This is a breaking change. Can you please add it back?
This is the official convention of the `text/css` that should be fixed.
Is this just a matter of style?
You could just use `HttpSpan` to get this functionality directly in `HttpHttpSpan`
I don't think we should do this. The app generator should be able to delete the app.Open to do so, because we can't do it now. We need to keep it for now and just do the same for other instances of the app. The `FrameworkDescription#ToString()` call below is not needed anymore, so we can just remove it.
Can you please add a `setup` to the `setup.py` file, and add a `install()`?
I think we can move the logging to `CreatedId`.
Lint/AmbiguousBlockAssociation: Parenthesize the param [...] on the right hand side.
I think we can remove this whole class entirely.
@t8m what about `UpdateSpanWithErr`? I don't see the `.UpdateSpanWithErr` method being called anywhere else.
Maybe we could just use `kwargs["protocol"] = kwargs.get("protocol") or "https"`?
whats the reason for adding these?
This should have been inlined
Why are we deleting the partitioning in SQLite instead of just deleting it ?
I think this is the wrong approach. You should use `ctx.Data["Title"] + ctx.Tr("dashboard")`
This is a change in behavior, but the current code is not really correct. We should probably be using the same `Simple_NOT_FOUND` here.
Does this mean we can return results if there's an error? I think we should either do `// substitution: < 0]reflect.Value{reflect.ValueOf(reqBody)})` or throw an error if there is no error.
I think the default should be `1` instead of `2`?
Can we also add `[options.compareStartDate]` and `[options.compareStartDate` to the `#includes` and `#includes`?
Why not just use `Clear` here instead of `null`?
Does this mean we are not reusing the same code everywhere?
Please remove the line if it's not needed.
We should probably change this to just `expect(analytics).to be_true`
You can use `elif isinstance(key, (str, tuple, list)`.
This is a breaking change, we should probably change the name of the test.
I think we should use the `pages` param instead of `.show` here.
Is there a reason to change this server to a constant?
I don't see this used in this PR.
Is this right? It looks like the spec doesn't use a name, right?
Can we add a TODO here, so it's easier to remove?
I don't think you need the prefix here. A global global function is already called `IMvxViewModel`.
Why not `failed to stop exporter`?
Why change this from int to int?
This is the only caller of this function. Why do we need to return an error here?
This is a bit of a hack, we can't just delete this file, as we are not using the custom `if` anymore.
RegistryURL is not needed. It is already used in the URL. The other way around is to add the archr.RegistryURL.
I think we don't need this import
This is a bit of a weird thing to do. If we're going to get an empty string, then we're going to have to add a `IE11 do not support IE` and a `IE11 do not support IE` with a default value.
I'm not sure if it's possible to read all CheckSum by default. If there are no reverse regions, we may have a reason to read it. If there's no other way to fix this, then we should read the file and not read it again.
This should not happen on windows, as it is only for index files
Why not use a path.conf?
Why is this check needed? Is it because the column column can't be called from a `hasPk`?
The `SurefireDir` flag isn't really necessary, since this file doesn't have it yet.
This is a breaking change. I'm not sure why we have it in the PR.
Is this change necessary?
Why do we need this?
I think this should be `4.3`?
This one is missing the second part of the `if`.
I think this is the only change that will break existing users if we don't want it to be in the future.
I don't think this is needed
Use && instead of and.
I don't think this is a good idea. The keyFilePath will be an empty string. It's not a big deal, but it's probably not a big deal.
I don't think this is right. The code that uses this method is only used for the table table.
Please don't add this copyright here.
Why are you using `int()` here? Isn't it better to be explicit and cast to `int` in the next line?
Could you please remove these spaces?
Why is this being removed?
I think it's better to use the same API as in `use_legacy_coordinate` for all new users. The same for all users, so we don't have to add it in `core/handle_UnsupportedOS_test.py` file.
why do we need to add bool here?
I think this should be a warning, not a warning right? Maybe a warning?
I don't think this check is necessary
This import is duplicated
I don't understand why this is needed. I don't see any other options using this backend, but it seems to me that we are using it for a backend, which we are using.
Why do we need this change? What is `allowedExtensions`? Is it because `runAndWait` doesn't allow `null`?
I think this is a bit of a weird thing to have to be called here. We're not really using this in the project. It is a bit of a hack that is not a hard requirement. I think it is better to have a `ksql` package that has a `ksql` package, and then have a `ksql` package that does the same thing.
This is a breaking change.
This is the only change that affects TF providers. I think this is the only change in this file.
Should this be `opts.spinner.Stop("Error!"`?
this is not needed, please remove.
Is it possible to move this log outside the for loop and make it private?
Please revert these unnecessary changes.
Does this mean we have to change the name of the initial name? If so, would that make sense? If not, would that cause any problems?
Is it possible to get this from the test file?
I'm not sure how I feel about this. The `spawn.h` file is supposed to be included in the `.h`, which in turn does not work. I think we should be doing this in the `build_environment.c`.
This is not needed anymore, right?
This type is not correct. `libkbfs.PublicPathType` should be `type`
If we don't have any email, we could also just add the `.find_by(to_email, "template_name: <...>=...)`
This is not needed, right?
Is this change related with the fix?
This should probably be a `const` instead of a `const`.
`Boolean.of` would be better than `Boolean.of`. Also, I would use `Boolean.of` here instead of `Boolean.of`.
This is not a valid fix. The reason is that if there's no `io` or `io` we can't just warn the message and the caller can do nothing if necessary.
can you check this path before starting it?
In the current state, we should only validate the `eq` here, if `eq` is `1` or `2` (or `1`), and if it is `2`, then we should use `exec(x)`.
Can we just pass this directly to `driver`? I think it's more readable.
I think this is not the right place to put this in the test, since it's in the `exteranlaw` package.
can you please remove this?
If we're not using this value, can we instead just skip the `as_index`?
Please add `$thisModuleData` as a parameter to the constructor so we don't have to pass it in in the constructor.
I'm not sure if this is needed, but it does not seem to work. I think we can keep the version here.
I don't see where this method is used.
Is this debug statement really required?
I don't think this is used anymore
Metrics/BlockLength: Block has too many lines. [30/25]
why not using a pointer in the `Config`?
MakeServiceAccount string should be passed to this method as well
This is a good candidate for a helper method.
This should be done in the `BaseMessage` package.
We don't want this in the test, right? We don't want any of the child updates to our models, right?
nit: this is a little strange, but I'm not sure what's going on here.
This is not needed
This will cause the descriptor to be updated in the next slowdown.
This should be "onFocus".
@dvoytenko I made the change here to not change the API. I was thinking of it, but I wanted to ask.
I'm not sure what the best way to do here is. The idea here is to add a `#ifdef` to the `config.PORT_S3` block, which is what the URL does.
I think this should be a static variable.
What's the reasoning for changing this?
This include is really confusing. If there is an include "fmt/format.h" then the include should be included.
remove empty line
This looks like a weird place to me, since we have a `defer` statement here. I don't have a strong opinion, but I don't have a strong preference either way.
I think we can remove the `.code` here.
@deads2k @mmaxim do u know if this change breaks anything? I think the `--host-v2` package should be renamed.
This message is not clear enough to me, "Failed to parse failures XML: %s" is the correct message.
Should be "good case", too
@smarterclayton now I've removed this.
Is this change intentional? It doesn't look right.
Nit: we usually avoid the full name change.
Why are we changing the order of the parameters?
@mfojtik why not `ssl`?
Please revert this change.
I don't think this is the right approach to do. I think we should just pass the source here and pass it in the same way as we do it everywhere.
You can do `_this.getValue(path)` directly.
I don't think this check is needed. The `tabIndex` variable is already initialized in `parseInt`
Won't this always be true?
Why did this change?
We should probably make a `Debug` package private to keep the old name consistent.
I don't think this will work. The table is not in this table. The `.meta` file is still in the schema. The `.meta` table is only needed in the schema. The `.meta` file should only be loaded if the table was in the schema.
This is a bit weird... why not make it a "0" variable?
What if we added a new runtime types that are not found?
You can use `this.Low = BitConverter.ToInt64(bytes, 8);`
This should be `webkit`
This is a bit confusing, why do we have a `NotifyCollectionChanged` that is a `NotifyExitChanged`?
you need to add `TimeDeltaParameter` to the `Task` list.
Why not just call `callerType`?
I think we can skip setting `@user.id` instead, because it's the plan that is set in the first place. We don't want to do that anymore because it is the plan that is passed in.
@nmittler - Is there a reason why the number is `-1` rather than `-0`?
Please remove this empty line
I think we can remove this and just change the function signature to use the `toggleMenu` variable. The `toggleMenu` is used for subclasses of `label` in the future and we don't need to change the signature.
Why is it "Sig"?
In theory, we should use `django.test.concurrent_token` here.
why do you need this here? It's a `page_ranges` no matter what is passed in.
I think you can remove the `ExtractSomeIfAny()` call here, as it is not used anywhere else.
Not a big deal, but this one probably needs a `_` before the `=`
Is this change intended?
Should we do the same for other errors?
This looks like a weird place to me. I'd like to see the new name more specific, but I don't see how to do it.
What's the difference between `PrepareRequest` and `IFeatureCollection`? Why do we need this?
I would prefer to use `\d+\.?)+$/` instead of `\d+\.?)` as the default.
I don't understand the change, the name of this method has to be renamed. Can we just call it `getConfigName`?
I think we can skip `CloseableIterable.empty()` and use `Lamba.AttributeError(CloseableIterable)`.
Is it worth adding a `Test` class? I'm assuming this class is used in a test class, so it can be removed.
I'm a bit concerned that we can remove this line entirely, because the methods in this method are only called by `enable_*`, which would then be called by the caller.
I think this should be moved up to the test, not in the `working` package.
I'm not sure if this is the correct place to put this. The `! previousError` should be removed.
This is a bit of an unrelated change, but I'm pretty sure it's a good idea to make this change.
It seems like we're not using `user` here anymore? Maybe we should just pass `def` to the `uppercase` and `created`?
I'm curious, what does `go` mean here? Does `go` mean mean `ll` mean `status`?
@nvazquez can we get rid of this too?
this is wrong, we need the check for `!empty()` here.
I'm not sure if this is a good idea. It's probably worth it to just do a `nameOf` of `nameOf` and then if it is not there.
@jridgewell I think this line is not needed
Why not just `numAccounts`?
This looks like a duplicate line.
I'm not sure if we need to do this, but it seems to me that we only need to do this for a `ctx` command, not just the value of `0`.
This is a bug in the PR description. The bug was about it. This PR is not related to this PR, but I think we should be consistent and remove it.
This is the change that fixes the issue. The problem is that we're not doing any validation in the middle of the loop. The only thing that is to add a `cborStore` variable to the function is that it is not used.
I don't think `self.set()` will work here. `self._has_logical_keys` is the correct value.
This class is not used in the `ResponseTypeProcessor` class, it is only used in the `ResponseTypeProcessor` class.
Do we want to call `feat_is_unconstrained`? It seems like it should be a `dict` and not a `string`, right?
I think you can delete this function and just call `_process` here.
this is the wrong value
I would add a link to the name of the target target, that is why I added this here.
Please remove `available WebEngineWidgets`
This needs to be a test.
I'm not sure if this is a good idea. If the user has to do something, then the database is not going to be fully launched by the database.
I think we can get rid of the `application` if we're going to have to do anything special for it :)
Style/MutableConstant: Freeze mutable objects assigned to constants.
Why not use the `ConsoleColor`?
not a good idea to have a better error message here
All can be 0x
"bee - - - LICENSE file"
Why are we passing the `admin` here? We don't need the `admin` attribute anymore, right? I think we should keep this here.
Shouldn't this be a `Map` in place? I think it's not a `lax` option, and it's a `Map`, but I'm not 100% sure.
Shouldn't we use `ITraceSession.TraceFilePath` here?
nit: this should not be here
It's better to use a different name for the variable `pandera`
I would move the permissions to the `itemsPermission` class.
why is this not a problem for the `ThreadPool.submit`?
This is the only change that affects the user-defined config option. Can we remove it?
I think you should remove this line.
This is not needed, right?
I would use a more explicit name like `host2.example.com` or `host2.example.com`, but I would also prefer to have a consistent name for this.
I think this might be too much for a better name. e.g. `new RateLimiter(maxTracesPerInterval: intervalLimit)`
same as above - I'd suggest to call trainer as parameter, otherwise the parameter should not be used.
Would be nice to have a separate `&` here to avoid the `& type ()` as well.
Why not `DeleteFiles`?
@liggitt, are you adding these 2 new lines?
why is this defaulted to -1?
This should be `An`.
In the past I had a reason for the number of seconds, so it would be more readable if it was 10 instead of 100ms.
maybe it's worth noting that the array is in a generic array.
I think we can drop the `<p>` here, since we don't have any new `text-box` anywhere in the repo, but we don't need this.
this is unused
Can you add a license header here, so that we can easily easily get the version numbers from the dashboard?
This change is not necessary. `status` is used for an event handler in the event handler, and it's not a problem.
Why is this change required?
We should add this property to the property name.
This is not a good way to do this. If you want to do this, you should be able to run the tests before creating a `cleanup` that is run the tests. This is a bit of a hack to me. If you want to run the tests in a `cleanup`.
I would have added a default value here, to make it clear that it's not a type.
nit: maybe `export * from './helpers-sort-object-map` to match the other naming convention?
what's the purpose of this line? do we still need to keep the `require "#{Rails.rb":` line?
I don't see the reason to have `upperMethodName` as a `upperMethodName` in the constructor. Can't we have a `upperMethodName` as a `Map<String>`, or is this a different type?
Please add a space after the `if`
Is it possible that these center and others are still in the `main` branch? I don't think we need them in the `main` branch.
Is there a reason to make this a constant?
I think the indentation is wrong here
Do we really need these new tests?
This is a little strange. I would have put `g_remove_token` in `pants.util.service` and then put `isspace(c)`, which is not what we want.
I'm not sure if this is correct. The `c.Wireguard.EncryptHostTraffic` will only be set to `false` if `p.Wireguard.ILName` is empty.
We should rename this field too
I think we should remove this file if it's not needed.
driver_.name() is called twice.
Line is too long. [81/80]
This was the only caller of this method, so I changed it.
If we add the same `skip` method, we can skip the CNP.
This is not right. We're trying to get away from using NCR specific template, but I guess it should be possible to get rid of NCR specific template.
I think you should do a `.to_h` here.
I think this is a leftover from a previous PR, but I think it would be better to use `if (string) { // isValidWebDataStreamID }`
This should just be `leaf`, since the error message is a `leaf` not a `finally`.
@andreasohhanhui you can see if there are any changes to the list here. I think you should just use the list from the list of allowed types, not the list.
I think this is not the correct way to go. The `SplitN` tag should only be used once, and the `tagStr` is defined in that case.
I think we need to change the default value of the container to `ports }}`.
is it necessary to check for nil and then raise an error?
I don't see any changes in this file.
This is the same problem as line 446, but it's also possible that _NET_WM_STATE_MAXIMIZED_VERT would always be true.
I'm curious, why is this no longer needed? I would expect `prelude` to be in a `scripts/scripts` namespace, which would be the case in the future.
I'm curious why you changed the type of the key here?
why is this here?
I think this should be moved to the `numAttempts < 1` condition above. It is used only once in `new promise.Promise()`.
I don't think this is correct. The `Create` method should be called from a JSON object and not a JSON object. We should be able to use the ` }"` field instead.
Why are we logging the error now?
Line is too long. [81/80]
Is this the right struct? What about `public` struct?
shouldn't we have `c_str()` here?
We can't do this. This is the `protoFile` member variable.
Is this used anywhere? I don't see it being used anywhere.
Please add a description of what this is about
Can this be moved to the `before` method?
@liggitt, I think this should be `iteriter_name = @resource.invited_by.name(true)`
I think this should be done in the `Marmony` check above. I don't think this will work.
This should be added to the docs and the docs.
I think you can just remove this function.
Why not use the constant from `context.Context`?
This is not correct. It's only called in `tableMeta`. It should be moved into `custom-embed.js`
Why not just check the rank here?
I think we need to do this in a `_setup.py` file, since we don't need to have it here
I don't think this debug logs the right place. It's important that you're using the debug logs.
This change seems to break the API. You're using a `ipify` URL and not the `url` field. I think that's the reason why it was there, so it should be fine.
This was changed because it was already in the wrong place.
I think this can be called on app, since this could be called in the mypy app right?
Maybe we should add a `data-generated-field` field for the config and then we could add a config to the `data-generated-field` field to avoid having to introduce a new config setting
This should be int as well to not break the code. It is used in other places and will be used in other places.
It seems we should keep the original pointer pointer, so we can set it to `TimeSpan`.
I think we can drop the `else if` here.
This should be `options.ignoreUndefined`.
you can remove this `logger.Sugar()`
I think this is a good time to get this back in. This is a change from `_queue`, not an `if`.
I think it would be better to check for `err == nil` and then check for `err == nil` if the transaction is actually found.
This should probably be removed as well.
I don't think this is right, you can just use `gendoc.py`
I think we should just call `Ready()` here, because we don't really want to call the command twice.
Can you use a more meaningful name?
Is this an old regression?
What's the difference with the `world_cala = 2` check here?
This is a bit weird, it should be a constant, it's a constant. If we're going to use a constant, I think it's better to just use a variable.
We should add a new message to the root cause here.
I think `! isUndefined()` should be on the same line as `isEmpty()` (or whatever you want it's to compare with `! isUndefined( decimal)`).
composite -> Unused
Why do we need to defer?
I think we should use `@author` here.
why is this being removed?
This is the only place where we want to log it.
This should be a class constant, not a class attribute.
I'm curious why this needs to be added to the `application_data` list.
We should remove this method altogether since it is not used anywhere.
This is invalid. Should we add a check to see if there are any changes to the metric's `invalid` table?
@danrot @danrot
I think we need to use a `SYSLOG_INTERNAL_SYS_entities` here to be sure that we don't want any MSGX code to be used.
Is the `options` argument used anywhere?
I don't think we need to do that. If you are going to change the name of the test, you can just use the function directly.
This is not necessary, we can just use `isQueueProcessorActive` instead.
I think we should remove this.
I think you should remove the `DataTables` here
why is this a pointer?
I don't think this will work, since it's not a `config` folder. We need to do that.
This is not correct. Math.min((byte[], Math.min(byte[], Math.min(byte[])
I think the original logic was correct. The only reason this was triggered was because it was `0` before it was. We only do this when the NONE field has been replaced with a `NONE` field. I think it was `0` before.
`getAabanURL()` should be added to the `Executor` interface and not the `getAabanURL` interface
I think `mask` should be a bool (or should be a bool). The `Cloud` is used to set `program` to `none`.
This is not a part of your PR, but I don't think we should be refactoring this import everywhere.
I think this log line could use more meaningful name.
I'm not familiar with the term `.optional` but the field is not always defined
This is the fix, right?
maybe add the resolver resolver to the else branch ?
I think it's better to move the header class to a new line.
I think `syncIndexes` and `syncIndexes` should be consistent across all callsites. Maybe `syncIndexes` should be a method on `await`?
Why do we need to do this check? Isn't it already done somewhere else?
I don't think we should be using this anymore.
I'm not sure this is the right fix. The issue was that we don't do this for everyone. The only thing we should do is that we should not have a " roll" of the iframe. I think we should just check if the iframe is not in the iframe.
`Name` and `getName` should be `const`
Why is this change necessary?
nit: remove trailing space
I think we need a way to make sure we're getting the name in the server.
I think we need to call `kegg.Trim()` here.
`v` is an interface, so you can use it here as well. Also, please use `Group` instead of `Group` for the id.
Should we also add a `DCSFC` field in the `SCP_global_global_DC_P` and use it in both places?
For `attr_value` I think this should be `f(file, "\s", attr_value) != 1)`.
I think this is a bit of a weird thing, if you have a `upper()` method in the same function, you could simply use the `upper()` method in the function that returns `None`.
Why is this needed?
I think this should be a `finally:` block. We should make sure the blockHeight is not found in the caller.
I think you need to check `closeTime != nil && startUTCTime != nil` and check `if closeTime.Before(startUTC) {`
If we're using `*Cache.tag` here, we should probably be using `*Cache.tag` instead.
I don't think this is the right place to change.
Is there any use case where `ClientCache` is not null?
I don't think we need this
I don't see any `nil` calls in this function, but it seems like it should be removed.
This method is not needed, and it will be re-introduced later.
this is not related to the log-path fix, but I'm pretty sure we're missing a log-path here.
This line should be removed, it is not necessary to new a new line
Why not just `max_retrials_to_get_pods`?
`string?` and `string?` should be the same, right? If so, should we change `255` to `string? less`?
why did this change?
Just curious: how does `file_options` differ from `start_options` in `start_options`?
`RSolr` is not really needed.
@steveharter would this break any existing code? I think it is a good idea to change it back to `IP`?
For some reason, this partial partial is not introduced in this PR, but it should probably be renamed to something more meaningful.
Is distributed still needed here?
I'm not sure if this can be an quote.
The call to `client.close()` is a no-op, so I would just call `cursors[0] = '\0';` and call `client.close()`.
Does this work? I think we can get a `func(string)` from a string like we do in the `(uint8, string)` where we can return a `(string)` here.
This will fail if the run is on a different thread.
I think this is missing a `case`
Why did you remove this?
I'm wondering if we should make it so that it's not a container. It's just a little hard to see what the user wants to do, but if we do this, then we should be able to use `containerContainsText=_` and not just use `__` in this method?
I'm wondering if this should also be a `sh.do` check? I'm not sure if it's a good idea to have it as a `PATH` in the `PATH` file. That way we could have the translation in the future that would be `sh.do` or `PATH_gl` and `PATH_gl`
Can you add a `#else` to the `#include` below?
If we're not going to do this, we should not wait until the `waitForAjax` is called. It is not a problem, but we should not wait until the `close` is called, so we should wait until that happens.
Standards: Can you please add brackets to this whole conditional statement?
Should we call this `IdentifyTrackBreaks`?
Why is the import not needed here?
Is this a bug?
I think this might be better named `interfaces`
Nit: please remove extra new line
I'm not sure if we should default to true here. If the user has not set to true, then we can set this to true only.
Can we use a space here?
@mfojtik why not just use the path path path path?
I'm not 100% convinced that this is the right place for this. If you're going to remove it then please revert this change.
I'd prefer not to expose LibraryDetailsPanels here.
why remove_persistdir?
This was unused, so I removed it.
@bartonjs - we want to check the `incldued_wf` name here, as we are in the `incldued_wf` namespace.
What do you mean by "any" and "starting"?
I don't think we should include the path in two-hand side, since it is used only in the `delimiters` package.
I think it would be better to check for the value of the `BROWSING_URI` property, instead of using the `if (aURL.startsWith("data:") || ...`
I think we should default to 0 here and make sure the behavior is correct.
Use `sizeof` instead of `unsigned`.
Is this used?
I'm not sure if this is a good idea to have an explicit test that checks if `data.transport` and `||` are nil, and if so, we can just check if `|| data.transport` was nil before we merge the check into `|| data['config']['transport']` and check if `data['config']['transport'] = 'local' if target.name == 'localhost'` and then check if `local' if target.name == 'localhost'`
This is not needed anymore
Isn't this the same as the `IsEip1234Enabled`?
Why is this change needed?
`self.show_warning("Invalid Public key")` --> `None`
I don't understand why we need to do that, but why do we have to do this for `getComposedParent`?
I'm not sure if this is a good idea to introduce an explicit check for the other methods.
`PodSelector` should be a `const`
I think we should keep this and just pass `minRTT` to the sample object instead of doing it everywhere.
Should this be `GeneratedCode` instead of `internal`?
I don't see how this is used anywhere. Can we make it private?
Why do you need a separate method for this?
Why was this changed?
Does this need to be a function? It's not testing what we are testing.
Nit, looks like this is a leftover from the stdlib imports
The `promptText` variable was previously unused, so I removed it.
This is the actual fix.
why is this needed?
6464 is the real fix.
Why not use the `pb` package from `m` instead?
Unnecessary spacing detected. Parenthesize the method arguments if it's surely a blocker for an array of symbols.
This function is not used anywhere, and it is only used in this file (and it is not in this file), so I suggest moving this function into the `go/slack` package.
This is an API break.
This is not the same as the default setting. We don't want to set the `properties` here.
Style/SymbolArray: Use %i or %I for an array of symbols.
I don't think this is needed. The `iceberg` is already a `IEnumerable`.
I don't understand this change. This means we can delete the related delete.
I think we need to add the `DeclRadioS` constant to the `DeclRadioS` module.
I think this should be a constant somewhere.
Is this necessary? `newMode = PasscodeMode.Check;`
These two are not thread-safe. They are only used in the `Rails.h` file.
`__CLASS__` is used to set `rake.rake.source.delete` and `rake.rake.rake.base`.
Is this needed? It looks unrelated.
I think this was a bug. The `Provision` call was removed because `p.CAs` was nil before.
should this be a constant?
is this still necessary?
It's not necessary to use the function.
We can probably just make this a constant so it's clear what this `timing` option is doing.
@deads2k @smarterclayton should we also update this to use the "kubernetes" part?
This is a no-op.
This should probably be `openssl/md5.h`.
I think we can get away with just one call to `_find_elements` and `_find_elements_located`, which is more of an issue than just calling the `_find_elements` method.
I would rather see this check inside the SendSpellBarEnable method.
Can we just use `DateTime` to make sure it's a `resource_id`?
We could also make this a private function.
This is a bit of a hack, but I'm not sure how to test the exact path.
@jglick Should we have a `.rst` or `.rst`?
This is a change in behavior, right? I think we should change the value of `cachedChanges` to be consistent with the rest of the codebase (I guess this is a good thing to do).
@adamjstewart And this line does nothing. When I run `execute_task` and I tried this code, the code was written to not execute the task because the code was not showing the message.
This is the main change. It's not clear to me what the `chan` is, but it's a `chan` command. I think it would be a good place to make it clear that the `chan-` command is used for.
`replicateLogs` is not a correct rollback, you should be able to get the rollback from the first std::move
this is wrong. It should be either either `getFormType()` or we should use `getFormType()`
Should this be `yum -yum-osconfig-agent` instead?
Please use `StringUtils`
you don't need to import sinon from here anymore, right?
Should this be const?
This is not related to the PR but it seems to me it should be ` diskAttachment`
Please remove this extra line
is this ok?
can we use the `download_link` constant here as well?
I think this is not necessary, we can remove the file from `NewtonsoftEscapeJProperty`
Is there a reason for this change?
should this have a default value?
This property is not used.
Why the R_AS_INT and not just a float?
I'm not sure if this is the best way to fix it. If the default value is null, it will be null, and the default value is not null. I would suggest adding an empty array_merge in the function signature to avoid an empty array. Also the null check should be done in the constructor.
I would make this a global variable.
I would suggest a docstring here, e.g. a `match_cost` and a `match_cost`
It seems to test the length of the line. Is that intended?
We could throw an `ClientNotFoundException` with `quit` if it's a `Client` object. That way we can throw an exception and throw a `ClientNotFoundException`, which will be useful for `WorkflowNotFoundException`.
Is this change related to the Rails upgrade?
this is not needed anymore
What is this for?
@jridgewell I think this is the fix for the `test_byte_block_test.go` file.
why not try catch here directly?
this is a bit scary, but I think we should probably be more precise here as `from %suspense.test.js import math`
Why not `BATCH_SIZE_MAP` ?
This is a bit confusing to me, I would say the `+` is a bit more descriptive.
Should this be part of the ConfigSetService?
Can you remove this change? It's not used anymore, and it will be removed in the future if we want it.
Is this just a placeholder for the new values that are used?
this import is no longer needed
this is not a value, we need to check if we're using the value of `valueOf`
This should be outside this loop
This print statement is not needed anymore.
Why did you change this to `new BN(LOCKTIME_THRESHOLD, BN(systemsystem_ptr))` instead of `LOCKTIME_THRESHOLD`?
I think you can delete this line
is this the right string?
Why did you change this? We should not change the default behavior.
@tgamblin This line is the line that changed
I think we can move this to the `src/service/server/gocloud.dev` package.
I don't think we should add this. You can just do this in the `onUninstall` function.
This should not be changed. The k8s API docs are not failing.
This is the only change I would like to see.
avoid -> avoiding
I don't think this TODO is needed.
I think we should remove theseISEs from the DOM, as they are not used in `IMetrics` and they should be removed.
I think you can just do `typetypeType(right)` here and remove the `typeSupported` above.
I would use `typeRef.getCorrespondingDeclaration()` to avoid this cast and the only one that will be called from a static method.
Why remove LoadLoad?
what if we called this `show_from_and_current_on_block` instead of `show_to_current_user`?
nit: I think this is a leftover from debugging purposes.
I would say "These are not shown to the user." "I'm not sure if that is the best way for this, but it's not worth it to mention it.
Why did this change?
Why did you remove this?
It would be nice if `Close` was called before the `ctx` was called.
This class is used for the `Resource` method, so I don't think this class is used anywhere. It is only used for the `Resource` method in the `Service` class. The `Resource` class is not used for the `Service` class.
Why not just `bbox_head`?
I would just do a `default: no)` at the end, to make it easier to see that you're doing `spack_detection_year`
This is the only usage that will be used for client-server client-server.go. The client-server client will be used for client-server.go.
Why not use `get`?
Why is this in `CDs`?
Nit: Can we just call this `this.stack + '\n\n' + deepStackTrace` ?
I think this is not a good idea, since the specs that are in the `build` folder are also named `parsed_email`.
why is the name change needed?
This looks like it should be an error.
I think this should be `t.root.lookupPath(buffer[:0], cidr)`. The call to `t.root.lookupPath(buffer[:0]` is not necessary.
I'm not sure we need to make a copy here. The `user_message_author` is already in the `user_id` and it's not used anywhere else.
This is not a part of the fix but we should probably be able to do this for a reason, since the agent has already been added to `client/` and `client/`
>long [](start = 5, length = 5) nit: remove '3.0' from the if check and avoid having the check on `Object::Get()`
This will fail on Windows, right? I think it should be a `log` or a `log.url`.
Should this be a try/catch?
This was a bug. The problem with the new code was that we have to remove the old code. This was a bug that was causing the failure to be fixed.
What is the TODO here?
I think we need to check the `error` here, as it's not actually the case.
Why was this changed?
What about the other Ids?
Do we want to keep this as `ErrNotFound`?
I'm not sure why we need this change.
Why do we set it to null here? If the default value is null, it should be safe to set it to empty.
Removed `t` as it was previously fixed in the previous version.
why not `localLastUpdateUpdateUpdateUpdateUpdateUpdateUpdateUpdateUpdateUpdateUpdateUpdateTime_`?
do we really need this dict? Or just the ones below?
Is this just a typo?
This error is not tested. The `Rid` is not a warning. The only reason that we don't have a `Rid` is to get the same code in line 388.
I think this can be simplified as `PackageFormat.create_package(owner, pkg, response_urls)`
I don't think this will work for the non-default case.
I think this should be `super-init-not-called` instead of `pylint`?
I would prefer the name `application_NAME` as the variable is used for the name.
I think you meant to use `actionable_step` here
We should add a TODO here to fix that.
I think we can move this to `buildCallback` and then reuse `onData`. It's not obvious what the difference between `reportArgs` and `function` are.
this variable is not necessary.
I think this is not needed. `errCh` should already be a pointer and not a pointer, so you could use a pointer to the `chan` object and use `errCh`.
Not sure if we need to escape the original reference.
why did this change? should be `@param string|null $temporaryFilename`
Can we remove `RowType` from the `java.lang.Long` class?
This is not correct. If you move `roots_drag_icon_update_position` into a `update_position()` then the loop will be overwritten by the `position()` method, so the loop will not work anymore.
I think you can use `required=True` here.
I think we should move this to a new `o.configStore` above.
I think this needs to be moved to `HostHelper`.
I'm not sure if we need to do this. This is the main code I see, but I think it's the right thing to do to do.
Why change the colon?
How about using `defer` here?
I think this should be `Fail to health check`
Shouldn't this be trace/subtrace only?
Is this file still relevant?
Why not just `nonEmptyAssignmentToListElementChangeType` and `LessSpecificReturnStatement`?
this should not be logging.
I think this is the only error you want here is to return a `error` value.
should we add a todo here to say something about the fact that the value can be preserved? e.g. "Please enter a maximum value if this blank" is the default value.
I think this should be `this.on`. We don't want to call `this.clone` in this function, but I think we can just delete this line. We don't do this in this PR because we're using it everywhere else in the `merge`. We need to make sure that `on` is a `const`.
This is not needed.
remove empty line.
I think this will be a breaking change. It will break any other tests, right?
I'd prefer `component: git checkout` as a `Integer` rather than `git checkout`.
I would use `self.re.search_files`.
Why is the change to public?
Is it possible that the `!contains(-2012)))` value will be null when the `error` argument is `2012`?
This should go up to the other stdlib imports.
I don't think we should be changing the API here.
This seems like a good change to me, but I don't think it's worth adding it here. I think we should just remove this code.
I think we should change this to `out.docroot`
This function is no longer being used, please remove it
You can remove this.
This is a test I don't see any new code using it. We don't need to create new instances for this PR, so it might be better to keep this as it was before and change it to `set_current_user`.
Isn't there a method to return `ETH66.getVersion()` for this?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I'm not sure we want to use the secret here?
This is a test case, so I'm not sure if it is a good idea to introduce a test case for the `TestOutputPartialURL` as well.
I think this is a leftover?
It's not clear from this change that it's safe to call wite.random.lock, because it's in another patch.
You should be able to delete this file from libbeat as well.
Nit: please sort this alphabetically.
I don't understand why you're using `isCloud` here, but it looks like you're using `isCloud` in the `protoPkg` variable. Is it intentional?
Just a note: I think this may not be necessary if Lob_Append_Or_Error is set.
We should log this information, as it will be logged in the logs. We should log it in `info`
Should this be `SSL_set_tlsext_host_name`? Or should we allow for `SSL_set_tlsext_host_name` to be set to `SSL_set_tlsext_host_name()`?
I think we should readActiveBlockProducersByHeightTests as opposed to readBlockProducersByHeightTests, and readActiveBlockProducersByHeightTests = []struct {
This is not needed, the `updateSync` method already has access to the records, so you can remove this variable.
Why not skip this `in.skip(this.getOffset())`?
This is a very weird place to put this method. Can you move it to a new method?
It's not clear to me what's going on with `Interceptors.reInterceptor{}` here, is it ok to just do `tch.ListenAddr(":24941")` here and then below?
I don't think we need this. It is a bit confusing to have it in `build-system/common` and the data dir is already in the `build-system/common` package.
I think this is fine, but I think it should be `go`, not `env var`
Why is this error ignored?
why do we need this?
@deads2k I don't see any usages of this. I don't know why we would want to do this.
Should we remove the `validateUnstake` function?
Please use a `const`
This is not a good import, it is used only in the tests
Should we also add a TODO to remove this once the metric is started?
This is the only change that is needed.
What's this change for?
This is the only thing that could be used in the rest of the codebase, but we should probably use `abspath` here.
I would use `reduce((m1, max)` here to be consistent with `reduce((m2, max)`
Is this used somewhere?
why is this change necessary? it seems like this should be a exception type?
weave is no longer needed, we can remove it.
What is the reason for adding this?
Please don't use "\0\0\0\0\0\0" here
@mfojtik @jmhooper @mjkkirschner I am not sure this is the correct way to fix this?
nit: newline should be before the last group of imports.
This was the only caller that was passing the maxPendingWrites to the DB. I'm wondering if we could make this configurable and have a default value `1` or something. I think that would be more readable if we didn't have to worry about it.
We don't need to set online_weights here, they are already set by default.
This is the main change I was looking at. I was thinking of a change in behavior that would have been good. I'm not sure why we would need to change this.
Can you please add a docstring here that is a little confusing to me - why not just have it return the container instead? That would be more consistent with what is done with a container.
We need to add this to the `/session/:sessionId` too?
I'm not sure if this is the best option. This will make sure the video is in the same URL, not in the translation.
This can also be done in `saleor/graphql/core/handle/PutPutInvocation.py`.
this isn't needed anymore
This looks like it should be an `AbstractTestList#isParallelism`
This change seems unrelated. Can you revert it?
I think this should be `ConcurrentHashMap` instead of `ConcurrentHashMap` since that's the only change in this file.
I don't think we need the `if` condition.
Is this supposed to be `raise`?
This seems to be a change to the test that we're testing.
This is a bit confusing, why is this needed here? Doesn't seem like we're missing a `./p` that is being used in the first place.
This should be `_x`, right?
Do we really need the `OkDialog` method here?
This is a bit weird - we are not using an `type` struct anymore. Should we be consistent and have an `is` statement in this type for `ec2Id`?
missing '.' at end of line.
`public` is redundant here
Why disable the argument here?
I think this should be a `append`, not a `strconv`.
You can use `use` here.
The description here is a little confusing. I would say we add description here, not in the description.
What about `time.Duration` instead?
I think we should add a check to make sure we're not modifying the config here
can we avoid using `res` everywhere?
This is a change to the test case, right? We're now setting a default to the right value, but not the storage.
I think we should remove this file as it was not used in the code anywhere.
Do we need this? Can't we just send a token here instead?
Is this used? I don't see it being used in the code.
remove this class?
This is the only place where we need to know that we're getting the right number of rows.
I'm pretty sure this line is still needed.
I don't think we need the `10 * time.Second` here. The `10 * time.Second` should be removed.
Why are we doing this?
Why is this error ignored?
I think this would be better done in SolrException and the other way around.
dt.rbind(4) here ?
I'm not sure this is a correct change. The reason is that if you have `None` it should not be `None`, and the reason is that `KOALAS_USAGE_LOGGER` is `None`.
This is a bit confusing, I would expect to see the `BackBackTxLimitFromABlock` (which I think is a more appropriate name). I would suggest `BackTxLimitFromABlock` (or something similar). I suggest `BackTxLimitFromF` or `BackBackTxLimitFromF` or `BackTxLimitFromF` or something similar, and `BackTxLimitFromF` or something.
Why is this `ctor` needed here, isn't it?
Doesn't this need to be in the base class?
I think you can remove the `name` and `return` statements. The CertificateRequest will be removed in a future version, and the CertificateRequest will be removed.
Should this have an `sender_gcpbroker` key?
Please use `format` and `Literal` to avoid the NPE.
could this be `str(gt, "condition")` instead?
what is this for? Are we just doing this in `saleor/graphql/core/DT_INSTALLED.py`?
Do we have any tests for this?
Does this mean we can now return an error?
I think this should be moved to the `rasterizer` below, since the call to `topology_at_rasterizer` is the `opts_at_rasterizer` method.
This is not a good example. It's better to have a assets.js file.
This was changed to detectStaleConnections and not to detect it.
this looks like it will get called twice
This is not a great way to add the HeaviestTipSetCh parameter to the godoc.
This should probably be in the same order as the `AWS` APIs
This should be `debug`
I'm not sure if we want to add hex here.
This looks like an example of a bug, why not just use the one in the array ?
this was added by mistake, not sure why we need it.
This should be in another PR, I think. We should also test that the testing purposes are not testingable.
I'm not sure this is a good change. The previous behavior is probably correct, but I think the `<...>` is not needed for this PR, so I'm just missing a step.
This is the change I was talking about, @joshblum I had to change this to use the `.get` helper for this
We could use a default here. We don't need to pass this in as a parameter.
This change seems unrelated.
Nit: newline should be before the last line.
Please don't remove empty lines.
This will not work for all cases where `i-1-0` and the `get_register_name()` will return the same thing, but the same code is being used.
I think the `/1` can be combined with the `44_derivation` constant.
I think this is the wrong way to do the SelectQValue.Checked - the SelectQValue.Checked should be set to true.
can we move this to a common utility?
I think it's a little confusing for us to put a `reset_logger()` method in `_debug` and `_logger` to reset the logger, and not the `logger`. I would suggest to call it `debug`.
why this change? this seems unrelated to this PR.
The GCed index should always be empty.
This was the bug that caused the bug.
I think we should be more explicit about what this means for now. We could even remove the node cache from the block (which we don't need to do)
I think this should be `IHeadersCollection` instead of `IHeadersCollection` since we are already initializing the `IHeadersCollection` class in the constructor. The `IHeadersCollection` is a `IHeadersCollection` and we don't need the `DynamoModel`.
This is not a part of the fix, right ?
content is already in there
Should we be checking for `this.splashWindow.isDestroyed` here?
I think we should just remove this field and just use the `versions` field here.
I think this should be a warning rather than an error. Also, it should be the real flag for every info.
This is a bit weird, why do we need to call `setTimeout` here? I'd rather call `setTimeout` before the call to `setTimeout` since it's a copy of the frontend, and not a copy of the frontend.
These changes seem to break the API.
I think you can remove `spec['package_info']` and replace it with `spec['package_info']`
I'm confused by this "concrete" wording as well. I'm not sure what the best way to do this is.
I'm not sure why this was a false positive. It seems like it should be a false positive.
The goal here is to use the `context` method that calls `messagesChan` which is not the same as `go` (e.g. `go`). This way we can avoid the "single method" in the future, and we can just call the method directly.
I think we should keep `approval.step_for` here.
This is not a part of this PR.
Is this really needed?
This is not the same as the previous code.
I think we should just add this to the Show model, as it will be a part of the database.
`noop` is not really a correct name for this. It should be `noop`
This is a bit of a nice nice nice nice whitespace, but could you remove the newline?
I think it might be better to use a `warn` helper here, and have `warn` call that for the value of `DATA_DATA_DATA` in the test that will work for you.
I think we can just use `this.nextState` here instead.
should this be `long`?
Should we make this configurable?
Could we call this `stopCodec` or something?
`pdfPageOrientation` should be set to true. It is not used in any of the other tests, but it is not a big deal.
I think this should be configurable.
Line is too long. [82/80]
I think this should be `bool` instead of an `bool`.
I think we can get rid of this since we are not using it anymore
Nit: We could add a line to the stateDB construction.
I don't think this is used anywhere.
Please remove this line.
I think we need to check for `1` here, but I think it's not necessary.
Wouldn't it be cleaner to do a `Skip` for the top-level `LIT`?
This file was moved to the `else` block.
I'm not a huge fan of this.processors. Can we just use `var tasks = new List<Task>`?
Should we use a more specific name here?
This change is not needed since we always set `force_ids` to nil.
I think this should be done in a try.. catch block?
Could you add a little doc here?
This should be in a separate PR
why is it ok to change the line above this line?
This exception message is confusing, I'd rather not have it here.
Is it possible to have a test that checks for this error code?
These values are not used.
What happens if you have a `pathlib.path` file? That's why I'm asking. I don't think it would be a good idea to check for the first element.
This is not needed, right?
I think this is not really necessary, as in the case of `iscal_year` the `iscal_year` will be 1 if `iscal_year` is 1.
Why is this needed? Just curious.
This is not a functional change.
`ref ServerHttpSecurity.anonymous()` should be a constant.
Why are we sure that the record is not None?
why are we changing it?
is it a BC break ?
You can use `sys.aws.platform` here.
I'm not sure why you added this, but I don't see why it was there in the first place.
Why do we have a default configuration for this?
why is this needed? `require 'pathname'` seems to only have one formatter.
Do we need to add this?
Should we add a `short_names` arg here?
This is a very specific change that is needed in the main build.
I don't think we need this change. We don't use the `archerCfn` package for these services.
@deads2k i don't like this approach but we should probably add it to the `build-system/action` package
Should we add `string` here? I would expect it to return a string.
Is there a reason why we don't need to define this in the list here?
Can this be changed to a static variable?
this is missingAdminRole, please remove it
`ByteBuffer` is not needed here.
Let's use `application-config.js` as we discussed.
Should we have an example here for this?
Nit: NewIdentityManager is already in the keystore, so we can remove this struct.
I'm a little confused by this. Why is this not a constant?
The `.zip` is redundant here, and in all other cases use a `_` directory.
why do we need this?
Maybe rename `handle_pre_syscall_sigmasks` to something like `sigsig_destroy_sig_app_sigprocmask`?
I would say that the return value should be sorted.
You should add `git checkout` and `git checkout` to the docs
This looks like a debug statement. Is it necessary? If so, please add it.
Why is this file changed? It is used only for the two classes.
`return str1.localeCompare(str2, undefined,` => `str1.group[str2, undefined]`
@tnozicka this is the fix for the fix, right?
Can we use the `*` keyword here?
This is a bit confusing. Why is this being changed?
The name of the asset to look up is already a part of the asset, so I think it's better to change it to something like `unit_list` or something like that.
This would fit better in a single line, `showWindow := ...`
this is a bit weird - why not just use the interface?
@nmittler - I wonder if we should just make it a property of `write.watermark`. It would make sense to make it clear that `watermark` is a `-1`.
I would call this `enableResolvedWritersMap` or similar.
Is this change related?
This should probably use `tls_start.ssl_conn.set_tlsext_host_name`
substitution is not a good idea. It might be better to use a `name` here instead.
why do you have the python call?
This will need to be `openvpnPort()`, right?
This is a little strange, why you have the `topology.connect` call here? It seems like the `cancel` call will not call `close()` if there's no `topology` object.
should we do the assertion on expect a block?
I think we should remove the pointer here as well
This should be `waitHandle.IsAny<ICollection<ICollection<ICollection<ICollection<ICollection>`, no?
I'm not sure if having a SimpleActivityProcessor implementation in this class is actually needed?
why is this needed?
I don't think this is the right place to put this. The code should be able to do that.
why remove it?
This should be `asmsecretres "github.com/aws/amazon-ecs-agent/agent/asmsecret")`
This is a BC break.
Is this TODO really useful? If not, I would suggest we move it to a new constant, like `TODOTODO(message: "TODO")` or something like that.
@deads2k i'm not sure about the use of `ComputerName $(` here
Just a note, this is a bit of an unrelated change that should be done to the `allowError` command.
I don't understand why we need this. Can we do it in this PR?
`MetricMetrics` is not thread-safe. It is not thread safe. It is not thread safe but it is not.
Why did you change this?
I don't think we need to slice here. It's not a comparison, and not a slice.
`dirname` is used in `path.split`, so I would remove the `fn` variable.
Shouldn't we also add an implementation of `uint32`?
I think this is not right. The `time.Time{}` should be added to the `Timer` package (see the other `d.time.Timer` method).
There is a `unique_ptr<TautomerData::unique_ptr<TautomerData::unique_ptr<TautomerData::unique_ptr<Centralized::unique_ptr<TautomerData::unique_ptr<Centralized::unique_ptr, TautomerData::unique_ptr<Centralized::unique_ptr<TautomerData::unique_ptr>(itm.first, TautomerData)` method.
Should we make this a constant?
Please remove this space
this should not be required. The method should be marked `@Deprecated` instead of `isAccountReportSpamEnabled`
This is the fix. If the manifest is the only valid manifest, it should be in the last place.
I think the `Include` can be removed now since the type is the same as `[Conditional("Exclude")` (because it is the same as `[Conditional("Close")`).
I think it would be better to do this in a `SettingValue` method. That said, it will make it more readable. We can do it in a separate PR.
This is a pretty bad idea to me. Can you try the string to be on a line instead of on a new line?
This should be a boolean type
Please don't use the constants for this, you can use `setParameter('text', keys).then()`
The default value should be `disabled` instead of `direction` since it is the default value for the default value.
Thanks for spotting, can you also delete the deparam field from the `destroy-app`? It's also not needed, but it's not a blocking thing.
I'm pretty sure we can get rid of this file entirely and use `gen.go` instead.
This is a bug fix. We should not be using `model.cuda` here. We should not use `apache_config.h` anymore, but this should be an issue. We should not use `f` in this function.
I don't think we should be passing info to this log message.
(style) line over 80 characters
Why is `Overwrite` necessary?
Is this needed?
I think this is the only change needed for this PR.
Do we need this to be a `*string.additionalIngressRules`?
does this need to be public?
to be removed, it's not used
What happens if Hash rootHash contains the same Hash rootHash? Should it be the same as a Hash rootHash?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is a bug, right?
I think we should import from `swiper-bundle.css`
Why did you remove the `else` clause? It seems like the error is now handled in a previous PR.
I don't see where it is called, but I don't see this being called anywhere
Is there any way to get the `_own_sent()` from the thread pool?
This should be a `@GET("/.json")`
I'm not sure if this is really the right way to do it. The `core.g.,` is to have a `core.g.,` that will be used by other components.
This is an extra variable and not a blocker.
Can we make this go-routine as a constant, so that it can be reused?
I think you should use the default value ofQUILT_USE_TQDM.
why change it?
why remove the else?
nit: for the future, wouldn't this be better as an `f"{write"` (i.e., `--write-only-write`) and then just write the values in the `--write` flag?
This should be `JAVA_OPTS`
this import is not needed
This is the wrong place for this. The `tls_version` is a `uint8_t` and `tls_type` is a `uint8_t`. I'm not sure how to test it.
log4j should be renamed to `log4j`.
I think this should be a different type, e.g. `application/x-stata/src/test/module.sh`
This change is not needed since we use the `ecr0` package directly.
I'm not sure if this should be `ubuntu-`
Do we want to use this again?
Why do we need a different name for the same value?
I think we can remove the `setPrototypeOf` and `setPrototypeOf` annotations from the `setPrototypeOf` method and just use them in the constructor. The only thing we need is to set the `Object` property.
I don't think this is the right place for this. The `TaskID` is used for the `localTasks`.
I think this is not correct. `new_size` is already a list, and so it is not.
Why is this being added? It seems to be the only place where we want to be setting this.
This method should also have an `isLongrunningOperation` method, which is never called.
Should we make the password string a string rather than a string? I mean, we are trying to make the password string a string, so the password is not a valid value.
We could use the same naming `created_at_desc` here to be consistent with `created_at_desc`, which I think is a little confusing because `created_at_desc` is a `created_at`.
This is a bit weird, why is Base not just the first one?
This change is not necessary. width is used in 2 places in the code.
`getConfig` is already called in the `plugins.getConfig` method, why not use `getConfig`?
I would prefer a separate config setting for the config setting instead of the default.
Should we also do this for all the other components?
This is the only change that is needed.
I think this is a good thing to do, as we're making a bool that is used by the pipeline and it's not a good thing to add. I would prefer to keep the name consistent.
I think this should be `github.com/chaos-mesh`
This is not the fix. We should fix the other issues here, but I'm not sure if it's worth.
nit: this line can be removed
This should not be 3, the version number is already in the `version` package
This needs to be reverted
I think we should be able to use `Bolt::Config.user_path` here.
This is a bit weird, why not just use a `feed`?
This is now unused and can be removed.
I'm not sure if we need to do this, but if we do, we can just call the `datetime.now().year`
I'm not sure what the best way to fix this was, is it right? If we don't have to check for `strcmp(type, "goto error)` then we don't need to check if `major == DRM_MAJOR`
Unused method argument - `options`. If it's necessary, use `_` or `_options` as an argument name to indicate that it won't be used. You can also write as `options[:page_ranges]`.
This seems like it should be in `pkg/configurator`
This seems unrelated?
I think it is a bit odd to have a warning in the `toggle` method, because it's a little bit confusing to have a "if we have a `list` statement, but the return value isn't either a `list` or an empty string, and the return value is False.
This is a new line, but we don't really want to add the ` 8 UINT` line to the `src/main/java/org/jboss/weld/UINT8` namespace.
This looks like a good candidate for a helper function to avoid the need for a YAML class.
Please add `@Inject` annotation
I think we can move this to the new "init" section above.
this is not needed anymore
Why was this removed?
Do we need to call `command.readPreference` here?
I don't think this block is necessary, we can get the balance of block numbers.
This should be a separate PR, I don't think it's worth it to pull this out into master.
Line is too long. [86/80]
This is the only change that is needed to ensure that the deadline is created.
This should be a single line string.
I think we should set this to `""` in the `ResourceCert` instead of the `Update509CertRecord`.
What about the `if Travis::Build.config&.ssl&.verify == false` check here?
If `stopEventWalk()` is called without any event, then `stopstopEventWalk()` is called.
Do you need to check the size here?
I'd rather see this part of the code base, rather than having the code base.
If num_scan is a number of characters, this will be a number of characters in the array.
nit: you can use `partitions::Result(rootPath.path(), partitions, "partitions::Result(key, "partitions::Result());`
shouldn't this be nullable? MinimumRate is a property of the MinimumRate, so you don't need the property.
Is this used anywhere?
Not sure this is the right fix since it's just a cleanup.
This is a bit confusing, as the block does not have any effect. Is it possible to remove this?
`@since TODO` or `@Restricted(NoExternalUse.class)` would also be better
I'm not sure why you need to store Integer. It's used in a different way. It's a big deal, but if you have a reason why it's used in a different place, then it should be in the same order of the same order.
This one is a little hard to follow, but I'm wondering if we can move it to a separate PR.
I think this is a leftover from a previous PR. We should just remove this.
Should we add XDP.Month or XDP.Month here?
nit: use `fmt.to_s()` instead of `blah` here
Might as well change this to `False` or `False`.
This looks like an odd case for the service being created.
I'd say "consider-using-sys-exit() and quit()..."
I think we should also use `cr.Spec.CommonName` here.
I would have put the `pytest` fixture in the `describe` method
We can just return < 0.0.0 if the value is `pickle-protocol` and we will always use `pickle-protocol` if the value is not `pickle-protocol`. This will make it a bit more robust, and will make it easier to read.
shouldn't the random port be set to whatever the port is?
No asterisk imports please.
I think we should keep the config part and use the new one instead of the new one.
I think this should be `integral_columns`
This is a bit weird. I would just delete this line.
This is a breaking change, and it should be in the upper letter
Shouldn't we be using `APP_FEATURE_CODE_USER_AUTH`?
I don't see why we need this, why is it just 8?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
We need to make sure that the route for a `cancelled` is only used in one place.
Why is this removed?
I think this should be `paths[i]`, if `model` is undefined, we should always use models.length.
For the sake of consistency, can we make this a constant?
Why did you move this?
`q` is a `numDocs` and `base.size() == 0` so it's not needed
Is this used?
Is it worth caching bytes.Buffer in a variable?
`cert.NotAfter` is not always `true`, so this is fine.
Remove empty line.
Is it possible to have a constant in the name of the data? I would expect it to be a constant somewhere.
This should be done by the `on` on line 218, I think.
Just curious, why did you change the type to `deployment.ClusterName` if `my.ClusterName` is empty?
I think we need to keep the test cases that the source source has been removed.
I think we can move this to the top, to make sure we're not breaking anything.
@dvoytenko I'm not sure this is the right fix.
Why not catching the original exception?
Nit: I would prefer the formatting here.
Seems that you are changing the default behavior here. I think the default behavior of `num_score` is to be correct.
I'm not sure this is a good idea. If you're using the `site-` prefix, you're using the `error` attribute.
I would suggest to replace all the `.replace(/\s+/g, '-').replace(/^-+/g, ''`, and then you can remove the second one.
I think we should remove the `anyObject_type` here
Why do you need to use RTL here?
shouldn't this be `/explanation/session`?
I think we should add a `let` to the `addFilter` kwarg here, as we already have the `googlesitekit` already.
I think this should be added to `DEFAULT_VERSION_2` instead. The name `FLOW_VERSION` is a bit confusing.
@jona-sassenhagen I don't know if this was a good idea to do, but I'm not sure if it's worth the effort to change this. I'm not sure how to do it, but I don't see the point of this.
No need for `and` here.
does this still need the block?
Why is this needed?
What if we added a check for `private` here?
`s.IsHidden` can be false by default.
I think we should be consistent and call the function "clef-signer-address"
Is this needed?
I think the `Name` field can be removed from the `SPCName`.
@agaspardcilia can you please check if this works for other routes?
Why are we converting the `--strict-prefix` flag to a directory here?
So this is the only change that affects this PR.
Why is this removed?
this is not a controller migration
Please add a space after the comma.
This is not the right place for this. This will result in a `view` address from the `stateViewer`.
This should be ` PodDBAdapter.KEY_EPISODE_NOTIFICATION + 1` since the version is not cached in the first place.
This is a breaking change. It should be reverted.
@jmhoemmen I think it would be good to make the change in the `my` package to `salesforce`. The reason being that `my.salesforce` is not the default value of `salesforce.com`.
Is it necessary to check for `name` in the `if`?
I would prefer to keep this method as it is and add a method to the interface as it is used in the `getFunctionIdentifier` method. This is also a good idea.
This should be final.
This method should be `default` instead of `get` because the method `set` has a default implementation.
do we need to add a check in `url.py` for `response_headers` in `scipy`?
This is the only change needed. I don't think we need this change since the only change to the code will make this change in the future.
Why not just remove the context and just use the new one?
Please add a header to this file
I don't understand why this change is required.
You should be able to check the random password here.
We should also add `killTheseThese changes to `renderStart` in `bin/pants/bin/zants.md` and `fixfix` in `killRecord.s`.
I think this is not a correct place to put split size in the `AbstractTestCaseSensitive` function.
Could you please describe what this is for?
I think we should use `self.detach(mins=True)` instead of `days=None`.
This should be done in another PR
I think this class is not used anymore
I don't think we should import `logger` here, since it's used in `services/services` already.
I think we should use `script.javascript` instead of `text/javascript`.
Why do we have both `imageAlpha` and `func imageAlpha` ? If so, why not do the same here?
Why is this change necessary? Are we skipping the test suite? I'm not sure if we can remove the check here? I don't see any use case for `id := primitives.NewUUID()` in the test suite.
I'm curious why we have this in the previous if block, but I think it's okay if this was just a separate commit.
This is not used anywhere.
Why was this not needed before?
This is the wrong place for this check. When I run `opts` and `run_in_parallel` I had to run the `opts` before.
I don't see this used anywhere.
I think this should be a public interface.
why is this change needed?
nit: you can use `type` for the `type`
Can you please extract the code to a method `tables`?
I'm not sure this is the best way to go. I'm wondering if this should be `GoogleSitekitDashboardDetails` instead of `GoogleSitekitDashboardDetails`.
@tgamblin This is the one we have for HHS. Can you check the other changes to this. Otherwise, I think this is what we want, right?
How do we know that `i-amphtml-root` will only be called in the `map` table in the `map` table? I'm pretty sure it's a good idea to keep it in sync with the `:i-amphtml-root` table. I'm not sure what the best way would be to do this is.
I would use a more descriptive name like `PACKAGE_NAME_FORMAT`
This will fail in 3.x. We need to check `.meta` here. Also, the `editing` prefix should be `done` (not `done`)
Is this continue still needed ?
This change seems unnecessary as you're testing the value of `false` in `o.NoLog`?
If `map(ignored -> Stream.of(String, state))` is empty, it should be empty.
I would use `noop` here.
I'm not sure about this change. It is not really the best way to fix this. The current implementation only says `p.ipv4` but not `p.ipv4`, so this should be fine.
This is a nice cleanup, but we should probably be consistent and have a separate word about it
This is not used anywhere?
We should probably do a similar test in `NewSnapshot` to ensure that the rest of these work properly.
This namespace is not necessary.
Can we add some info about how to get the debug info from it?
This was a bug.
Why was this added?
Could you remove this empty line?
Why is this being removed?
I don't think this is needed
Can this be moved to the previous line?
this should be `h2o_sysfn(socket, (void *)sa, sizeof(*sa) != 0)`
The other code in `timeline_semaphore` has already been changed. Is this intentional?
I think ` percentiles` should also be a `None`.
This is the only usage where the `current_user's` is used.
@bharatviswa504 What do you think about this property name? It's not clear what it is doing.
Does this still need to check `NcrDispatcher`?
I don't know if the formerpet is too much, but it's better to check for null and empty string for the following if statement.
I think we need to move this up here to avoid loading the key for every definition.
This is a bit of a hack, but it's a nice thing. I would expect it to be called `onPlaybackEnded` and `onServerconnconn`.
I'm not sure how to handle X11 here.
This class is unused.
I think you can just use `go-grpc-prometheus`
I don't think we need to do this - the Logger will always be stored in a map.
Use the new Ruby 1.9 hash syntax.
I don't think this is the correct way to do this. This is not needed. This is the only way to build `spring` and `spring` dependencies are in the same package that we have `spring` and `spring` dependencies in the same package (and `spring` and `spring`). The only reason we're not using this is because we don't use `assert` any more.
I think we should use the `target` argument here. The argument should be a separate parameter to `RequestRequest`.
Why did this change?
We should use `k8s_dns_chaos` to build up the build.
Shouldn't this also check for `worker.wf.NoExternalIP`?
Please remove `testValue` as well. The other tests are using this method.
I think it should be more explicit, e.g. `github.com/openebs/maya/pkg/upgrade/templates`
Remove empty line.
Why not just have `kinesalite` be `DATA`?
it looks like there was some indentation issue here?
Adding a new field to StackSummary seems a little strange. Can we name it ` Stack` or something similar?
I think this is not the only usage change. We should revert it.
why did you change this?
It looks like this is a public API. Shouldn't this be a `Get`?
Can you please move this to a `before` block? It's a bit confusing to have `nil` as a whole.
I think we can remove this `sendRegex` variable as it's no longer used.
This is not needed.
I don't think we need to make changes in this file. It's not used anymore.
Better to add a check for `Channelup_collection_id`
log_interactive is not defined anywhere
Can you add a space after the closing bracket to avoid a confusion between the Exception and the opening bracket?
Should we make it "message"? I mean we have "list" and "list".
I'm not sure that the spells is a spells. It should be spells[spell_id].reflectable;
What is the purpose of this migration?
Why is this error ignored?
Why do you remove remove scriptwares here?
Nitpick: I'd prefer to see some more prominent logs here.
I don't think this change should be in sync with `computed` module.
this is not needed, it will set the set
I think this is a leftover.
I'm not sure if this is correct or not. It seems like it's just a copy of the map.
`encoder` is a ` encodeDoc`. It's a `Seq` function that is called for all sources. It's a bit confusing. Can we rename `encoder` to `NontimtimFields` or something?
Should we have some sort of interface for this?
This is a pretty bad idea. I would expect the `if` to be a valid `if` and then just do `return findBestMatchForReverse(lane_data.back() - 2)`
I think we can just remove the `JsonPropertyName` and `success` altogether, since we're using `IEnumerable` in other places.
Why is this being changed?
Can you add a TODO about this in #1417? I don't think we need to add this here.
If this fails then it will be a no-op if `strconv.join()` is called.
nit: maybe add a check for `opt_port`
I think IEnumerable<KeyValuePair<T>> to make this more generic, I think.
I think we should log something here, to make sure that we don't log the logs. The log message is going to be very confusing.
this should be only for NodeGetInfo, right? should we be using the NodeGetInfoRequest here?
Is this TODO still relevant?
I don't think this is the correct place to remove this. In any case, the default of `float` is always 0.
I think we should make this a `&Counter` instead of a `&Counter`?
I don't see any tests using this, are these changes related to your branch?
I wonder why these using statements are needed, why did you remove them?
I think this line needs to be moved to `pony_unregister_thread()`
This is a bit confusing, since `x30` is a list.
I think the previous code did not do this. We'll need to do this for other types of checks.
I don't understand the naming here. If you're using `string[]` it should be the default.
I don't understand this change, it looks like the changes in this file are just a leftover from previous changes.
This is a little weird, maybe it should be `public`?
I think this line is redundant now
This should be added to the `XFRAMES_OPTIONS` list above, right?
I think we should remove this block. We can't do it in this PR, but it seems like we can remove the whole block altogether. @robertwb do you have any opinion?
Remove this line
I think this should be a constant.
This file is no longer used, please remove it.
`EG: Norwegian Bokmål` is the same as ` 2020-5` (and `\n`)
Is this still required?
nit: removejsx trick?
We should use `getInputTemplate(false)` for the value here.
Do we need to warn users if they are not using the warning?
Do you need to convert it to String.format ?
nit: `deletes = this Service.Service.cs`
We should use a `DeviceName` type here
Is there a reason we don't use "name" for properties in the properties?
I'm not sure why you need this?
I think this can be just `(pylint: ...)`
Nit: I'd prefer if this were a separate commit (and maybe in a separate PR).
I think this is wrong, if cVR is nil, we don't have to explicitly set the cVR, right?
this is the same URL as the `yum` user, right?
Shouldn't we be using the standard `apm.by.year`?
Why do we remove the "B" text? I think the most common case is to have the same name for the dict, but it's not clear what the "B" means for the "b" format.
This would be better as ` destroyResourceLinks()` and ` destroyResourceLinks()`.
Should we make it a global parameter?
no `using`s please :)
I'm not sure this change is correct, but it seems to me it should not be in this PR
Can you move this up so that the #if TRUE are not included in the PR?
I think this check is unnecessary as we already have the `NullActivity` in the constructor
I think you should be able to remove this space as well.
Why did you remove the whole block? I don't think it is used anywhere.
Why did you remove the `use strict` here?
properties is not null.
I don't see this in this PR.
I think we can remove `__init__`, too.
I'm curious, why not use `parent.querySelector('.chk-movies' && contentType !== 'mixed');`?
I think the github github github is wrong here. I would suggest we move the import to `github.com/syndtr/goleveldb` where the github is used.
This is a little confusing. If you're not going to use the full `preference` for push push stuff, I would suggest to use the `on_shared` or similar (or something similar) function to do the `on_shared` (which is the default value of the `on_shared`).
I don't understand this change. Can you explain why this change is needed?
This is a change in behavior that is breaking the build failure.
I don't know if it's possible to have a `settings.html#activating-the-flush-endpoint` flag. I would prefer that you wouldn't have to explicitly call it in the `settings.html` package.
Should we have an example here to pass an empty string?
I think this should be removed. It is used for the new client.
Why not use the same name as the `FAILED` field?
Can you please add a note about why this is needed for `peer.Base`?
This can be removed, right?
I think this is the only place where we need this service.
why do we need this check? if the host is installed, it will be skipped if it is non-zero
I think it's better to make it `*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*Path*
I think we can remove this, since it's only needed for the scan task.
Why is this necessary?
We don't need this. This is a change from what we wanted, so we should just remove this line.
I think this enum should be an enum so that it is only used by the `DiscoverySettings` implementation.
`Array.toString()` is not necessary.
This is the only change I'm not sure I see. I'm curious if the `data` field is required in `app/services` too.
Is it the only option we can check for the auth id?
This should be `final`
why not use `Cartesian3`?
I would move this package name to the package.json so it's not used in this package.
Should we also check for "an on-user" here?
Is this change intended? It looks like this is a different default, but the `timerIntervalInMilis` is used for the `timerIntervalInMilis` value.
Please update the description to mention that it's a rules.
This method should also return the "empty" of the method.
I think you need to import the `if` here, otherwise it will be the same if you did in the previous version.
@jcotela is this good to have to change the default? I think the default would be 1.6.5
is there a reason to do this?
So, I'm not sure why you kept this in place, but why are you removing it?
Why not just use a `defer`? We don't want to have the same pattern as a `remoteHost` field.
I don't think this is right. `getInitInitBonusLastEpoch` should always be false if the epochNum is a.
This should be split across multiple lines
This is a bit of a nasty hack, but I don't see why this is being changed in this PR.
This is not correct as `Email` is already a string.
The `dir` suffix seems redundant here, since we already have the `dir` variable.
There is a typo in `hpx::m_hpx_initialized`.
@kargakis @tnozicka this is the right place for this. The `info.RPCAddress` value was not empty before this line
This import is unused.
This doesn't make sense to me, because the start() method is called before the restart restarts, but it doesn't make sense.
This could be done by the caller in the `Report` method, and it would be nice if we could move this into the `getReport()` method.
I think you can just remove `compiler: ''` now, since the compiler is using it.
Hm, this means that the `args` argument is no longer necessary, since the `args` argument is always `null`.
Do not delete this line. It is not used anywhere.
Do you need this to be a `concat`?
I think this should be a setJavadocComment
The `var` syntax looks to have been inverted.
What is the reason of this change?
The changes in this file are unrelated to the changes in this PR. The idea is that we should not do it in this PR, but I'd rather keep it in a separate PR.
Can we add some type check here that the types are null and they are empty?
It looks like `c.nc == nil` here. Is that intentional?
This is the wrong place for this. The first one was the partitions to match.
I think we should be able to remove this now that we're now passing the `slug_matches` argument to `can_create!`.
I think it's better not to check that `if not retrog` is true and then check for `if not retrog`
I think it's fine to just remove this line.
This is not needed.
Is it possible to add `@private` and `@private` annotations for the same type as the one in `build-system/common/`? I think that's a bit confusing.
Please remove the space.
Remove this extra line.
This is not needed.
This is not correct. We should return a nil pointer, but still return the first one.
You should be able to use the text text in H2O_STRLIT() and H2O_STRLIT() to avoid calling H2O_STRLIT on each H2O_STRLIT.
This can be just `[Flags]`.
Why not call `configParams` directly?
The fmt.Sprintf("%s", pdata is probably fine.
What's the reasoning for the variable?
I think this is not a good idea. As it is, it should be a bit clearer to read.
Shouldn't this be `if (span)` ?
should we use a `exflow.getFlowDefinitionId() > 0` instead?
Is this the right way to create a Interface? It looks like this will only create a UX of each other, but I guess it's fine to just create a specific one.
I don't think this function should be removed.
Please remove this extra line
I think we should use the `target` field instead of the `>=` check.
Should we also include the full query here?
I think you can just delete this line
I think this is fine, but we can't use `goimports` as our `types` package for this package.
Why do we need a time()?
Can you make the `is_invalid_locator` a function instead of a dict?
I don't see any OS includes it, but it seems like this file is not used?
I don't think we need this
This is not a good log message, we should log it in the logs and log it there.
`byte>.Count` is a `volatile` for some reason. If we do not want to be able to use `volatile` in this PR, we should probably just use `Vector<>` here.
I'd prefer to see this as part of the test suite.
I don't think we want to be adding an assert here, since this is a random number and not a random number
What if we made this a method on `validate_resolve_reference` instead of duplicating it?
This is unrelated to the PR.
I think this is not the right fix.
Code Climate says this is not tested.
I think this `defer func()` function is no longer needed, since `Close()` already returns a `defer` if `f.Close()` returns a `defer`.
I think this is the only change to MinerCreate in the PR.
Shouldn't this be done after the channel is created?
I think this should be `[]` instead of `source` as well.
Should this be "other_loop_fr"?
this one isn't used anywhere
I'm not sure if this is the best way to do it. I'm not sure it matters much, but it might be worth adding some more information about how to do it. If you want to do this, then it might be worth moving this to a different PR.
@michaelkuhn This is the only change that affects the server side.
`# `attr_value['string'] is not None` probably not required as `attr_value['string']`
I think this should be `_now_focused._last_hovered_link` instead of `_now_focused._last_hovered_link`
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this class is missing the declaration of the class.
I'm not sure we should do this. I'm not sure if we want to do this, but I don't think we want to have it in the logs.
This isn't really needed, because the other `float` classes are already loaded in the `Baseutil` class.
This is the only change that affects TF providers.
Why is it necessary to add this type here? It is already used in the `JavaAccessNode`
I think it's better to move this class to the `Player.js` class.
This is a leftover .... I'll fix it
There is a typo in `TDTWriter::` so I think it should be `TDTWriter`
I'm not sure why you need to do this. It's probably fine to leave a copy of the `AddProcessorPipeline` and have a copy of the copy of the copy of the map, but I'm not sure if it's worth it.
why change `str` to `mode`?
second -> handle?
`stdout` is a little too generic. I would suggest to have `sign_certificate_to_d` on the `error` method, like we have in other places in this file.
I'm not sure this is the right fix. It seems to me the `api-version` should be the version.
I'd rather have the mmdet be `optimizer` rather than `m`
I would avoid this loop by calling `fill()` on the loop, which is a bit confusing for me, and is not really necessary for the loop.
Why is this needed? I don't see any `-render` methods in the code base.
It's not clear to me why we need both `if c.acc == a {` and `acc` if we're going to have `break` statement. I think this is a good idea to just check `--verbose`.
>>RemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemoveRemove This This is not needed since it is a `PHDF5`'s implementation detail, and it is not a valid implementation.
Line is too long. [83/80]
MAX_PERTABLE_ENTRY_enabled? I don't see any other code using it, but I guess it's not needed.
Can you use `_bytesHttpVersion1_0` here?
I don't think we need aUseLane here.
I think this is the only place where we use `iotex-proto/golang/iotextypes.proto`
The same thing here.
We need to add the following: 1. The user can't be published to the color color 2. We should probably make this a `before_action` or something, since the color color color 4. The color color color 4. The The user can be set to the color color 4. The user can be set to the same color but the user can be set to the same color. 2. We could check if the user is a color 4. The user can be set to the same color but it has a different color
I think we should use `userRegistrySelector` here instead.
I think the `-` here should be removed.
Is there a reason to not just call MSIEnvironment?
why not settable_SYSTEM_SYSTEM_fields()?
What do the desired group here do? I don't get why you need this method. I think it should be a class method, not a class method. You can just call `spack info` or `spack info` if you want to use `user_group`.
I don't think this is a good idea.
Is this change necessary?
I don't think this should be a constant, it's not a big deal. I think it's better to use it here, but it's not a big deal, just a suggestion.
Can we remove the `v2` package from the `go.uber` package? I think we should not remove the `go` package from the `go` package.
I'm not sure if we need to do it for logging purposes. If I do not want to log, it should be good to do it for logging purposes.
I think we should just delete the `kllImport` and `c/` to be consistent with the above two methods: `...`, `...`, `...`, `...`, and `...`, `...`, `...`, `...`, `...`, `...`, `...`, `...`, etc.
Please add `default false` to the message.
This should be a static field in `jx_input`, not a big deal.
Please add a TODO here.
`user-visible` -> `allAffectedNodeIDs`
This was the only place where I was thinking that we should keep the process. I'm not sure if it was intended to be a "real" of the original version.
I don't understand why this is fully populated? What happens if you call it `fully_formatted_lines`?
Should we keep the `translateSetRunner` class as well? It's still used in this class, and it's a public constructor.
I think this is the wrong place for this.
This file was added to support both python2 and python3, but it was only added to the package, so I moved this file to the new file.
I think this is a little confusing to have as a `telemetryEnabled` to be set in the `telemetry` interface, but I think that's a good idea.
This method should not have any side effects.
I think we should be more precise in the future.
Not sure if it's worth it, but it's a bit confusing. Can we have a better naming?
I think you can remove `app.SiteLocalSettingsPath`
Why is this being changed?
Not sure if this is the right place for this. `start` is a better name. I'm a little concerned that we're going to have to do a similar thing in the codebase (i.e. we're returning a config object and the config object is a bit misleading).
This is not a part of the new session, it is not a new session, it is not a new session. You should be using `Time` instead.
I'm not sure if we should add a Connect function here. It's a function that's called from the client.
I think this is a leftover from debugging. We can change the test name to `default` to make it clear that it's a default in the name.
I think we can remove the 512 check here.
Use `get_generated` instead of `generated`.
This is a change of behavior, right?
Should we add `@Nullable` here?
This doesn't seem like a good idea.
fmt should be before the other errors in this file
We could probably add a `:resources` field in the model and have a `raises:raises:raises:raises:raises:raises` which is more appropriate
Should we use `err.Get(ctx)` here instead?
Is this the correct name? I would say `fragAlignRatio`
I think this is not correct. It should be `host.get('localhost', False)` and not `return False`
I think we should be able to remove this test. Otherwise we are not testing the `OAuth2Login` class.
There is a number number in develop
I think you could use `String.valueOf(dupe.array())` to avoid the need for the `if` here.
This is a breaking change. If the spanReference attribute is used for the existing one, it should be safe to add it to the interface.
Why is it necessary to add the API API? If we want to add the API API to the API, we can add `web.logo` to the API's `web.logo` module.
Does this mean we don't have to support it?
`is notrealm`?
Is it possible to get this working?
I'm not sure if this is correct, because ` defaults defaults are assigned to `__init__`, so `\/se\/cdp/` and `__init__` are not used in the test.
I don't think this change is required
Our current code is to use `secondsTimeSinceParent` as a part of the `before` struct, so this is fine.
Metrics/LineLength: Line is too long. [83/80]
We should modify the item.
This was the only place I was thinking of.
Why are we dropping the key here, GetongProcessProcessGetter is not needed anymore?
Why not just delete this? The HiveClient_JNI is not used anywhere.
I think this is a bug, if `writeConcern` is set to true, then `assertTrue` will be false, and `assertTrue` will be false.
why the `ignored` is the version ID?
@deads2k do you have a better idea to have this list?
Do we want to add a `fileName` argument to `PublicLink`?
I'm not sure if it's the best way to get rid of the index. I think it's a good idea to have the index itself with a re-indexing index.
I don't think this should be in the same file as the other files, since the first character of the file is the same as the first character of the characters, and the second row is the first character of the file, so it's fine to leave it as it was.
Do we want to have a service for the service? I would prefer to have a service as a constant for the service.
I don't think we need to do this, `if serviceDirOnHost[0:1] == "."`, it will be the same as `urlDirOnHost`
is this a typo?
I think it would be more clear to catch the specific error and catch the specific error.
This function is not needed.
Please revert this change. It will allow the developer to override the ` hasExistingTag` component in a future version of the view, which is a good idea to support it.
I'm curious why this change is needed. `this.Extensions.ContainsKey` is not `nextMethodName`
This is now removed.
This is a change in behavior, so I'm not 100% sure about the use of `NETSTANDARD1_3`.
This should be a separate pull request.
Do you need this?
@mjkkirschner @mjkkirschner I don't think this is a good idea.
Can you import this in an else block?
`zip_file_content` is not used anywhere else, so I think this is fine.
If you make the `icmpCode << 8` a const, you can remove the pointer `src` altogether.
I think we need a response response here.
Is this really necessary?
I think this should be `exware`.
Ah, this is a good idea. It's a good idea to have a method that does the same thing.
I'm not sure this is the right change.
This seems a little strange to me, I think we should just use the `BaseResource` here instead of the `HandleResource` of the `NamedNamed` method, as it's a bit confusing to have to have the logic in the `NamedNamed` method.
This change seems unrelated. I'd remove it.
Why not just use `InFlight(bytes, -1)`?
In theory, encode row key is non-integer.
I don't see any other usage of the fetchUnfinishedExecutions in this file. Is this change correct?
This should be `compcompiling` and `compcompiling`. You'll want to be able to run `-o` in the `BSD` folder, but not to run `-o`.
I think this is the only place where we import the library. I don't think we want to do that.
Can you please add a TODO to remove these?
Why is this `Query` being added to the caller?
I'm not sure if this will work, if I set `c.dirtyBcache` to `true`, then the config will not be `false`
why not just use `err != nil` directly?
This is just a thought. At least it would be a bit better to use a `SECTION()` method.
This will be a great idea, but if the config file is already in the `RegenerateCerts` directory, we should just remove it from the `Reg_register.go` file.
It's a little weird that this is not being used, but it seems that we have some other place that we need to do.
We should probably have a test for this, as well as the default.
I think we should keep it as `false` and remove the explicit setting.
If you do not test the error, then you don't need to check the length
We should probably have a unit test for this.
This is a test, not an error, so I think this is a test, not an error.
This should be an error. The `specifying` is not really needed here.
I don't think we need to add it, since it is a pointer, it's a string, not a string.
`import speech` is imported but not used
In what situation will this be called in a non-deprecated mode?
I'm not sure we can remove the `MinTaskID` parameter here since it is now an internal db.
I think we should just remove the FWORP, since it's not part of the FWORP.
I don't see a reason to have different naming convention, but I don't know if it's worth it to have different naming convention.
Wouldn't it be better to use `DR_instr_disassemble` instead of `dsts`?
I don't understand why this change is needed. 0077 should be in the first place.
Can we make it a `ByteCount`?
Can we put this in the above function? I'm not sure if this is the right way.
Why not use a `@private` decorator instead?
FileSystemTarget is imported but unused
I don't think this cast is needed. In the case of `use_cps_in_i`, `use_cps_in_i` will be used in `#ifdef HAVE_TLS` and `#ifdef HAVE_TLS` when `no_cps_in_i` is true. The `#ifdef HAVE_TLS` will return `int32_t` and will be used by `BaseMessage.new_tid`.
Is it possible for this to be unsupported on the server? If so, I think it would be better to have a test that checks whether a non-default target is unsupported.
It's a bit confusing that this is a bit of a function. I would expect that we don't need to have the same error in the code, but I would like to understand the purpose of it, and then use the same error handler.
Shouldn't this be in a try/except block?
I'm not sure why the original implementation was to do this. If you do this, it would be better to have a test that verifies the values of the array and then have the check in the iterator.
I don't think this is needed.
I think you should add a message here that the key is not modified. The password is not available in the Key, but it's not a key, so it's not a big deal.
what is the reason of this annotation? it should be `PackageEntity`
This change is unrelated?
Is there a reason to make this function configurable (and not just inlining)? I would rather not have the `Stat` method in the `Read` method.
This was removed because it was never used, since the tests pass now.
I'm not sure if this should be a separate PR, but if it's not then it should be a separate PR.
use `unless` here and elsewhere
I don't think this is the right fix.
I don't think this is right, you should be able to just do `verbose` and `default` if you are in the `if (installTime < 50)` check.
The changes in this file are not needed since we have the `w3C_` in the `w3C_` directory.
This should be `Ordering::experimental` instead of `Ordering::experimental`, right?
I think it's better to move this to `constants.go`?
why not using the same resource's one?
Should we call this `IF_ARM`? It seems like we're using it in the `reuse_open_state` function.
Why is this `maxResults` necessary?
Why is this necessary?
I think this should be `return True` instead of `except Exception`. The exception is probably not the best way to go.
`urlencoded` should be left as-is, it's not supported by IE11.
This flag should not be included in this option. We should also add this flag to the `--force` flag.
I would have used `testTransferPb` here instead of the `BackTransfer` key since it's the key that is used for both.
why remove this public ?
Nitpick: if we are going to log the error, we could make the logs easier.
I think it is better to make Rust a constant.
Should this return an error if the user doesn't have an agent ?
I'm not sure this is a good idea, because `Register._UNSET_NAMESPACE` is a `ALLYY` for the namespace.
I think this is a bit confusing, since it's not a `type` and it's the type of the index, and it should be `Error iterating over item`
I think we should be able <msg> I don't know what to do about this, but it's not a blocker. We should probably be looking for the minify as a separate flag to be used for a few other places and just have the minify be a value that is the same as a minify.
This seems like a bugfix. Shouldn't we use `provider` here?
This is a breaking change, I'm not sure it's a good idea to change this for now.
Shouldn't we move this package to `github.com/iotexproject/...`?
What's the reason for this annotation?
Do these need to be public?
Can we move this to `src/defaults.php` instead?
Do we need to add the `@PublicKeyFile` annotation? Can we remove it?
Can we call this `*Lamba`?
I don't see the usage of `to` in the `equals` method.
The namespace should be `namespaceLabels`
I'm not sure if this should be here.
I don't think this is the correct way to do this. Just curiosity. The reason is that `toto` is a `toto` instance.
Is there any reason for the constructor?
COMMAND -> key, otherwise, the key is none of those
Why is this interface needed?
I'm not sure what the best way to fix this is, but is this an entry thing?
I think we can just use "main" here.
Why is this in the wrong place?
I think it's better to remove the 2.25rem from the array and add it to the `font-size`. If we want to keep it as `< 3.25rem>` then we don't want to use `<3.25rem>` anymore.
The reason for this change is because it was previously wrapped in `models.tools.utils.config` so we can't use `retrying` everywhere in this file. This is because we don't use `io.prestosql.spi.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.config.types` in this file.
`Vector` should be a variable.
Can we make this a private function? Seems like it could be done in a separate commit
@JeremyKuhne should we change this to the 2019 2019 ? This was the only place it was used for the 2019.
I think `getBitMask()` should also take a parameter of the method.
Why is this change required? The ReadOnlyTxProcessingEnv should be a constant, not a constant.
Please add the extra `.` at the end of the sentence.
I'm not a big fan of adding a header here, but it's not a very good idea. I'm not sure if we can do it for a good thing to do.
`InitCodeTransformer` is a very generic name for this member, can we just call it `initCodeTransformer`?
I think we should keep this here.
This was a leftover from debugging I guess, right?
do we need the `summary` here?
I think this class should be private?
I think we should be able to just do `const long;` here. We don't have to do any special handling for this already. We can do it as a separate PR if we can.
This constant is not used anywhere.
Why is the `-` in the name of the environment variable not the same as the `compression`?
Why is this false?
This is a little hard to read. The `if` condition should be moved to the line above the `if` statement. The `else if` statement is redundant because it will return null and `Iterables` is not actually a null check.
Why the GlobalHitsThresholdChecker instead of the class? The class is used to implement the class.
I think these are unused import, and can be removed.
I think it's better to have a method that does the same thing, e.g. `ActivitySource`
`...` or `...`? I'm not sure what the best price would be here.
This is a change of behavior, but I don't think it's necessary to include process name. It is not clear to me why this is being added to the caller and it is not a process.
Why is this Exception needed at all? It seems to me that the `message` can be a `Error occurred` not just a `Exception`.
This should be a single theme.
We might want to add a note that this is only for Dynamo team, but I'm not sure what this is for
Line is too long. [98/80]<br>Space inside { missing.<br>Space inside } missing.
This should be in `blah-tools`
I think it would be cleaner to have the " \n" prefix here instead of the "import" part. The wording is that the variable is used by the C++ code in the "upper" part of the string.
This is not needed, the file was already closed.
I don't think we need this import.
I'm wondering if it's worth to check if the config file is also disabled in `python_exit_spec.py`?
A Main actor is used only in the "A Main actor" context, so this is no longer necessary.
please also add `ZK_READ_PERM` to `app/services/YAMLYAMLYAML#zk-read`
you can remove the TODO above.
I don't see a good reason to create a `TODO_` prefix here.
I'm not sure why we need this check. It is only used if there are multiple threads, but it's not a problem.
I'm not sure if this is a proper way to handle the case where the other Kokkos files are created. I think it is worth it to just make the `Kokkos_shared_ptr` package private.
This is a bit confusing. If you are going to use `non_iterating_code` and `non_iterating_code`, you should also use `assert_iterating_code` to set this. I'm not sure how to use it, but I'm not sure if it's a good idea to have the `__({}()` method in the code.
Why did you change these?
Why do we need to add this interface?
This is a breaking change. We should not have to make it configurable.
Is this a change in behavior that we should have had before?
I think we can drop the `=` here. We're just dropping the `=`.
Please delete the unused line.
@michaelkuhn Do you remember if there was an issue with this, or it was a bug?
This is the only version of this package.
I don't think you need to do that here. The `compile_opts` is always `True`, which is the case where you want to use `os.path.join()` instead of `if not os.path.join(entry['directory'], e)`.
`_once` is a `_once` so you can't use `_once` here. `YolactSegmHead` is the default. It's the same as `_once`
I think this is a good change. It's probably better to move this to `driver.Crypter`.
You need to add the exception here.
This is not necessary, as `getImageNode` is a very generic class method, and the class method should not be used.
Oops! I've been doing this in a few places, thanks!
This looks like it will be missing a `::` at the end
Why not just use the `lines.HasPrefix` function?
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Why do you need to check it again?
I don't think you need to remove this line
`value` is a tuple, so `value` is a tuple.
I think this can be a bit more specific, since the function name is used for the same type.
I think it's fine to just remove `secrets-ssm-environment-variables` and `secrets-ssm-environment-variables`. It's already a constant. It's not clear to me why we are making it part of the API.
I would call the package `protobuf`
I think this should also be a global state. If dialog is not provided, then the action will be created.
I think we should just make this `setupikit-learn`, since we are not using the `scikit-learn` package anywhere.
I'm wondering if this should be done in the same PR as the other changes?
Do we still need this test? I think it was a leftover from a previous PR.
Does `capabilities: global._googlesitekitUserData?.permissions` work when it's a global setting?
This should be a `print`, not a `&&`
Why did you change the word " Flags" to "can be used with caution"?
why is this test disabled?
I think we can move this to a new account file. We don't need it for anything else, but we should just move it to a new account file for each account.
I don't think this is the right place to put this. The `\r\n` is used in the code base.
Why was this removed? Is this just a typo?
If we're going to have an option for the user to be optional here, would that make sense?
"Invalid username." -> "Invalid"
Why changing from `optSqlType` to `ResourceTypeService`?
Layout/TrailingWhitespace: Trailing whitespace detected.
Why was this removed?
Please remove the `/* eslint-disable jsdoc/` part from the name and just use `/* eslint-disable jsdoc/`.
I think we should just `return "", nil && result.NextWithContext(ctx) == 0`
Do we need to do this in `AddressDetails`?
I think we should add this to all session properties and then pass the `aws` into `NewConfig` and `NewConfig` to `aws.Config`, since we are not using it anywhere in the code.
`{ oldTimeIntensities.NumPoints - 1}` is the default. Is that correct?
Why do we need this if we're not using the manifest?
This file should be removed
I'm not sure if this is the right place to put this. The `recipe_id` is the same as the `Recipe_Struct` check. I think that we should be more strict on this, but maybe it should be the same check? I don't think we should do this.
Please use the existing formatter for this
This should be an `Exception`.
is this a safe assertion?
This function is now unused.
I think you need the `_stream` import.
I don't see why these are necessary.
Can you explain why this change is necessary? I don't see it referenced in this PR.
It would be better if you could do `from x import 'wrap'` instead of `\`
What happens if there is no `referral_code` field?
I think this is not the right way to go about the DefaultHttpContext. It's just a simple DefaultHttpContext.
I'm curious why you removed the assertion.
Is there a way to avoid this specific operation? I would expect a lot of places where we would use this method. If we want to use the `cache-decorating` option, we wouldn't need to use `cache-MessageDefinition` to be used.
What is the difference between `release_msid` and `release_msid`?
This is a bit weird - why is it being removed? Is this the right place for this method?
This should also be added to `isHiddenWithCSS`
Why the move?
I'm not sure why the check is required, but I think the check is unnecessary.
Why not just use the new one?
I'm not sure what the best way is to use this. I'm going to create a copy of the product named `.screencast` and have the `.fetch` in the product named `.fetch` and have `.screencast` in the product named `.fetch` and `.available` in the product named `.available`
Please update the changelog.
We can remove the "and _have_ to adjust" part here.
I don't think this file should be here
why was this removed?
This is a breaking change.
I think this line should be indented one space too many `=`.
I'm not sure we want all the tests to use ConcurrentDictionary here. It seems like we're not using it anywhere. I don't think we want to change it.
This is a bit weird. Why do we want the value to be in the middle of the `ecs`?
I'm not sure if this change is necessary, but I'm not sure it's worth it.
When will this be false? When should the endpoint be provided? if should this be `if not req.Config.Endpoint != nil { return false }`?
should we also update `createElement/` as well?
This function is used in a few places in the PR. Can we remove it?
This will not work. `ExpectedCondition` is not null, `elementText` is not `null`.
Please rename to "deviceID". The other option is "enabled" (to indicate "enabled"), and "enabled".
I'm not sure this is the right fix.
Why did you remove this?
I'm not sure if we should use a separate `visitNode` helper for this.
Why is this required?
I don't see a reason for this change. The `OSError` is a bit ambiguous. I think it would be a good idea to try to keep it consistent.
Why remove this?
I'm not sure if this is the right way to do it?
If it is not `progress`, then this will not be needed
Maybe "the sort order in which describes how the file is ordered"?
This is not needed anymore, right?
I don't think this is needed.
Why is this necessary? FlinkTypeVisitor has been changed to `internal` in the implementation.
" parens to ..." is a better wording.
Why not using the new getter?
FirstN node node is not set
this method name is bit confusing to me. What about `getTypeName`?
I'm not sure we need to add the `padding` param here, as we already have it in `buildCallback`. I think it is better to add a `defaultCallback` to the end of this component and add a `defaultCallback` property.
I think this is actually not necessary
@smarterclayton do we have any concerns with this change? This change is not related to this PR, but I'm not sure if we should change the name of the library.
I think this can be removed, we don't need the module at all anymore.
Is this the correct form to include? I think it would be better to do this for all specs that don't include `proposal`.
AccountState is a `nil` state, so you don't need to pass the `err` here.
This requires_approval_notice? approval?
What about "tracer" instead of "cancelling"?
I'm not sure why URI icon was not initialized. It seems like this should be used for the new script.
I think this should be `Optional[str]`.
Why is this necessary?
Shouldn't this just be a class field?
We should not have a new promise at all, right?
I think we can remove the `Config` type altogether since it's not part of the API (and I think it's not used in the API).
Is this constant used somewhere?
This seems unrelated?
I think we can use a constant here,
The record is created before calling the method, so we can't assume it's a valid value.
Why not `int`?
Is this not needed anymore?
Why change this name?
This is a good candidate for a `run` statement.
`keys` should be `keys`
We don't need to do this since it's a `MapRouter` already.
This is a bit confusing. If you are going to do this, the action is actually "neve" and it is "hfg_rows". I would suggest to move the action to the next line. Also, the action should be "hfg_rows" (and "hfg_rows"), so the table should not exist in the database.
Isn't it possible for this to happen in the https?
I don't see any use of `_find_elements` in our code base...I'm not sure what this `_find_elements` method is used anywhere. I don't see a use case for this, but I'm not sure.
If we're not using `gocloud.dev` as a dependency, I think we should remove `index` and `gocloud.dev` as well.
I don't understand why this change is necessary. It's not possible to have a `AccountCreatedCreated` return a null value, so the `if` statement is unnecessary.
I would use `context.extra_ snippet` instead, because you're using `context.extra_ snippet`.
Why not just return from `TimeBasedWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWeb
Please use `String#Equals(String, StringComparison)`
This should probably be `str`
You can use the `Symbol` attribute here, it's already in the `for` loop.
Why are you removing mining?
`progress?` is the preferred form for this. I think we can just `progress?` or `progress?`
I think we should remove ` Flag` too.
I think it's better to move this to a `common/internal/internal/core/config.py` file and then use that here.
I think `pathlib` is a better name for the case where `get_argument_from_call` is a `pathlib` (so it can be a `attr` method).
Why not use the standard `github.com/recovery.js` ?
I think it would be good to close the done channel here, if the done channel is done, and the done channel is done automatically.
This error message needs to be updated too, right?
All these are the only ones that are used in the `theme/v1beta3.html.erb` file.
This should be done in the `onCreate` method
I think this should happen in `if(blobExists)` instead of here. The blobExists will always be false, and the blobExists will always return false and we don't want to throw an exception.
I don't see where this is coming from, is it?
I don't think you need this
`reffedHeaders` is not needed here
I think we need to do this in `list.Items`, right?
I think this file should be removed.
Please add a alphabetical order.
I don't think we need to do this, it's not a dependency.
This is a bit confusing, why is this needed? If the function is not being used, then why is the check needed here?
Should we log this message as well? It's not a test, so we should be sure we don't want it.
This is a bit confusing, if you do a `strings.Replace` in the mirror then you don't need to check `!= nil`
I think this should be named `pixman_region32_clear`
Maybe we should just add an `f` check here, to make sure it's a configurable account?
the `$` was removed in this method
I think this is not needed, the `SYSLOG_FMT` variable is already declared within this block.
I don't think we should be changing this. The `len(cnb) > 0` check should be done before `len(cnb) > 0`.
I think it would be good if we could make this `type`.
This is a good place to go through a `go k.manage()`.
I think we should just delete this line, otherwise the line will be too long.
I think we need a way to avoid mixing concerns with mixing concerns.
I don't think this is needed, since the `add_subdirectory` function already has a default value.
This is a breaking change. I don't think we need this. It is just a simple string, not an integer.
I think we don't want to import boto3 anymore, right?
You can use `if (stopped)` here.
I think we should just remove the `to_create` method and replace `nni-specific import` with `[=]`
Why are we using `store` in the name of this file?
I think this is the only place we need this file.
We can't just pass the metricExporter directly.
@andrewkroh Is this change correct?
I don't think this file is needed, it should not be removed.
I don't understand the purpose of this change: the new `beforeClickOn` call below seems to be the same as the new one in the `init()` method.
Doesn't look like we're changing the logic here. Isn't `self.approving_official` always going to be an `else` branch?
This is not the interface, you should remove it.
Nit: I think it would be better to move this multiple lines up so that multiple multiple lines can be removed. Also, I think the word "multi" should be "multi" (as it was before).
Do we need this? Can't the `ForceCleanupOnError` field be used?
Why is this needed?
Why not use the ITEM_PARSE_LIFELEECHCHANCE option?
@jridgewell I think we need to change this, as we are already using `allowedMethods` in the `template` package.
Please remove the line if it is not used.
This is the main fix, I think we should not remove it. The problem is that if we change the default value of `ZipkinActivityConversionExtensions`, the `traceId` will not have to change. We can remove this field.
Is this really needed? CameraResultType can be null.
revert this change
I think you meant `I18n.t('dashboard.show.contact_your_mentor', mentor.first_name)`. I think this will be a little bit clearer.
`(int i = 0; i < ((metricPoint.Keys != null) ? 0 :` ?
`can safely be reset` can be removed
This should probably be `github.com/aws/amazon-ecs-agent/agent/asm/factory`, right?
Can we use the `target.Outputs()` function instead?
I think this is a leftover.
I think this should be on the `super(tableName, ops)` instead.
I think this is wrong.
I don't think we should add this method to the interface.
why is this changed?
The `sizeof` is not the right way to check the system.nodes[1]->network.port
this is not right. We do not have permission to download file
`restore` is a different thread now so restore can be removed
I think this is a leftover from debugging?
Do we want to log the value here?
`step` is not a valid index, so I think you can just use `index`
You could use `if (message.IsNullOrEmpty(vaultId))` here.
I would add a `inputs: str` here to say "Recursive converted type..." (I think).
Do we want to check for `object_fields`?
The version ID is already in the `ac` package
It's not an appropriate fix. It should be `Enum<T>`
Is this actually debug mode?
Why not `ParamView` and `ParamView` ?
onevent is already in the name of the directory
I'm not sure if this is the right way to go. The `getInterval` function is only called in one place.
Is this a bug fix?
This is a little hard to read, but it's not really a problem. It's probably not the best way to get the `non_pending` and maybe it's a good way to get the same result. Maybe it's better to just call `super().assert_pending`?
Shouldn't this be called "worker"?
@karascher We need to change the GracefulShutdown() to GracefulShutdown() and use GracefulShutdown.
This should be `mobile` rather than `mobile`.
Could we use a more meaningful name? I don't see a lot of code changes like this.
can we make this a private field?
This namespace is repeated twice.
I don't see why we need to add it to `poS`
Line is too long. [81/80]
I think we can get rid of this too.
This is already in the `UnitTesting` package, so we can remove the `UnitTesting` attribute.
I'm not sure this is the right approach. What if the `control-label` class is actually named `active`? The `active` property is not named in the `active` component.
I don't understand why this isn't reloadable - is it that you can't reload here?
This seems like a good candidate for a `QueryMol` variable.
This is the same as `/^` right?
Extra empty line detected at method body end.
Why was this removed?
I would call this `__init__` and just do `Zero_count Argument` in the `__init__`.
This function can now be replaced with `func (a.Account)`.
Why do you need to cast `str` here?
Why are we using `archer` here?
This is the change that avoids sending an empty set.
This could be simplified to `getDataFilesTable` if you need to.
I think this check could be moved up above the `if` condition above.
If we are not going to get rid of the `Params`, we could also just remove all the branches of the `Event`.
Is this test really necessary?
I'm wondering why the `Core` requirement is not part of the test folder but the `Core` view is not part of the `common/testimonial_thumbs/anthony-lee.jpg` folder. Is there a reason why it isn't here (and the other ones)?
Just a note that the execution length is the same as the length of the execution. I think we should be consistent and have the length of the execution length of the flowUtils.toJSON(flow.toObject())? This way, if we ever have to do a null check and throw a null check, then we can just do a null check.
Why do you need this change? The icon is always defined in the `load` method.
The exception is not thrown here, so this will not work.
Maybe we can use something like `add_index_names_index` and use the same name for all the names.
I think it's better to move these defaults to the `expandRICS_MODE_COLUMN_CONF_PREFIX` constant.
You need to update the `urllib.dvc` docstring accordingly
Shouldn't this be in a `finally` block?
This is not needed anymore. The `else` branch is only being executed if the options are not set.
This was a test case I removed because it was the only one I'm testing for.
I think this can be just `valid_flags + 5 + 1`
I'm not sure if we need to do anything about this. It seems like we're just using the existing `/api` package here.
These two test cases are not really testing the same thing as the one below.
Is this change intended?
This is a bit of a hack, but I don't think it makes sense to put this in the `if o` block.
This seems like it should be called `go-ipfs-files`, no?
This looks like a very generic way of doing it. Can you make it a `finally` and move it to a `try` block to make it more explicit what is going on?
`import com.sun` can be removed.
Can't we use `OnStart` instead?
Nit: I think this should be `UpdateSnapshotInfo`.
Can you please change this to ` DefaultLogMessageRateLimit`
I think this assertion is misleading, because the `assert.Equal` method is not called.
Most of the new functionality is `Name` (the `Name`). Is it possible to have a list of items for the Overseas?
why is this removed?
Is it possible to have this code be outside of the `if`?
We should probably add a `overflow_max` option to the `Run` API and use that instead of `overflow_max` here
It's a little confusing that we have a `spec/fixtures` flag in the config file. Should we use it?
I think we should remove the `pcapdnet` import here.
Should we remove this? It's not used anywhere.
Why not use `workWorkloadIdentityStatus`?
I'm not sure if this will cause issues, but I'm not sure if this is the right fix.
please add a trailing comma
Missing space after `=`
`config` is not used in `conda.core.config`.
Is the `reverse()` call necessary here?
why not just `go factory`?
I don't think this will work.
This is the test I was expecting. If I was not wrong, I would just delete the `_address1` and just call `_address1` instead of `_address1` since it's a `_address1` that is a `_address1`.
Why not keep the logging level as debug?
I think you should use a `assert_parameter` helper here, to be sure that you are not testing the case anymore.
What if we just call it `interpreters[executable] if interpreters`?
shouldn't this be asserting the state change?
isn't this a BC break?
This is not a public API, but I think it would be better to do it in a separate PR. It's not really important that we have it in this PR, and we should be consistent in the future. Also, I would prefer to have this as a separate PR. I would like to keep the name consistent. I'd suggest `get_meta` or `get_meta` and `get_meta` to be consistent with the name of `get` in the `_meta` function, `_meta_meta` or `_meta` or `get_meta_meta`
Should this be a `TODO(dagRequest, "getStoreType())`?
I'm pretty sure that's the right thing to do here. If we're going to have a property that's not defined, we'll have to do it in the properties. Or, if we can't do it here, then we should do it here.
I don't think you need to remove this method. It's only used in the `@unresolved_targets` method, and the `target.name` method is also used in the `create_target` method, which is only used in the `unresolved_targets`. I don't think we should remove it here.
why is this needed?
I think this should just be `return`
Why not `this.passesRestrictions = this.bind(this)`?
Why did you change this?
Is this needed? I don't see `render` used anywhere in the code.
These changes should be reverted.
Why do we need this? The `use` statements don't seem to be used in this file.
This is not used anymore.
This is a bit odd. Why not a `name`?
nit: I would use `fs::FileUtils::makeDir(newPath)` to make it more readable.
I'm not convinced this is the right place for this. I would prefer a separate method to not use `toSnapshotId`. I would also suggest adding a new method `fromSnapshotId`.
I don't think it's necessary to pass the empty string here. The `isset` call here will do nothing.
Is there a better way to do it? `output_stream` is a string, and `load_spec_files`, so maybe we should just use the `output_stream` variable instead.
This is the only one I'm not familiar with. I'm not sure why this is here.
Why is this line deleted?
@mfojtik @smarterclayton do we need to add this to `CollectionRule`?
I don't think this class is needed.
Can we add a note that this is an interesting interesting one, I don't know how to do this.
This is not a very good idea, if the memQuotaRatio is not a global, it should not have the same value.
I think we should leave this out and just leave the entire test clean up the code.
The traversal should be represented as `In32` instead of `codec:"dc"`
@cramforce do you think we should add this parameter to the base class `dto_dto_root` to avoid any confusion with the rest of the code
nit: add trailing comma to avoid extra formatting
why are we changing the default to `Platform string`?
Can you use `integration/api/external/'` here?
We don't need the ac.SigningKeys here anymore.
I think this sleep was not redundant, because the sleep sleep is the same as the sleep sleep
Standards: Please add braces to this condition.
This should be ``OrderedDict``, not ``Job``, ``Tensor`, ``Tensor`,`, ``Tensor``, ``Tensor`.
This is a bit weird - why is the JSON JSON attribute removed from the first place?
I think we can remove the file here.
Is this a good name?
This is a change in behavior, right?
I'd rather have this assert in the tests, as it is now handled by the tests.
why did we change this?
As discussed, the indentation is wrong here.
I don't think this is the right place to put this code. The code should only be in the `Path` class, and not in this class (not in this PR).
The namespace namespace is not used, please remove it.
Is this used anywhere?
This is a breaking change, and I think it is worth it to check for `.toEqual(0, 0)` instead.
Perhaps we should have a better name for it? `ZeroGasPrice`
I think you should be able to use `std::unique_lock<std::mutex>`, which is the type of the list.
I think you should add `showProgressAfterFinish` to the `defaultTabIcon` list.
I don't see the point of this. Instead, you should send the email and send the notification.
I think we can remove this. It's not used in the changelog.
I'm not sure why this is necessary.
Please add the `name` parameter to `register` if it isn't used.
`package p2p` was unused.
This is a bit confusing, as we're already doing this in `component.go`. Could we move this to a `Location`?
I don't think we need this change. If we remove it we should use the `marker_table` variable in the `sql` list
Should this be a `body`?
I think it would be better to have the default as a constant in the class
I think it would be more consistent to have this take a default value and then pass in the `@private` annotation. Also, I would suggest to have a `default` property that returns a `boolean`.
I don't understand this. The original code used `attr_value['string']` is a required attribute. The `attr_value` is a `required` and the original code has a `# type`. The `# type` attribute is a `required` but it doesn't have a `attr_value` attribute. I think this is the correct behavior for this PR.
Why are these `addon` needed?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Should we add a `TODO(r' => true)` here as well?
I don't think `Symbol` is necessary here.
I'm not sure why you would need to do here. If you're just setting the lock to a string it is a `while lock.unlock ()` which is a `while lock.unlock ()`
We need to make this configurable, as we are not using the `32` type.
I don't think this import is required, since it is in the next commit.
I'm not sure what this is trying to work. Maybe `this.get('store')('role/:id endpoint')` is better than `this.get('store')`?
Is this true only for landmarks? I don't think it should be true, just curious.
The `== null` check seems redundant.
This will break all of the other code, right?
Why is this import needed?
I think this should be `token contains the number of segments`
Avoid multi-line chains of blocks.
This should be `source.iceberg.reader`
I don't think this is needed.
Maybe we should add a new column to the new name so that the `AWS IAM` is not always present.
Why is this being deleted?
I don't think we should be changing the word "flag" here.
I'm not sure if we should be catching a `null` check here, but if it is, then we should probably throw an exception if `mdmLoginServers` is null.
Is this used?
this should be removed. we should log the info about the info level. If it's not required, we should log the info level. If it is required, the log should not be logged.
This file has no effect.
I would rename these to: `AWS_BOUND_SA_SIGNING_KEY`
This should probably be in a separate PR.
If the OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
Since `ignoreUndefined` is only used by type `ignoreUndefined`, I'd prefer to remove the `ignoreUndefined: false` parameter.
You can use `logout` here, which is the root cause of this problem.
Why not just call `writewrite()` here?
this method is not used anywhere.
This doesn't look right.
Why did you remove this?
The new `docstore` tag was not being used anymore
I think this should use a different `Report` class, since it is only used for testing purposes.
I'm not sure why this was necessary. It's not the case anymore.
Can you use `grc.mfout.printf("%s", q)` instead of the string?
Extra empty line detected at class body beginning.
I think you can remove this
I think this is a bug fix, if you want to fix it here, then please fix it.
This is a little odd. Can we do the same for the error message as well, i.e. the name already exists and already existed.
This test is failing because of the `assert` block above.
Why not `h2o_quic_close_all_connections` ?
I think we should do this before merging, but I'm not sure if we can do something like this in the code. The `Object.is` method will return a value if the value is `false`.
this is not a boolean. this is a code smell
I don't think we should be changing this name here.
I don't see where `keybase1.16` is used, is it?
This is an interesting thing that I hadn't been able to see, and it seems like this is the only change that makes sense.
I would rather change this to createClient, since it will be a simple string.
This is the fix. It's missing a return value.
can you use `isConnected` here as well?
This is no longer used.
This change seems unrelated.
Should this be `HttpServerErrorStatuses`?
This will only ever be false, right? The `key_in_directory` function should be called when `sd_journal_next_skip()` is true. I think it's better to just use a boolean to get the default value from `i_ins` instead of `true`.
I don't think we should set null here. It should be possible to set it to null.
I think we can just remove `async_async` entirely. It's not necessary because `async` will always be an async method.
This change is not necessary. The default is already defaulted to true. It's a bit odd that this is not being called by default in the `default` method.
nit: this change is unnecessary, we can just pass the constructor directly.
We should probably make this a string string. We can also make a copy of the string literal in `app/models/users/users`.
Should we log the header here as well?
Why change it to `schemaVersion`?
I'm not sure if this will work for all versions of the old version. I think we should keep it in sync with the new version.
This is the only place where we need to check the aria-hidden is set. If we do not want to check the node's hidden attribute, then we should check if `aria` is `true` and check if it is `true`
I'm not sure if this spec is the right way to check for `user`... I'm fine with that, but it seems like it's fine for now, just something to be sure.
I'm a little confused by this. If the field is not set, the field is `_currentProcessName` (the field of the value of the `_processDataPoisoned`), then it will be `null` (i.e. the field is not `null`). So the field should be `_currentProcessName` (and the field should not be `null`).
I think this is a leftover.
Why not call this ` ITEM_PARSE_COOLDOWNDOWNANAN` ?
This needs a migration if the `status` is not defined.
you could use `generatePath` here, as you do on line 562
Isn't this a BC break?
Please add this to the baseclass `utils.go` and add this to the `BaseSVIDKey` below.
How about `.h` instead? `.h` is more consistent with the rest of the file name.
I'm not sure if we want to add a new interface to the `UpdateProjectSingleSignOnRequest`
This seems like a wrong abstraction.
shouldn't it be like repository_id and presence:?
Is this change intentional?
can you use powershell here instead?
Let's move this into the else block to make it clear that the encoding can't be null. That way we don't have to do this check here and we don't have to worry about that.
Can this be `KeyError`?
This is the only place where `NonceAsync` is used, but the error message should be updated to use `onBehalfOf`, not `onBehalfOf`.
Can we just remove the secondary? This is the only place that needs this.
This will make the memory leaky. The `RLock` function will never be called. Is that OK?
Could we have a constant for this, i.e. `.de`?
I think the `index` label is unused now? It can be removed.
I don't think this is a good idea. Can you explain?
This should be a warning, not an error.
It seems that the `c` is a `nil` list. Should we use a `nil` list here, or should it be `nil`?
I would add a private method to the public APIs
compression is on the `compression` argument, so I think it should be `compression=on`
why remove the file?
I don't think we should setBackdrops on all platforms.
This is not a `Warning`, but a `Warning` is missing.
This is not a required change, it should be removed from the list
I don't think this is right. It's a bit of a hack to use a `cast`.
@deads2k @mfojtik why is this changed?
Is this change necessary? I don't see a lot of code using this.
Is this still needed?
Block has too many lines. [39/25]
I think we should move this to the top, if we want to avoid re-introducing it back to `Gemfile`
I think this test should use `org.sonar.druid.segment.PTION.schema.yaml` instead.
This is the only change needed.
Why is this being removed?
Should also mention that the value is set and the default value is set. I don't know if it's possible to have a default value in the middle of the Retryable field.
I think we can remove `service` here, as it is now a breaking change.
I think this is the only change needed?
I think Oracle can be removed now since it's unused now.
took me a while to figure out what to do about this
why not using `entityValue.getNamer()` here, and the below below?
This is a good idea, but I don't think it's necessary to add this.
I think the `else` clause can be removed now, since the `else` clause can be removed.
@michaelkuhn Do you remember why we have this function? I don't think it's necessary to have the `RAMHandler` in the name of the function. I think it's a bit confusing.
Use `set_code` here, not `set_code`.
This is a little confusing to me. If we're going to use `appliedRevs` here we should probably not use it here.
Why do we need this anymore?
I don't think this is the right fix. The `el` variable should be used for the `getPropertyValue` method.
Should we do `getKey` here instead?
Is this something we should do to make sure we're not breaking anything? I'm wondering if we should just do this for `AdoNetExcludedTypes` and `AdoNetExcludedTypes`?
Please use import with `ndm`
@adamjstewart Is this change related to the PR or just a fix to the state change?
Is this used?
nitpicking: I would use the `Tools::start()` method to avoid the `\` in the array.
Why did we change the cleanup to `EnableCleanupReplicationTask`?
Why is this being removed?
In theory, I would prefer to use `tolerance.any()` instead of `.any()` since it's a general rule
I think you can remove this now :)
This can be `.then(executor_.get(), [self, ...)`, right?
Is this the right place for this code? I don't see any code that is calling this method. IsIntegrationEnabled() ?
this is not a valid value
This should be removed.
`var _rootrootrootrootroot=true` is not a proper way to avoid this, but it is a bit weird that we have to check `ChaosImpl` in the `/api` package. I think this may be wrong, and we should just remove the ` nil` check from the `ChaosImpl` package.
I don't think we need the second param here.
Is this a debug statement?
Is there any way to do this without introducing the `@param`?
I think it would make sense to also have a `_from` call that does the same thing, and then just call it once.
This looks like a bug fix.
I think we should move all of this sub-module dependency into `pkg/apis/pubsub`.
I would use json_tricks here.
This is not related to the fix, but I don't think this is correct.
I think we need to close here.
Should we do a check for `app_shared` here?
Why is this needed? `delete` already has a `@Internal` method.
Should we use the `CMAKE_SOURCE_DIR` constant here? I think it would be better to move it to `src/test/test/test_data`?
This is a change in behaviour - I'm not sure why we need to specify `account.NewInt(...)` when the value is `true`. I'm not sure if it is worth doing, but it's not a big deal, and we should probably not have to do anything with it.
should we make this configurable?
This should be `errNotEnabled`, right?
would be good to make these consistent with the other key tty in the `TRANSPORT_OPTIONS` namespace
I think we should move this to a `constants.go`?
I don't think we should be passing `this.isDatabase` here, but I don't see where `beforeHandshake: !this[kIsMaster],` is used
I don't like this new constant.
I would prefer to have this as a constructor, and then use it here. For example, `Map<String, Object>`
I don't see a point in having a `flux` method. I don't think we need to do that.
Hmmm. I don't know if it's possible to do this, but I think this is a bug fix. The `if (len == 0)` check below should be sufficient. And if it doesn't work, it should have the same effect.
Why is this necessary? The `TextView` is a part of the `TextView` class, which is the only thing that is used to create a new `TextView`, which should never be used.
You should add these examples to the `Entry` class.
I'm not sure this is a good name. It is used by the `cmd/toggle` namespace.
Can we rename `Reader` to `NamespacedName`? I think it's more clear what the function does.
I think this should be done in the `LOG` function, since we only have one call to `dcontext`.
Should this be a module-level constant?
This is the fix, but I'm pretty sure it's the way we do it, but we should make sure that `attachShadow` is not set to `true` for the `key`.
@jridgewell Is this change necessary?
This is an example of a weird pattern, why not just have `$options:toSingle` and `toSingle` as the second parameter of `$this->getSingle`? This is also a change in behavior, so I wouldn't expect it to be the only place where we have `handleSingle` in the `exportSingle` object.
Please use `String#Equals(String, StringComparison)`
This is not a placeholder. It is not part of your PR, but it should be fixed.
I think this is not the right place to put this logic here. The other code should only be used in this method. The other code is used in this method, and it should be used in the other code base that says something like: `if k8sInfra.PodExist("default")`
This exception is now never properly properly logged, but I don't see where it was removed. I'm guessing this exception was being introduced in a previous PR.
If you're going to do a switch in a bunch of items, you can return nil here. Otherwise, you won't need the switch if you have a nil-error. This will make the switch in-between state harder for me.
Isn't this anequals() call?
This is a breaking change, it is a breaking change and will be fixed in a followup PR.
why did this change?
is this file still necessary?
The `v1` constant is now unused and can be removed.
can you make this package private and add a `install-gen` prefix to the API?
Why are we using the System.Collections here?
I think it's a good time to move this into `TwPlayerCardsController` itself?
shouldn't this be handled internally?
This should be relative import.
I think we should remove this. We don't need it for the `julia` class anymore, since it's not being used anymore.
Is the idea here that the user can specify this value in `azure-config.yml`? If so, I'd suggest `azure-config.yml` as well. (This is the only thing we need to do.)
This is a no-op, right? I don't see any other code using this. Why?
This should be a separate change
This is not right, the ID is already set in the list below
Is there a reason why you added this as a list of supported app?
is there a reason for this to be a const?
Should we do this in `graphim` instead?
Is it safe to remove this? I think the package still has `klog` in the `namespace/mu` package.
This is the only place where we log the status of the resource.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Nit: `localConnection && localConnection.type == Blockly.OUTPUT_VALUE`
I think we should remove this TODO.
"datatype" -> "datatype". It's also not clear what "datatype" is here.
`if (!filename != nullptr && CheckCanLoadFromBin(filename)) {`
Does `Reader.ExitError` still need to be reached?
I would use `StatusOr<bool>` here, as `func` is not really a bool, so `StatusOr<bool>` is a bit confusing.
this file is missing the `__init__.py`
I think this will break if you are not using `util.IsPaused`?
Why is it specific to the rest of the test?
I think this is not correct, you should be able to just use the `toAbsolutePath` method. The code that uses `instanceDir.toAbsolutePath()` does not work for you (I don't know which one to do).
You should use `localFieldPath` here.
I don't think we should change the type of `Mysql2` here. The error message is probably not clear enough.
This is the core change that is unrelated to the rest of the PR.
Also do the same for the `draw` action, but I think it's ok to leave this one here.
This is not the right way to go. It seems like it is to have the RawDiff function in the RawDiff.
Can we make this change in a separate commit? #Resolved
Should this be const?
This is a bit confusing. I'm not familiar with this code and I'm not sure if this is the right place to put this. My understanding is that this code is not correct. I think it's worth to check if the caller passed in as a `cert.URIs` and then calling this `case`.
This is a bit weird. Why is it not a file? I don't see it being used.
This is not the only place you need this. I would prefer to have `suggestion.download_path_suggestion` in `mhtml`.
Is this port port port port port? If so, should we make it port port port?
Not sure if this is a good idea, but this could be just `if app.config.respond_to?(:secrets)`, and then we can simplify it to just `if app.config.respond_to?(:secrets)`.
Do we need this? I think it should be a separate PR, but we should be able to fix it later.
Shouldn't this also add an `err.addError`?
This is a bit weird, it looks like it will generate a lot of problems, but I think we should be consistent about how we handle the `default` property in the `type` module.
I don't think you need this, it's how it's used in the code.
This is the only place where we have a backing node, so an event can be used.
This should be a `@Deprecated`
I'm not sure we want to add this, but I think we should add it to `ubuntu` to the `18.04` namespace. I'm not sure if this is a correct solution.
`#endifdef` is the default for `CV enc`
why not just return error?
Why the `completer` has been changed?
I don't see where the api version is used.
This seems like a bugfix to me. Why is this necessary? The `it sends ConnectionManagerSingle` is already in the `definePropel`
We can't use the generic `IEnumerable<T>` here since it's a special case for it. But I guess it's fine to just remove the `IEnumerable` here and let it go.
this is the only line changed in this file.
Shouldn't we use the `recordLink` here?
Is this needed? It seems to only test for a single test, right?
I'm not sure why this was necessary.
I think this should be `item`
Why is this needed?
Same, re.M is not a BC break, it is possible for a re.M to have a long time.
This change is not needed. The code above is a bit redundant, since it should be moved into `create`.
I'm a bit worried about that. Isn't this the same url as `$me->seeTranslationAdmin('Payment <strong> modified', 'dataFixtures')`?
You can use `return` here
I think we should move `self._docusaurus/core/lib/babel/preset` to `sign_sites.py`.
`CherryPick cherrypick` -> `cherrypick` ?
Shouldn't this be `manager_env_prefix`?
this file is not used anymore
I think the version should go in the `k8s/k8s` package
I think this will work with the encode ID. You can just call the `html` variable here, and then you will see the whole function call.
should this be `error != null`?
I'm not a fan of this `if cfg.model.neck.rfp_backbone` check
Could this be refactored to use the `facet_paginator` class?
Why not `cxx.txt`?
(style) line over 80 characters
why not just addKeyID to the table?
what does '0' stand for?
We'll probably want to make a spec for this spec.
why not using a named constant for port-list?
why not use `sizeof`?
I think we can use `assert` now that we have an `info.info.name`
I think we can get rid of this. We don't have to think about how we can handle the scenario where we have to do this.
This is not the correct way to check for the hash. The problem is that we don't have to do it in this PR.
I'm not sure if this is the right fix. It should be in the same PR.
I don't think this change is right. It should not be done in this PR, it should be handled in the same PR. @dvoytenko
@dvoytenko is the `dir` here still valid?
Can we remove the `else` branch?
This is not the same as `GitHash` field, right?
I would suggest to define the `makeflow` constant in `makeflow/makeflow/src/main/resources.py` instead of hard-coding the name.
This should probably be "until we know that it's not an instance of a listens."
`createVNode(possibleVNode._dom!=null)` is the default.
Why not just use the enum directly?
I think this needs to be done in the `TabBar` view as well
This was a bug in MPI so it's not used anywhere else?
this is a good way to avoid the need for a class. can you add it back in?
Is there a way to avoid calling listener() every time?
why do we need to add this?
I don't see this used anywhere?
This should be logging.Error instead.
can we make this a constant and use it in tests?
I don't think this is the right place to put it. I don't think we need to do this.
I think this could be a `try/except` statement, since `container_key` is defined in `changeset.rst`
Why not call `getMetricsMetrics` directly here?
Shouldn't we check if the `.fromLua` is not `access`?
@jcotela is there a better place to put this block?
What if the test fails? Would it make sense to have an error message in the test?
Why do we need to cast here?
I don't see this used anywhere, can you remove it?
This should be `context` not `value`.
I think you can remove `bytes` here, since you are already setting the `index..-1` variable.
I'm not sure this is the right way to fix the `<a>` tag, since it's a DisplayString now?
How about: autocomplete suggestor -> autocomplete suggestor -> autocomplete suggestor
This is not a breaking change, but it seems like we should move this import to `gogo/protobuf/proto`
I'm not sure about this one. It's not used anymore.
Why are you using e1beta1 here?
It's better to use the event handler here. The caller can do the right thing.
I think we can just use `belongs_to :approving_official` here.
This should be a `List<T>`, right?
I think this line could go away.
I don't think this is a good idea. It's probably better to have the file open at the beginning of the function.
This should be `forum.case.com`
This should be `.NM`, not `.name`.
I would prefer to have a name like `member-subscription-member`.
I think this was the only usage I'm missing from the original issue. The problem is that if you remove this, you will see the user in the wrong place.
Why was this moved?
Should we just remove this code? It's not used anymore
@michaelkuhn I think this was a mistake before, since the code was repeated in the previous review.
Do you think it would be better to use a single `getName()` method to generate the `ManifestFileDF` instance?
I think we should just log this when the node has been created.
I would have passed a default value here, but I think it would be cleaner to have this default in the constructor and pass it in to the constructor in the `variable` constructor, then pass in the parameter `value` in the constructor.
I'm not sure if this test is actually needed, since the `test_parse_cloudtrail_with_botocore()` function calls `test_event_cloudtrail()` before it was called.
I think the name should be changed to `name`?
This is the change I mentioned above.
Is it expected?
I don't think this is correct. The code is not correct.
It looks like this file is actually being removed. It seems to be the only place that uses this file, but not the others. Is this the reason why we're not using it? If not, can we just use `#ifndef KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK`?
Line too long (> 80 characters)
Well, it's not a big deal, but it's not a big deal, but it's not really an option to put it in a separate function.
This change was not necessary, but I don't remember why it worked before. The `1` is needed for this PR to work as well.
I think this is unused now
Please add an example here to also call the field `sourceId`.
This change was necessary since the acks's message was being used to send a message to the message. This was causing the error to fail to fail.
This is the only public method in this class. The existing code is to use a different public API for the public method. The new one is the same, and the new one is the default, so the old one doesn't need to be public.
why is this needed?
I think this line is redundant now. `all_defaults` is only used for `kw_defaults` if it is true.
We need to make the type more specific. For the future, we should add a note that the pending will be written and that it's not a very long.
This seems wrong
I think we should be able to just return `Input` here. I think that we should be consistent and return the result of close, and not the whole `criuProcess` here.
I think the best way to check if the filename is run first, so it's not possible to run it on a per-element.
Why is `Errno::ECONNREFUSED` needed here?
I think this is not needed, the `movie` is only used for the ` Rolevie`.
I'm not sure this needs to be `collectVertexProps` here.
Why is this needed?
You can use `_getCheckpointParentDir` directly here.
This should not be necessary, as this is not the default implementation of `UIA-restart` anyway.
This is a bit weird. Why not just call `event.HasFormat()`?
I think this constant should be in a dedicated const
Nit: please remove the `using`s here
I think this should be `caseInsensitive(...)`, since we don't have any other `getReadColumnNames` method.
Do we need to call `PoolAddEventHandled`?
is `nil` check needed here? `fn.normalCalls == 0`
Shouldn't be 4?
"FailureImportOperations EventReason = "Failure Import operations
I'm not sure if there's a way to make this more readable, but it's probably better to have a `return rb_intern` function that returns the rb object.
This should use a logger
I don't think we want to keep these constants for a long time.
How about `updateUpdateTime()`?
@gvanessen @bartonjs - I'm wondering if we should add an example of how this will work for any type of type of `Ready` type.
can you add a check here for `sigmoid` that it's not set on the first instance?
We should change the error message here.
I think this should be debug or debug level?
I don't understand why we do this, why do we parse it from here?
What is the purpose of this `std::unique_lock`? Would it be better to use a `std::unique_lock` instead of a `std::mutex`?
Why not move this import to `mysteriumnetwork` ?
You don't need the second return, right?
why is this removed?
Datasets are used only in the `Dataset` package, so this will break existing deployments that don't need to change.
The `TracerProvider` is used to test all the tests. We can pass in a mock or set `global.TraceProvider` to a variable and pass in that argument instead.
I don't think it's a good idea to use `google.golang.org/grpc` here.
You should be using `utils.read_file` here.
I think we should use a constant here
If you change it from stage stage to 'toers'.
Why change it?
This is a great place for a name, but I think this could be a little bit confusing.
Can we add a TODO to remove the `[]`?
Do we want to keep `WriteAsync` in the test suite?
The `user` should be `description`
I don't think we should add this to the public API.
This is not needed anymore.
maybe we should try to keep the snakebite and make sure it works with other external versions?
I think we can remove this now that the content is in the task
Why did you remove this?
This was removed as the only usage of this package is in `src/server/glassfish/src/glassfish/glassfish.php`
this is not needed, right? you're calling `launch_vehicule` inside `ensure_launch_vehicule`
Is it possible to get the right log file here and not have it happening? I think we can just remove the log file if it's not doing anything?
I don't know why this code is needed, but I think this should be moved up to the `if` statement above.
I think we should add the same `/all` param to the `/system` and add the same param as `/cloudBackupBackup` in `/system/system/config.yml`.
I think this should be done after the port may have been performed.
I think this should be `private static final String SELECT_COUNT = SELECT_COUNT + " FROM (%s)";`
This could use `Comparator.Error: Eliminateinate;`
This is a bit odd - why not just check that the error is in the first place and not on the second line?
This is not needed since we return the result of the result.
This will result in a single ratio, not just `0`.
Is it possible to call `ip.Mask.Size()` in the call site?
substitute needs to be renamed to `experiments.go`
Shouldn't this be `if js_elem is None`? Otherwise, the `Key_Enter` is not a selected one, right?
This is the only change I'm not aware of is it that we're going to get back a different source for a specific source, and not for the source yet.
this is wrong, we are not using the original version. Why is this needed?
use `if not None` instead of `if not None:`
what's the difference?
nitpick: can you move this to the top, so that the file doesn't need to change at all?
This check is redundant, because `isGoQuorumCompatibilityMode` is only called in the `if` statement. The check for `isGoQuorumCompatibilityMode` already handles this check.
Why do we need to delete this?
I think it is better to only check if `groups` has an Array.
can we use a constant here? I don't see it being used anywhere.
I'm curious why you deleted the code that was not doing it. I think you removed the code, but I think it's still not needed.
@deads2k i think we need to change `crd` here.
I don't think this is a right place for this. It's not the main code. I think we should just use the `ecs` package. It should be fine.
I think it's better to use a long option to set the default value in the constructor, and then pass it to the constructor.
I don't think we should be adding this to the list list. I think it's not a big deal, just wanted to check my understanding.
I don't understand why we are removing the `contribs` here?
TIL that we have the options in the error message.
I think the `email` key is already part of the email, so you could remove it entirely.
I would suggest to use a more specific name here, e.g. `RuleViolationFix`
nit: Add trailing comma to next line
Should this be `c_is_unix_path`?
Why not move it to the `api/protoc-gen-go` namespace.
I think this should disable a specific reason
We should add a type hints for `secureInterface|int|string`
I think we should use `instanceof valuesArray`
Why not use an enum here?
Use constants for these params
Is this supposed to be `listenerShutdownWaiter`? The `listenerShutdownWaiter` is not used anywhere else.
I think it would be better to keep private to avoid code duplication
We should test for the specific exception.
The click of clicking here is probably not necessary. It is not a clickable, but it's a clickable, and it should be a clickable.
I'm not sure how this works, but `target_name` is used in the `target_name` method and `target_name` is used in the `target_name` method, and I'm not sure how the `target_name` could be used here. I don't think we should add this.
I don't see this used anywhere.
Why not remove the `without` part?
I would rename this to `pipeline_definition_definition_sensor`
should we add this to the docstring too?
I'm not sure this is a good idea. I'm not sure if this will work for any other tests.
Do we want to have a default value for the `false`?
Is this change related to the current API? If so, should we just remove this?
It seems that the function is used in the `client` package. Should we rename it to something more meaningful?
Why was this not needed?
Why did you remove this? It's not used anywhere.
why do you need this?
Is there any chance that network policy is always available? If so, should we add a `AntreaPolicy` flag to network policy?
I would use a more descriptive name for this. Also, should we use a more descriptive name? `AppHandler` is not a good name, `gecontroller` or something like that.
I don't think this is necessary since `pendingRequest.configuration.remoteHost` is always initialized.
Should we add the validation to the `Searcher.getDocSet()`?
I think you can also use `iotex-core/...`
Nit: `param_name = strstr(cmd, SET_PARAM_CMD_LEN);`
This is a change in behavior, right? If it's just a regular expression, then it should be safe to make it explicit.
Should we revert this change too?
Why is this needed?
I think we can remove this line
@jridgewell I would say `definition` here, because `spack info` is the actual `uri` in that data. The `KafkaafkaStreamer` is not a `KafkaStreamer` but `KafkaStreamer` is the `@:ukey boxplot` in the `definition`
Why are we passing the version instead of the newest version?
These includes are not needed anymore.
This change should be in a separate PR.
This is not a good way to get the `code` field.
Why do we change salesforce to salesforce.com ?
This is the only place I'm asking about is that I'm not sure what the right thing to do is here.
This should probably be `@abc.abstractmethod`
Can you change this const to `const`?
I think we should remove getDataErrorComponent and just use getDataErrorComponent.
Since we are not using `dataset`, I think we should add a docstring to this docstring and say that it's a `obj:` object.
I think this needs to be moved up so that it doesn't get called for each user account.
This should not be done in this PR.
I think it would be clear if the `arguments` has the `iterable` parameter.
This is wrong. This is the only test that will have the "server" url.
`window.__mochaResult__` is set to true in the end of the function
@jridgewell Is there any way to check the `rwa_number` is not in the format string? I would think we could make it a constant.
Can you please create a default value for the `table.name()`. It will be hard to read.
Maybe we should use a more specific name here, `user_id_enabled`?
I think we can just return `balance.Add(float64)`.
why is this change necessary?
This should be handled in the if check below.
This is a bit odd. What is the reason for not using a boolean?
Should this also be moved to `cfg.IP`?
I would prefer to see the test fail, but it would be more readable to check for `type=int`, and check for type.
This is a bit odd - why are we passing the `columnMode` to `icebergCol`?
I'm not sure this will work. The alarm_actions is not defined at the end of this function. I would rather keep it here as it is.
Please add a `plugin:ConversationConversation` arg to the top to make it more obvious what the `plugins` command is doing.
I think the `= nullptr` should be left here as well.
I think you should remove the library.
I think this can be removed now since we have `d[:subscription]` below.
This is not necessary, since it is in the constructor.
I think this is the only place where we need to expose a new API.
Nit: please avoid using `REGEXP` everywhere in this file.
why are we changing this?
Why was this line removed?
Is it safe to change the `lock` to `json:"-"`?
I would prefer to use a different name than `TEST_ARN`.
This is not needed.
It would be good to add a helper method for this, e.g. `pkg/prestosql/core/store_client.go` and `pkg.GetEnvironmentResponse` to be consistent with the other services.
Which unit tests should use DialogResult.OK?
I think this should be on a separate pull request, not on master.
@scheibelp I think this is the actual fix.
who uses key?
Is it worth having a dir.Fsync(ctx, err) in the first place?
I don't know if this line has changed in the PR, but I'm not sure if it's possible to make a change in behavior. The DR_HOST_NOT_TARGET should be the default for DR_HOST_NOT_TARGET, but it's not the case anymore.
Just to make sure I'm not mistaken, this is the correct version for v1/bzz.
I think the `error.details` is still not an `Error`. We could also remove `error.details` from the message, and just use that here.
If we're going to have access to the user, why not just access the default?
Shouldn't the name be `ast.File`?
I think it's better to use `A` rather than `A`. The `A` has a default value and `A` is not the same as `A`. The `A` has the same meaning as `A`.
Is there a reason why we don't just use `?`?
I don't understand this, `getBitMask()` is a good idea.
I think we should be able to get the number of rows in the test. @kennknowles do you have an example of how to get this?
It seems like this is a breaking change, since `NewKeeper` returns the `Keeper` object.
I think this is unused import
why is it ok to have this in the hash?
This is a good idea, but it seems like the `layoutCallback` is only needed when the `Service()` method is called.
I think we need to add functions in `LogToPythonStderr`, too.
I think we can remove this line, as we are already setting `disableTelemetry(true)` on line 718.
I think you should be able to use a `IEnumerable` here
I think it would be good if we didn't have to log the concretization log here. (I think that's a good idea)
I'm wondering why this is needed?
I think this is not correct. The message is "Enabling calltarget state by ref"
Use `continue` instead of `if`
I don't think you need to add this to the PBFParser class.
This change is not necessary. The key is already closed by the key in the original code, which is why we need to do that.
I would recommend using a different name, e.g. `getPubDate`
Is this used?
Should we just use `oldVNode._component` here, since we are only checking the returned `updated`?
Why not use a `use` statement here?
Maby it makes sense to have this as a list of supported values? i.e. `with pytest.raises(...)`, i.e. `with pytest.raises(...).orElse(impl)`
Can you also update the `new.io` extension to use the new version of the package? (and also update the version of the `new.io` to check the new version too.)
Nit: remove empty line
This is a bit weird - I think it would be better to use `Load` instead of `DeviceAcquirer`.
I'm not sure about this - if the task is nil, the task should not be modified, but the message is nil, so the message is actually modified. I think it should be nil.
I'm not sure what this file was doing, but I wonder if it's better to just remove it from the base solver. Then we could just delete `Word dependencies` altogether and use `__init__.py` from the base solver and just use the `lodash` interface.
@rsimha This is the only place where we use the `enode://` suffix, so I changed it.
The error message is lost.
Why remove these lines?
This is the only change that is needed. The rest of the provider provider should be updated to use `ddev.Config.error` instead.
This is a nice nice style change, but I think this import can be removed.
This is not the only usage of this function. Can you remove it from here?
is it possible that `Number.MIN_SAFE_INTEGER` can be an array of `const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -(2 ** 53) - 1;` ?
This seems a bit strange, why do you need to set a private method in the constructor?
I'm curious, why do we need to change line 152 to `wlr_xdg_surface_configure`?
`skip_process_hash` is not used anywhere, so it can be removed.
I think we need to remove the `svcDescriber`
This is not needed.
Is there an issue tracking this?
Why is the `GetTest` call removed here?
Should we also check for `TEST(PREFIX_REG_YMM)`?
I don't think this is a good idea, but it's a good candidate for a different error to be raised. It's probably worth a debug message.
Why do we need to change this line? If we don't do this, we should just change `.forceUpdateCollection(collectionName)` below.
I think this should be `if host[:platform] =~ /cisco_nexus/ && host[:user] != 'root'`?
I think this should be `global.googlesitekit.setup.authenticated = response.authenticated;`
I don't think this should be here. This will allow the `pingWaitTime` to be set.
We should probably be using `[ok] = _decdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecdecIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIfIf
I'm not sure this is the right fix. The `Copyright` should be removed.
nit: `maxRetryTimes` -> `maxRetryTimes`
Why do we have an signedUserName?
We should add a log message here
I think this should be removed. It should not affectMutual anymore.
I think you can skip the generate than your refactoring
I think you can get `// PutHash(k interface{}, v interface{})` directly in the PutHash function
This is not a good idea. It's better to use a single boolean for this.
shouldn't we still keep the identity manager?
I think we should add this to `__init__` and `__init__` to the `binary_location` API, and then use the `binary_location` field in `__init__` to make it more clear.
I don't think PluginInfo should be passed here, since there is no guarantee that it is not passed as a result.
I don't think this is necessary. `QMetaType` will already convert the `QVariant.Type.value` to `QMetaType.Type.value` in the `QVariant`. The `QMetaType.Type.value` will be a valid value. I would rather we keep the `Type.convert` here.
Can we also mention that we don't have done that we'll end up in the `passing` context?
Line is too long. [93/80]
I think we should use `string.Format(Resources.ImportTransitionListColumnSelectDlg_DisplayData_Column_) + (i+1).ToString();`
Is it safe to do a `len()` here? I don't see it in the PR.
AddPeersErr -> addPeerErr, and addPeerErr to the top
This is not the same as the `getLanguage` method. It should be `getLanguage`, and the method should be `ImmutableMap` (or `ImmutableMap`).
Here we could remove the `for` loop and just do `for` and remove the `allInputLevel`
Why not just use `LargeApproved`?
Why is this default False?
Why are these changes in this file?
This is a very weird place to put this. It seems like a good candidate for a helper function.
I think this should be `fileName` and not `fileName`.
I would call it "priv_distributeRawTransaction" to match the other "corrupted" naming
I don't think we need this for this change. If the mem binding for any bound objects are removed, we can just remove the mem binding for any bound objects.
I'm not sure if the `[...]s` is necessary here, but it looks like we're using a single `\` for that. I'd like to see that we have the `[...]s` as well, and if it's not then we should remove the `[...]s` as well.
why update this?
I don't think you need this change.
`User-Agent` is a `common.Map`, which should be used here.
Shouldn't this be `1.05` ?
@bparees this is the change I made to this one.
so we can keep this, but I think we don't want to have this in the `tab_count`?
I think you can get rid of this line
I think this is not a right change since params params are always params.
I think it's better to just set the claim to the target name rather than the target name.
I think this should be `#if`
I'm wondering if we can just make this configurable?
This test is not needed anymore, right?
This import should go above the group below.
Remove extra line break.
you should not need the `else`
If this is the ` ::WinRM::Connection` then we should just make the param name `include_timeout` and `include_timeout` as well. I don't see why we need to do that.
`request in self.get_requests()` can be extracted to a variable.
This change is not related to the fix, right? It does look like it is just a bug, right?
Extra empty line detected at body beginning.
I don <msg> I don't think this should be onPreExecute. It's a bit of overkill. I think it's better to just use `onPreExecute()` and use `onState()`, and then use a `IMap()` to get the list of `Void`, and use it here.
I'm not sure this will work properly for the email, but I'm not sure if the `RESTRICT_ACCESS` email is a good way to avoid this problem.
This looks wrong, I think it's better to do it in the constructor. It's not a big deal if you don't want to have it in the `onFocus` function.
Do we want a check for GetConnTrack already that has the check for config?
I'm not a big fan of this name, and I think we should just have `Transaction` in the `SessionId` package.
This will be a breaking change, as it's a breaking change.
I think this should be `package.json`
Shouldn't the default be `False`?
I think this is the only place that gets called from `TestCase` is called. I'm not sure if this will work for any kind of object, but it is not possible to have an `u'` in the list.
Why set_mode() here? I think it should be called Caffe::GPU.
nit: maybe `computed` as a global var so it can just use `t`?
I think this needs a test.
I would prefer to see a test case for this, but I would prefer to use the same `numpy_key` as in the test cases.
I would like to see a test that checks for the new package name. (Also for the target name, I think, it would be more consistent with other packages, e.g., `github.com/openebs/maya/cmd/...`).
I think it's better to throw `get_bad_alloc()` in this function.
I don't know if we should keep it for now, but I think the original code was correct for a while.
why is this needed? This file is distributed for details.
This is a bit weird, as we're not using `number` as part of the retries.
NoControlCharacters was required because the constructor was made internal and it was not made public
Is this used?
We need to build the `targetArch` and `buildBinaryFor`. The same goes for the `targetArch` and `targetArch`.
InMemoryExporter is used in the constructor. Why is it necessary to add this parameter?
I don't think this is the right fix, since it's indeed the case?
@mjkkirschner @jsoriano Is this change intentional?
Same as above, why not use ` getInstanceId() => getInstanceId()`?
I think you can remove this
This is wrong, trimming rows in the TrimRows plugin is a duplicate (not a deal break).
I think it would be better to do this as a `strcmp(node->data.scalar, "default")` and then do the `return node->data.scalar;` at the beginning of the function. That way the code that is more readable than before.
Is this used anywhere?
We should add a warning message here, since `throws=False` means that this is only for SplFileObject.
Why this change?
Should this be a `try`?
We should probably make this a constant. We should at least have a constant in the code.
I don't think you need to do that. The XL behavior is to always have the first two-forth and only if one one is found.
there is a stray "protoregistry" in this context
What is the purpose of this class?
I think this file is a bit confusing if you are doing a `sizeof` check, but I don't see any `.format` file on it.
Why is this change required?
I think you should be able to remove the `startsWith` here. The reason is that the string is still a valid string, but not a `String`.
Why are we making this change?
Are these all present?
Is it not possible for this TODO to happen after this change?
I think this is not necessary, we can return `updatedProjectConfig` if `err != errChangeSetEmpty`
Please remove the `//` on the next line.
As discussed, the original `json:"cmd"` is a `Spec` and `Spec` are the same. This is the only place that needs this.
there are some small numbers here.
This is not correct, if you use a different value than a different value, it will be used.
Shouldn't this be `writeWriter(writer, wtype)`
Is it expected? I don't see it used anywhere.
This is the only usage of this function. Can we remove it?
This seems like it should be `if exp.Target.StressChaos.ContainerName != nil {`.
why did you change this?
`- cstor-volume-create-getpvc-default` is now unused, can remove it.
This looks wrong to me, but the eventfd is a bit confusing to me.
s/transformer/transformer
This is not the right way to do this. If `startActivity()` is called, the `if (!Select)`, the value is not null. So the `if` here should be removed.
Should this be `checkFile`?
I'm not sure this is a good idea. It seems like we should be using `this.isNotEmpty()` instead.
I think this should be a PLL3_SW_1
Is this a typo?
You should use `DateTimeFormat` here.
I think it's not necessary to send the `VolumeProvision` object, and then we don't need to send the `VolumeProvision` object. We don't have any `Name` object to send any events.
Please don't change the signature, this is a change in behavior.
I think this is the only change that will break the build. You should probably add it to the `src/main/java/org/apache/nifi/transforms/internal/commands/v1_test.go` file.
Why was this changed?
This is a bit scary, since this will always return null, as it will return a `null` value.
endsWith can be null, I think.
I think we need more details about the purpose of this property, e.g. `Zipkin Exporter.<summary>` and `Zipkin Exporter.<summary>`
It's not a big deal but we should create thePipedKey. It seems to be the same as createPipedKey, but we should create aPipedKey. It should be possible to create thePipedKey, but I think it is better to have the workKey, and then create thePipedKey.
I'm not sure if we should have this as a constant. I think it would make sense to have it as a constant in the code, but it would be nice to have it as a constant in the code.
This is a change in behavior. We should use the `refToDecorPiece` to get the `controller` argument.
This is a bit odd. I'd rather see it as a separate JIRA, and have it be moved inside the `dataset` package.
I think you can delete this line now that you've already added the new `cliquet` below
This should not be necessary if you remove the FIPS_2 functions.
Apparently this field is not in AppliedTo/To/From fields but in AppliedTo/From fields. I think we need to introduce a new field in the field for this field.
This should also return a `dict` so it doesn't have to be wrapped in `oconnor::getByNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNickNick
Can we use `form::createForm` instead of `$this->payment_detail`?
@matt-gardner The `acc` prefix is a bit odd to me. I think it would be better to use `FINE` instead. Also, I would suggest to use the `ServiceParams` from both the `ServiceParams` and `acc` to the `ServiceParams` value.
Can this be moved into the base class?
Can we also keep `conf/htpasswd`?
I think this should say `cancel method has cancels`
Can we avoid this kind of utils and just use `BadBad` to avoid accessing the array?
I think this is not right, as `precompressed` is not a boolean, so this is not really a boolean.
Nit: I'd prefer to have this as an enum. It's not a big deal if you prefer it this way.
Why do we want to support it here?
I don't think this method is necessary. @Deprecated does the right thing here.
This is not needed. The `io.h` includes includes the cpp
is this a bug?
why the 50/1024 are needed here and not in the other PR. can we keep them in the same PR?
We should probably keep the masterPivotFacet class to avoid any confusion.
I think you can remove this now.
I think mocking out the `mock` here is a little bit confusing, since you're using `mock` for the `spec` variable.
If you want to keep it, you should also add a warning message for the case where no date is set.
Can we make this a separate func for now?
`float` is a better name for this value. `double` will be better than `double` for clarity.
I think the indent is not correct here.
I think it should be `route_step.values["name"] = std::move(step.name);`
I think we should just not send the event once it is not end.
This is not a approver list, but a approver has a different name (e.g. "is not approve"), and "is not approve" can be removed.
I don't understand the point of this change. Can you explain?
Why is this a literal string?
I think `executiongenproto` and `executiongenproto` are not needed.
I think you can just use `results.qsubs = append(results.qsubs,copyqr)` here.
I don't see this change.
What is the point of this `else` branch?
This is the only change that affects the code of `if`. I think it would be better to use `if (` (` (` (`authorView.isText(podcast.feedUrl) || []`).
Can you use the existing `30poolStatus` constant?
why do you need to set `v4IPNet` here? seems like the wrong value for this condition is to always set `v4IPNet = ipNet.IP.v4IPNet == nil`
I think it's better to pass in the detail_error for the detail_dict, so it's easier to read and understand what's the point.
`char*` is not needed.
why remove this? Is it because `interpreter_datesCgpSupportSignOnly` is already called on the Settings.versions?
It's not clear to me why we should return here, but I'm pretty sure it's the case. It's not the case that we should be setting the option to `true` or whatever.
This is a bit of a change in behavior, but I don't see a reason to do it.
I don't think this class exists
why not use a `if s.sys != nil` here instead of the `if`.
This variable should be a member variable.
I would rename the variable to something more meaningful, e.g. `token enclave public key`
I think we should rename the config to something more meaningful. Also, I think we'll have a good idea to change it for a future PR.
This should raise an error if `raise` is a `NullPointerException`.
`GrpcHandler.Request` is a better name.
Can you also mention the behavior here.
> if (type == 'ADIOS_HAVE_RE DockerImage) // - FYI, it is a bug in the #ifdef.
This will not work if the user passes a connection and the user passes a connection. I think it's better to do the stack_name and the user has a different meaning.
this is the actual fix, right?
I don't think this needs to be here. The store password is already empty and is already empty.
Can this have a `public static` or a `public static` so it doesn't have to be wrapped in an `public`?
I think you can delete this line now.
@deads2k do you want to add this to the test? I think it's not necessary to test all the tests.
I think this is not the right fix.
The ParseHeaders wrapper is not needed.
I think we can just use the `iceberg.metadata.retries` constant here?
This seems like it would be better to have an `else` clause of the `if` block to make it more explicit that the value is `nil`?
I'm not sure this is the right fix.
I think we need to keep this, we can just have a `data-` attribute on it.
The caller should log the stack trace, not the stack trace. It will be easy to get back to the logs.
We should add `Authentification` to the `Challenge` section. This will make it easier for the future to change the value.
I'm not sure if this is the right place. The output is used in this module, so I think it should be used in a more complex way. I would suggest to remove the `print-unifiedified` function.
Is it really needed ?
I don't think `felix/ipsets` is the correct name. It's a little confusing. What is it used for?
Missing `@param` and `@return`.
Please rename this to `page_size` and `page_size_results` to make it more clear what's going on.
I don't think we need this. It is already in the `test_mode` namespace, so I think we can just remove this.
I think this should be moved to `exit_VERSION` instead, since we're using the `cobuild` module in `exit_VERSION`
This is the wrong way to test. The `CRiOS` is set to true if `warning` is `false`, but `warning` is not set.
Nit: this can be `public`
I would say `if original_exception.dump_puppet_log(host)` but I think that would make it more clear that it is the result of the query
I think we can just do `newVNode.props.multiple || newVNode.multiple`
I don't think this is right. The only time I see this is the only place this code is used is where I think `title` is the only place this is used. I think the only time I see is the only place where we need to check for `title` is `false`. The reason I'm asking is that `title` is not the right thing to do here is to check for `title` is to check for both `title` and `end` is the only time I've sent a `title`.
There are some weird edge cases where this Drop is used. I think we should be using the same naming for both.
This should be `m.GetPaths()` instead. It is a bit confusing that we have a `GetPaths()` method that does something different in `GetPaths()` in `GetPaths()` and `GetPaths()` in `os.path.join`.
I think we should move this to the `HidepidDisabled` field.
@mfojtik this is the fix for #5021.
go is not used?
Please use `this.prevFolderId_` instead
Is there some way to avoid this?
Why are we not using `lbann_comm` here anymore?
why not just initialize the m as the last parameter?
Should be `@since`
I think this is a good idea, but I'm not sure how to achieve this. I would rather see the other `toUpperCamel()` method in the `capitalize()` method.
This is not used anywhere.
Does this need to be removed?
Shouldn't this be `learnedColumns(self.learningMode)`. Same below. Also, the above conditional should be moved into the `if` statement.
I would use <msg> i.e. `in.GetStatus().Experiment`
This is not right. We have two `lock`s, but one `lockal` and one `LockLock` that we already have, but the `LockLock` and one `LockLock` and `LockLock` that we use in `LockLock` and the `LockLock` is already closed. I'm not sure what the best approach would be.
Why is this not needed?
This function will return an error if the caller doesn't return an error.
I don't think this error is actually useful. It should be removed.
This is an API break, and should not be added to the public API.
I don't think the `Copyright` can be removed here, since it is not used in the `#ifdef _Copyright_ of the second arg, so this is fine.
This is a change that I'm not sure about. The `client` option is to be in the `--client` option, but it is not used anywhere in the code, so I'd rather not do it here.
Can we keep this here and add an empty line above?
Minor nitpick, but since we are here, should this be `err != nil`?
This isn't the right error, but it should be `NODE-3405`
Please remove the `_` here since we are already using it in the `modules` class
why not `computed` and `computed`?
Why return the job_id instead?
I think we can also use `find_id` here. It's a bit odd to have `id` as a `find_id` here.
This can be removed
Could this be moved to a separate `_stream_data` function?
Can we rename this to ContainerMap?
I think this is the fix.
This is not necessary, right?
I think this should be `Interop.Trace.Trace.MySqlCommand`
I'm not sure if this is the best place for this, since this package is used for the package and the `cert-manager` package.
I don't think this will work. It's a little odd that `RubyVersion` is not a `Theme_AntennaPod_TrueBlack` which will return `false` if `theme` is true. The only reason to have a `Theme_AntennaPod_TrueBlack` is because the `Theme_AntennaPod_TrueBlack` is false.
this is weird, why not use the candidateMsgs?
I don't think this is correct. It should be the same as `max_tuning_last`
Why are we removing these `work`s?
Line is too long. [81/80]
This should be a boolean
Can you explain why this change is needed?
This looks like it should be a separate commit, but it seems to me that the one we're trying to do here is a bit of a hacky refactor.
This file is not used anywhere
This should be `if (view_get_activated(view)) {`
I don't think we need this method. The `cancel` function can be called from `load()` on the `cancel`.
Can we move this test to the top of the file? We could move this test to a file with a `should be as expected` file.
This is a breaking change, I don't think we want this to be in the new class.
It looks like this is only used for testing, and not just for debugging?
This should be a single line string, not an array.
I think this should be `Field`
I'm not sure why the function signature does anything. It's a function, not a function.
This should be removed as well.
why are we calling it in flush?
I think we need to bump this up to avoid duplicating the imports.
Why not just return the error?
It would be good if this would be called more than once (for example: `if self.on_collection and self.force_empty_list`)
Instead of calling `WithInstalledTimestamp`, can we just call `WithInstalledTimestamp`? It's a little confusing that we have a `Configuration` for the `Configuration` and `ConfigurationedClusterPoolReference` that we have in `S3.1`
If the fragment is not visible, the message will be printed like "If there are any invalid fields, it should be visible, not the fragmento. Also, I think the message is misleading. I think it is better to check for the fragmento, as it is an invalid field and not the route.
This change will break all the other users who have a listens. You can use `.listens.user_name` directly.
Line is too long. [82/80]
As this is a public interface, we should probably make it public.
This is a bit of an unrelated change, but I think it's worth adding an assert here that the custom template is indicated.
`sububscribe` isn't a good name for this, it's a `legacy_tuning` - it's a `collect_tuning` - it's a `Name` - it's the same as `legacy_tuning` (as it's used in the `legacy_tuning`). I think it's more consistent.
I think we need a better way to do this. If we want to add a newLink, we can add it to `s.addLink` and then we can add it to `s.addLink`
Why not do this in `http.flushInterval` ?
I'm not sure if this is the right place to put this, since it seems to me that we should be returning the partition from the original state. In this case, we should just return a `@return` and let the `task` return a `@return` if it is the case, and then just return the whole `task` if we don't want to.
Why is this a `RepoDoesntExistError`?
I would say this is something that we should do with the other header, not just the default.
I would suggest using `Config::get('app.debug', true) ?: $isDebugMode;`.
This test is no longer necessary
I think we should remove this line.
Is there a reason to remove the nil check?
Redundant `)` detected.
is it possible to just call `ReadElementContentAsString`? if not, we could just remove this variable.
We need to keep the old `request.getTitle()` method to avoid re-using the class. I'm not sure if it's a good idea to keep the old method. But I'm fine with it.
I think this is a leftover from debugging debugging?
why not `i.interceptor = interceptor`
This should be a single line string.
Can we rename this to `_conv` to be consistent with `UpdateGauge`?
I'm not sure this change makes any sense. When I add `contains(tree.put(tree)` it will be called with a `contains(tree)` that is not a `Set`. If I add an `contains(tree)` return value, it will return a `Set` if it is not a `contains`.
I'm not sure if this is a good idea, but it seems like it could be a good idea to have a type for the `no-member`?
This is the new line of code. It should be `new(heap) char[len1+1],`
I don't think this is right.. I think the `is_distributed` check here should be redundant with the `user_from` value above.
I don't know why this is the right way. If we do this, we should probably just use `for (int i = 0; i <= allergens.size() - 1; i < allergens.size() - 1; i` to be consistent with the other cases.
I think this should be `(j, v.values())`.
This change seems unrelated to the current change?
"Default" should be "Default"
I think we can remove this and use `TLS` in `pkg/config.go`
This is a bug fix. `datetime_types` will always be true when the user specifies a `cftime._cftime.DatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetimeDatetime_lepticGregorian`
Does this need to be in a different PR?
This message needs updating.
We don't need to pass `cancellation` here anymore.
I'm not sure why you need this change. I don't think we should be using the `_socket` member anymore, since it's a `_socket` property.
Why are you changing the type of the parameters?
Is this a typo? Should we be changing it to a counter?
This is not a good example of how we do imports imports, and I think we should do it in a separate PR.
This should be `@private`.
I think it would be better if we could do `show_legend = param.get(default=0., doc='color'` and then do it in the plot. If it's not too long, we could make it a bit simpler.
I think you meant `if (length.trim()) {`
Could you please add a license header?
This is not needed.
Why do we have to specify a number?
@Scottmitch do we have a ticket to make this change? It looks like we're using this for other services, and not just the default, right?
I'm not sure this is the right way to go, since it's agnostic of the current `Activitive documents`, and the `ProcessContext` is not the best place for this.
This is not correct. We're not running master in master yet. We should probably fix the master.
This is the only thing I don't like about the `go-filecoin/types`. I think we should move the `proofs` import up to the beginning of the `filecoin/types`. The reason I'm not convinced about is that we can remove the `filecoin` import from `go-filecoin` package from the other tests, and have the package `go-filecoin/types.go` file, and we can remove the `filecoin` import from the other files.
I think this is a bit confusing to follow the naming conventions. `MessageId` does seem like a very common pattern.
I'm not sure we need this. If we do, let's not add the webID parameter for the propertyID.
Why not use `compare.models.js` here?
I think this should be `if (varHolder == nullptr) {`
I'm not sure this is needed since the `unsubscribe_token_verifier` action is already being used.
Why `lt;'` ?
@matt-gardner How does this work for some reason?
can we get rid of this file and the associated schema schema?
nit: `TenentMaxLength` is a better name for this parameter. It should be `TenentMaxLength`
why are these `internal`s removed?
This function is called in a few places, so I would call it something like `return o.chooser(Start)`
The name of this function has a little bit of logic, and if it's not level, then it should be a function of wlr_drm_connector or wlr_drm_connector_size?
I'm surprised this didn't fail. I don't see the need to call `nonce <= nonce`
I don't think we can generate the default values. I think we should just have `ShareExtension` as the default behavior.
Is this used anywhere?
I think we can drop the PublicHeader variable and just use the PublicHeader variable.
I don't think you need to add the `Character` parameter here.
I would prefer to have a `isNotImplemented()` method for the `default boolean isRegularInterface() { return false; }`
I think this is still needed because `my_fields` already has a default value
this is not needed anymore
I think we need to make this a `MutableStateStats`
Is this necessary? I think it would be good to make the `worker_keystore` configurable, but that would be the reason for this to happen in the future.
`raw` is not a correct term here.
This is a bit weird, you are adding the view to the end. Is there a reason you don't want to put the logic in the view?
All of these should be constants, not constants.
Why not just use the same one for all other modules?
break is not needed.
You can use `current_user.admin?` to get the `You must first log in or sign up before accessing this page.`.
Why not just make this a constructor argument with a default?
I think the `functional/mongo_client_tests` should be removed after the tests are removed.
I'm wondering why we need `goog` here and not `google_site_kit`?
Should we be checking for the host if the link is not absolute?
Why is this import needed here?
error strings aren't used anymore, please remove them
I don't know if there is a way to do this without introducing a new addr.
just curious, what is the difference between `forEach` and `pos_weight`?
I would have used `with...` for this test, not sure if it's necessary.
I'm not sure this is the right change. It is not related to your change, but I think it's better to be explicit.
This method is only used for tests, so we can remove the method.
What is this? Is it just `bluebird`?
Can be final.
This is a bit of a weird place to put the target_link list of the target_link.
Can we just call this one `stop()`? This is a bit confusing, since we are already actually testing the user's profile.
Trailing whitespace detected.
Should we also support `Public.GetAttribute("")`?
Thanks for the fix, can we revert this change? I don't think we need it for this PR, so I'm not 100% sure it's necessary.
`ReadToEnd` is always `true` so we shouldn't be able to remove this `var` as it is now an alias for `ReadToEnd`
I think we should remove the "if not" here as it is the same as `and ...`
I think it's better to keep the old signature and add a copy.
Is this field visible? If so, should we have it in the `api.go` file so we can have it here?
This is a bit of a weird thing. Why do we need to use the test name `testing-common`? `stage/common` could be more appropriate. `stage/common` would probably make more sense. Also, I would suggest to use a `common.WaitGroup` instead of `common.WaitGroup`.
I think this is not used anymore, right?
remove empty line
Can you use `DbDb.from_function`?
I don't know if this is the best way to do this. Maybe something like `on_external_hash`?
You can remove the `.tox(name)` too.
I don't think this change is needed, because in the `setup.pygment()` we do this already, so this can be removed.
This is a bit confusing, as this is a very small number of places.
This was the only place where we were using this. This is the only place where we need it. I think we should just remove this.
Redundant `self` detected.
`retry` is not the default, so you should check the result.
Why did you change this from `VERSION` to `VERSION`?
This is a breaking change. We are already using the old nameKey in a serviceKey, and the new version in the serviceKey.
you can also check if the lock is not enabled
I think this is not correct: `Blockly.blockly[...]] = true;`
This is the only place where the `validation.Wait()` method is used.
I'm not sure we should add this to `__init__` as well, since we don't want to add this in the future.
This is really hard to understand. What is the logic behind this? Does the keys of the keys of the keys in the config file also work?
i think we should use `os.Exit` here
I don't think we should change these, as they are not used anywhere.
Is this supposed to be a volume type?
`@throws IllegalArgumentException("metric variable or Path(metric) throws null)`
nit: you can remove this line.
I think we should use the `Activity` field instead of the `id` here.
Line is too long. [87/80]
I'm not sure this should cause issues. If I understand correctly, it should be the default (i.e. if a node does not have a episode, but the node does not contain the episode) it should be a different type (e.g. the default)
can you move this import to the top?
I'm not sure if this will work. I would rather do `options['args'] = profile.as_json`
This is a good place to put this in the `scipy.py` file. I'm not sure if this will be needed.
I'm not really sure if this should be configurable. It seems to me like we're using the same name twice in the same file, and if we do, we should probably add a name to the `Http2Experiment` for this.
I think this is a bug fix.
can you change all of the errors to be grouped with the other standard imports?
I don't think we should be using this.
I'm not sure this is correct. It does not work with the flag flag flag, but the flag flag doesn't exist.
I'm not a fan of this name. It's a bit of a mess, but it's a bit confusing that we have a `Block` method for this.
This test is now useless
I would use a different name for this (e.g. `getImageForDoc()`).
I think this should be a `default_to` instead of a column
I'm not sure if this is a good idea. If we do this, we should have `AC_DEFINE([HAVE_LIBSYSTEMD], 1, [Define if we have been been already implemented by the `libsystemd` attribute in the `systemdsystemgeneratordir` function. This way we don't need to have to pass `--variable=systemdsafurur` to `libsystemd`, and if we have to pass `libsystemd` to `systemdsystemgeneratordir` to `libsystemd` as a dependency on `libsystem.js
this is the only place where we call `self._classificationCompute` is used. I think we should keep the same thing here.
I think you should use `methodInitCode()`
We can remove the `startTs` here.
This is not a valid deprecation cycle, but it seems a little weird. I think it should be a separate `rect`
Line is too long. [81/80]
The parent classlikes is a parent class because it is not a parent class. It is a parent class and should be a parent class instead.
I think this should be `Ember` instead of `Broadcast`
This should probably be in a separate pull request, although it should be in separate pull request. I'm not sure if it should be in separate browsers.
Can you also add these back in `NaN`?
Why was this changed?
@adamjstewart Is this going to create a separate PR? I'm not sure if this should be done here. The `--Python` flag should be set to `false` by default, and then we should be able to make it configurable, but we should consider if it is actually required, right?
How does this work?
`Difficulty Bomb Delay`
Why is this needed here?
We can remove this if check.
I would use `file_exists()` here instead of the `file_exists` function. It is used to get file system files in the file that are used by the `get_dumper_Resources` file.
I think it would be cleaner if the settings file was not write as a file, and then the file was created.
No need to change this, as it will be a breaking change.
I don't think this is a good idea. In other words, if a Dockerfile is a Dockerfile, then the user doesn't need a Dockerfile, it doesn't really need to know about Dockerfile.
I would prefer a better name for this function, e.g. `node_classes.NodeNG`, `node_classes.parent.func` or `parent.func`
should this be `if @group_level == 0`?
Should we add an example here? I think that we don't want people to use the new `SparkWithWhitSpace` class.
I'm not sure this is the right place to put this function. I think it is better to move the `get_notebook_data` check to before the `notebook_path` check.
Do you think it's worth it to just add this to `search_builder_class`? I think it would be better for the `search_builder_class.new` check.
Should we test for this?
I think this should be added in `core/workers/__init__.py` too.
I think we should be able to get rid of `/build` since it's used in multiple places.
`this.fullResponse || this.aliasalias`?
I think it would be more consistent to import `ascii_lowercase` from there, so that the `from string import ascii_lowercase` is more accurate.
The `catch` and `catch` were not being executed here because `run_one` doesn't have `catch`, which is not the case for `run` and `catch`.
nit: spacing looks off here
Shouldn't it be `MediaLibrary::class . inside `SystemMediaLibrary.class`?
I don't think this is necessary, we should default to a `EnableAdminApi` if `enableAdminApi` is false
Is this file still used?
I'm wondering whether we should make the call to `DyingAndDoneExport` in `Time` instead of `DyingAndDoneExport` to be safe?
I think this is missing the Gradle ``git blame``
This is an API break, but I would have expected the test to be run in a different thread. I think it's a good idea to have a good time to change the default behavior.
I'm not sure if we should do this. I think we should just make this `1.0` and use it for the other 2.0.
This is not needed.
This is a test, right? Why not just call it `InstallClusterServiceFlows`?
This is a bit of a hack. I don't see how this code is being used.
This file is unused and can be removed.
We need to keep the reconcile.Reconciler method to avoid creating a new reconcile.
I think we should rename `getClientConfigImportModule` to `getClientConfigConfigImportModule` to be consistent with the other config properties.
@jridgewell This is the only change that fixes the bug. The PR is about this file.
`_agreedCapabilities` should be used here.
Can we just use `assert o.lss != nil {`? It seems like this will cause a nil pointer to fail.
can we use `html_safe` here instead of `html` everywhere?
this is the fix, right?
I think this is a little bit of a curiosity, but I'm not sure what the actionable should be here. I'd rather not do it in a separate `if` and just do the check in that method, and then do a `return` at the end.
Can this assert be an error?
I don't know if this is the right place for this, but we should be able to just make it internal.
I'm not sure if this variable should be included in this PR, but it seems like it should be used in a single place.
This is a bit confusing to read. If you're not going to update the state, why not just return the result of `state` and use `#update` here instead?
This is the only place where we should have this exception. I'm assuming we have a good reason to change the exception type here?
nit: we can use `this.inputs[i].sequence` here instead.
This is not a good name. It's not a big deal, but it's a bit confusing. It's a little confusing to have a method named `GCS uploader`. It's a little confusing for a name, it's just a name, and I think it's a bit confusing.
nit: `final` should be surrounded with `@Nullable`.
Can you please set the seed data to `/settlements/{peer}"`
why not set it to 0?
I would prefer if we use `from kinto import __version__` instead of `from kinto` as the name. It's a bit confusing to have a more general `from kinto` which does not have to be used here. Also, I'd prefer not to use `from kinto_utils import __version__` in the `__init__` module and have it be renamed to `from kinto_utils`.
why change this?
@tmds I think I've added this to the top of the file, so that I can't get this working. I don't see any use case for the new version of `properties` to work.
I don't understand why we are not using the `configParams.KubernetesProvider()` here
I think we need to remove this one, we don't want it to be a public static const.
@michaelkuhn Do you have any idea how to use `warnings.warn` here? It looks like it is a good idea to use the `verbose` version of `verbose` for warnings, but I think we should use the `verbose` version of `verbose` here. Also, I think it's fine to use `verbose` to get rid of `verbose` and `verbose` if it is a good one.
I think we need to add a method `org.apache.commons.lang3.StringUtils#getWorkflowRole(String, String roleName);` here to avoid code duplication.
This file should be moved to `src/server/button.js`.
This is the only change that affects #9747
why wouldn't `key` be null if it's a `key`? it's not null, but `key` is a `type`.
`default` and ` doc` are not needed anymore.
I'm not sure if we need to do anything about this here. If you do, we can just use `RailsBackGroundColor.getColor(context, R.color.highlight_dark);` and then set `playingBackGroundColor = ContextCompat.getColor(context, R.color.highlight_visible);` if you want.
Use `enum` instead of `eachers`.
I think we can remove this block.
This is a bit of a weird place to put this method in the `SymbolUsed` class. I would suggest adding a new method `isInSymbolUsed()` method that calls this method to `isInSymbolUsed`
Is this change necessary? I don't see the code that uses this.
We should not be using `ec2_client.ec2` here. We should use it in other places.
I'm not sure if `undefined` is the right way to go.
This is a leftover from #1581
Is this change intended to pass this as a result of the original reference?
nit: maybe `opt_port` -> `portprober`?
We need a deprecation notice if we can use the `codec:"s"` tag instead of the `.aio` namespace.
Please rename to `selectCastSinks`
nit: you can use `is_current_user` instead of `park.sql`
Why not just use `FunctionTestCase` ?
Can you add a `private` to the summary of this list? I don't think we should change it, but we can discuss how this is done.
`return functools.partial(filter_signals, signal, *args):`
Can you add a space after the comma?
This will not work for `nested_flatbuffer` field field.
Is this something that we should do in Push Descriptor? If not, we should make it a configurable flag
I think you could use a better name here.
Unnecessary spacing detected.
I think we need a `Series` method here, and in the other tests we use the `get_default_Series_index` method.
Why not just pass `Uri` to this method? `new PhysicalLocationLocationComponent`
why is this change required?
can we just use `expFeeFactor` here?
Put this in `before_action` instead.
I think we can get rid of this annotation now. It's not really a part of the project file, and we should be able to make it configurable, and we don't have any code using it.
The `new Email(['message', 'E-mail']` above should have been removed as well.
`map` should not be `null` here, as `map` is not an `Enum`.
This is not a good candidate for a ref. It's probably worth it.
I think we could have a test case for this instead of testing.
I think this could be a bit more specific like `post.expect("")` instead of a sort
Is this an unrelated bug fix?
This is a breaking change, I think it's better to make this `IImmutableList<Span>`
This is not needed. You are calling this `type` in `build.go` and `push.go` below, but you'll get a `const` to get a `type` for the type.
The other option is to use `map[string]string` (and `map[string]string`).
What if `trace.trace.path` is `pathlib.trace` ?
I don't think we need this anymore.
I'm not sure we need to do this. If `this.exporter` is null then we can just use `this.exporter.Export`
I would just use `assertIn('id', ...)` here to avoid the warning. It's not really an issue, but it's a bad idea to test the details.
I'm not sure this is correct. `ar ugugments` is a `type` property, but it is not a `list`.
Should we change this to `width: width * 2`? It's not clear why we are passing width instead of width.
This is not a good way to search this. The only reason we need to do this is that we don't have to search it in the `filter` method.
Why do we need to wait for a specific folder? Is there any reason we can't use it?
Is this change intended?
Should we do a similar change for `<<-TEXT`? I mean, `string=True` means we can't do it for other languages.
This field should be added to the `setField` method below.
The test is failing because of this line
Line is too long. [83/80]
the condition was wrong before.
Ditto on using the variable name `Platform`.
This change is not necessary because of an intermittent amount of changes to the `s.Equal(3, d.NumOfCallToPayloads)` call.
Nit: import sorting
This should be -attach
This was a mistake, @alalazo: Should we remove it then?
Will this result in a different set of exception information being returned from a different type of `StringBuilder`?
I think this is a good idea. If you want to remove the list, you can just do `resources = [];`
We can't use `info` here.
ContributorFact -> Concurrenting
I don't think we should be using this variable. Instead, we should use the variable `var cg` to determine if the type is an int or not.
Please use `throw new ParameterException(commandLine, "Problem with privacy-public-key-file: " + e);` to avoid NPE
@rhatdan @jona86 I think this was accidentally committed?
This is not right: `if not location` will be automatically populated
Can you move these include to the cpp?
I think we can remove `OptionalOrElseMethodInvocation` from `LambdaMethodReference` now. We can just remove it.
nit: can we rename this `FileData` to `FileDataData` to be consistent with `FileData`
This should be `if sys.version_info < (3, 3):`
Can you add a docstring here that this should be updated?
MakeMdID is not used anywhere.
Why not just move `Word dependencies` to the top of the file?
I'm not sure this is the right way to go.
This is not the only place that needs to be re-throwed.
I don't think this is a good TODO - it's a good place to put it in this PR.
I'm not sure if this snapshot snapshot's in prod is a good idea. It seems to only be in prod, but it seems to be in prod for some kind of snapshot commands.
Can you also add a check for `--test` to see if there is a `--test` flag in the `awslogs`?
I think we can remove this test now that we've discussed.
I don't understand the purpose of this change: we are trying to reduce the number of rows in the task, why do we need this check?
I would say "arguments-out-of-order" here, because it's a function that's used in many places.
I think this should be `SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in));`
I don't think you need to do that here. You can just do a `const std::string... = 0;` after line 129. Otherwise, the `host.size()` will return the `host.size()` object, which will not be set.
What is the rationale for this? The `skipString` function is not used for `3`, so I think this is fine.
This should be `if filename != ""`
nit: update copyright year in header
This could be simplified to `data_store::get_num_models() != 1`.
this is wrong, we can just use `@widget.send(@type)`
let's make these log statements conditional
I think it's fine, but I think this should be just "has mark denotes whether the row is deleted or not"
I think we should log this message, as it is not really a warning and should log it.
I think we need to add a "memc" parameter to the "memc" commit (I think that's the reason for this PR).
The `always` tag should be moved to `protected`
This function is only used in the `runtime.unsafe` file, but it's only used in one file, so it's not necessary to add it to `python` file.
This method was introduced in the first place. I think it's ok.
I think this is a good example of how we want to do it, maybe we should add the `control-label` class to the `control-*` page.
I'm not sure this is the right change. This should be reverted.
I think we can get rid of the `else:` branch as well
Was this a typo?
I think this should be moved to the config object
This is a change of behavior. It's just me, but it's not clear what's happening here.
I think this should be a bool.
You should be able to use `tenacity` here.
I think this should be changed to use `@private` in the constructor, since it is an array.
Please add the validation to the `ClientSecret`.
I don't understand this change, since it's only for `general` (and the property ID)... I don't think it's necessary to include it here.
Why is this removed?
can we do the same in the other PR?
I think metadata is always `nil`?
This isn't just the `email` because we're passing in a `cart_notification_email`.
We don't use wildcard imports in our code base, please revert.
This isn't the best place to put it, but it seems like we should just move the `should recalculate` to `createSpy()`
This was the only place I'm missing something.
@jsoriano Is this a bug? I'm wondering whether we should throw an exception instead of throwing a promise?
can we use block_write instead ?
The `KSQLException` section is `The`.
Should this be a constant somewhere for this class?
This should use the FULFILLABLE_FEATURES constant.
Why this change? It's not necessary to test pytest, but it should be a dependency on the `conda/utils/pytest.py`.
Could we use `name` here and `instanceof` in the `instanceof`?
I think we can just remove this field and use the default in `pkg/config/ROOT.go`?
I think this should be moved to the `try` block. It's not really needed because `await Task.Yield()` is called when a task is created, but it's not a problem.
I would suggest to create a method that returns the `null` value and then do a `KafkaConsumer` in `createFieldNameConfigs` to avoid this kind of exception.
The space is not needed, the `auto space` will be set to null.
I'm not sure about this.
This is the only place where we use the `getAREventSubjNew` function. It's not a problem, since we're doing the same thing in the other place here.
@matt-gardner Is this a bug? Or did it just get rid of it?
I don't think this should be `@var \ util`. It should be `[gateway\FrameworkBundle\Component\Router]:`
I think this condition is not needed, `is_merge_or_booted` should already be true. Also, I think this is a bugfix.
why is this changed?
I think the order of these constants is now redundant
if we skip the rawONONON, this should be an `if agent_is_crawler?`
I don't think this is right. We need to raise the error if the directory is not found.
This file is covered by the GNU General Public License.
should be `* 2 / 3`
remove the unused imports
I don't think you need to do this. It is not a part of this PR.
This class is not used anywhere.
why the double underscore?
Line is too long. [83/80]
Why do we need to make a separate pull request?
I don't think this is the right place for it
this is a little hard to follow, why do we need to make it true?
I don't think you need to remove the `blockSignerAddress` here. It's not used in the PR, but it's a blocker.
Should this be `4.3`?
`tm_py` is not used in the public API, so I removed it from here and deleted deleted.
I'm wondering if this is the best way to do it.
This is a breaking change, please don't use it in the new tables.
This should be protected.
We can't use `mongodb-extjson` in the local dev folder, as this is a local dev folder.
@matt-gardner How about changing this to `False`? The doc will be more explicit.
Why not use `rseq_is_registered_for_current_thread(void)` here?
Why did this change?
can we change the names to be consistent and the specs?
I'm not sure if this should be changed to make it configurable
I think this should be `wait_for_event()`
what does "lambda name" mean?
Why is it named as "Version" ?
I think this should be `return &workflowservice.PollWorkflowTaskQueueResponse{}, nil`
Should this also be `client_options[:read]`?
I think `preferredMimeType` should be removed.
Layout `const`: no need to change its name. It is a bit confusing.
Why did this get moved to `edvc`?
this seems like it could be a constant
you can just use `blk.ascript`
You should be able to remove this line
We should add a new type to the `*ACMEIssuer` struct.
Is Interop\ContainerInterface still used?
Why did you change the `_docroot` to `_docroot` here?
This is not public API.
Do we need a new node node?
Should this return an optional (and the corresponding one below) instead of an explicit `@Deprecated` ?
Should we be using the same API here?
Intentional blank line.
Shouldn't we just return a struct?
I would use a simple example here. The default is `true` if you want to set it.
This is a little strange. Why would you need to pass the `icons` into the `ProcessInterface` and not have to pass it into the `ProcessInterface`?
We could add a docstring for this function.
Should we have this in a separate file for all of our tests, or is there a reason to make this a method?
Why is this necessary? GetMethod doesn't need string matching
Are you sure this was a bug?
This is a little hard to read, but I think it would be good to check for the case that _my_ is set to true.
This is not necessary, since the hasattr is not a valid value.
`except ValueError` or `except Exception`? If it's necessary, it would be better to do it with `try...except:`
Align the parameters of a method call if they span more than one line.<br>Redundant curly braces around a hash parameter.<br>Tab detected.
Shouldn't this be a `type` package, not a `private`? I think it's the convention we're using `package` for internal backend.
I think you can delete the type here
I think this is a bit of an unnecessary variable, since `_glass_sdf` is not used anywhere else.
Should this be set in the `hostConfig`? Or is this something we want to be able to do with the `hostConfig.NetworkMode` value?
Why do you need `type(module_class)` here?
This should be removed
this is not a valid integer, is it intentional?
I think we can get this from the `deprecated_view` instead of keeping it in every controller, but we can't do that in the future.
Nit: please avoid extra empty line
This test is not really testing what we need to do. It is also not a field. It is a test that doesn't have the correct field.
I removed this because it was already fixed in #5769
I think we can remove the `:paste-primary` option here since we are now passing the `market` value to the `market` view.
Please remove this.
Why is it ok to keep the "is not allowed" of the "is not allowed" type?
maybe we should add an explicit check to PlayerHandleHandle here ?
This line is the last line of code that needs to be added to line 207.
Standards: Please add a space after commas.
The `$pluginCode` variable should be removed from the protocol scope.
Since we're not using `SpecNodes` any more, should this be `api.SpecNodes`?
I think we can safely safely safely safely remove `.new_record?`.
I think we need to do this for 1.0 as well, otherwise we will have a `using` statement in 1.0
@jmhooper @jmhooper @mattpap Ambiguous note note: This is the only place where `--apache-vend-install` is used.
why does this need to be async?
I think you can remove this now that it's now an unused variable. You can also remove the `o.MetricReaderOptions.ExportIntervalMilliseconds` variable from the `exporterOptions` and use it directly in the constructor.
I don't see any other code using this, is this intended?
Shouldn't we also return a file for PrivateUrlUser?
revert this method
Note: this should be handled in the info level, not in info level.info
Is this not needed anymore?
Why are we using a mock here now?
**question:** is this being used in a different PR?
Please use `db.Infof("setting db capacity to :", db.capacity)`
Why the lock change here?
Why is this necessary?
Please replace `set to DBOpenHelper.DEFAULT_DB_NAME` with a `dbName` property and reuse it here.
I'm not sure what this does.
I think we need to handle this case in the test case.
This is the only place where we use this value.
Are you sure you need this?
Why not use the same name as the `cert_availy_environment`?
This function doesn't need to be a `model_func : the function of the model to be verified`
`rixpkgs` is a version, not a number, right?
This is not needed anymore.
This error is not specific to the IP, but I think it should be `Error cloning`.
I think this enum was not used?
Maybe we could use `secondaryConfig.add("secondary", secondaryConfig)` here?
Line is too long. [81/80]<br>Use the new Ruby 1.9 hash syntax.
this is not needed, we have already done it in line 218
`s/` -> `s/`
This return is redundant, since you are returning early.
Please remove this include.
Is this used anywhere?
What's wrong with `get`?
This is the same code as in `TestCase`
Why not `AzkabanEventReporter`?
@stephentoub do we want to add this line? I can see it's the case, but I'm not sure what this change is for?
I would use `self.keykey.body` here, as the first half is the same as the second half, but that's a bit confusing.
Is it worth adding a TODO to track this?
Please remove the comma.
nit: I'd prefer if you moved the `case` statement to be before `case` (line 577)
Is this needed?
This should be `-1`
"Attachment is used simultaneously as two color attachments" -> "Attachment is used simultaneously as two color attachments"
This is a bit of a weird place to put the `HeadLess` class, I think.
I would default it to the number of available CPUs if it's not available.
this import is now part of the "id" commit.
(nit) should we add "default keyhints" to "keyhint".
This test is not really testing what we need. The `keys` test does not work on windows.
The original code was actually broken. I'll take care of this and see if it's still needed.
Use || instead of or.
This is not a good candidate for using `Status` as the format of metrics. It is used in many cases, and it's a bit more readable, but we might want to rename the variable to something more meaningful, e.g. `community_CLI_PATH` or `community_CLI_PATH`.
This is not needed since outside_projects is set in the controller.
I think this logic should be moved into `copyObject`?
I think it is better to use `alignment_Rows` here, and in the `absabs` function, rather than the `abs` function.
Why is this a `BooleanDefault`? Isn't it `boolean`?
Why is this change necessary? It seems like the `set` was added to the service.
This was the original issue I just found.
I don't think we need this. In the case we are not looking for a sock class, we don't need a separate class.
I think you can get rid of `destroy` here.
This will be very slow, if the tunnel has NULL (i.e. it's NULL), then the stream will be NULL.
Why did you remove this? It is not related to the fix, but it should be fine.
if we're just going to use the `newLen <= 0`, should this be `newLen = 0`?
This is the only one I don't see any reason to do this
This is a bit confusing to have the same logic as `mmffArom`... why not just have `shlex` as a `unique_ptr`?
This is a good time to remove the old code :-(
I think this should be 7.0.0 use case.
We should add GapicProductConfig here.
Why not just pass `word.chars` as an argument?
Do you think we should add this to the nodeConfig config? It is not related to this issue.
Why change this?
Why do we need this function? It's used in a couple other places. I would just add a `private` function to the interface and call this function.
please revert this change
no need for new line
I think it would be better to make this private. It's a bit more specific and makes it more readable to be able to provide a simple simple "private".
This is the only change I'm not sure about. I'm not sure if it is worth it.
What is the reason to remove this parameter?
This was removed in #1414 and removed in #1414
Why was that line removed?
I don't think this is the right way to go. The test is still running in CI so I'm not sure why this was added.
This is not needed anymore.
I think this should be `true`
This function is not needed. The function name is already in there.
I think this should be optional. If the flag is disabled, then it should be automatically disabled.
This is a debug level, but it is a bit confusing that the `configureNative` method can be removed.
why is this needed?
nit: `return this.ieService_ = service`
Now this is just a question, but is there a reason this was added? I'm not seeing any `bp` is being used anywhere else, so I don't think it's necessary. It seems like this is a change of behavior, but it is not necessary.
This is not needed, the `pkg/apis/v1` extension is already present in the `apiutil` package, so this is fine.
This seems like a nice change, if I'm reading it correctly, I'll revert this back.
IsolationLevel the only method that can be used here?
Why is this being removed?
I think you can remove this
Line is too long. [81/80]
I think we should be checking for a parent id, and also check for the parent id. The message is a bit confusing to me. If the parent id is an error, then the snapshot is always a bit more than a "no parent snapshot found" or something like that.
Why do we have both config and the default one?
I think we should return the value of `None` here.
You can use `entry.get(entry)` instead.
add string should not be added here.
Is this needed?
What's the purpose of `config`? I don't see any `config` in the config
This is a bit weird, it should be: `... instead of...` and we could also just use `...` and we wouldn't need to change the state of the CDN because it is already in the repo. I would suggest to move it to the common place and remove it.
this is not a new feature, right?
This function has been moved to `go/search` so that it can be moved to `go/search` and `const` blocks on each test.
I don't understand why you rename `r` in `MolDraw1D` (or something similar) of `get_reimplemented` (in `get_index`).
We can't just use a cast to int, but I think we can do it as a variable.
I'm not sure if we want to print a warning in case the formula is not known at the beginning of the file.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
The initial value is `nil` in this case, but I think it would be better to do it in `elastic.SetRetrier()`.
We need to ensure we're not using the entire source, right?
Why was this removed?
I think the default should be `Optional`. It's more future proof. Also I think it's more consistent. The default should be `Optional[default]`.
Why is this needed?
`# `required` is not required as `attr_value['string']` probably not required as `attr_value`
If `+=` is used in conjunction with the `reader` reader, we can remove the `+=` and use `var reader` instead.
This should be a constant.
Are we sure we need the `export` here?
This should probably be a different name. I don't think we want to have it in the database
I think this can be simplified to just `return_array( arg2, arg2 * arg2 * arg2, arg2, arg2))`
Can you explain why this is needed?
I think you should move this to a dedicated file, with a `QWatcher`
This should be in `_register_script()` as well.
I'm curious, what's the difference between `attribute_change` and the `name`?
You can use `GetItemLayoutId` here and below
This is a pretty strange place to put this. It is a bit odd to see what's going on.
This should be done in `constants.go` as well.
Should we have a `GeneratePoSTRequest` that gets passed to the function?
Is there any way to get the EGL token from the same EGL token? If it is, then you don't want to call `render_request` here.
I'm not sure if we need this file. The dictionary can be a dictionary, not a dictionary, not a relative path.
The `$code` parameter must be added to the list of keys.
I don't think this is needed any more
@jenning I'm wondering if this should also be `TaskMetadataAZDisabled` or `InputMetadataAZDisabled` to make it clear that `BOT_INSTANCE_DRAINING_ENABLED` is set for a `BOT_INSTANCE_DRAINING_ENABLED`
remove this line. it's not used anymore
I think we can remove the check for `TranscodingInfo` now that `failStream` is not defined
Line is too long. [85/80]
why do we have an int here?
Should we add a field in the config file to make it more explicit?
The previous implementation is fine for this. The previous implementation does not seem to be doing anything to do with this.
This is the only change that affects this file.
I think it's better to move this up to the `signer` section above, since it's a var.
`!localize] != false` is redundant here.
I think we don't need this line, we don't need this file
@jridgewell I think we should change this function to accept an object instead of a function that is called by a function that is called by the user-defined `kvs_txn_t`.
I would make this `when_searching` instead of `when_searching`.
I think we should use `sys.getfilesystemencoding()` here. We can just use the `fs_path` directly.
I don't think this interface is used anywhere.
@tgamblin Do we have any idea how this works for me?
I think we can just do `CryptoSm2.Mark` here.
should we make this `loadUiThread`, so we only need to load the KeyChain exception?
Why this change?
This is the same change as the previous PR.
This is a code smell - I think we can't remove the null check here.
I'm not sure if this is the right place to put this.
This should be changed to use `toDruidMap`
I think this is the only caller of this function.
I think this needs to be a `chan`?
Missing semicolon at the end of the line
I think the `.Blockchain` is not necessary here
Please don't use parentheses around the condition of an if.
This looks like it should be an option.
This should be in a separate PR.
should this be `Port`?
if you add a default value here, this will break existing installations that are not allowed
This looks wrong
What is the purpose to do this? I think the type of `map[string]bool` is to be more clear, e.g. `map[string]bool`
It's weird we need to keep this in the `Server` but not the `Server`
why is this removed? I guess it's not related to this change, but it's a test that was testing the output of this test.
Is this a typo?
This is a bit confusing. If we have a `go` then `void run()` will be called before the `@private` is called.
nit: can you remove these blank lines?
This is a bit odd, why not just call it `deliver_welcome_email`?
`map` is a bit ambiguous here. I'm not sure why you're using a `map` here. I'm pretty sure this is a safe choice, but it's probably not worth the effort.
Is this still useful? Can't we just call `Real` directly?
could you remove `corr` from the variable too?
This is a bug fix.
Is it possible for this to be `IComparable`?
I think we should remove the line if it's not needed anymore
Why not use the function directly in `getMDB_txn`?
I think this is a good use case. The `const` should be used instead. The `utils` variable should be used for the `const`.
This is a good candidate for a single line string.
this is the actual fix, we should just remove it.
BuildState is not used anywhere, so we can use it here
I think this is not needed.
Is this needed?
This is a change of behavior, but I don't think it makes sense to be in a separate PR.
Was this causing issues?
This is the only change that affects testting. It should be in a separate PR.
This is a bit weird, why do you need to check the RFC2136?
This is a bit odd. What is the purpose of `LOGGER`?
this seems unrelated?
I don't see a point of having the AST class defined in the constructor. I'm not sure if there's a better way to do that.
This is a breaking change, right?
Does this change the semantics of the `metricNamespace` and `context.Context` in the main component?
We should use `bytes.GET` instead of `fieldInfo`.
I think this is a leftover from debugging purposes, it's better to keep it as it was.
I don't think we should change this. We're just trying to get the special_ibl_xfer_tgt. The only time the user gets a special_ibl_tgt will have special_ibl_tgt, which is not the case here.
Shouldn't we call cancel on the initial initial initial initial initial initial initial initial initialisation?
I don't think we should add the context to the context. It will make it harder to review when it is a problem
You should not need to check if the array has a name or not, if the array is not a button, it should be checked first.
This is a little hard to follow, but I'm curious why the previous version was changed to a newer image version instead of a newer image version?
I think this should be `if (typeofCERTRatio.x === 'number') {`
these two attributes are not necessary since they're the only ones that are not used in the DB
I think this needs to be added in the constructor of `enum {`
Does it matter that we're not using the array here anymore?
Why not just have a method that returns the default value?
Nit, I think this should be "Failed to add" to the "your" description.
I think we should remove this
This file was added to support the new C++11.
I don't think this is a good idea. We should just make this configurable.
I think we can delete this line since we're not using the uint8 anymore
I think we should be more explicit about the `WithStamp` here.
We should probably make this configurable
I'm not a fan of this name, it's a good idea to have the `GameuF8FF` in there, but the `MELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELEL
The spaces after `new Type\Atomic\TInt`
This is not the same as in `vscode`. Can you move it to `slug`?
I think this is a leftover from debugging purposes, not a big deal, but it's probably better to make it a little more readable.
Why do we need this import?
I think you need to remove this argument. The argument is only used to store the struct in the array.
I don't think this is a good idea. Why don't we simply return the location of the manifest list for this Snapshot if it's not a specific one?
1. Not a big deal, but this should be `f0`.
This will be changed in psk_config.go
@sjenning is the right thing to do here? I think `EncryptedSerializedDataSize` should be `serializedDataSize = swarm.SectionSize`
This is a breaking change - the MIME type is used to determine which object was given. I think this is the right place to put this function. The only reason we have this function is to set the MIME type to the blob object.
why is this deleted?
See, but this is the change I'm not sure about.
Hm, I think it is a good idea to set this to `rollback` instead of `rollback` in order to avoid the potential crash.
@smarterclayton now I've made the original change in #2140. This was the only place where we were testing the new functionality for the test, so it's okay?
This is the main code change I was seeing in a different PR
I think this should be `["hsh['verified']` instead.
Why are we doing this?
Should this also be a `log_path`?
can we call this `can_purchaser_` or something similar?
The config imates config estimates is not available anymore. Can we just get the fee from the config instead of using the fee at the top?
Can we rename this to `TopLevelCondition`? It's not clear why we're passing it as an argument to `ATOR` and `ATORCondition` as a parameter.
whats the reason to not use a new one?
Why are these two changes necessary?
Line is too long. [93/80]
Use empty? instead of %i
I would prefer a better name for it :)
I don't see any `new` in the original state of `password_reset`.
This is a nice nice cleanup. There is an extra `require` statement in this file.
The `toPath()` check is not needed.
It seems that this method can be replaced with a call to `remove` on the shutdownHook, which means that if the shutdown is not found, it will be removed.
This is not right. If the policy policy is `nil`, it should return a `nil`, right?
This is a bit confusing. If the `Start` method has a method called `o outbound.start()` and the `Start` is not a `List` then `o outbound.start()` will return the same thing. Maybe add a `TODO`?
I don't understand this change.
I think we should also check that the service exists and return that here.
I think we should do the same thing for `processprocess.go` and not have `processprocess.go` here.
Why is this needed?
I think we need to do this in a separate PR, but we can't remove this if we're not using the `externalIPPoolController` anymore.
nit: I think we can use the builder directly. `epochlengthactivation` is more common term in this method and it is more clear what is being used.
I would say "Use `plz` to add the pleasings repo to your project."
should we remove the keybase field from `strib`?
I think we can remove the annotation here. We should only keep the mapper if `mapper` is null.
I think this should be `io.currentTimeMillis() + previousSnapshotId`
This is a little confusing to me. What is the idea behind the `int32`?
This is wrong, isn't JavaTokenKinds.DECIMAL_LITERAL enough ?
Nit: please remove the empty line
I'm a little confused why we are removing the tests. Was there some test to verify the change?
Is it worth adding a log line here to indicate that Windows is processname/exe?
I don't think this method is used anywhere. Can you remove it please?
Is there a way we can test the result of a different test? I'm not sure we need to test that the line break is too long?
What happens if a type is a string, but if an object has a string, the type is a string, but the type is a string? That may be, we may want to check if it's a string.
It looks like `s.Noticef("Server Exiting..")` is now unused.
I think this check can be moved to `timeLeftToClaimRefund`
Can this be moved to a dedicated function in `user.go`?
I'm not sure this is the correct way to go.
This method should be private.
I think it's better to use a constant here instead of a hardcoding of `v`
I'm not sure why we are adding this here... I'm not sure why it's needed.
I would prefer to use a common constant for `Long bitmask`
Another option is to just use `expect` instead of `expect` for testing.
I don't see where we call `zoneID` in the `zoneID` function.
`random` should be moved into `self.uniform` (and the logic below). It should be moved to `def _do_ need to be in the `if` statement (which is not necessary). Also, you should probably just make `self._prob` a `uniform(0, 1)` call below to avoid unnecessary string concatenation. `self.prob` should be fine.
This is a vague workaround. It looks like you're missing a space before `v`.
This test is a little confusing, I don't see any tests using this, but it seems like it should be a good place to test this.
nit: why not use a `Set()` method here?
Is it possible for `spaceId` to be `null`?
is this used anywhere?
Can we remove `coupon_id` from the config option?
I think this method should be `DBPDataSource()`, since the `PDataSource` is a `DataP` and the `DataP` is not used
This looks like a regression.
nit: remove trailing whitespace
This is the same code as in line with other similar code.
This should be `seelog.xml` and not `seelog.xml`.
This is a bit confusing, as this is a bit of a logic error in `new Name_wall_time_option()` and `new Name_wall_time_option()` is a bit of a bit of a hack, but I'm not sure how to fix it. I'm also not sure what's the right answer, but I think it's a little confusing to see how this works. I think we should be more explicit about the existing behavior.
Unwrap error is already checked above
I don't think we need to do this.
I think we should make a constant for the value `houseOwnedByAccount`
This class is unused.
Shouldn't we use the same name for `driver_getExecutor`? I know it was already checked elsewhere, but I'm not really sure how this works, but it's not a huge fan of it.
This is a breaking change for the next major?
I'm not sure this is a good idea.
I think it is better to use package main here, as it is not only for main
I'm not sure if this is a good idea, but if it is, then I'd prefer to keep the test as is
This one is missing a `_POSIX_C_SOURCE` header
Do we need the `client.getLocalPlayer()` check here?
This is not right. You can just call `is_temp(i)` instead of the null `if (getOperand(i)->getNullFlag() && !op_data[2 *)op_data[2] = -1;`
`Detected-Locale` seems too generic. Can we just delete this line?
Is this change required?
Is this the only place that we use `ok`? `ok.StatusContinue` seems like a better name.
I'm not sure if we should be using `scripts/copy-groth-params.sh`, but if it is then we don't need to copy-groth-params at all?
I think we need to do this for every single command.
I think we need a new value for dont_listen to be the same as dont_listen to be used in the DAG. Can you add a new value for dont_listen to the DMA_metrics.go?
I'm not convinced this is the right thing to go, since this function is only used by `build_clang.py` and `build_clang_python_py` (and `build_clang.py`, where we need to do this)
Line is too long. [84/80]
@mjkkirschner Is this change related to the PR?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this is necessary. The only place this is used is if it is used is used.
nit: remove the extra spaces
why not `journalPausedFromConflict`?
This is a bit odd. Why did you remove this line?
Why is this in `Listener/assets.py`? I'm guessing it is just some internal code change.
Why not using `$this->getContainer()->get('sonata.media.manager.category')`?
Why is the other constants here and not in the other one?
Why not just read the `tx->receive_async(std::move(block), block_a)`?
I think we should just delete this test.
I'm not sure what the best way to fix the original issue is, but is there a way to check for null?
I think you can remove the `advance` and just use `Math.nio.OFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFFOFF
This is a bit of a hack, I think we can just do `raw = false` and remove `fullResult=false` here.
Shouldn't we also add `security` field to the `metrics` field?
I think we should use `fs-extra` in the config file. It's not clear what this option is about.
this is not needed, we already have the default value
why was this removed?
maybe add a `current` parameter to the function above, to avoid the conflicts between this and the other two?
I'm not sure if we need this for anything, but I'm not sure if we can just remove it since it's used in the cache and the cache already exists.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't like the `@user_session` here, but you can use `user_session` directly instead of the `user_session` method.
Nit: This is the only place where we use `API_RunTask.html` - is there a way for this to be used?
`MoreObjects` is not used any more
Why is the mock mock mock?
This is a bit weird. We're not using this anywhere else in our code, and we're not using it anywhere else. I think it is better to keep the old code as it is.
the `"` is not needed here
We should not have any way to test `joplin` without `joplin`.
Why are these lines changed?
I think we should add the new values in the docstring
I think we can remove the "blob" part here since the original code is already written in the `on_blob.go` function.
nit: remove empty line
This will need to be added to the list in the list as well, not here.
@kennknowles do you want this? I don't think we should change it unless we're using video for an admin video?
This is a breaking change, because `iframe` is already being used in `axe.configure`.
This is not the right way to go, the rule should be a class-level map. This is the only way we have to create the instance.
I don't think this is a good idea, but it seems like it's a good idea to use the `SourceConfig` interface here. The `keybase` API is used in `SourceConfig` and the `keybasebase` API.
This should be marked as private, since the class is internal.
Use the new Ruby 1.9 hash syntax.
This seems like a good candidate for a helper method. Maybe a `defdef` or a similar thing to do in the `nil` check?
nit: can you use the Boolean Boolean instead of the default ?
I don't think we need to add this to the base class, it should be sufficient.
I'm not sure this will work. This is a breaking change. We should probably make it a configurable field, since it's only used in the DAG.
This is the only change that affects TF providers.
I think we should keep the original behavior, because otherwise we'll be removing the 401 in the future
why not use `json` here and below?
Do we need to log the whole thing here?
@matt-gardner, I'm not sure if it is the best name for this. `typing` -> `in-unsupported`
I don't think this is needed, since the tests are failing.
I'm not sure if the h2o interface is necessary here. I don't think the "http2" tooling for a global state is needed here, since we don't really want to be able to use the "buffer" tooling.
spec order ID should be 'sort_order_id'
I'm not sure this is a good idea. But if it does, it will be better to use `format` here instead of `Expression`.
I'm wondering if this should just be `static`? Then it would be better if we just use a `WebDriverException` and `WebDriverException` for all classes, rather than having to call this in the class.
I think we should use a `new` instead of `Serialize` to make it clear that the type is not `null`.
Is there a reason for this extra space?
This is the only change in the connection of the connection that is needed, right? Can you change it to `!nullable()`
I think this should be `selectColumns`.
Shouldn't we use `BoostType` instead?
I think we should still have `cisco-5` here. We can probably just delete the `cisco-5` and replace it with `cisco-5` in this PR.
Do you need this new field? I'd just delete this field and put it in `Secret`
it should be called 'slave' or 'slave' to be consistent with other places.
I think it would be better to have this as a `*Identifier` instead of an `*` here.
This is the main change.
This should be empty I guess.
why not just use `buffer_as_ulong`?
I think this should use `index("correctlySpelled")`
Does this mean that when the `TestMethod` is `false`?
I think we should use a test for this instead of hardcoding the exit code
I think we can just pass the context here, since the caller is already doing it.
remove empty line
This test is now failing on Travis, right?
This probably needs a better name.
why not just pass in the exception?
Is it possible to have a test for this? I'm not sure what `topic_name` is, but it seems like we should be doing it for the test, so it's probably worth doing so.
I would prefer the use of `build_package` here, because the function is already called in the build_package method.
Standards: Please remove parentheses from language constructs.
I think it would be good to log the ExpectedCondition exception here instead of the ExpectedCondition exception. It would make sense to move this logic to the `ExpectedCondition` class.
I think we should import `github.com/influxdata/flux/plan`
Is this change intentional?
I think this should be on the same page as the #ifdef below?
Why are you using `diagnosticType` instead of `instanceType` for the `diagCode`?
this is a little strange, why not just make this `volatile`? `volatile` is a bit more complex, and `requestReadReceipt` can be a single boolean.
@jridgewell I think this line is not needed here (I can't remember exactly why it was added in the first place). The `Release` should be removed.
Is it possible to get errno_val from the current state?
It's better to make this `static` rather than casting `d` to an `Instance` like `GetHandlers()` and `GetHandlers()`. That way you can avoid using `GetHandlers()` as a dependency in the future.
I think we need to make sure we have `vic.TagList` as a prefix in the config object.
I think this is a good idea, but it seems to me that we are not storing the timer in the context. Can you please move it to the `finally` block?
I don't understand this change: `dial(hostName, tlsClientConfig, false)` is enough.
I think we should remove the reference from this PR.
This means that the invalid request will be invalid, but the request will be invalid. Is that correct?
this can be removed
Just curious, why do you need to change this file?
Is this import necessary?
As discussed offline, this should be a separate patch.
I think we need a better way to go through `go-mega` to avoid this conflict.
why not call `sonm-io/go-ethereum`?
I would prefer to see this as a separate change, but I don't see any reason to make this change
How about using `cfg.append(JMX._string_prop("HTTPSampler.port", netloc)` here?
This log line should be indented
Should we log this somewhere?
If we're not using `.Filter`, maybe we should remove the `Filter` here?
Is `*Status` sufficient here? If yes, please use the function `err`. If not, use `return nil` instead.
Why null is now nullable?
Do we want to getChromePath in here?
It's not clear to me that this is the name for the runtime. It's not the name for the runtime.
`caddy.LogDestination` might be a better name?
Please don't remove the copyright.
I'm not sure if this is correct. `_452` will be used in the same place as `_count_tuning_45`
Why not just do this `!= "SR"` with `?:` ?
Who will use 3kb?
I would move the code to the bottom of the code block to the bottom of the file.
I think we should be consistent with the rest of these
@adamjstewart Is this the right place? Or should we start getting rid of the open?
This is the new line that was causing the flake8 tests to fail.
Please use the latest version of `base_width`
This is the only place where we want to support the status, so we should probably just make it a `status`. I'm not sure what's going on here, but it might make more sense to just have the status and link it to.
It looks like the tests are failing because there are no Provisioner, and the tests have changed to pass.
The PR says this was a typo
This should be `from ..render.functions import STORE`. You can also delete this line
`type using #getKind()` is better
I think it would be better to add this to the `onclick=$` class above and add it here too. It will be nice if we could make this more readable.
Do we really need the `usb_VID`? Can we just use the same `usb_VID` variable?
`vStringTruncate` is not used anywhere else, please remove it.
This was added by mistake. I've removed it from the previous PR, but the fix was not needed.
I don't know how this will be called, but I think it would be better to have a method that does this for all time methods.
The `nil` check is redundant. The `keyBytes` is a `nil` in the test.
I think this should be a bool.
This file is no longer used.
The `is_open()` check is redundant, since it's already in a debug-level function.
Why are we changing this?
I would move this to `generate_special`. It's a bit confusing to have a single method that does the same thing.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We should log it as info.info here.
I don't think you need to change the name of the variable here. We don't want to have it in the code anywhere in the code. We should be moving the variable name out of the 'this' package.
I'm wondering if this should be a `import`.
Why do the same thing twice?
This is not related to the fix.
I don't think we want this to be in the wrong order. The condition is for the `DR_only` check above.
This is the only change that will break for the older clients.
I'm not sure if this is the right place to do this. If you do this, you should add a new `$this->dateConverter->convertToDisplayDate` and `Y-m-d H:i` into the `$profile->expirationDate` and set it to `null`.
Please use Vue, it should work with HTML. Also, you can use `production`, but you don't need to import the `App` field.
`float` is a `cast` and `model` is the default value.
This is a bit weird, I would have used `path.c_str()`, but I think this is a bit confusing, since it's a file-level function that is being used by the file-level.
This should be done only once.
@mmaxim do you think we need to add the debug message to the debug output? It should be fine to leave the debug message as it was.
`fields.Timestamp` should now be removed, as it is not used.
I don't think you need to change it, since it's a new scope.
Is this change intentional? It looks like the previous behavior was to use the `encoding` argument to determine if it should be.
Should this use a `static` function instead of a `Set`?
nit: `libkb.c` would be clearer.
Should these be removed now?
This is the same code as the default one, but the `iotexAddress` is still not used.
I think the `maxBoundDescriptorSets > 0` check should be redundant, since it's done above in `getPhysicalDeviceProperties`
I don't think this will work. The nullability are in the interface, and the interface is not in the interface.
Shouldn't we also do the filter on tables.isView?
This is a no-go, we need to remove it.
Should be pylint
This is not a good fix. The other code does not need to be updated as it does not need to be added to the base class.
Line is too long. [89/80]
Why is this import changed?
Nit: I would move this to a new line
We should remove the leading slash here.
Shouldn't this include be in the other files?
I think this line is not needed.
I'm not sure what the best term to do is, but I'm not seeing how this could be used.
I think we need to keep these unless we're using `unless` in a `required` statement.
I'm not sure if we should do the same thing here. If the cache key is being created, then the seed should be removed from the database.
Why do we need the `&` here? Isn't it a `&.` at the end of the function?
Why is this being changed? It's not used in this PR.
This is not the same as the previous one, but I'm not sure why the previous one is necessary.
I think we should remove this field.
Should this be a pointer?
I'm not sure this will work. The spanProcessor is not a valid one but the one in the image is still in the image.
I think this is not the correct way to go, because the `toySchema` could also be on `save` and `toySchema` (and the `toySchema` can be removed).
Is there a reason for using this?
I don't think this is necessary any more?
I think we should add a `default` flag to `Config` so that we don't get a `*` here.
I think we can skip this, if the year is in the current year, and if not then we should just skip the year.
I think this needs a call to `SULLIUSCEP_LOCATION` in case the PWA uses it.
I think we need to add a index to the host id as well.
Why do you need to make it public?
This should be `h2o_error_printf` and `h2o_fatal`
this should be a separate PR, but I don't see a need for a separate commit.
I don't think we need this change
Is there a reason for not using `common.Fatal()`?
Can you revert this file?
I'm not sure if we should be using the variable names here
Why 10 * 10?
Please don't do that. It's a bad practice, but it's a bad practice to have it, just a thought.
Why is the write write removed?
I think this should be `config.go` (we should be using the package `github.com/config`), not the package.
I think this is not the right fix. If you are going to send an enter key, then the error message will be lost.
I would suggest to move this check inside `checkExprDepth`.
@bvaradar Any reason why you removed the `message`?
I think this should be `private` and not `private`.
Can we do this in a single line with the resulting file name rather than the icon name? `editors`
This is a breaking change. I don't see any changes in this PR.
Can you remove this? I think you can remove the print statements.
why is this needed?
I think this is not a valid use case, right?
I think we can change the parameter name to `retryParamName` now that we are using it for clarity.
this is a regression.
Is it worth it to leave it as is?
Was this change intended?
This should not be the same type as `CountryField::FORMAT_ISO_3166_ALPHA3`
I would have put "current" into the help string, but I think this is better named: `current_call`
for me it is not going to be a search.
Is this a bug?
I don't think we should use the same retries as retries. It's not the same as retries.
I would prefer to assert that `assert_eq` is `0`. That's a bit more explicit.
why not `ZMSHandler.class`?
why not just use a set here?
Do we need this import?
I'm curious, what is the reason to use `StringUtils.isDiscoveryField` here?
I think this would be better named something like `containerMetadataEnabled := os.Get("ECS_ENABLE_CONTAINER_METADATA")` and then use that to determine if the container is not available
Better to define a const for the new name
I think we should be using `cmd/internal` here.
FYI, I'm not sure we want the `pid` flag to be a string.
I think the 32 should be 4?
Shouldn't this be in `init` rather than in the `log` module?
This is the key of the key generation.
I think this can be removed. We need to test the `mock` dependency.
I don't understand this change. The `cursor` is a bit disturbing. What if we called it `_model` instead?
Line is too long. [83/80]
I think we should just remove the Assert check. It's a no-op, and we can just remove the Assert check.
I think we can delete the defaultValue property if the path has been deleted, no?
`Word` is not a prefix, so you can just change the variable to `Word dependencies`.
I don't think this is a correct change. It's not really the best name.
revert this change, it's not necessary.
1. I don't think this will work. You should use `!1 || 0` instead.
@alalazo Is there any reason you are removing this?
nit: `q.dq.BeforeQuery = beforeQuery`
I think it's better if we just pkg/auth/auth instead of pkg/auth.
I think we should make this Message final and remove the getter.
This is not related to this PR, but it seems to be related to this change?
@michaelkuhn Do you remember if this is the right place for this?
This is the only change that affects TF providers.
Shouldn't the `unreachable` check be inside `unreachable`?
Is this include needed now?
I would use `assertThat(str(excinfo.value) == ("Zero_count Argument")` to make it more explicit.
I think the `Error` can be removed now since we removed it.
i think we should use a `bool` instead of a `string` here.
I think the `Create` method should be `public`.
Space missing after comma.<br>Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
I don't think this should be a Docker image, you should be able to run a Docker image on the system.
Why is this needed?
This should probably be a `Stop()` function.
I think this should be done before the call to `getprop`. It might be good to have a more informative name that describes what the "change" is for.
Why do we want to make this hidden?
I don't think this is the right place to put it.
I think this is a better name.
This is not a good name. It's a bit confusing. How about `org.infinispan.collections.org.infinispan.collections.collections`?
If the validator has an `int` that has a `ibaternion`, then this should be `host_MAX_LENGTH`.
this is a bug fix. It's not a test, so it should be in a different PR
what is the purpose of this change?
This should be a `strconv.format`, not a private function
this seems like an error?
I think this is not necessary, since the `at` option is already being created in `etc/hosts.py`
I don't understand why we have this function here. Can't we just use `newPluginID()` and have the `fail_PLUGIN_ID()` return the value of `newIndex()`?
Shouldn't this call be `if (state.req.getSearcher().enableFieldLoading)` ?
This was a leftover from previous PR
What is the goal of removing the exception handling here?
We don't use `Wei` in our code base. We need to use `core` in the package-level module.
I'm not sure if this is the right approach. Why don't we just return the error?
It seems like this function is no longer used?
Why is `cpuCircuitBreakerEnabled` removed in this PR?
This should be a global function. It's not clear to me why it's necessary. If deletes deletes is not implemented by the deletes option, the deletes should be a global parameter, and then the deletes should be a global parameter.
Looks like a duplicate line here.
Shouldn't this be `entry.getKey()`? Why would you want to change the category?
How about we do `deleteAll` instead of `canceling`? Then we can get the user-specified snapshot from the context. As far as I can tell we won't be using it in the code because we're already calling `validateAll` in the `validateAll` method?
`HttpHeaders.CONTENT_LENGTH` could be used here.
I think it would be better to do a `return length(n) || [];`.
This shouldn't be a `boolean` - it's not a valid value for the user.
can you add a TODO here to move these to a new test file?
I think this is a leftover from previous commit, right?
I'm not sure if we can call `flux.RegisterBuiltInOption()` without a `universe` call.
Why do you use `double EPS` instead of `double EPS`?
Why is this import changed?
If you want to use `std::string_to_VUID`, then you don't need to use `const std::string *error_code = "VUID-VkCopyDescriptorSet-dstSet-parameter";`
Can't you just return the `strlen` instead?
you need to change the default value to `True`.
`sdktrace` and `sdkowner` are not used anymore.
I don't understand this change. Why do you return a `null` value?
(style) line over 80 characters
Could you please move this to a struct? This is a bit hard to read.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Use the new Ruby 1.9 hash syntax.
The `s.first` function is used in the first call, so this function is only used by `defer`.
can this be nil for backward compatibility?
I'd like to see some refactoring of this class to avoid this being refactored, but I think we can remove the method and use the private field in `Assembly`
What about `Prefix`? I think it would be more consistent with the `./pants help` checks and I'd like to see it be used as well, but this is fine too.
I don't think we should be adding `@param` here. We should not be making this change in this PR.
I would not add this check here, if the `subpass` has a `const` pointer.
Is it worth adding a `diff_ saving` here? I'm not sure how to handle it.
I think this is a leftover from a previous PR.
`backgroundCtx` is not used in this function. Can you remove it from the `backgroundCtx`?
Why is this in the public API?
I don't think this line is required.
why not directly use `nameof` ?
This is a bit odd - why do we need this for each provider and not just for the fragment?
Is there a reason why we can't do this in `--monero-amount`? We don't want the `--monero-amount` flag in `--monero-amount`?
In this PR, the only time the value of 110000000 is the "test-event" of 110000000, is that what we want? I think that's the right change.
You can do `if (isset($options['multiple']) && $metadata['associationType'] & ClassMetadata::TO_MANY)` here instead of adding the `isset` to the `isset` declaration. That's what I meant by adding a `if (!isset($options['multiple']) && isset($options['associationType'])` to the `isset`.
(style) trailing whitespace
I don't think we want to include the `allUsers` suffix here, since there is no reason to have it there
What's the purpose of this check? I think it would be better for us to only compare `options.verbose` when it's not an object.
Please remove the comma.
I think we need to be more explicit about what this means when we're actually doing the `funder_id == org_id`
No need for an empty line here
this is a bit disturbing, if we have a specific environment in the environment, we should try to use the same env variable for all env variables
Why not remove the exception altogether?
This is a breaking change, but I think it's worth it to make sure it works as expected.
Style/SymbolArray: Use %i or %I for an array of symbols.
I think this should be `Simple_url`
Line longer than 120 cols.
Layout/TrailingWhitespace: Trailing whitespace detected.
I think this should be done in a different PR, but I don't think we should be able to use it in this PR yet, so I'm not sure how to do it in the future.
This import is unused
This should be `if bokeh_version > '0.12.6':`
why is this removed?
This log statement is redundant now
Standards: Please add braces to this conditional statement.
We can't use the `setup_profiler` method here.
Why is this being removed?
I removed this package since it is already in the package.json. We need to keep it in `pkg/build/internal/errors.go`
Is this the right place to put `NULL` on the next line?
Why do we need this function?
Can we move this to the top of the file?
attempts Count is already declared in the loop
I think this can be removed now
nit: remove empty line
I'm not sure why we do this.
Do we need to check that remoteHostIsNonLocal is not set when the flag is created, or is it done somewhere else?
This is a breaking change. It should not be in this PR but it's a breaking change.
why is this necessary? I think the `or isinstance` call below is unnecessary.
I'm not a big fan of this name, it might be worth it to just change the one from `_auto_indexable_1d` to `_auto_indexable_1d` and then just call `_auto_indexable_1d` in the future.
I think we should keep these as they are for testing purposes.
why is this needed? I think the one in `abort()` already exists.
This looks like it's missing the `break` here
I think we can remove the `ws` here, since we don't need to get the correct version already committed.
You need to update the `the:` below to match the original `the`.
can you explain why this is needed?
`d.id` is not available in `getResultList()`, so this should only be called from `getResultList()`
I would prefer if this is a default.
I don't think we need this property. It should be marked as `IEnumerable`.
Please use the same logic in the `receivesPoolClaim` method.
I think we should add a constant in the servicecomb-rest-header package.
This needs to be a default controller controller.
I'm not sure how this works, but I would expect it to always be true. I think it is better to be able to set a flag for the test. I don't know if we can do this for now, but this is a good thing to do.
Is this a debug statement?
I think you should be able to use `self.modules` here.
`i.e. must be valid`
Why is this changing? I don't see the change in the PR.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Unused import, will remove on merge.
Shouldn't this be done in the constructor?
@matt-gardner, I'm curious why you removed this line?
Why do you remove the `set_tlsext_host_name` method from here?
Need a test for this as well
Can you add a space before `import`?
Is this the correct way to get the `responseWriter` from the resource itself?
Can this be `final`?
why mining successive?
why is this required? this should be imported before the `__future__` below
I think we should be passing the entire `padding` argument to `get` instead of the `get` function. The `get` function is only used by the `get` method in the `get` method.
Can you add a description to this option to help us improve these metrics? Maybe `target-cache-cache-package-sequence-number`
Should we call this `tagLock`, then we could still have a `get` method on that?
This is the only real change. We should be removing this.
Please add a blank line after this import.
This include should come from `WebServer` to other includes.
This one is not needed, if `using` statements.
Why is translator removed from the constructor?
I think it would be better to have a `FieldField` as a `FieldField` method. That way we don't need to introduce any other `Field`s.
This should probably be `rescue` since the error is now raised by `MailChimpError`
I'm not sure if the `if` is needed here.
The `Fork` function is used in the code base, and it should be in the base class, not here.
Can you add `module.exports = siteStories;` to the `//`?
Why was this removed? I think the previous version was a mistake.
I think we should remove this from the PR. We should keep it in sync with the `six` package.
I'm not sure if this is the correct place to handle this?
Is this just to prevent batching being reused in a future PR or just debugging?
It looks like the two methods return `false`
I'm not sure this is the correct error message.
We should add `DateUtil.get("is_published", this.is_published_to_display_on_card", this.releaseOrCreateDate)`
Do you think we can remove this?
This is the only line changed. We need to do this for a while.
@deads2k I think we should default to the `timeSrc` field if we want to avoid compatibility issues.
Is this change necessary?
nit: add `[NotNullWhen(true)]`.
I'm not sure why we would need the second half of the `LANGLANG` here. The `LANGLANG` in `keyboard_set_args` is the same as the `seat->seat->keyboard_state.grab`.
Doesn't this need to check if the transaction is empty before returning?
You don't need to pass cascade here.
This needs to be added to the list of `*` implementations as well
I don't think we need to edit any more. I think we should just make it not edit any more.
I think we need to remove `this` here.
This should probably be final.
No need for the debug statement here.
@tnozicka this looks like a bug.
@mfojtik why was this deleted?
I would prefer to have a variable named `length` and use that instead.
Do we need `.Input.Namespace`?
I think this is a bit too big. We don't want to have a `conda` package for the source files, and they are just for the source files. I would like to see some time ago that we can do to make the `conda` package package package private, but it's not a big deal.
I think we should use `aria-query` here.
`internal static int` is redundant.
I think this is the wrong place for this, but I don't see any related to the new state of the sla API.
I think we can remove this "//" part of the Code generated by gowire part here.
Why is this false?
This is not right, it will not cause problems on the timeout. This is not the case for the timeout timeout, but the exception is still thrown.
This is not needed
@jgitgitgit I am not sure this is the correct import.
I think this is the only thing I'm not sure we need to make it in the new namespace.
> What about `config` (in the same package)? I think it would be better to use the `config[config]` attribute for `option` (and `config[config]`).
This should probably be `check-streaming`.
nit: can you use a check here to make sure `headingLength` is not null?
Is this used somewhere?
It's a bit confusing to have a `onStartSend` property on `RestClientSender` but I think it's better to have a `onStartSend` method on `RestClientSender`, and use it in `StartSend` in `onStartSend`
I think we could add the same logic to the `actionHash` field in the `buildHash`.
I think it is better to use static imports, and have the code block go through `component` and `component` in `component`
What is the idea behind this change? I think it's better to do this in a test, and then use the `vk::` helper.
Why are we changing the default here?
I would use `assert_not_sms()` here. It would be easier to test for sms messages.
Should we also be removing this import?
is this a typo?
Should we also change the `loc` above to `AutoFilesystemTrimUsage`? I think it's not a blocker but if it's just for the sake of readability, it should be fixed.
hmm, can you use `./opt/puppetlabs/agent/bin:/opt/puppetlabs/bin` instead of `opt/puppetlabs/agent/bin`?
I think this is not the right place to put this, but I'm pretty sure it's the right place for this, so it might be worth it for now.
can you explain why this change is necessary? `merge` does not handle this case, it seems like we should be using it elsewhere in this PR
This is the only change in this PR, and I'm not sure why the existing code was wrong. The problem is that the `OSRM_EXTERNAL_MEMORY` header was added in the first place and it was not being used.
I think we should make it clear that this is the "removed" of the "move" method.
this seems unrelated to the platform checks?
I'm not sure this is the correct way to fix this, since the `<Blockly>FieldTextInput.FONTSIZE>`.
I would use the default, not the input, so it will be more readable
@deads2k any reason to change this? I'm not sure it's a good way for us to change it, but I'm not sure it's a huge deal either way, so maybe it's worth it to change it?
I'm not sure we want this to be part of the `rpc-protobuf-raw` folder.
I think this constant should be a constant somewhere, with a constant.
I would prefer to have `self.underlayer, "seq"`, but I think this is fine.
I think this is the only change needed in this file.
I think this is fine, but I think we need a check for `on_mysql?`
Should this be "adjustment"? Or is it the same as `PARTITION_ADJUSTMENT` (in order)? I'm not sure how the partitioning should be, but I'm not sure how much this could be.
This is not the same as `getClass().activeFlows()`
why is this not `defer` in the snapshot?
This is a breaking change.
I don't think we should be using this in the `torch.jit.annotations` module, but it's not a blocker.
same here about the `report_data` above
This import should be removed
If you use the `sycl::count` syntax, you can use a `Union[id]` instead of a `Union[id]`.
I don't think this is necessary. `FactoryBot` is a `let`.
I think this should be "url($uploadsPath) . '/'"
This is a bit weird - why would abuiltins be added?
This is not needed. You should be able to remove the whole assembly for each platform.
Can't you just pass the `timeout` to `sigsig = 10` instead of `120`?
nit: this is not a flag. it is used only in `BaseTree`
I think this is not needed.
This is the only change I'm asking about. I'm not sure if this is a good idea.
What is the reasoning behind this? "indexed are zero indexed" sounds a bit too funky.
Does this change the eventTimestamp when it comes to the dashboard?
This function should go in `short_version`.
Can you remove this line
Should we use `org.apache.iceberg.StructLike = Types.StructLike` here?
Why was this removed?
What's the motivation behind this change? I think it's not clear that this is a change in behavior, but if we are making the 2015 change, it's a little hard to understand.
Maybe we should log the error and return it?
<!--new_thread; commit:3b8f4b6d4e46f7e3; resolved:0--> Which of these is the motivation for this change?
This is not a good change, it's just a small change. The rest of this PR changes the config. The other option would be to make the type explicit and pass an empty string instead.
Is this really necessary? The CNI version is not in the middle of a version.
This is a bit confusing, I would not expose it as a dependency if you want.
Should we use `NetworkService` here too?
This is going to break the `TaskStatus`, which is not the case, but `search` and `STOPPED` seem like a better name.
I don't see where this is called?
I think we should use the logger here, as we already have the logger in common folder.
NoError is now useless, can be removed
Why do we need to do this?
This is the only place where we need to do this.
>value [](start = 8, length = 1) Should we check for null here? #Closed
Can you use the function `BindWA::addOneRowAggregates` here?
This is a change in behaviour - it's not a part of the fix, but I think it should be handled by the existing `descriptor` variable
I think this is a good example of how we want to use an actual identity.
if newGroup is nil, this will not be correct
Nit: please remove this empty line
Why not just return the TxHandlingOptions?
Should we also skip the `skip` call?
Is it necessary to add this option to the `metaServer`?
In other places we use "pip install", " install", "no-deps" are the same.
Should this be `err = ...` ?
this is not a good way to do this. If we need it, we can just remove the `const mdserverReconnectBackoffWindow = ...` and just use that instead. The issue is that the `const mdserverReconnectBackoffWindow = ...` above will be removed.
Just a suggestion: I'd rather have this in a separate PR. I think it makes sense for us to move this check to a separate file and `private` statements that are in settings that are not part of the `excludes` namespace.
I think this should be `$this->normalizeIdentifier($id) ]`
I would move the model model into `$this->showGutter` and `$this->vars['safe mode']`
This should be `self.obj.WinwordWindowObject.ScrollIntoView`
This was a typo, it wasn't?
Please add a blank line after the `if` and before the `}`
This is now handled in `gocoverutil.go`
We should probably add a `TODO` here.
Style nit: This makes it easier to read when you're using `parent` in a single statement.
What do you think about renaming this to be more generic, like `user_hash`?
I think it would be better to say `@out_variant is set to %NULL`.
I think we should use the `auth.Error` instead of `c`. The message is a bit confusing.
This is the only change that affects the change.
Remove empty line
Increase block processor allowed allowed allowed to be the same size as the current block in the `get_processor_full_size` method.
Please add the new parameter `make fmt`.
Is this related to this change?
This should be `out_data.name_id`
I think this is a bugfix, because we want to return `FPGA_INVALID_PARAM` instead.
Please include this header in the `ines_matching.c` file
need `need_unmap` to be consistent with other examples
I think it's better to remove the `cm` import from the import block.
This is not a part of the public API, but it's not really a part of the public API. It's a bit confusing to have a method named "acquire" for this.
Why not `docker`?
What's the reason to cast here?
I'm not sure if this is needed, but it seems to be used in a test. If it is used only in one place, I would remove it.
This is a bug in the code. The null check is not required, as the `QueryVisitor` is not a `null`.
No need of a variable, just assign it to the variable.
Could you add an extra space after `<=` and `<=` in the `text` block?
This will need to be updated to remove the `AWS` import.
`command` was removed from `store_handler.metadata_info` because `len()` returns `True` when the first file is empty.
This should be `full_backtrace`.
nit: update copyright year in header
Is there a reason why we can't just use `mitmproxy.version`?
This should be public
why not `PY310_PY`?
This function is not used anywhere.
What does "get_row_count" mean?
Is there a reason to use assert here?
Is there any way to make this work? I'm not sure if it is the right place to add it...
Is this test case unrelated to the change?
This is not a boolean, right?
This method name is not very descriptive, but I would suggest to rename the method to something like `virtual` to make it clear what the function does.
@jona-sassenhagen this was the only place where we needed the image and we want to be able to run this information.
This function should not be used.
I wonder if we should just remove this property from the `AnnotatedCodeLocation`.
I don't think we need to import this at all. I think we should be able to get rid of the `config` import.
This should be an optional param, I think.
Let's not introduce any state here, since we don't use this interface.
This is a good candidate for a helper function, as we do for the `index.search` function.
Would it be possible to move this up to the `if`?
This line is the one that was added to make it more clear that this is a `man/man5/v1-12850`?
This should be `input == 0` (and `str` below)
This file needs a similar modification to the one for `KUBERNETES` IMO.
It looks like the `appErr` is only used in the `beforebefore` method, so I don't think this is needed.
why are we changing this?
This is not the only change needed.
I think this is the only place this was used. The `class_agnostic` is used is used to set the default `False` value to `True`, so I would remove this variable.
This isn't a valid file, so I'd rather not expose it.
These are unused.
I'm curious, what was the purpose of these code?
I think this was just wrong before? I don't think the `p` is necessary, but I think it's probably because it's the only case that the `p` is used in the code base, so it might not be the best place to change this.
@Scottmitch why do you need to pass `REG_##reg` here?
This is the actual fix. The indentation should not be here.
This is just a minor cleanup, but it's not a blocker and should be a single quote string.
I don't think we need to expose `SecurityGroup` in the database.
@DanVanAtta Shouldn't this import be called `rometools` ?
I'm not sure why the info is needed. If you're changing the behavior, you should not be changing the behavior of the map.
Remove this import. It will never be used.
I think this is a bug in the rebase. We should be able to remove the `if` condition.
I don't think we need to add the semantics here since we are not setting the `Subscriber` anywhere in the code.
The name is misleading. it should be "ecdkit", not "ecdkit", or "ecdkit".
This is the only change that affects TF codegen.
I think this should be moved to the interface. We can pass the ResolveBranch directly to the caller.
@nmittler - What was the motivation to add this?
I think you should be able to remove this line
If you are not using the `err`, you can just return the error.
I don't think we need to expose this to the `remotekey_enabled` method.
This will fail if you are running the tests. You are not checking the exact status here.
Why change these?
Do we need to keep this around to make it easier to parse? Or is this just for testing?
This test was not working on mobile because of the tests that changed
We can probably just use URIxRewriteCtxKey.
We should probably change these to match the other ones
I don't see why we are removing these two options - is that intentional?
This is a bit confusing to read. Can we just remove it?
The `helper.ByAttestationType` is now done by `BySecretsSecrets` and it should be a helper function.
I think this should be moved to the Hosting logic, since it's only needed in the `cleanupcleanup` module.
Please remove the long line
This is the fix. We need to check that the url is not empty, otherwise we'll always get a wrong error.
The `appRouter` function has been deprecated in the app. Can we make it a `default` instead of a `href`?
This looks like a good idea. It might be worth to check if the user didn't specify it in the first place.
`tplSegmentAsync` is not used anymore.
Please add a `using System.Diagnostics.StringSet`
I'm not sure if we should make this change, but I'm not sure if the https package is actually required.
I think you can move the `name` above the `2018`
Please remove the spaces after the opening curly brace.
I think the `Plugin` is redundant, since it is already a `final`.
This file should not be exposed to our custom node, it should be available to all the unit tests
should this be `has_component_be_active`?
I think this is not right, we want to do this if we don't have to.
let's make sure we don't use the feature flag for the phone number
@jridgewell We're not using `O`, so this is the right place for this, is this intentional?
Should we be using `ConnectionKeyCombinations` instead of `ConcurrentDictionary<string, int>>`? It's more clear that `ConnectionKeyCombinations` has a name that is a `ConnectionKeyCombinations`.
This is not needed.
How about we move this `if not need_exact:` below the `if in_listen_count` above, since it's not a query?
`transfer` is not a new item, so you should use the new item in the `transfer` (which I think is what you wanted).
this is the only line changed in this file.
`sftp` should be a constant. It should only be used when `server_command is defined`.
Please remove this.
I think this should just return 0.
Can we remove this file?
Line too long. [83/80]
This looks like a typo.
I think we need to keep these imports sorted :)
A nil check is needed, so you can just use `dst.Spec.NetworkSpec.SecurityGroupOverrides = nil`
Please add a license header.
This is going to be a good place to put this check. I'm going to be fixing this in a follow-up PR, but I think this could be done in a followup PR.
we should also remove the "identity" import
Shouldn't we use `function` here?
I don't think you need to do this, since `encode()` is not called anywhere.
I'm not sure why you removed the if here...
What is this doing? I think the `.syntax` can just be `nil` right?
Why did you change this back to `2012`?
Why is this removed? Is it a problem in the future?
I think the original name is wrong.
I'm curious, why is it ok to have a test with this?
Is this a `/*`? I don't see it being read anywhere.
I think this is a better name.
why not just add the new block into the `doe()` function
The public API is internal, so it shouldn't be public.
This should be a `Obo.log.CDebugf(ctx, ...)`.
Is there a reason for using `video` instead of `:` here?
Should we also remove these?
Why is this being changed?
I think it's better to add this method to the `getFocusable` method.
You should use `msg` to build up the message.
It's not necessary for this to be exposed?
The header header is in the same file, not in this patch. This header header is in the same file, so it is in the same file.
I'm not sure this is the correct way to fetchMock?
Is it possible that `mFolder` could be null in the constructor? It seems like it could be null in the constructor.
This migration is not necessary since we have the text_only multipart in the DB
Would it be better to use `lower()` here?
This is needed to ensure that the `UTF-8` route is logged properly.
I don't see where this is used? It seems like we should be using the wrong value for the archiver.
If we're not going to be using the `rootNode` here, we could probably just remove the call to `GetOrCreate` altogether and remove the `path` altogether.
I'm not sure if we should be using this in other places.
Does this need to be updated too? The return type should be `Optional[str]`.
This is a bit confusing to have a else. What is the difference between `if` and `else`?
This is a good change, we should be able to remove this
I'm confused, this is not a user-facing setting.
I think it's better to use a labeling item here, so the user can be more explicit. I think it's a good idea to add a labeling item to the container, so that the user will not be able to see the container, but I think it's ok to change it.
Does it make sense to also set a flag for the `--recurse` flag?
Shouldn't it be `clone`? `xdensity` is a `ConcurrentMap` instance, which should be able to call the `clone` instance. `ConcurrentMap` is the default for `ConcurrentMap` and `ConcurrentMap` is a no-op.
This exception is already logged in the constructor.
This should be `The ` PciIo`
I think you can use `webelem.Group.inputs` here.
Isn't it better to do this in an else block?
we need to make this package private and not just mock
this is wrong, 100 is 1000 and 100 is 1000
Why is the name of the sort needed here, and in the constructor below?
Why is this changed? I don't see it being used anywhere.
Shouldn't this be an if statement?
I think this is not right. It should be in intercept-build, right?
This is a bit of a hack, I'd be inclined to remove this. If we don't need a separate function, then it's a bit confusing to call `EnablePipedResponse` and `EnablePipedResponse` in the `EnablePipedResponse`. This is the only place where we call this function.
Can we just use `self.has_invalid()` here?
I'm not sure this is the right fix. The flushcount already contains the max max max of the max max, so we don't have to flush it again, so we can just flush the max max of the max max. Is this intentional?
Please revert the changes to NullRepositoryTest() and assert the correct thing to do here.
shouldn't this be handled internally?
Is it safe to remove the `wlr_output` prefix?
I don't think we need this anymore. It will allow us to use `Mapping.IsMapping()`
This is a bit weird, why do we need to change the state?
I think we should check if `cgroups` is not present and only if subs is present.
How about using a `core_opentelemetry.io/api/core` package?
The `limit` tag should be removed here as well.
`Tag. Groups Tagging API` -> `Tag.Originging API`
I don't think this is the right place to put this.
I think we should remove the empty line here
Is this needed?
In the past, `err` is not an `err` so `err` is a string. `err` is an `::` so I would say that you can just use `assert(t, err)` to make sure it doesn't change the string and you can use `t.Errorf`
should be lower cased
I'm not sure this is the right fix. The problem is that `summary` is not in the `mapat` and it should always be `summary`, so it should be `summary`. I'm not sure what the problem is, but it is also fine for now.
This should probably be a `Set`
Shouldn't we also check if the prefix exists?
Is there a reason why this is a `bool`?
Why return here?
This is a bit weird. I think we should just add some sort of `next` field to `_lastDomChild` and then just call `_lastDomChildSibling` if we can.
Why is that removed?
This is a bit odd - can we use the name here? `CreateSourceCounter` is used to pass in the name to the `CreateCounter` and the `CreateSourceCounter` method.
@daniel-becker should this be nullable and pushing to nullptr?
I don't think we should be calling this `t_p_PublisherPair` anywhere else.
I'm not sure this needs to be added here.
`String.format()` is not supported in IE.
I'm not sure if we need this change. The `ParentChildrenSyncTargetHelper` is already being used in `ParentChildren`
@alalazo: Is it possible to have `self.available_slots = sys.maxsize` in the `capacity` field? I don't think this will work.
I think this is the only change that will be needed in this test.
This is a bit of a hack. I would have expected it to fail in the first place.
I think you can just remove this line, since it's not needed
This is the only place where we have a `switch` statement.
why start with retry?
Should this test be renamed to `runBpfUnitTest`?
@agramfort do you know why we didn't do this?
nit: remove newline
I don't think we need this anymore.
Why not just use the existing one?
This is the only change that affects TF codegen, but I don't think this is right. I don't think we need the change here.
Is this a bug? If so, should we add it to the config?
why do we need to set it?
I think this might be a little bit overkill, but it might be better to move the `ReadPasswordTwice` call up to the `ReadPasswordTwice` that is called from `ReadPasswordTwice` and then call `ReadPasswordTwice` on that class.
Why is this change necessary ?
@deads2k I'm not sure if there's a better way to do this, but I think it's worth making a new commit that does the trick. I'm not sure if it's possible.
This is a breaking change. The `GraphType` is a `DateTime` not an `Name`.
should be ` @var \Doctrine\ORM\EntityManagerInterface`
This is not the fix, the feature is already in the `getPos` function.
I think it's better to move this to the line where the `.format` check is.
Can we make the default public and define this as `public const int MaxAllowedMaxFrameSize = MaxAllowedMaxFrameSize;`? It's not clear to me why we need the default.
I don't think this TODO is needed, it's probably OK
`metrics` was declared within the method and goes out of scope at the end of the method, so nothing else can modify it.
Shouldn't this be done by the other `SetSetExporter` method?
This is a change in behavior. We should consider putting a default rule in `Gas` and adding a default value for this value.
`nameof(span)` is not valid.
Shouldn't this be `if (!dcontext->go_native)`, or is this actually `if (dcontext->go_native)`?
Shouldn't this be `connect(this, &ConfigPanelDialog::accepted)`?
I think we need to make this a private field.
I think we can get rid of this line now
This should be in `app/services`.
This seems to be missing the `function command displays`
This should be `stpb` not `mod`
Do these parameters need to be public?
We need to remove the whole process.
Can we do this in `ctx.Repo.Repository.EnablePulls` instead?
I think this should be `projectproject.get("status", "Flow")`
`flash.now` is a string, so `flash.now` should be a string
This should also have the `[ConditionalThe]` attribute on the parent.
This test is failing on arm64, which is not the case. It is testing the latest stable release. It is not related to the issue, but it should be fixed by the time this PR is merged, the tests are failing.
Won't this break compatibility with the previous `getStack()` method?
I think we can remove theIificance of `updateOrderStatus` if we're not going to do anything about this check. `updateNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum` is clear enough.
Why do we need `Errno::ECONNREFUSED` here?
I'm not sure if this project is a good idea, but I think it is better to have the `project_cache_throttle_percentage` and then have it be `project_cache_throttle_percentage`.
Shouldn't be `ListPowerSelectorEntries(request *ListSelectorEntriesRequest)`?
I think we should add `go fmt.go` as a UX dependency. The `init` package should be used for the `Ksql-bit` package.
Why do we need this one?
Please remove the `assign` section for consistency with the rest of the file
I think you can just do `t.timestamps` here
Shouldn't the default be `true` here? It is not used in Windows Sysprep.
I'm not sure this is the best name. It's not the best test, but the user can use the `is_10` function.
It's not clear why the \DateTimeInterface is necessary here.
I don't think we should be using this constant anywhere. Can we use it?
I'm not sure if this is the right approach. It should be `s.Txn.Src() == 0`?
I think this can be `padding:0`?
why not just use the randomState.nextBoolean() ?
I'm not sure this is correct, but if it's not an error, then the `!= NULL`, it will be `!= NULL`
Can you use the `-2` helper here?
I think we should keep `wtimeout` and `wTimeoutMS`.
This function doesn't use lambda, so you can remove it.
Could you change `const` to `Trace` in this line? The `const` here is a little bit confusing. I'd suggest to call this `AppendNOM` or `AppendNOM` or something.
It seems like this lock is only ever called for appenders, so we should probably be careful here.
Is this a typo?
Style nit: This is a bit odd. Can you please fix the `res` argument to use the first argument?
what's the reason to change this?
Should this be called `TaskExEx`?
I think the `xwayland` variable should be `strdup`
`crypto/rand` is not used in this PR. Can you remove it from here and in the other places in this PR?
This should be `logxi`
Maybe `getUNFF()` should be renamed to `getUNFF()` or something? I don't think it would be a good place to do this.
the formatting of the file is wrong here
I don't think we should be changing the default here. The config setting is not going to be the one we want, so we should just make sure we don't break anything.
I think this should be `allowOptionalMappings`. It's not clear why this is a property and not a property of the dictionary.
`dry_value` is a bit confusing, can we use `layer_value` here too?
Why not keep the `Export()` method as a local variable?
You should pass `tcpServer` here as well. If it is not needed, it will be `registerNodeAPI`.
This is a bug fix. It should be `if ($articleId !== null) {`
this should be `this.map.values(this,arguments)` instead of `this.map.values(this,arguments)`
I think it is better to use the `.update()` method here instead of the `.update()` method.
I think this can be removed.
How does this work?
This is a pretty big change, please revert
I think we should use `Foo` here. The purpose of this method is to return `Foo` and then the `negLL` should be the `elihood`.
I would suggest to replace repr with `token`.
This should be `finally`
Why is this change needed? I think it's already in the rest of the codebase.
Nit: Use constants in header
This should be `SetAnnotations(annotations map[string]string) CertificateRequestModifier`
This is not right. When I try to remove the `IdentifierScheme` from the builder I will merge and fix this.
why not use 'break' here?
nit: this should be `outputPaths`
I'm not sure if we need to do anything about this, but if we do, then we should check `if key !~ /id/`
This is a PEP8 violation.
This should probably be done in another PR
Please don't make a difference between the two files, they can be just the same. Also, the `mCharsets` is already defined in the `dodo` block. Also, the `require \"preloads` should be used in a single `do` method.
I don't think we should do this, we should have a separate `layout` for the `Create` method.
I think we should be more specific here. We should only be passing false if it is not set. Also, I think it should be `if (!Isosoot()) { ... }`
Is this going to cause problems for the old models? I'm assuming we're going to have to do something with this, but if it doesn't, we could have a separate PR for this.
`CustomRouterAuth Auth` is a little bit ambiguous. Should we rename it to `ClientAuth Auth`?
If we are going to make these `IMvxFormsViewPresenter` and `REALView` we can just make these fields final?
I think this is wrong, typeof is always false
Can you please change this to `||`? It looks like the only place this code is calling `&&` when `CLASS` is passed, and it looks like it's an empty list of `||`s.
The `InitAddress` is not always `nil` here since the `InitAddress` will never be `nil` when the ID is indeed `InitAddress`.
Do we need to add this parameter to `onTrigger()`?
I think it would be better to set the zoom as `self.zoom.fuzzyval` and set `self._default_zoom_changed = True` here.
@Sanne : Don't we need the `IEnumerable` property for the `IEnumerable` property? I don't see it being set anywhere, but I guess it's just me to make sure we don't need to worry about the `IToSmallMoleculesChargesMode` attribute.
I'm not sure about this - this may cause trouble if `chan map[string]Result` was not `nil` or `false`, but it's not clear to me what the `chan map` is for.
this should be changed to id.
why not just `CreateConsensusModule`?
Why not make a `NewRequestFailure` method in the `beforeRequest`?
Why not just final ?
Is this change necessary?
I'm not sure if we should do anything special on the `Trim` here. If I'm not mistaken, the `Trim` is a `string`.
I'm not sure about this. This is not a required parameter, but the parameter `getResources()` is called on `tablet` and `getResources()` is a public method. I don't know if this method is called anywhere.
I would prefer to keep this info in `info`.
Does this patch apply for every patch to all versions of the server?
It's not a big deal but it seems that the `_viewDispatcher` is never null, so this is fine.
I think we can remove these now that the `name` is not null
I think we should use `list()` instead of `ptags` here. We don't want to pass the list as argument to `get_holdingpen_objects` in `build_system.py`. We should also do it in `build_system.py`, as it is used in other places in the file.
I think this can be simplified to `raise if disable` since it's not used in the code.
I'm not a fan of the use of the `org.sonar.java.common.extension.extension.extension.extension.core.config.Unit.extension.internal.util.FormCache#setseti-security` for the use of `org.sonar.java.commons.extension.extension.internal.config.Unit.extension.internal.config.Unit.extension.defaultdefaultdefault`
I think it would better to use `return undefined` here, and then you don't need the explicit `return` at the end of the function
This should be a separate PR
do you think we can make this a single line string like `super` to match the rest of the file?
This is the main code change.
I'd like to avoid the nested `sampler` here since it's the same as the `SAMPLER` method.
I'm not sure if this is a good place to do this. If we're going to do this, then maybe even make this a function and have it return `true` if it is going to be a function.
maybe we can add a nc.Repo.Config().Mpool as well?
No star imports.
Please use the `tables.lock` instead of the `IptablesLock` field.
Aren't these already in the `package.json`?
I think this was a mistake, @mmaxim ^xplorer @mmaxim
I don't think this will work. The `getDefault()` method is still called for a column that has `false` value. The check for `null` is now done in the check above, which is not the case. The check for `check` should be removed.
I would suggest to compute the account from importer instead of just the account
We should keep this element in the future if we want to keep it in place.
I don't think this is a tabindex "-1" - it's not a tabindex.
Is this correct? I think the only place this is `numpyImage` is the `TODO`
NewSubWorkflowFromFile is not a pointer, so we need to pass a pointer here.
Use `%d` for multiline lambdas.
It seems that we don't need to import `dataframe_input` anymore.
Why not use a `BlockCache()` here and below?
I think it would be better to check if `st == nil` here.
Can you remove this line?
This is the only usage of this mutation. Can we move it to a common place?
I think we should just remove the `Openog` annotation.
I'm not sure what the right thing to do is here is but this seems a bit confusing to me. If you're going to use `subscribers`, then you could just pass the `subscribers` object to `app/workers/subscribers` and use that here.
I don't think these are required, since the other files in the list are removed.
This is the fix. The `curSchemaSumary` is not null.
Why the change here?
I think this import is unused.
I think this code is repeated a few times, maybe we can move it into a helper function.
This is a bit confusing. Why do we need a separate prefix for this?
please revert this whitespace change
Can you explain why this is not a property?
Please remove the empty line here
This is not super specific. What about the super class?
can we use a more strict check?
Please add `are` here and in the other `try` block.
why not empty?
is this used somewhere?
"... need to" or "not registered"?
The propertyID property is set to the `setPropertyID` function.
I don't see where this is being used?
why the log statement change?
Rails/InverseOf: Specify an :inverse_of option.
why do we need to add this function?
Is this a typo?
this is the only line changed in this file. I'm not a big fan of changing this here.
this is not needed, right?
Why not just make this a const? This doesn't seem to make much sense.
This isn't a function, but it's a function. The function name seems to me like it's a function. Maybe `for loop`?
I think this is the only place where I'm seeing the `__DbType=Int32` is used
This is not a bug fix, since `$contend` is always defined.
remove empty line
This is a very old code. It should be a separate function, not a function.
The `c.debug` is used for debug only, so it should be `c.debug = (io.srv.logging.debug)`. The same is for line 314.
I think this should be moved to Configos.nr so that users can see it properly.
Build is now unused.
fix my own understanding, why is this import not needed?
why not use the new `visitAtom` here ?
I think this should be moved inside the `else` block.
There's a number of different things in the hash table. Should we add them to the hash table?
Why do we need this cast? `Long bitmask` is not used in this class
Is it possible to have a `nil` pointer here?
Why is this needed?
This is a bit odd, why not just have the `client.Client` be the `client.Client`?
this is the wrong place to put it in a specific file. I don't know if it's possible to just remove it.
What if there are multiple threads doing the same ref?
I think this should be `>=0`, since it will be the same number of proposal as `0`
Why did you change this?
This is needed because `format.h` is already in the `__init__.py` module, right?
I'm not sure if this should be an else block, to avoid creating a new if clause.
I would use a different variable name for this. Also, I would prefer to see a different name for port number.
Why are you doing this? It looks to me like `auto *tautparams = new TautomerCatalogParams(params);` is the same as `std::vector<std::string>`
It's better not to add the `verbose` loop here.
Is this right for a test? If so, why not just remove the entire object and remove the second condition?
i don't think we should use `Sleep` for this, since it's used in `time.Sleep`
why change this line?
`SpeedLink` and `SpeedLabel` are the only supported offset. Is there a reason you left them here?
is there any way to make this consistent with the other tags?
I'm not sure this is correct. It seems to me that the dictionary is not in the _name_ method, which is not in the _name__ method.
This should use the `alias` function instead.
`sess_manager.session_save` could save a few lines of code, so it's more clear what's going on here.
@sparrowDom Just a note that we can't get away with this, but I think we can just remove this entire if statement entirely?
should this be `generator.MAX_WINDOW`?
We don't use import net.sourceforge, as this is a net method
I don't see this used anywhere.
This method is not being used, please remove it
I think we can remove this check now, as it's not used in any of the other code.
@deads2k i don't understand this change, is it ok to change the name of this var?
Metrics/LineLength: Line is too long. [82/80]
The file has 3 header lines that have both sequence and sequence, so it should be `field | | missing | missing | missing | missing | missing | missing | missing | missing | missing | missing | missing | missing | missing | missing |
Please remove the empty line here.
@michaelkuhn This test is failing because the query parameter was removed in the tests, as it is testing the query parameter.
This variable is unused.
Do we want to use 16 here? If we do want to use 16, I'd rather use a higher range of bytes.
No need for this to be a directory, it's already a directory.
The variable `setDisplayHomeAsUpEnabled` is not used anywhere, so I removed it.
Nit: This import should go before the other imports.
Why remove this?
When `stdout` is `nil`, `append` and `false` are `nil`?
@sparrowDom Doesn't look like we have an extra param for Python 3, but it seems like we should just remove the parameter `PythonNumber` from the list.
Nit: I'd prefer if you used `IEnumerable<Config>` instead.
I'm wondering if we should just name it `attachment`?
This is not a good candidate for a `BoundReference`
I think we can remove this now, we don't want it to have it in the middle of this map.
I'm not sure if this is a good idea to have a better way to do it. I would have expected `this.elementCount()` to always be `null`.
This should be a `stamp()` function.
This is a breaking change. We don't have any changes related to your ticket, so I just changed it to use the new `google` package for this.
This should be done in a different PR.
This is a good idea. If the user has to create a new session, they will be able to create the same `meshAddress` field and they will not be able to modify it.
This is the only place where I'm seeing the problem, but I think we should just make it final.
I think it would be more readable to add this method only when needed
Is this change intended?
I think we need to keep a mock. The parameter should be added to the constructor of `container` instead of the parameter.
I think we need to use `__eq__` here, as this is only used by `__eq__`
I think it would be better to return true here.
The ` AddPeers` is a generic name, so I think we can remove it.
I think this is unused.
I think the `iptRule` can be used here.
why is this no longer needed
why did you change this?
This is not the same as the `class Partition` method.
Shouldn't this be called VolumeSnapshot or VolumeSnapshotData throughout the volume volume?
These are not used.
If we are going to be using `auto & blocks.front ().size ()`, why not just pass in the `size` param to `empty ()`.
This is a bit odd. Why do you need a different function than the other tests?
Can we put this in a separate line (line 251)?
I'm not sure if this is the best way to do this. This is a breaking change, and I don't think we need to do this. Just a note, it's not really needed.
Why was this removed?
this is the same as line 446.
I think this will break all of the other tests. We'll need a unit test for that.
Please remove these now unused parameters.
I think this is the only change that affects TF providers.
I would prefer to have this import `types.types` instead of `types.types`.
Nit: newline between newline before "=>"
`showLockActivity` was removed in this method, so we can't remove it.
I think this should just use `self.resources._asdict()` instead of `self.resources._asdict()` as the `solids` key is already present in the `dvc/cfg`.
Style/NumericPredicate: Use nested module/class definitions instead of compact style.
For readability, can we rename this to `_pv_tests`?
Maybe we should add a TODO about the fix to remove this?
Why is this not needed?
I think this is a good time to call `close()` on the session, so I'm not sure it's necessary to close it.
Nit: remove empty line
I think we can move this to `Bolt::PAL.load_puppet`.
I'm not sure if this belongs here, but it seems like we should be using `padTo` to determine if the length is a length or not.
I don't think we need a new `custom_imports` argument here, since it's used in the `config` keyword. I think we need to pass `custom_imports` to `config` and use that here.
I think you can use `<%= question[:text][0].present?`
Should we add `rel="noopener noreferrer"` to the interface, or is there a reason we can't just add `rel="noopener noreferrer"` to the interface?
Should we also add a field `is_default_enabled`?
why did you remove this include?
I think this should be a separate commit (and the same for the other pull request).
This should be `window.self.location.pathname`
You should use `ErrWorkspaceNotFound` here, not `ErrWorkspaceNotFound`, right?
I think we should remove `ShutdownAsync` here.
I'm not sure about this. It is not a good place to change this, and I don't think it is a problem, but I think it's a good idea to change it. The `unused` var is a very good idea to have to change the behavior of `llnl.util.filesystem`. I'm not sure what the right answer is here is, and it's not a concern.
`ViewSessionDto` should not be used anymore.
I think this is not needed, and it is not a valid client, and the client is already created in the client, and it's not always available.
Is this the default? false means default is false.
Why are we converting this to a global?
Why not use the new external version?
I'm not sure this is the right fix for this. The old code was to have a "AppCtl" function that was called for every other service, and not an error.
I think this could be done in the constructor, but it's not a big deal.
Please add a license header to the top of the file.
nit: this can be `final`
Maybe `__name__` is too high. Is there any way we can name it `_list()`?
Could be `const`
The changes in this file are not necessary since they are in the `map[string]* Return[1]` which is not necessary.
I'm wondering if this should be `from docker.utils import kwargs_from_env`, and if so should be fine.
I think this should be a `actions.actions()`?
"should" sounds a bit misleading, since it's a lot of side-effects, wherever we can't integrate hooks?
I'm not sure about this change. It seems like the `wait` call is not actually a `1`. I would expect that we will be able to wait for the `1` as a `Dataflow` and not wait for the `Dataflow` as a result.
It's not clear that this is the right place for this. The `H2O_VECTOR` function should only be called if the listener is actually called. I would expect that if the listener is not called, we can remove it and add the check in the `H2O_VECTOR` function. I'm not sure what this is doing, but I'm also thinking of a better way to make sure the listener is called before calling `H2O_VECTOR` on the `H2O` function.
Can we add a TODO to remove this?
Why do we need this? We are already doing this in `pkg/configurator`, and the rest of this file is not exactly related.
I think this is still not correct, because we want to keep the URL in place, but I'm not sure if we want to make sure we don't break anything in the future.
I'm not sure this was a bug. It was not working before.
should we add a check for null here as well?
I don't think we should be modifying the `@group_level` variable. The `Process` is a bit confusing. If it's just for the most common case, I think it would be fine to have a look at the code, and then use `if @group_level != @group_level`.
This is the fix, right?
This type should be `metaFields`.
Why did you change this?
@jcotela are u okay with this change?
I don't think you want this. The copyright year in the file is not necessary.
@bparees can you explain why we need `allowedOrigins` ?
I think it's better to move the check to line 446 instead of addconditions.
Should we just check that `$metadata['type']` is an empty string?
UoE isn't used anymore
This is a change in behavior, because the `exception.MustBeRethrown()` is a `throw` check which is why we have a `MustBeRethrown()` exception.
Why are these being removed?
I'm not sure why we have to change the default value here.
I'm curious why this trim is needed. It does not work for some reason?
I think `_numpy` and `_numpy` are only used in the `__init__` module so I'd prefer to keep these here (I'm fine with the rest of the PR, just a suggestion)
What is this change about?
This should be called `IsPathRootedPath`.
Why not just make it "Init" and remove the variable?
This is not needed anymore
Why do we need to check the value here?
I think we need to remove these lines as well.
Thanks for fixing this, can you change the signature of `TierPriority` to `*uint32`? Thanks!
I don't think we need to add new columns here. We only need to do this for the `grant_id` table.
I don't think this is a correct change, but I think this should be moved inside `onTrigger`
I don't think we should be using this for all ES versions, but it's probably worth to check if the environment is in the config file and not in the config file.
It's not clear to me why this is the outputs of a stack. It's the outputs of a resource.
why do we need the import here?
The default value should be `false` in this case.
can you add the `config` as well?
This is not a very good place for this. The problem is that it should be a separate function. The current code should only be written in the `namespace` method.
It would be good to say "the new version of the function used and will be removed"
why not use the `places` keyword here, as the `rule` keyword is used below?
Should be log level?
do we need the `.support` import here?
I think this should be a `torchvision.kSQLSQL. subscriber`
Shouldn't this be `defaultMode`?
I'm not sure this is the right fix.
This is not needed, right?
I think this needs to be added in `setup.py`. I think this needs to be done in `setup.py`, and it will be added to `setup.py` in `setUp`.
`Baseline = true;` is enough here.
I think this is a leftover
This is an example of how the new configuration file is generated.
This should probably be a separate PR
@michaelkuhn Do you have a reason why you didn't just change `x64` to `text`?
I'm curious about the reasoning behind the `mpl_renderer` parameter was added here to ensure that the `default` key is not set to `True`.
This should be `if` instead of `if`. It's not a blocker, and should be handled by `JETPACK__DIR`.
Do we need to make it configurable? I thought the default value for `previous-log-max-chunks` is `false`.
this was the only place I've used this.
I think we need to bump this up in the `aws/internal/internal/internal` folder as well
This is not a good place to put this code. It's not a public API.
Why is this change needed?
I'm not sure if it is the right way to do this, but I'm wondering how we should do it for now, maybe `Platform_level = { 'console' => { 'level' :notice, configured_level }`
Why not just `return date.set(to_string ());`?
I think we can skip proxy here
I don't think we need this here, as we are already using the default value for the `validates_attachment_content_type`.
This was the only usage that was used to register the Load login page.
Instead of adding a component, can we just call it something like `private const`, and then just call `private const`?
Why is this needed?
I think this should be `Assert.Equal("value", "name")`
Is this a bug fix?
Is this change related to the other changes? I think it would be good to have an explicit struct that takes an `error`, and if so let's just change it to `ApplicationError`.
It would be better for the property name to be something that is used for the `mapTo` property.
Should this be go-sqlite3, or should it go in a separate go-sqlite3?
@dvoytenko is this change ok ?
Please remove these lines.
Do we need to call `ListDeploymentConfigTemplatesResponse`?
I think we can remove this empty line here
` long long` is not needed.
why is this removed?
Does it make sense to remove the hash from the block?
Why is this using `.ffVdWParams.epsilon`?
@franciscis @deads2k I'm not sure this is the right place to put this here.
This should be a placeholder, not an action.
I would move it to the top of the class, and move it to a new file `static` in the `WebDriver`, and move the logic to the `WebDriver` class.
It is a bit confusing to use a `clef-signer-enable` property here, but I don't see a use case for this.
What's the difference between `scss` and `scss`?
I'm not sure if it is worth it to change the code to not change anything here.
Unnecessary spacing detected.
This package is in the same package as the one in `package.json`
@kroitor since you're using `redhat_fips` here, it looks like you're using `redhat_fips`. Can you confirm that this works?
I don't think you can remove this. This is a no-op if the user is not aware of the 'other than the 'other' system.
The `UserList` list should be sorted with `list`.
Could you please add a space after the colon?
I think the `toListAndThen()` method can return `false`.
I think we should use `RetrySettings.toString` instead. We don't have any unit tests for this, so we should use `RetrySettings.empty()`.
I'm not sure if we want to make this interface public - it's not just for a single file.
why is this global removed?
This is a bug, we should not be reintroducing this if block.
This seems like it would be better to use `CreateDispatcherForGRPCOutbound` instead of `DispatcherForAdvance` as the result of `_TChannelDispatcher` will be used in the future.
This should be split across multiple lines.
I don't think this is the right place for this, but I think it's better to use `str` instead of `str` for this.
@deads2k @dain could you please confirm this is the right way to do this? I think it would be better to check the user-provided data structure and pass it to `NewVisibilityTimestamp`.
This should be a different check for `self._s`, right?
Shouldn't we be calling `Flush()` in `log.Flush()` instead?
I'm wondering if we should have this in the `float` section of the complex type? I think it would be better to have this in the `complex32` type, but I don't have much better suggestions.
Style nit: str => str
This is not right. It will be very likely a bug, since the test is in `RemoveAll(dir)` and then `RemoveAll(dir)` will fail.
This is the only change that affects TF providers.
should this be a `static`?
`toMap` doesn't seem to be the best name to this interface, it is not a `HashMap`
I'm not sure we can do this. The idea is to have the `localProjectAppNames` as the value of `projectEnvironments` is to be consistent with how we do it.
We should not use the `getvg` method here.
so the txid is now empty?
What if we just change the name to `--stat`?
Can we remove this field and add an argument to `resume`?
I think the `affine_grid` and `affine_grid` imports can be removed from the function signature. The `mypy` function is only used in `main.py` and `main.py` but it is now unused.
We should also set the protocol.AttackTimeout to 0 here.
nit: this can be removed
I don't see a corresponding change in this PR. If you are going to make a change to the behavior, I'd prefer a different name for this.
Why not just `vol.wait_for`?
@smarterclayton do we need to change this to `startHeight`?
I think this should be `time.Sleep(namespace.CacheRefreshInterval + time.Second)`?
Shouldn't be in the list of `/`, right?
I'm not sure this should be here. The webmAudioCodecs.includes should be the same as the vosystemystem.
I'm not sure what the best thing to do here is, but I think we should be able to remove `Stats` altogether.
I think you need to check for the exact exact error for the `r.h` here
This seems like a wrong import.
@mfojtik why did you change this line?
I'm not sure if we need to use `topology.description` here, since we already have a `description` attribute that would be null.
This file should be removed.
@cvializ I don't know what is the purpose of this test. I don't see a point that the role role is changed in the following test.
I'm a little confused by this line - what's the difference between a CDN and a CDN? If so, what is the CDN? Does it matter that this only works if you're not doing anything else?
Why is this removed?
Layout/SpaceInLambdaLiteral: Do not use spaces between -> and ( in lambda literals.
this is a bit weird. I think the error is only when instance are unoffable when instance is not found. Maybe we should say something like: "expects error when instance is found, when instance is not found"
This should be a `Tuple` object. We should not use a `Tuple.Tuple`.
What's the difference between `action` and `curate` in the `Action`?
I'm not sure if we should keep XUnitIntegration in the middle.
I'm a bit confused by the line length here. I don't see a reason for it to be a list, but it's not a line length.
Do we need this?
I would add the `#setFlags` to the end of the method to make the change in the method body.
I think we should be returning an error instead of just returning an empty list.
I think it's better to use `trait JsonResponseTrait`, as it will be a new `trait JsonResponseTrait`
This should be a one liner, not a user.
Use && instead of and.
I don't think you need the `CopyActions` member anymore.
I think this should be `!config.XDPEnabled && ...`
These two lines can be merged as they are not needed.
I think we can remove this line, as we are already setting it in the `HTTP Outbound` package.
I'm not sure if this is the right fix.
I'm not sure if this is the correct way to do it, but I don't think it is worth it.
I think we can get this to work with a constant somewhere else
Should this be a Docker?
This line can be deleted.
What is the difference between `username` and `not username`?
This change seems unrelated.
This is an example of how the code works.
I don't think we should change the `QItemSelection` here, but it's not a requirement for `QItemSelection`.
This will fail on a shared comparison if the `spaceLock` isn't a `try_lock_shared`?
is this really necessary? `/jsx` should be `/js` and `/jsx` should be `/js`
This import should go above our own line.
Why is this change needed?
Why not do this in ByteSink interface?
Could you add `*` to this file so that `filecoin` is not in `pkg/configurator`?
this is just a test, can you fix it by removing it?
Why was this test removed? I think the previous assertion was more readable.
This is not a correct change. The value of `label_cb` is not a `cb` (i.e. `label`). So, the value of `label_cb` is `nil` and the value is `label`.
the indentation is wrong here
Why not just use the same type as the function signature here?
This is a pretty big change, but I think it would be better to make the test pass. It would be nice to have some test helpers around it.
why was this removed?
Actually, I would use a more meaningful name like `CASDefaultCstorPool InstallENVKey`.
Shouldn't be close()?
Would it be possible to write a test for this?
I think it's not a good idea to have this on the `QueryInterface` itself, but it seems that it could be a function. I would suggest to remove the `@QueryInterface` annotation from the `ConfigInterface` class and use it here.
why do you need this import?
Line is too long. [81/80]
I think this needs to be `if ( days.singletonMap(.) {string} ... }`.
I'm not sure why you removed this.
Should we remove this and the associated `working()`?
Why not just have a default of `wireguard`?
breakpoints should be a constant.
@matt-gardner, I think this should be `>= 1` instead of `>0`?
Just to confirm. Isn't this going to get lost if `signedHeader` is `nil`?
I would prefer to have the `!==` instead of `value` as it's a local variable.
I think this should be an empty `NullPointerException`
If you're using `std::string Container::getName()` instead, you can use the default value here instead.
This one also called in `StartNestedScroll`, is this expected?
I would prefer to use `inbufs[i].fill_cb)(&subreq->super, inbufs[i].len;` to make it more obvious.
I don't understand this change: what does it mean for debugging?
@adamjstewart Is this supposed to be here?
I think you can remove the trailing space here
I think it should be `!` instead of ``
This is the only change that is needed.
I would prefer a separate method for this.
Why was this changed?
why do we need this change?
This is not the correct way to go, but it is a good time to add a `long` to `int()` and then use that to get the value.
Making the code much slower is a little weird. I'm not sure why we need to change it, and I'm not sure why we wouldn't want this.
I think it would be better to check the error and the caller has the correct caller and check if the file exists.
I don't see this function used anywhere, can we delete it?
I don't see this referenced in this PR.
What if the key is present and the default is present? I think that's the best idea. The `simplify chained comparison` should be a string.
Why did this change?
Is proxy always present?
It's not clear to me why we need to addauthority here.
This is a debug statement. Should not be removed if it's not used anymore.
This is not the same thing.
How about a different name like `mark`?
Remove empty line?
Is this really the only place where we need to use the root resource?
Hmmm... I think this needs a reverse-mapping?
why is this change needed?
we can use a private method to get the log
If the `NewTestLogger` calls are already created, do you need to pass the logger here?
I'm not sure what the best way is to have the value in `hashCode` - can this not be null?
This is the bugfix.
This is not correct. If lastfmscraper is used, the user should not have a lastmscraper. You need to remove the lastfmscraper. You can just change the user_bp to not have a lastmscraper.
Can you please add a type annotation here?
powershell -> bytes
can we remove the `collection?` part?
I think we can remove this warning now that we have it in the PR.
We should only import `samplers.pseudo_sampler` if there is no `OrderSampler` in this file. This will make the import harder.
I think we should move this import to `goimports` and move the import to `go-algorand` package.
I would use `l2tp','l2f`, because that is the same as `l2tp','l2f`.
@matt-gardner How do you think of this?
This looks like a debug statement.
I think you can just remove this line
Please add a similar test for the `format` directive, and add a TODO to remove this
Did this not work before? If the lock is not `true` then it should not be `true`
Can you also update the `volume` permission to include this in the `sidebar_messages` field?
@dvoytenko is this change necessary?
`AbstractAnyTypeDeclaration` could be null.
I think we should not need this file.
Do we need to keep the old error handling? Or does it break the API?
I don't think you need the `if` here anymore
Why not just `#ifdef`?
This namespace is only used in one place, so it should be moved into `aws_namespace`
This check should not be needed if the `SharedConfig` is `""`
@deads2k @bvaradar : we can't use a `TooDevice` here, but I think it would be better to use the `is` here.
Shouldn't the type be an empty list here?
I'm not sure this is the right fix. We should be using `self.get_object()` instead of `None` here. If the type is None, the `Value` will return `None`.
I think this is the right fix.
it is not clear to me why we need to specify a path here
This is not a good change. It's a good idea for users to understand what is being handled.
Could you please rename `QDesktopServices` to `QDesktopServices`?
I think we need to keep the `quit` word in the input output. I think it's a bit confusing that the `Validator` message could be used by the `quit` message.
It's not clear to me why `MemoryLimit` is not an instance of `Memory` in this case.
I'm curious, why do you need to `Apply` the `inSync`?
Is this really needed? It seems like it would be a breaking change.
I think we should be consistent and use the word "aware"
`+ "Please specify a directory with --genesis-file"`.
I'm not sure if this is a good idea. It seems like it should be a function.
Is this no longer necessary?
This is the fix. We should be able to use the sampling timeout timeout with a different timeout timeout. It should be fine for now.
The message should be "format inventoryfile boltdir configfile".
This exception is not thrown in this case.
I think we need to change `Throwable` to `Throwable`.
I think it would be better if we didn't have to call `DynamicMap` here, and in the call site it will be `List[str]` in `List[Tuple[str, bool]`.
I think the `componentAINER` is not needed here, it can be removed
I think this should be a warning. The code is not very clear and I'd expect it to be an error, but it's a bit confusing.
I think we need to change the `a` to `createQuery`
This is a good example of why I was seeing the `request` parameter in `request`. I don't see a reason to do this for the `request` property.
This file is already included in the Kokkos_Core.hpp file, so I removed it here and below.
Is this the correct queue for the error code? The same for the `cb_mq_create` below.
@bvaradar is it possible that a non-zero value would be needed?
This is a breaking change. It's not a public API, and I'd prefer to be consistent.
`mode` is not needed here.
I'm not sure this needs to be checked in the first place. The first part of the line should be removed. Also, the first part of the `xstate` should be moved up to the next line.
This should be in a separate PR, right?
This line is the same as the line above. We should just use `getDifficulty()` instead, to avoid the difficulty.
I think this should be `(1, 1)` instead of `(1, 4, 1)` (or `(1, 2)`)
This is not a valid user, it should not be a valid query. It's not the latest list of supported values.
This should be removed.
This is the only change required for RDB.
I think this is a wrong change.
Why is this converted to `2014`?
I think we can remove this field from the struct too.
Can we keep this in the middle?
I don't think we need to do this, we can just use `type` instead of `int` here.
I think this class should be renamed to `Stop()`
I think you need to remove this line
I don't think this belongs in this class. Just import junit directly.
I think we should be able to get rid of this test, since it's only used once.
Why do we want to keep the property private and set in the constructor?
@joshblum I think this is the right fix. The `JetStream` field is used for both `StoreDir` and `Assembly`. It should be in the same directory.
I think we should be able to remove the `error.` in `http`
I don't think we should change the signature of `baseFeePerGas` since the argument is not null. It should be the same as `new` but it should be fine.
This is a breaking change, right?
Is this needed ?
Why not just remove ` LongLivedMarshalByRefObject`, since this is a test-level file?
`1.2.1`? 2.1.1
I think we can use the same context as the container.getCommand(), which is what we want here.
This is not a good idea. It is used to set the connection connection, but the connection connection, and the connection connection is still a special one.
I think you can remove the show
Use `base_data_param` instead of `param.data_param()`.
If we're going to add more tx tx to the end of this channel, we should also add a TODO to add this to the end of the transaction.
This is a little confusing, because we are returning the `return` value, and then we don't need to do anything with it. Could you just remove the `return` and remove the next line?
Why are we changing the ID to id?
The git_checkout function takes a parameter as an argument to git checkout and throws an exception if it has no git checkout object, but it doesn't seem to be used anywhere.
This change seems unnecessary?
This is the only way I see the `extension_condition` is used. I don't think this is necessary, because the `RTP` is used to be used.
`order rand:SEED` is not used anywhere.
I'm not sure if it is a good idea to do this. If we're going to have to do this we should probably just do `is_client = false`.
This should not be necessary.
This import is unused.
why not `module.exports = { server }`?
this was the only change in the PR.
I'm not familiar with this, but what if we put an signed signed on the page? Or does it work with the page?
@mattpap @karascher I'm not sure if this is a good idea. I would have just used this. If I'm reading this right, I'd like to have some sort of "slask" in the "official" of the "peerAddr swarm.Address" of the name of the function. I would have thought this could be a good one.
nit: update the description to mention that it's a YT of a single line.
This will be a breaking change, since it's not a `namedtuple`, right?
I'm not sure if this is correct. The octest package is not going to work correctly for octest and octest. We should just remove it.
I'm not sure this is the right place for this, but I think it is a good place to put it. I'd rather it be called `config.default_plan_until_answered` or `Input.00` or something. The reason I'm thinking about this is to allow for a `HTTP` to have a `HTTP` model to be able to see the `HTTP` model as a `HTTP_answered` so that they can't be called by other configurations.
I don't think this is the right place to put this. The re-raising of this function is a very generic name. I would say `addUnrefToFinalResResOp` and not a block ID.
I would move this to the base class. It's used in the base class, and it's used in `_build_base64`.
Please use `__getitem__` instead of `data`
you need to remove the `/` here as it's not used
Do we want to keep this as it was before? Or was it just for testing?
this is a little weird, why return the error?
Can you remove this dict from the tests?
Should we also set the `ChainID` to `nil` if `chainID` is null?
Shouldn't we check for the stack here?
I don't think we want to use this for every platform, so we should remove this line, and add `ruamel.yaml` to `0.6.1` in the future.
nit: you can merge both lines above as `Preconditions.checkArgument(..., openFileCost)` will return the given argument
I don't think this will work. It is not the case anymore.
I think the `:user` flag is already listed in the column
This is the correct way to do this. This was the correct way to determine if the configuration passed to the `InputSource`, but I don't know if there is a good reason to do that.
This is an example of how it works, but I'm not sure why this is here.
Shouldn't this stay as `taint_flow_graph` ?
`java.lang.collection.Stream` should be removed.
I'm not sure about having to remember to set the `count(*)` to `0`, but this is a change in behavior for a bug.
This is now done by TTemplateParamClass.
I think we can remove the `defaults` here.
We could use a more meaningful name here.
This is a bit of a hack, but I'm not really sure about it.
Question: Why are we changing this info to debug?
This is not correct. `to.deep.equal` returns a boolean, so you need to use the `to.deep.equal` to check the value. `get` returns `null` if `value` is an `empty` value, which is a string.
I am not sure if `Balance` is the right place to put this `Type` map. The `Type originalIcebergType` should be `ColumnDescriptor`, and if it is `type`. I'm not sure if `originalIcebergType` should be `volatile` or `Type originalIcebergType`?
Why is this being removed?
This should not be MongooseError anymore
Please add `@Nullable`
I think we can remove this method and use `InternalRecordWrapper` to wrap the `record` in the `InternalRecordWrapper`
Can we use the `create` method here? We have `user.id` already.
this else block is not necessary. You can remove the if condition and use the else.
This is a bit of an unrelated change, but I'm not sure how to test it.
I think we should just remove the `validateParams` parameter and use the `getAssemblyOptions` parameter here. The only reason we don't want to validate the params is that it should be a `validateParams`.
Is the idea here to use the regexp that contains the correct network, or is that what we want?
can we make this a `const` block?
Why not using a string here?
I don't think we need to set a default value, since `end` is always true.
why is this changed?
I'm not sure if we should check here if `DeviceName` is a boolean, since `DeviceName` is a boolean.
How about mentioning that it is only used in the lock?
this is a change in behavior, we should just change the value of `1` to `1`.
I don't think this change should be here, but I don't think we need this change.
Trailing whitespace detected.
Would it be possible to make these `HashBagDictionary` as `null` instead of `initializer`?
I would put this as a `enum` statement in the `__init__` method.
This is a good time to remove from './remove' from './remove'. I am not sure if that was intentional.
I think this is not necessary. It is not used anywhere.
I'm surprised you don't need the atomic check. I'd rather not do it in a separate PR though.
I think this needs to be done in a different PR, but it's not really needed in the commit message.
This should be `fetchMock`
Why not useExpectData here instead?
This should be `\r\n` not `\r\n`
Does this test have any impact on other tests?
I think it's better to do it in the `log.info` and then we don't need it in the logs.
can we remove these?
I'm not sure if we should do it in the .NET repo. I think this is a bit of a hack, but I think we should just make this a bit more explicit. `var FEATURE_NAME = "reports"` and `FEATURE_NAME = "reports"`
This is the only place where the cgroup is used.
isn't the error already handled by the above error?
We can't use the PPC version of this plugin.
In the spirit of `Warnf`, do we want to remove the todo?
I would use a more specific location here
I don't think we need this. When we add a new `AbstractBeanFlowFile`, we should use `getBoundFlowFile(int projectId, intInterface, intInterface, intInterface)` to get the `AbstractBeanFlowFile`
I think it is a good idea to add this property in dynamicconfig as a new method, but not as simple as that.
Wondering if it makes sense to have this in the base class instead?
can you add a space after the comma?
This method is not used anymore.
Why is the constant no longer needed here?
CachedThreadPool is not a generic executor so this should be a separate executor.
If the total_factor can only contain reduction=none, it should raise if the reduction is None. If the reduction is None, it should raise if reduction== 'mean' and it should raise if reduction is None.
I think this padding should be in the base class instead, since the actual `stride` is the padding.
why removing this ? I guess it should be removed from the database as well
I'm not sure this is the right way to do this, but it seems to be a good change to make this change. I'm just curious about the change in the code to make sure this works.
I don't think this is the right approach. The `LogBuildResult` should be removed here, right?
can this be moved to `if (end i = 0 && std::move(other.txt[i]) && std::move(other.txt[i])`?
I'm guessing this was the only usage of this PR?
I think we can remove this method now since we are now passing ` dask` to the base class
I don't think this is correct. The function name is not clear. I would say "has a test for it in the environment".
How about using `.enable` here instead?
I think this should be `waitForThumbnailsBeforeUpload: false`, not `sBeforeUpload`.
Let's not change the signature. Instead, we should just define a variable for USERS and use it.
I think the queue queue anymore is still in the queue?
Why is this change necessary?
I would use a more meaningful name for this method.
Can we rename this to `PhaseSelector`? It's a bit more clear what the state is for.
Why is it called `tbarrella`?
This should be `input`
I think we should remove this import now.
This could be a one liner.
This is a bit weird, why do we need to return hybridMountpoint?
What was the reason for changing this?
I don't understand this change. Is this intended?
I think we need to do something about it as a separate commit. But I think we should make this more explicit. Also I think this is the right place to do it, and I'm not sure it's worth adding a `campaignSource` field to this struct. I think it is worth it.
Should we use the same constant for all calls to the same constant?
Can this live outside of the file be deleted?
I'm not totally sure if this is the best place to put this change. If I'm wrong, it should be an error instead of an error.
Should we remove the `disposed` argument from this object? If it's no longer a string, we can remove it completely. If we don't need it, I can just remove it.
I think we can remove `def to_clipboard` now.
Since we're not using the `user` class here I'd probably make the code a bit more descriptive and move the logic to `sign_in`.
I think we should use `fmt.Sprintf` here.
I'm not sure if this will cause a regression, but if the user is on a different thread, then it will not get cleaned up
This method can be deleted now.
GetExliesIndex, ctype basics.CreatableType (same for other GetExliesType)
Is this correct? It looks like `len == 0` is a length.
I don't know if this is the best way to do it, but I'm not sure if there is any way that the user could have the user?
Line is too long. [92/80]
I don't think this is right, the code is not right.
It is not clear to me why the original author is still in the original ?
I'm not sure this is a good change. It's not related to this pr, but we should probably make this `static const` for now.
This is a breaking change. It should be in separate commit
It looks like this is the first check that the options match.
I don't think we should be using `nodeToCIDRs` here, because we don't want to be using `set.Set`.
I think this is the wrong place for this. The code below is always called `vendored`.
`format` is not a proper name, it's not clear what is used for. `set_format` is a proper name, it's a bit confusing. Maybe `format_format_link`?
@nmittler - Is this a breaking change? I don't see it in the PR.
This is not needed, right? It's only used once
nit: remove trailing white space
The `backend` is a special case for `custom_options` I think.
I think this should be a `ListDeploymentChains`
Not sure why this is changing, but I think it's the best place to make the change.
Do we need to make this configurable? Can't we just default it to the default?
Why is this being removed?
Wouldn't it be better if we used `FATAL`?
Do we need this extra param now?
This is not the right place to put this code. I think it is better to move `ScheduledJobType` into `getCharsets`
I don't see this used anywhere, can you explain it?
It looks that this should be `tempBasal.query(preparedQuery2)`.
I think we can just use `checksum` here.
I'm not sure if we want to use the `provisioningDelayCondition` property.
Lint/AmbiguousRegexpLiteral: Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the / if it should be a division.
I don't think `nilkeys` should be a nil. It's a little bit of a hack to have a nil check here. If we do this here, I think we should do it in a way that we can do something like: `if a.Kind == nil {`
Should this be `T` rather than `SetAsync`?
The new `db` tag seems to be unused, right?
Unnecessary empty lines.
Why is this a global now?
Could we test this for a while?
why is this change needed?
This method was unused.
I don't think this is the right way to go
I don't think this file is used anymore
The `s/` here should be `and` not `and` since the `agree` package will always have the `json:"`.
I think we can remove this if not needed. The default value will be `false` in case the server is not `true`, but the client will not be set.
These files were causing the flake8 tests to fail.
This looks like it can be removed
I don't think this line is needed, since `getId()` is already in the `Game` class.
I don't think this is right, it should be a pointer.
this echo should be done in echo_as_ echo?
I'd like to see a more generic test for this, but it's probably worth testing for the new assertions.
Should we use `defer` here?
I'm not sure this is the right way to do this, but I don't think it's worth it to support `-1.05` at the moment.
It looks like we can't change the type of the `ChannelIndex` type.
I think you can use `PersistBlockLevelInfo` here instead of `PersistBlockLevelInfo`.
This isn't used anywhere.
I think it's better to move the method to the `isView` method, to keep the logic consistent with `isView` method.
I think this should be a class constant, not a class attribute.
You should add a default value to the `item` var.
I don't see why we're using `.videos` here?
Why do we need to filter the `receiveError` here?
This needs to be `grpc`.
I think we could use `cancel := cancel := cancel[:]` here instead.
This change seems unnecessary, since you're using `strings.Contains()` in the next line.
@michaelkuhn Do you remember why we need this flag? It's not a user error and we are using it in the SDK
Is the first character intentional? The length of the 2 is too large.
This is the only place where we use a `TInstrumentation`. The `TypeFactory` is a `AddDiagnosticSourceInstrumentation` and we don't have to worry about the type of the class.
Rails/Present: Use the new Ruby 1.9 hash syntax.
"must be modified" sounds a bit too broad.
Can we make this error a constant? We could also just check if the node is nil. It would be nice if we could also make the error message more explicit.
I think this should be a migration since it's a step further and should be a step further down
Is this still needed?
I think it would be better to make the method deprecated.
I think this is a good idea. We should move it to the `utils` package.
Do we have tests that cover all of these cases? If so, why is the true/false necessary?
Why did you remove the variable name?
Why do we need ZoneDateTime.UTC ?
What about the `[a-z]` folder instead of the `requirement` one?
Why is this removed?
Is this file meant to be here?
`AWSEmailProvider` is not used in this class, it can be removed.
not sure if we should do that
@adamjstewart Is there a way to define this constant? If not, please remove it. If you need it, please add it.
You can use `if Isretcode == 0` here.
I don't know why you did it this way. Is it because you are not actually creating the `depends_on` method in the `depends_on` method?
I think this should be a condition.Value instead of a max?
shouldn't we remove the LOG statement?
Shouldn't this be a `RecordMeasurement`?
This is not a valid fix.
nit: remove trailing white space
Trailing whitespace detected.
This should be `script.javascript` instead of `text/javascript`
Why not just use `continue` directly here, and remove `close()` entirely? It seems like it would be better to keep the same code in `close()` (and the other `error` calls) and the `continue` call below.
I think this line is not needed
this was just to avoid the "attr" action, not the "attr".
I'm not sure we want to log in this context here. I don't think we should log in `RemoteLayer`
Is there a specific reason for this change?
this is not the right place for this patch but the h2o code does not have the value value value
Why not do the same for the `xml` above?
I'm not sure what's going on here. If we're using this for every NS, we're using it for every every process?
Is it worth moving it to a shared const?
This is not a bit of an unfortunate but I'm not sure what `bitWrite` does here (and the one below). I think it would be more consistent.
I think you should be able to use `typeName` here, as it will always be a string.
I think you need to disable this change, since you can't just disable it in a PR
I think this is a bit too short. Can't it just say `config`?
I don't think we should be modifying this line, but I'm not sure it's the right fix here. We should change it to: - `options: { ... }` - `options: { ... }` - `meta: { ... }` - `meta: { ... }` (the same for `data` above).
maybe "revision" is better?
Nit: `a internal`, `s` and `a`.
This is not a part of your PR but it should be removed.
Is `conftest.py` the best way?
Why the additional `!` needed here and below?
We should probably make this `0x0296` for a higher level, like `0x39`
shouldnt this stay `LogicalType`
Why are we doing this? It seems to me the `payment_method` will be a `case` if we don't specify a `case`?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think it would be nice to add a docblock at this stage, to make it more readable.
This is not a good change, we need to check the `timerNoUserLatency` here.
I'm not sure this is a good idea, but it seems to me this is not an error. It might be better to have it be `if __dict__ == 'attr'` and have it return a `attr` object, and have it do the same thing. But I guess it's okay to do that.
Line too long (90 > 80 characters)
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
@becker33 I think this is the right place for this. I think it should be fine. But I don't know how to deal with the operator operator, so I'm not sure what the best thing to do is
Import formatting. Keep two blank lines after all the last line and one before the declaration.
This is a breaking change. It should be a separate pull request.
Why is this necessary? AccessListItem will not be null.
I think we can remove the `errorString` here. I think we can just remove the `func (e.errorString)`.
I don't think we need the count in this case, since it's not just count.
Why do we need this?
This is the `super(SGEJobTask, self).__init__(__init__(*args))` method.
Does this need to be table name?
I don't think we should do this. The process data will always be there.
GroupIDType should be plural.
I'm not sure if we should keep this contract in a separate contract. The contract is still in the final contract. The contract is 1.0 release so I'd rather see a separate contract for nothing and can be 1.0
Please use the enum directly instead of "selectCastSink"
nit: new line
I think this is a leftover?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
"512s" is not a very good name. It should be "512s" instead of "512s".
Why is this required? I don't see any new changes related to this file.
The `.Output()` check is redundant here, right?
The original code was correct, and `label >= 0` is the default for `""` in this case. The code below was not right, but it was not doing anything.
I think we should use the lower level `request.Status` constant here instead of the lower level `request.Status` as we discussed in the other place.
What if `topics` is blank and `trail_map` are blank?
Why do we need to set the option for users who are using it for selector? If it's a selector, it should be the same as `get` for "Absolute"
Does this work if you use `bundle` instead of `bundle`?
Does it make sense to use `c.Name` here, since that is the actual type of the resource?
This should be `if kv.WriteBatch(batchForBlock)` instead.
It would be better to use `new CompletableFuture<>()` here
I'm not sure we want this. If we do want it to be a valid value then we should make it `_x( 'Analytics', 'google-site-kit', )`, and then we can use `_x( 'test' )`.
@tnozicka this is the fix.
I'm not sure if this change makes sense, since the `UserControl` is in the `metrics`.
I think this listener should be moved to the other files
@daniel-beck Is this going to work? I think you want to do this in the `time.Now()` call, instead of in the `time.Unix()` call.
Is this supposed to be `[0]`? Does it mean `gobblin-cr` will be `None`?
Does it make sense to add a TODO here? I think it would be more useful to have the `config` package be used for the `config` and `config`.
I think we can just use the `constant` field instead of the `URI` field.
Why is this imported before the import statement?
Hmm, this is a bit odd, but I guess the `@` is just an expectation that `receipt` is an object and not a dict?
This is not a good idea, as it is not a property. It's a string, not a string.
I think we can remove this call to AddInternal() as well. We should just remove the null check and just do the call to AddInternal(). It will be easy to understand why we do the check.
I would suggest to put the "catch" in a constant. It's not a blocker for this PR.
Can you use `TYPE.of(ProductImageField)` instead?
Can we make this a function of the test case so that we can verify that the container is destroyed?
I think this import is unused.
I think the `k8sSDWithNamespaces` function should be moved into `BearerTokenFile`?
Why not fix this?
This one doesn't seem to be used
This is a change from a different commit.
This should be split across multiple lines.
I think the original idea was to have the `package` prefix, but that is not a part of your package and that's why I suggested it. The reasoning is that the source code is not set in the build process. We could also make this package private and have the `package` package private, but it doesn't seem to be used anywhere. We can add the property to `build-system.js` as well.
The icon is already stored in the `getIcon` method.
This should be `golang.org/x/net/context`
This was the main bug that was fixed. The old version was not working as intended.
I think we need a migration here, @rhymes
Is there a reason this line is moved up here?
`LOG_IF` is used in a few places, so this should be indented.
Is this default expected?
I think we should just remove this file. We don't want to disable it by default, right?
I don't think this is necessary, we should just use the new `ctaLink` instead.
This is the same as `T` and `Current` can be nullable
Can you remove the spaces?
This is not the right place to do this. I think we should do some sort of resource: `common.Include("Error: %v", err)`
Why not use `assert` with `W1234`?
I think we should keep this as it is and only keep the `localstoreCloser` variable.
@mjkkirschner @jridgewell Is this the right place to put this?
this is a change in behaviour
I think it would be better if you put this into the `FnFn` class. That would be a bit more readable.
This is a bit confusing, as it is in the above block. I would have thought the whole thing is to have an `else if` statement on the `if` block.
Shouldn't this be still catching Exception?
Is this correct, or is it not possible for us to get the left to be set?
This class contains methods and classes that aren't used.
I think this is not the right fix since hex is used to specify the x/yrovers. I think the `s` is not necessary, because it will be used by the user.
` writeXML()` is deprecated, please remove it.
This is not a good idea, but it seems like it would be better to move this to the `cbor` module, and then pass in the `cbor.RegisterCborType()` function.
This seems like a bug fix. We should just make this method private. It's a separate change and not related to this PR.
Should this be `err error && `Cancelling connection initiation`?
I think we should keep the old name here as I can tell from the name it is not confusing. I think it would be more readable if we used `cpp` instead of `cpp`. But if you think it is better to be more specific, then we can change the name of the option (and maybe even `cpp` or something).
I think you should remove `pausedPredicates`
I think it would be cleaner to just use the new `if self.vkCode in self.isCosts(self)` here.
Is this used?
Do we still need these 2 variables?
This was the only place I'm asking.
I would use `addClass(String, StringComparison)` here.
did you mean to keep these changes?
This is a bit weird, why do we have to change the name?
Why is `firstTimeEmpySubject` removed?
Should this be `transport`?
For consistency, should this raise an error? I think that the error should be raised by the caller, not the connection to the user. We can't raise an exception, just the message.
What do you think about calling this `_expands_user`? It would be more consistent with the naming. The user could be different from the one in `_init_structure`.
If you're going to do `typing.isHidden` here, then it's not a big deal, but it's probably not a big deal.
I'm not sure why this isn't static, is there any way to avoid that?
I'm not a big fan of this name, and it looks like we're not using the `KeyStoreApplication` class. Could we rename the field to `KeyStoreApplication`?
Can you remove the `console.log` calls in the test?
`is_log_op` is a string, so this will not work. `is_log_op` is a string, and `is_log_op` is a string, so it is a string. So I think we should do a `log_op` here.
Shouldn't we be returning `false` for malformed?
I'm not sure if this is the right place to put this code. If it is to add a `logIdToSend` property to the log message it will try to get the logs and then log the logs. If it is, we can remove the `logIdToSend_` property.
I think this is fine, but I would prefer to move the validation logic into a `cdLog` function. It's not actually used and should be used in other places. I would also suggest to rename the method to `transferBy`. It's a bit more clear.
what's the point of this change?
`when a duplicate formatter exists.` -> `when the same output target, do not change change`
This function doesn't belong to this PR.
I would suggest a static import for `mFirstContentContent`
This is not the same as `getPaths()` right? I don't think this method is used anywhere.
this tests didn't fail on windows
Can we use a more meaningful name here?
This seems like a good change to me.
The name `from kinto.core.utils import json` seems too ad-hoc. I would suggest `from json import json` as the second line, so it's more clear that the name is clearer.
I think this should be moved up to the `spec` package
Why is this being removed?
This is not right. I would just replace all the `check_coinbase` calls with `eth_coinbase` and then use `check_coinbase` to check if it's not available.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [81/80]
shouldn't flash be at the beginning?
This is the only contract. It's not an error. It should be an error if the contract is closed or not.
@martinwicke @mitchellhenke would you mind adding some test cases here?
@jvillalobos I don't know if this is a way to have a Cassandra host. I don't know if it's the right way to go.
I don't think we need this import. It is used in this file.
Line is too long. [85/80]
Is this a bug? We should probably be able to use a `bytes` value.
I think this should be `label=comp.split('.')[-1]`
If you're going to do this, you should probably remove the `ImmutableMap` parameter and use `ImmutableMap.getClass().getSimpleName()` instead of `ImmutableMap` as the class name.
Why the whitespace changes? It's not a problem, but it should be fixed.
We should add the namespace id here to the provider.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I think it's better to keep the `--db` flag in `aws/pfs/` and put it in the `aws_containers` module instead of having it here
I think it would be more readable if this check was moved to `if (options.get("type") && options.containsKey("hive") && options.containsKey("uri", " + options.containsKey("uri") {`
I think it would be better to check that the value is a `None`. That way the value will be zero.
Why is this necessary? I think the `setCertificateRequestCA` is already called in this test, so it should be called in the `beforeCertificateRequestCA` method.
I think it would be cleaner to just call `excessDomChildren` here and then do `if (isDone(null) {` instead of the nullability check.
This should be done using the `cbs[fn]` function.
Just curious: how is this even being used?
Nit: "Error open..." (it is a bit ambiguous and it's more readable to mention that the path has the directory for the directory)
I think you're missing a `d.SourceSnapshot == ""` check here.
Please use `isEntry` instead of `isEntry`
@jcotela I think this needs to move down to `local_ip`? It's not used and will be removed in a future version.
This should be `bool`, no need for the return value
I think it's a good time to remove this, but I'm not sure if this class is used anywhere else.
I think we should use the constant here. The rest of the code that uses the default values are not needed.
I think this can be just `except 3D descriptors`.
I think we can remove the prefix `lbann/data_store/data_store` as well.
This is a breaking change. It is not a `ValueTask` but `ValueTask` is a `ValueTask`.
I don <msg> I think we need to do something similar to the `CLIImage` below.
This should probably be a `TableMetadata.newTableMetadata`
This test was failing because of the changes made in the tests. This was removed in the test.
I would move this line after the `if (isDebugEnabled()) {` statement, and remove the debug statement altogether.
This is a breaking change. I think it's still useful to be able to run this code at a higher level.
I think it's better to move the goodContentType check into the `bad` package, it's a good idea to move the logic to the top.
This is a breaking change, and is not really fixing a bug, since `quit` is a new instance of `throw`. I think it is the same, but it's not a problem for the user's `throws command` and is not a problem.
is this a breaking change? if not I am missing something
Should the flux_respond go in the console?
I think you forgot to move this import to the top of the file, it is not used.
This is a bit confusing. We need to add a go context to the resource's constructor, but that is a bit confusing. I think it's better to use a property that defaults to a list, rather than a `newSchedule`.
What's the rationale for this? I'm not sure what the best way to fix this is, if the project was null, then `project.project != null` would be enough.
Why was the include changed? I don't see a reason for this change.
Would it be better to put this `break` in the first place?
What about the manifest? I think we don't have to do this.
I don't think this is the right way to do it. The `Viewer` property has a `default` property, which I would think is a better name. It's a bit confusing. I think we should have a more descriptive name for the variable name.
The name `PercpuUsageInUsermode` is confusing. Maybe `cpuUsageInUsermode`?
Just a question, do we need to check that the recID is not None in the case of rec ID?
Can you use `self._commands['xxx']['block']`? It looks like this is used for the `_commands` below.
How does this work if the span was empty?
What is the purpose of this change?
Let's not use `Time` in tests, because we don't have to use `Time` in the tests.
I think you mean `check_inactive_votes`?
`getMicroserviceInstance` is not used anywhere. Please remove it.
This is not needed anymore, right?
why is it not possible to use a constant here?
why is 5 here?
Why we need `Resource` and `Stateful` here?
`internal` fields should be protected, since they're protected.
This seems to have no effect, right?
I think we should use `transferred` here instead of transferred.
Why did you change this?
I would suggest to set the CT at the end of the XX_NUM_SIMD_S to 1.0.
I think you should also change the doc string to be consistent with the rest of the file
I think it is better to make this `Optional` since it will be never null.
What is the rationale for -1?
I would use Backend\BackendAuth instead of Backend\BackendAuth.
Since we're in the `Dynamic::email_block_type` block, we should also send the error message to the user when the attribute is not configured.
Please add a `const` to the `# type: ignore`.
Do we need to make it `static`?
Please, use the constant for all the time
Shouldn't we add the `sanitize-tchannel` flag to the root `yarpc.InjectClients` flag?
I think this should be `1` and not `1`, right? Also, the reason for the compiler is that the compiler has to be able to be able to use a single `int` instead of `int` for `1`.
Do we need this? Could it be `Round.DbRound.DbRound`, since we're not setting it anywhere?
nit: can we use `assert.isNullOrEmpty(c)`, `six.getCluster()`?
Shouldn't we use `base64` here?
This should be done using `getBoolean` to prevent the pre-commit leak. The `prefs` can be used in the `onboarding` method.
Please add the new parameter to the end of the line, so that we don't have to add this extra line.
I think it would be better to return error here, rather than silently ignoring the error.
I think we should use `cmd.Logger.ResourceType` here, as it's a static method.
Why do we need to copy here?
We should add a `proto` field in the builder.
Why is this needed?
This is the only usage of this change.
why is this changed?
I don't think this is the right fix. I think if manifest.key?('application') is a required field, it will always be true and we will get an error.
Why not using the variable $scope instead?
Please add an assertion that the value is `null` if `getFromBlock().isLatest()` is true.
Is this needed at all?
This should use the new `ier1_team` wrapper.
this test case is not needed. TestRuleactions() will be called from multiple threads
I don't think this is the correct spelling. I think it should be "has to be the min passcode length"
This is a breaking change, and is not required.
Why not using the `//tributor`?
Why is this `\n` needed? `TCP` is always `None`.
We don't use wildcard imports in this class, please use explicit imports.
Same here, use `std::chrono::findByView` to get the first line.
This is probably a good thing I would expect. If you want to move the file_exists check into the file, you can just do `.inc.read()` and check if it is not.
I'm not sure this is the correct spec. It's not the right place to put this here. The `.spec.action` file is used by `build-system/action`.
This is the only place where I see this.
Should this be added to the docs?
"Cannot the underlying algorithm that is performing the Region and and used the same if it is specified"
can you make this a one liner error and make the timeout a bit more general for the storage storage?
This file can be removed.
The path is not empty, is that right?
I think we should keep the older version too
This should be `execututOrier` (the first one is a bit of an unordered operation, but I think it's a better idea to have a check for write instead)
can you please add a `TODO` here?
I think this is a bit confusing to read as the name is a bit misleading.
I don't think this should be part of the pull request.
should we just return 0 here instead?
can we make it a `Type` type so we don't have to specify it for other types of types?
Is this necessary?
Should we rename `cluster` to `cache-cluster`?
I'm not 100% sure what the number of proposal is, but I don't see any more options here. I suggest to change the docstring to: `if self.with_semantic and 'bbox' in self.semantic_fusion and \`
I think this is not needed anymore.
Should this log message be logged at the same time as the one in the log?
I think this is still useful. I think we can remove the ignore now.
Why not just use `this.options.startAfter`?
This is not needed anymore.
This is not the same as the `if` statement, but it's more efficient to check for `if ('lightbox', 'layout')` and then check for `! empty()`
nit: I would rename this to something like `findAndNull` and then use that method to avoid confusion.
I think this should be `if not (2, 6):`
We should rename this test to `generators_validate_generators` and `generators_validate_generators` to make this more clear.
Why not just `and_op`?
I'm not sure if we should keep both `bob` and `bob_userid` in this PR. If we do that, I'd suggest to remove the prefix and using `self.prefixed_userid` to be consistent with the rest of the PR.
It seems that this function is only used in the test, can it be moved inside the test? (And there are a couple other test cases that need it)
This is a bit weird. I'd be in favor of having a separate `logf` package.
It seems that we're using this in the derived class. Is it worth adding a new class?
I'm not sure this is correct. It is a user-facing setting, but I think it is the best way to do it. It seems like this should be a different setting.
I don't see where NET451 is assigned to the same thing, is this intentional?
Do we need to add it to the `GracePeriodBlocks`?
I think you should move this to `find_instance_group_by_url()`
In this case, you can't change the type of `|` to `|` in the message.
This `FormatIsMultiplane` is now dead code, not hard-coded.
`Cached.core` is a relative import. Please use `__constructors__` instead
This is the only change that affects TF providers.
I'm not sure if the selectedItem was a good idea here. The selectedItem can't be a valid selectedItem.
I don't see a reason to change these. The EBS doc is not used anywhere.
`ParameterTypeNames` is not needed here.
This is a bit confusing. What is the plan to have a default `SpecProvider` for?
nit: `afterAction` is not necessary. `afterAction` should only be used in the method signature. (It's a bit odd to me, but I think it's a good idea to add this to the method name, since it's a subclass of the method, so we can remove it later.)
I think this should be a memset() call instead.
I don't think we need this.
The `.to match(/^\w+\./` is now an integer, which is not what is expected here.
I'm not sure if we should do the cache here?
The copy method should be moved to the `copy` method.
This is not the same as the file system.
This is the one line that fixes #6026.
Missing space after `//`
Is it possible to have a single list of objects for the same type of objects? I'm not sure if it would be a good idea to have one list per list of objects.
@zjffdu I'm not sure if this is the correct place to put this config.
I'd prefer the extra parentheses here, as it's more readable.
I don't think we should add a new method to the "real" template.
Why do you need to keep the `MainThread`?
`if opt.is_a?` is enough
Why is this needed? I would expect that we would need to add the `className` to the `register` method.
@jridgewell I've been using `python_requires` in the package. I think this is the correct version.
Unit is not used anywhere.
why are these added?
I think you can remove this file now that it's unused.
The table should be `cart_item_id`.
This is not the default for DEFAULT_GITHUB_ENDPOINT, but it should be set to DEFAULT_GITHUB_ENDPOINT instead.
@deads2k i don't think we want this here.
I think we should just pass in the error message to the `copy` method and use that instead of passing in the error message.
I think you can get rid of this line. The former is not used anymore.
If we're not going to be building anycount, then why do we need this here?
Remove unnecessary parentheses
Was the removal of the `request` out of the `TYPE_CHECKING` or am I missing something?
This is a bit of a hack, but it seems to me that the `else` is not necessary to return a `_timeout` value. Is that intentional?
why is this change necessary?
This was the only place I was thinking of a more correct test where we had the paths set to `True` in the `paths`
`Assert.nottranslate()` should be safe
why did you add the default here?
Does this still need `config.resolve_install`?
This will need to free the `kds`.
Not sure this is needed.
I don't think we need to set this to 1.15.
Can we use `$options['lazy']` here, instead of `$options['lazy']`?
This seems like it should be in the namespace.
Layout/TrailingWhitespace: Trailing whitespace detected.
s/` _`s/` _`s/` _`s/`
Should we also change the error message to include the actual error message?
I'm not sure this is the right place for this. The test is failing because it's failing. The `mp_impl` is `nullptr` if `p->mp_impl` is `nullptr` but `d->mp_impl` isn't `nullptr`
This file should be removed.
This should be changed to consumerIntf, otherwise it will be destroyed.
Can we put these magic strings into constants? For example, `without(on_input, 'MU', 'MU')` or `without(on_input, 'MU', 'MU')`
I'm not sure if this is needed. `optimizer_config` is a `versions` not a `versions`.
Should this be `time.Second`?
remove empty line
Why not use `getTrait`?
I don't think we should be using `zhangelinux` here, as we do for `Mypy` and `Mypy`, but it's not really the case for any `TracerBuilder`...
why not `from enum import Enum`?
I'm not sure if the ENCFAIL is still necessary here.
This is a very old API. I think it should be fine for now.
Shouldn't we also remove the `@author` annotation?
This is not a Reload. It is used by R client code. The R client code is a private method. It can be removed.
And I don't think this is the correct solution. We have the actual `cleanup` in the `create` method.
I think you're not using this anywhere.
This file has no test coverage, right?
I think this should be a pointer, since it's the number of values.
I think this is the right place to remove the validation here.
Please add a license header.
This should not be required if we are using the default value. It is a reasonable default in order to set the value to `null`.
I'm not sure this one is the right place for this, since it's a `auto end` variable. The `auto` variable is used for `MOL_SPTR_VECT` so I don't think it's necessary to make the `auto end` variable public. So, I think `auto end` should be used in this PR.
Should be `Action*>(ptr.release())` instead of `ptr.release()`
Why not just return?
you need to also add it to the `filter` method
I think we should be able to remove this test and just pass in a mocked data to `load()` instead. It will be easier to understand the issue when we do that.
The viewTop is already in the `< 0` view.
If you're using `List<String>`, you should not need to use `ImmutableList` here. Also, please use `List<String>`, which is more common in `topic`, you can remove the `default` and `List<String>`, which can be accessed by the user's `topic`.
`List<String> path` is not the same as `org.apache.dubbo.common.utils.directory.realreal.realreal.STSTUtils#get`
You could also just use `this.enabledTypes` here and below.
SimplifiedBasicBlock => gradplifiedBasicBlock?
This is a bit of an overkill. Can you please clarify?
Can you please rename `delegatedelegate_BatchBatchStreamScan` to something more descriptive? `delegateToBatchBatchStreamScan` -> `delegate_MicroBatchStreamScan` -> `delegate_WithMetadataColumns()`
This is the fix.
I think it would be better to use a `after` method instead of `fixture`.
@openshift/library-go I think this should be `lib/openshift/config.go`
What's the difference between this and the two?
I think this is the wrong place to write a test. The content is always a string. The content should be the same as `.writeBytes()`.
This is a breaking change, but I don't see a reason why it's not just for a single query.
This import is unused now.
This is the only place where we have a timeout on a different cluster, but not the one that is actually used. I don't think we should be changing the default.
I think we can just remove the method.
I would prefer a different error message for this test.
I don't think this is the right place for this, but it's probably better to just check if `unformatted` is true and if `dartfmt` is false then `unformatted` will be true and we don't need to.
This file should be removed.
This needs to be added to the docstring for the new versions.
I think we can remove `EscapeAccountFile` from the `cloud-store.path` file.
I think this should be link_to 'Sign in', as well as the link_to 'Sign in'
why remove the switch?
I'm wondering whether this interface is needed for the other modules.
I'm not sure this is the right place to put this. If the `setup.IsTrace` file is used, we should probably make this `setup.IsTrace` or similar. I think that is the right place to do this. If the `setup.IsTrace` file is used, it will be removed in a follow-up.
I think this is missing the `:class`
I think this is a little hard to follow. What about `upload_index` or `upload_index`?
Why was this change made?
Why is it necessary to wait for the wait for the wait, or is it just wait for wait for wait?
This is not needed.
Why not just use `BuggyProposalLowestOutput`?
this should not be here, this is already a list
This is not a bug fix, the `s` should be created with the push.
I think we should just remove the prefix prefix, since we have the prefix in the database.
I think we should keep the old logic and remove this code.
I'm not sure this is the best way to go, but if we really care about the `isposable` field, we should also remove it from `HttpWebResponse` and `HttpWebResponse` field.
This change will break all the code, I think it's ok.
I think this is the wrong place for this, since it's not used by the server
This is the only place where we want to add the `PoolPool` to the `inviteEvent` function.
Do you think you could get the condition on the `getRingInfo()` call? This would avoid the extra check and the next `getRingInfo()` call.
why is this changed?
Do we have a migration to remove this block?
I think this is not the right way around. Maybe `pubSub` should be an `Blocklistener`?
I think 100 is the right choice.
Is this still necessary?
suggest to use something like: `else if inputPattern[0] <= inputPattern[i]?` or something like that
Can you rename `testMatch` to `jest.config`?
The issue is that the transport is not closed, we should not do that. We should do that in the .Net file.
These are the only changes I'm not seeing in the codebase, are they all possible to use in this PR or are there any issues with the rest of these?
This error is never returned, but it's the only place where we are returning it.
I think this should also use `Schema schema` and `Schema schema.schema()` to ensure that the variant doesn't have a single column.
This is a bit of a hack, I'd prefer to not have the `Module` prefix in the `Module` package.
If you're going to add a `--all` option here, then I'd rather not put this option here as a global var, e.g. `--all-api` or `--redelivered` or `--build-api` or something. I think that would be more appropriate for the user to see what is more.
Why do you use the `wistia_embed` here?
Why is this needed? When we use `asset_type` we already know that we're using it for a while.
NotFixTopicCopyBugOption() is a very specific thing, but the other code is very confusing. How do you feel about renaming it to something like "NotFixTopicCopyBugOption"?
I'm not a huge fan of adding the short_count here. I would prefer to have a single short_count, not to be able to be a big deal, but I don't have a better suggestion either way.
I don't think this is needed. `include H2O::ACL\n` is a `h2o_mruby_eval`
(style) line over 80 characters
nit: `Bytes` -> `Bytes`
Do you need to change this to `RSpec.configuration` or can we just call this one directly, so it's clear what the spec is doing and it seems to be a bit more clear what it does?
This should be a constant.
We should probably use a `playback` for this.
I would say that we should keep this as a `1000` (and the `max_edge_returned_per_sha` function).
This return statement is redundant because it's already added above
The `goimports` flag is `LoadRaw` but it's `goimports` for the `goimports` flag. I think we should rename `goimports` to `goimports` to be more clear.
shouldn't this be `localization`?
FMI: Why is the `literalSet` not needed?
This is not needed. You should not use an if statement if you want.
Is this the right place to do this? I'm pretty sure we can't do this. If we do this, we can remove `h.describeCMObject` from the function.
this should be final.
This is the only place where we use `self._state.prune(task, self._config)` in the first place. This is because we don't have to do anything about the second time, and the second time is not the second time.
Why are we importing this package? I don't think it's necessary to import it, just like the others.
This is a bit confusing. `primary` is a bit ambiguous, it is not a `List` and the `Logger`. I would expect that we're not going to use the `Object` here.
I think we should return null here.
I don't think we should do this. This will set the value to the `Func<Address>` in the `blockStoreStore` and `Func` when the `Func` is not defined. We can do it in the `if` block by checking `self.setValidatorsForblock(prevBlockNumber)`
This is a breaking change.
I think we should move these to the `subscribe-with-google/bulk-edit.js` file to be in the `<amp-story-story-story-story>` namespace, and move the code into the `<amp-story-story-story>` namespace.
I think this can be removed now since we are using the span in the database.
Can this be added to the `config` package?
why are you importing jinja2?
This should be `EXITING_DR()` instead of `EXITING_DR()`
I don't think you want this anymore.
I'm wondering if we should just make this configurable? Or do we want to make it configurable?
I think we can remove this as it's no longer needed
@jridgewell Is it possible that this is the default behavior?
why are we changing the order?
Please include standard lib lib in files
This seems to be the only change that affects the change in the `TaskJob` that should be removed.
It seems like this should be `sys_get_meminfo`?
nit: "schema" events supported" sounds like a typo.
Nit: `SequenceNumberForNewDataFiles`
I think we can remove the `url_name` argument from the `1..60` since that makes it sound like a length for a param (which is the default).
I don't think you need the `>` here.
Extra empty line detected at body beginning.
`@var string` is not needed.
let's be a const
Maybe we should change this to "record"?
This is not needed, the `downloadProfilePhoto` will be executed by the client.
`array` is a `int` (`array`).
(style) trailing whitespace
This is a bit confusing. Why do you have to do this?
The original code did not have this change
Did you mean to add this?
I don't think this is a good idea, because it's a function that returns a string. It might make sense to make it a function in `signerFlag`, and call it `signerFlag` in that case
Remove the empty line here and below?
I don't see this change in this PR. If the initial initial state changes to the bug, it should be in `parser::numeric` instead.
@josegar74 I think this is the wrong place to put this, since it's not being used by the `Simple.py` file.
why not just `CACHE_ENABLED`?
Why are these changes needed?
I don't think this is the correct way to go. This defaults to `ZK_HOST`, so it should be `ZK_HOST`, not `ZK_HOST`.
I don't think it makes sense to add a default value for the default `NULL` in the `config` table. I think that would be more consistent with other `config` table and `application_default_*` table.
Is the idea here that the previous logic was to return the "countRows" value, and then the logic that was wrong? If so, we could just use the default value.
strict is not really needed.
This is the only real change. I don't think we need this.
For consistency, I think it would make sense to use `posix='win' not in sys.platform` here.
Why is the `slack` special-case `config.Channel` removed?
I think this should be `Controlr@`?
I'm not sure about this. The main issue is that `bearing` is not actually used in this function.
I think we can get rid of this line and use `pytest.py::FULL_VERSION` here.
What is this default for?
Why do we have to do this?
This is not needed.
`List<T>` is not a valid list here, it is not a `List`. Could you please add it to the list?
`javaCompile.getToolChain().getVersion()` is not a boolean, so this is a bug.
I think `findIdByHash` is a more appropriate name. `Hash` is a name. `findIdByHash` should be `setUserInterface` or something.
Is it necessary to make this the same as the previous version?
Do we have a convention for this? I'm pretty sure we're not testing this at all, and we don't want this here.
I think you can just delete the `writeConcernMax()` function and do `batch.execute(err, result)` directly.
why not just add in `init_query`
This should be `pytest.skip()` and not `pytest.mark.skipif(['TEST_TARGET', ...)`
This would be a BC break. We should not be using the edit methods in the code base.
I don't understand the log level. It's not a big deal. It's a bit odd that it's not a log level, but a little strange to see the log level.
There are a bunch of these in `libkb/api/client/Rails/api.sh` that can be used in `libkb/api.sh`. I think this should be fine.
This is the main change of this PR. The pendingCountLocked() method is called before the pool is initialized.
Why not just pass the error?
Why is this change needed? The `loadReactAppOnceIfReady` call below is not needed anymore.
Can you please update to 2.3.1?
this isn't a valid deprecation cycle, it's a good idea to test the `should switch` to an `Error` if the `iframe` doesn't exist in the spec
Why do we need this?
I think we should check for both `frontActivity` and `numpy.finish()` if `isHybrid` is true
I think this is the only change needed to make the context private, but I think we should be able to remove it.
I think this would be more readable if we used `continue` for the `argNameVal` (which is true for `argNameVal`).
I don't think we need the regex[$i + 1] here. It's an array of strings, not a string value.
Style/UnneededCondition: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Should this be `variableOptions = variableOptions || {};` ?
I'm not sure if this is the right place for this. It should be able to handle the error case, but I'm not sure it is the best place to do it. If you want to check it for any non-null values, it should return a non-null value.
RuntimeIOException is not used anymore
This seems to be a very fragile assertion.
I think this can just be `handleForAdditionalLiveTvOptions`
why this change? this is a debug statement
This should be `UIAHandler.isUIAAvailable`?
`replace-partitions` is already in a `BaseReplacePartitions` so it should be in the same line. Also, should we replace the `System.Net.CLIpartitions` with a flag that does the same thing?
Why is this change needed in this PR?
What is the purpose of removing this?
@deads2k i'm not sure about this... but it seems like this should be a different bug.
This is not a key, but it's not used
should we verify that the value is null before it throws?
This should be static, not a part of the PR.
can we call this `autosave`?
The `BalanceRecord` here was a bug. The `AccountData` should only be used in the `BalanceRecord`, which is not the case here.
This is a breaking change. This is not related to this patch, and it is a change in behavior.
why 1? what does it mean?
What do you think about moving this to a new line before the `let`?
Can we use the existing test case here instead of the existing test case?
I don't see a reason why you changed from `nowarn` to `log` - is it because of the error?
Shouldn't we use `Max`?
Is there a reason to use `topBlock.IsInd` instead of the swagger?
Is there a way to test this (and possibly test the mock() calls?
I think this should be `final`?
can you use `data-` here?
I think it would be good to have a test for this, since we're using a mocked `crypto` in the `switch` statement.
@mjkkirschner I think we should remove this.
Please remove this.
We should probably have a unit test for this, e.g. `OnFlushFlush`
Hmm, this shouldn't be necessary, since `QIODevice` is a private function.
Use `if '+` instead of `if`
Can we add `__init__` to `find_i18n` and `__init__` to check this? I think we can do that in other places.
Please use `db.execSQL("ALTER TABLE")`
I think we should just have a `hive.openshift.io/clusterName` here, and not have it in the `api` namespace.
We should probably update these as well.
Is there a reason for this to be an integer? I don't see it being an integer, and it's a string.
Why do we need this function now?
retention is a good idea. It's a little bit of overloading the coming back from a previous PR.
This is the only place where the option is used, is it?
tpfp_func is already part of a mAP, so you don't need to add it here
I think this is the correct return value
I'm wondering if it would be good to have a way to do this in a `conda.core/v1.go` to avoid the need for the new interface.
should we also check for null feedID here?
Can't this just be `allowIncompatibleChanges()`?
I think this should be a constant.
Is this the right struct?
Line is too long. [81/80]
Is it worth testing that this test is not in the unit tests?
Should be const.
`find` can be `null` here, because `find` can be `null`.
I think it is not necessary to include this in the `fresh` method, but that is what we want.
The name is misleading. The feature should be `go`
Should we do the same for `ManagerManager.todo`? I think it is a better place to put this.
could you please add a check that the return value is 0 here?
This seems like it should be grouped with the above imports.
I would move this function to before `pkg/apis/1` since it's used only in `pkg/apis/1` and not in `build_one_lines`.
why do we need to set it to zero? we should only set it when user sets their offset
This should be `nvcc` not ` requirementscc`
Does this work with `Spec.String()`?
I don't think this is the right fix. We should do it at the very least, because it is not a task, but it's actually a task that is actually a task.
What if the user specifies a new action? Should we be doing the same for all cases?
I'd like to avoid import statements, but to keep the import order in a few more places.
@mfojtik @becker33 this was the issue that I found. This was the original issue.
Is this needed?
I'm not sure this is the best solution. The problem is that we have a view for a different view, and the user is not able to see the same user in the view. I'm also trying to test the "shows/_show" page, which is not a valid way to test this, so I would expect the view to be the same as the "shows/_show" page, and not the "show".
I think we can remove this? I'm not sure if it's a good idea to do it for other platforms.
I think this is the wrong place for this
This should be `x$flux_sec_incdir`
This is a bit confusing, as we are not using stats in production yet.
I'm not sure about this change. When `keyValue` is a `string` value, we can always return `string` if `ann` is a `string`. I don't think that we need to do this.
It looks like we don't use `recording_start` here. Should we be doing the same for all `item.recording_start` ?
What's the purpose of this change?
I think you can get rid of this import now.
This is the only change that is needed.
do we still need the `assertDictEqual` method?
I'm not sure this will work, but if the "input" pool is in the "input" pool, the "input" pool is not the same as the "input" pool. So if you change the "input" pool, you need to change the "input" pool to the new one.
This class is not used.
Can you please use the version in the jenkins file?
We should not need to set metricsConfiguration.isPushEnabled() to true if the user doesn't have a specific reason.
nit: this is the same as `self.backbone_end_level` (and the other one below)
I'm not sure this is correct. It is not a good idea to be using the same code.
I think you can just do `w.IsNewResource(json)` instead of the else.
I'm not sure if this is a right change since the peer type is private and we don't need to be setting it to the peer type.
I don't understand this change. If we have a new version of the `canonical`, then the `getProp` will return 0 if the current version is not enabled, so this change will break the API.
can you call this `loss_normalizer_momentum` to be consistent with other users?
This is the only place where the code is actually used. I'm not sure how to fix this in the code, but I think it would be good to make the code more readable. I think this code is used for all cases, so it would be better if we could just use the `fds_write` function in `_WIN32` that would be used for `FIONBIO` (which would be a good idea to support `zfs.h` for `zfs.h`.
I think this is not a leftover
I think it is not clear to me why this is a mean. Maybe `tail` or `tail`?
Shouldn't this be done in a different PR, since this is now handled by the `switch` statement?
This should be `if Collections.unmodifiableList()`, right?
Is this not necessary anymore?
I would call this `_revert_html`
Why are you using a version here instead of an empty string?
This should be a function `errors.Wrapf`, right?
Is this the right way to fix this? This is the `#if defined` block below, which was previously defined.
Do we need to check `network-audit-results.json` here?
This was just my bad.
nit: please remove the extra spaces
`ast.py` contains a `.color` parameter.
What is the purpose of this change? It doesn't seem to be used?
@matt-gardner How about moving these lines into the `if google.cloud.forseti.services.inventory` file?
I think we can drop this `.html_safe` part and drop the `_` altogether.
Do not use spaces between calls to the method name and the code.
is this the only place we need it?
is there a reason we don't want to do this?
I think the new version is the preferred version
I'm not sure why this change is necessary.
Is this change intentional? I'm not sure what the original version was, but I'm surprised it isn't.
Is this needed for all storage inputs?
This looks like a typo.
Please remove the extra space between the two lines.
I think we should be setting the lock to a negative value here, so that we can get a little more complicated and we don't need to lock it every time.
This is a bit confusing to me. I would say that if the `<a>` is a `<b>` it should be `<b>` instead.
This is a bit of a nightmare, but I think this could be done in a different PR, since it would be a bit more readable if we had two separate test cases. Maybe `spring.TestCaseHandler` and then `spring.TestCaseHandler`?
I don't think this is the best place for this.
This is the only usage of this package. It is used in other packages and is used in this package.
I think this is a leftover from the original version.
why did we change this?
This file is unused.
This test is not really testing what the best thing to do is, because it's a test. It's probably not worth it. I'm not sure how the test case is, but if you are using the test, I can't find the feature tests in the test, so I don't see a test for this. I'm not sure how the test works.
I think it's better if you move this to `Identifier` and `Integer` methods, to be consistent with the `Integer` methods.
This one should be(p)
why remove the name?
@Sanne Were these changes meant to be part of this PR?
This is not a valid fix.
Instead of having a comma after the last keyword, can you use `label`?
I think it's better to use `desktop->xcursor_theme` instead of `roots_xcursor_theme` here. The reason is that `desktop->xcursor_theme` is a `-1`.
I think this should be `Bloom.Filter`
`key` is not a list, so it is `key == 0` and `key` is a list, it is a `keys[0]`.
This is the only place I'm seeing is that if there is a desktop window, the desktop window will be set. I'm not sure what to do with this.
Can't we just use `VCPULimit.Status` and `Memory`?
Why 10 seconds?
Can we make this `//` please? It's not a big deal, but I think it's better to be explicit and revert.
This is a breaking change.
I don't think we need this anymore since it's only being used in `@author`.
I think we can just use `GenericAlias` instead of `GenericAlias`
This is the fix, right? I'm afraid this may not be the case. I'm not sure what the problem is when we start to start to start with multiple template strings. I'm just not sure what the best way to do this is, but I'm not sure what the problem is.
We can remove this `reset_reporter` call since it's already in the reset class.
This will need to be in a `before_action` if the `writeLongScalar` is called.
You can remove this
Can we change this to something like `reason = sErr.ErrStatus.Details.Causes[0].Message`? I think it would be a good idea to update the log message in the message.
I think this should be a constant. The `-p` option should be consistent.
This is a bit confusing, I think the code is better. It's better to use the function in `continue` and then use the function in the `continue` method.
Indentation should be 2 spaces here and in the other strings.
This should be `if tab.pin is not None:`
Do you know what the original link we're trying to do here?
Is this a change in behavior? I don't think we should change it.
I think you can remove this now
@danrot this is a breaking change for the future.
why is this needed?
I think we can remove this test now that the span is removed.
I think it is not possible for this to be a collection, because it's not a `expect` anymore?
This needs to be split across multiple lines.
This was a bad bug in the product spec and was a bug in the product spec. The `Bolt::Logger` was removed because it was deprecated in the product but now it was not being used.
`reverse()` should be enough, right?
@bryevdv, but I think this should be `takesHeapSnapshot`.
why change the variable name?
I think this is still wrong, because we want to make sure that we don't accidentally send comparison to the `gcc` url.
I'm not sure if it's good idea to have a method to convert to boolean.
I'm not a big fan of adding this to the list of `getOperatorType()` if it's not a list.
I don't think we want to use this for the target API, it's not the only change in this PR. We should just move this file to the `generatelassfish` package.
change the name too?
I'm not sure if this is the right place for this.
We should remove this line
I'm not sure why we add this here?
@mjkkirschner @mjkkirschner @mitchellhenke would you consider adding an extra `err` parameter to the interface and adding an extra parameter to the interface? I don't think it matters much but it might be worth adding another method to the interface
It seems that the `gmtime_r()` is not used anywhere.
I'm not sure if we want to add this to all of our other options. If we do this then we should add it back to `DockerfilePath` and `Dockerfile` to `DockerfilePath` and then check if it exists.
I don't think this should be added to this pull request.
this is just to be a pain, we can just drop it
`return None` is redundant.
Is this used?
Why do we need to use the constant here?
Why not `Region` ?
If you set `connected` to `None`, you can remove this line.
Should be None by default for `None` or None by default.
I think you can just use `getNonStreamingMethods()`
I think this will break all of the tests, since we don't have the same pattern for version numbers.
This doesn't seem to be correct. `Dims zeros(shape.size(), 0, shape);` is the default value. Is that correct?
this should be `profile_examples.to_i` right?
Should we make the conditional conditional on `_x` ?
This class should not be used any more, right?
I think we should be able to remove this line and set the condition in line 373, since it's not used in the base class.
This is a bit confusing, why is the name `destinationPodName` not just "destination" and is a `ConfigPodPodPodPodName`?
It's not necessary to import it from here?
This is a breaking change. It's probably not an issue, but I think it's better to keep it as it is.
Why is this being added here?
This will be a bit more expensive if we don't use `kdir` in this case.
What is the purpose of this change? `TraceContext` can be `null` when the current user doesn't have `RootSpan` attribute.
I think this is not needed. The class is `java.util.Date` which should be used for the java.io.FileOutputStream
Why is this needed?
Why not use `dumpIdLength`?
"This field field from being present."."?
I don't think this is needed.
`QUIC_GO_LOG_LEVEL` is not a great name. We can use the constant `field_field` to avoid this kind of mistake.
`*virtualDiscDesc.CapacityAllocationUnits` -> `allocationUnits = "byteCapacity"`. I'm not sure if that's a good idea, but it seems that the function name is a bit misleading.
I think we should be able to use `data` instead of `data['fingerprint']`. It is a little bit confusing with the naming conventions.
In what situation will `.put(1, 3)` be `string.mkString(String)`?
This is not related to this PR, but it seems like this is a breaking change
I think this is a good change to make the `if` statement simpler. I would also suggest `if len(fs.Config.MaxTransfer == 0 && (accounting.Stats(fs.Config.MaxTransfer) {`
I think we should use `*` instead of `access` as we already have a `*` in place
Do we need to test this?
I think the preferred solution is to use `go-go` when the go dependency is `go`. It is not important to go to the top of the file.
Please delete this line. We'll need to add the changes to the `SELECT` below.
These two lines can be merged
This is a bit odd, it looks like a reusable class.
I'm not sure we should have this as an explicit dependency in `setup_py_tests`
This is a breaking change. It should be `Tags.env` instead.
This is an API break.
You can just do `output_callback = [] ifoutput_host_output + 1 else` to avoid the else branching.
Does `node.attributes` get installed on node? If so, why?
This field is not used anywhere, right?
I'm not seeing how we can test the case where this is the case that `s.pss/{topic}/ws` is `True`?
you should use a context here
I think this is a bug fix.
I'm not sure if it is possible to do `totoPostRequest(req)`. If it is null, then `totoPostRequest(req)` will return null.
This should be added only if the value is `null`
I would keep this as a constant. It's not used anywhere else in this file.
Use 2 (not 1) spaces for indentation.
Why is this needed?
Is this still needed? Previously the `BATCH` was added to `Celgrind.h`.
I'm a bit confused about this one, can you explain why it's needed ?
Buffer.isBuffer(payload) is 20 bytes long. Is this a typo?
I don't think we need to do this, `padding` does not require `p` and `p` to be the same as `p`.
This is not needed anymore.
I think we can move the `git-daemon-export-ok` logic out of `git-daemon` so we don't have to update it manually.
nit: `use.` -> `type`
This doesn't need to be a long.
does this need to be public?
I don't understand the value of this `relayets` -- is this the same for the relay?
Why is this change needed?
What about the `TODO` section?
Nit: newline between the last stdlib imports
I think we should be using `Simple_hash_or_MINOR` here.
Can we call it something like `expect(formatter_output)` instead?
What's the reason for this change?
This test is now done inOnchainConfig, not here.
Why is the attribute no longer in the attributes?
This isn't correct. We are going to introduce a new `axe` in `init()` and `init()` methods, so I think this is fine.
I don't think this file is used anywhere?
why not just move the whole function to the `f` function?
Maybe we should add a description of what this `$createRecord` means.
It looks like this class is no longer used, please remove it.
MainMenuItem is already an array
Is this change intentional? I'm not sure if we want to change it to make sure the `UMUMI_L1_1` is set to 1. I'm not sure how to make this change if we have more than one `Private`-like.
I think we can remove the `if` here.
I'm curious: what's the difference between `args` and `default`?
It's not clear to me why this is necessary, but it seems to me that this code was only written in one place. Is it worth adding a note that `config.go` can be called in a future version of the code? I think that `config.go` would be a good place for this.
I don't see where this is used
Can we do this in a separate PR, but why not just `return cdpTargets <msg> \/cdp/ || cdpTargets.indexOf(...)`?
This change is not related to this PR. Why is it necessary?
Why not using the same prefix for both?
Do we need to test that the nil column matches?
I would change this to something like `apply` or `apply` to make it clear this is a public method
I would prefer that we have the `Tab` as the default, instead of `''` as we do in this file.
Not sure we want to do this. We only want to do this in a user that has been released.
This will not be needed. `setUnsubscribed` is already set in the `if (condition > 0)` statement.
I'm a little confused by this. Why do you need a different name for this one? I don't think it should be used anywhere.
I think we should be more specific here and say that we don't want this in the future.
This is the only change that affects the pool change, right?
Why do we need to set `failed` here?
is this still needed?
I think this is not the right place to define this, since this field is used by the media. In this case, the media is still not in the media. I don't see a need to specify the media here.
should we add `[Integer]` to the doc string? Or is there a reason for it?
This is the same as `injectionManager` below.
I don't think this needs to be a public constant.
you can just pass `self.tab_url(idx).tab_url(idx)` to `fields['current_url']`.
This import is no longer used.
can you use a different name?
I don't think this is the right place to put this code. The first condition should be `[0]rune(acc.Config.StatsFileNameLength]` and the second check for `""`
would `freeze` work here?
`javaslang.control` is the same as the `Tree` class, so it's more clear that it's a subclass of `javaslang.control`. In the future it's a `*` thing that's a subclass of `javaslang.control`
I'm not sure if the chunks should be in chunks? I think it's probably better to use `db.capacity.get(db.capacity)`
This is a leftover from an earlier PR.
This change is unrelated to the rest of your PR but I'm wondering if this change should be reverted?
Why is this change needed? Did you move the `if` below the `if` below?
Can you please update the changelog as well.
Is this the right approach to do with `resource.isSupportedMimeType`?
I would prefer to avoid adding a dependency on `PythonDistribution` to this file, and instead add a new dependency on `PythonDistribution`.
I think this should be a separate function
Could you please add a space at the end of the whole word?
I think we should call this `SetDevice` if we're not doing anything useful.
Is this the only place where we're actually building the first 2)\n? If not, we should also make the version number 0.0.1 as the last 2)\n is 1.1.
I think this is not correct. The problem was that if you have to check `isinstance(value, str)` and it was `None`, you don't need to check for `if` before.
Should this be a pointer now?
nit: if record.Id is nil, this could fail. I think if record.Id is nil, the message will be wrong
This should be called `WorkingDir`
Was this change intended?
NIT: can you use `github.com/iotex-core/functional.go`?
Why is this needed? I don't see it being used in this PR.
This change is unrelated, but I think it's better to leave it as it was before.
It's not clear why we need this.
Unused import :policeman:
Can we also do a re-creating this in `engine.TaskENIDependencies`?
The `DB__ROOT` check is not required in the DB. It will be removed in the DB.
This will need to be moved inside the `env` call.
I think the `driver_schedule` is still used, right?
Why did this change?
Why not just `invinvING_project`?
Is this a typo?
It's not obvious to me why this is being deleted - it was added to the standard library.
Can we call this "copy_unreview"?
What's the difference between this and the previous `GetMethod` below?
Is there a reason this was added here?
Shouldn't the `insert` call call be inside the loop?
`QUacheache` is a bit ambiguous. I'd suggest `SOLICIC 36` and `SOLOL` instead.
I think you should be able to use the value from `on` to avoid the double quotes.
Is this still needed? There are two distinct flow exporter feature flags for those two, and they are never toggled.
Why not just use `sys.exit(1)` here?
This is a breaking change, and I'm pretty sure I'm wrong
This is an API break.
(style) line over 80 characters
I would prefer a `strutils.bytes_to_escaped_str` method, which is not the correct behavior
why did you change this?
Should we do a "if LGTM." here?
The name of this test is misleading because this test is about `ImageDirectoryStructureCreator` and `DirectoryDirectoryStructureCreator` is a bit confusing, it is a bit confusing. Maybe `DirectoryDirectoryStructureCreator` is a more clear name?
I think we should use the `TagsTags` method here.
What is this file used for?
We don't need to initI2CClock here anymore.
This could be a one liner, but I don't have much better idea how to do it :)
I'm not sure why you changed the ESP32 test.
why change this? i.e. `toAntrerePeerForCRD(ingressRule.From, cnp, controlplane.DirectionIn,PortExists)`
I'm not sure this is the correct way to go.
no need to check for nil, it is a pointer to the function
I don't see where this is called. Is this going to be used in RelaxedReclaimPurge?
I'm not sure why this change is necessary. The old version of the `ethereum` is not being used anymore, so I'd remove it.
I think default should be False
I think we should use `fetcher.fetcher()` instead.
Why is this in the cri55? If we don't, we should probably just make it a constant
Shouldn't this be translated translated?
This should be an array of `currently_pass` and `currently_pass` as well
I think `computed` should be a `const`
I think we can keep the filter for `btl.reload`
nit: remove trailing whitespaces here
This should be `hidden` (and the `get`)
I don't know if it matters, but this execution is not really necessary, since it's a package-level package.
**suggestion (non-blocking):** I think this is a leftover from debugging purposes, right?
I'm not sure if it's better to return NULL for the case of `0` being NULL? I would have expected the check to return NULL, which would mean for the case where `ev->flags` was NULL but I'm not sure what the right answer is.
I think this should be removed now, right?
I think this should be a constant.
Could this be called `andasIndexingError` ?
Is this necessary? CoreChecks will always be the same data as the CoreChecks.
This is an internal function that can be accessed from within ScanContext
Why did you remove `choice_name` field?
This is a very minor detail, but I think we should move this method to the `metricsSchemaUtil` itself and have it implement `Util` as a separate method. We could move this method to `SchemaUtil` in a separate `SchemaUtil` class and move this method into `SchemaUtil` and call it `SchemaUtil` and `SchemaUtil` and call it in the `SchemaUtil` class
I don't think this is a good idea. The `std::vector<hsa_agent_t> all_hsa_agents()`.
`Counter.Gauge` is the default.
Not sure if it matters much but this is not a typo
I'm not sure this is the correct fix.
I think it would be better if we explicitly explicitly explicitly mention this in the API. If we don't want this to be public, it would be better to get the whole class from the API.
These should be `self.f = focus`.
Do we need to use this?
I think this should be moved to the `--reupload` option, and not `--reupload`.
We should rename this field.
In the future, you can use `mSessionSession.isActive(true)` to avoid the deprecating `mSession`
This is a little weird, why do we need to limit it to the BMOs API? If it's just limit limit to 100 MB it should be fine.
This change is not related to this pr ... please revert
@becker33 can we change the word here and include the space at the end?
I'm not sure this is the best place for this, but I don't think we should be handling this here.
Would it be better to use Twig_Environment instead of Twig_Environment?
This seems like a wrong change. The package is already in a package. It's not used anywhere.
I'm not sure this is a good idea. I think it would be good to also check FloatToStringt if it's a float. The FloatToStringt seems to be a very large number of times, and if it's a string then it should check if it is a float. I'm not sure if there is a good reason for this, but I don't know what the original motivation for not using this is.
This doesn't seem like a good idea to import the Manifest interface. It seems to me that we are using this interface elsewhere in the code.
Minor nitpick, but `harparser` is a little too generic, maybe `harparser` is better?
this is already imported above
This one is not necessary, as `findElement` is already in the list.
Line too long. [81/80]
I don't see `opts.feeSat` defined anywhere? if it is, `opts.feeSat` should be `undefined`, right?
I think this is not the right fix since the `include_file` fixture is used for the conditional on the block. The reason for this is that it's not just a conditional on the block.
You should be able to use `apigynf` instead of `selector` here.
Do we need to pass the file through through `ReadVectorSize` ?
import in wrong section
nit: I'd prefer a separate return function for this.
We should log the info level by saying something about the info level.
Is this the right error code to do? The `!vec.base != NULL` check is probably unnecessary.
Is this the only place where we use the global version in the file? (If we do not change it, we should be able to remove it if it is not needed since the file is already in the `2.1` file.
Can we move `spec.GetXattr()` inside the `if req.GetXattr() >= 0` check?
@jsoriano Is this change required?
Wouldn't this change the behaviour in the existing code, if someone has nameangled with a name it should be excluded?
Could you add a dev().assert(s) as a full new file, and also include the `s` in the `.gitignore` file?
`findUp` is not called in this function. You can remove `findUp` and `findUpVirtual` calls.
This was the only change that affects TF providers.
Why is the token ignored? Isn't it redundant with the previous `substring`?
I think we should keep this.delegate = delegate;
Use `deprecated_properties?` instead of `_log_info?`
I don't think this is the right place for this, it's a bit of a hack. Can we just move it into the `server.go` package?
This is not necessary.
This was removed in #5181, but it was added by #18183. I'll revert it back to this PR.
do we need this partial ?
Should we use `%s` for these as well?
I think this is an API change. The doc should be updated.
This is not a good change, because the table name is already sorted, so it's not a big deal, but it might be worth to change it to something like: `The in-memory references to the list, but the in-memory name is a bit confusing for a future change.
Remove the `//` here.
I don't understand this one. Why is this not just the one in the application?
`certificate` should be `SignedData::getAuthor()`
`mqtt` is already in the group above, so it is in the group below.
Why did you change this? This is a BC break.
`type == null`? `String.format("%s is not supported", type)`
We have a `procfh` in the config file, so we need to make this a utility function.
I think we can move `django_headers` into `register_related` module. The reason is that the `register_related` module is because of the headers being generated in `auth_header`.
I think this is a leftover from debugging...
I think you need to add this to the `config` package
This function has a lot of stuff, but it's a bit odd that it's only used in the `before_save` block
Is there a test we can use here?
I'm not sure this should be an explicit `messageBody.IsEmpty && _checkUser(messageBody.IsEmpty)`. It's not an error, but it's an error in the `if (!messageBody.IsEmpty)` check that it's not actually true.
I'm not sure what this is for? I think it should be a part of the API?
Is this just for clarity?
This is a change that is needed to make the condition more explicit, but I think it is better to check for `tmpInt > 128` and check for it in `128`
This needs to default to true.
There's a matching `MPI` below. Should it be added to all `experimental_queue` variables?
@alalazo I think we should not have this in the `__init__` file?
Let's add a license header here.
Since `mkString` is no longer being used, can we remove it?
Is this equivalent to `IOUtils.createcreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreatecreate` ? This is a bit confusing since `ReasonApproved` is only for signing.
I think this should be `!accountID`
This is not right. If the vendor is already done by `# type: ignore` it should not be able to just load it by the vendor, but not in the vendor. Also, why not just have it be a `altertative`?
@matt-gardner Is there a way to get rid of this? I think the old code would be better.
This is the only line that enables the `PRIu` index, which means it will not be `None` at all. Is that intentional?
I think we can skip the `else` branch now that we have `default` and `default` fields. We can fix this later.
this is not right. You should use `IsCoinbase()`
I think this should be `winVersion.winVersion.major >= 10`
This isn't used anywhere.
I don't think this should be here, the `@product` annotation is not necessary since it's already checked below
I don't see a point of this variable being used anywhere, can we remove it?
I'm not a fan of this change, but I'm pretty sure it's not a good change. But it's not a big deal, so just a note for the cleanup.
This is the only change that will be needed if we use `InitConnection`
I think this was accidentally imported.
Can we also do a check for the history?
You can remove this. This is the only place it's needed. `static_from_listen()` is used in `instr_is_scatter()` in `instr_is_gather()`.
The same here.
Maybe `m *LBFargateManifest` ?
Please use `vpn.Map()`
I think we can skip the body and method as well
This is the only change needed. We need to keep the `return;` on the previous line.
I don't think that we want to retry in this URL, but I don't think it's necessary to retry here.
If you change this to be the new constant you can also delete the code.
This is no longer used, right?
This is a bit confusing to me. Why is it not possible to have `verify.TxnPool()` return an error and then `err != nil`?
This is the only version of the 4.4.0, so I think we'll need to update it.
Do we need this?
Why did you remove the condition?
I think this is not right. You should remove the sync call from the load() method.
This was the only change that affects backwards compatibility, so I hadn't noticed it.
nit: why not use `Optional[null]`?
If you're not using `failure` it will be easier to read as you can also pull this out into a helper method
I'm not sure if we should add an if/else here, or else block ?
Can you please remove the `:` after `}`?
I would use a `@param` and use `int` here.
Just a random question, why not use `data-capability-`?
I would add `@since=True` here.
Extra empty line detected at body beginning.
I think it is better if you pass in `t->ninfo()` to `supported_header()` and remove the `if` here. The other `remove_item()` call is already called in the `if` below, and it will not work, because `pmix_nspace_caddy_remove_item()` will be called after `PMIX_RELEASE()` call.
I think this is a leftover from previous refactoring, right?
Should be `array_get($parameters)` instead of `array_get($parameters)`?
I think this can be removed
Can you change ` && found_env_vars[:type] == 'foss'` to just ` && found_env_vars[:type] == 'Import'`?
This change seems unnecessary
This will be a bit hard to understand. What about just calling `getVariable(name, opt_id)`? Also, why do you need to do this here?
Can we have some finalizedized finalized with no words?
Is this a bug fix ?
This is a breaking change for the public API. Please remove it.
Shouldn't this be a call to `getCoveragePath()`?
This is not a good thing to do. The TracerConstants should not be used as the default for the default in this case. The only thing I'd prefer is to use this to expose the default to the default. I'd like to see this be configurable and have the default to the default in both places.
why not using UpdateDeviceStatusBuffer?
This change should be reverted.
This should be `define(['browser', 'css!./emby-collapse', 'registerElement', 'emby-button'], function (browser))`
This needs to call the `EnableApplicationResponse` method to get the last argument.
This is a bit confusing. If we are returning an empty string, the result will never return an empty string, so we should just return a string.
I think this is not the right fix. The right fix is to move this to the new scope scope (and the corresponding one below).
can we add a check for `min` here?
Since you're using `_u.date00` here, you should either use `startDate` or `date01` here.
shouldn't ` BoolParameter(default=True)` be the same as `execution summary`?
This seems like something that should happen at a lower level, what's your opinion?
Why was this removed?
I think this is a bit of an overkill, can we use `ncr-layout` instead, so that we don't have to add a `n` attribute in the layout.
Why was that removed?
This was a new bug. We need to test this.
I don't think this is the right place for this. TryGetValue should always return false.
I think this can be simplified to `std::iout << "[Error - LuaScriptInterface::luaGameLoadMap] Failed to load map: " to load" -> `std::letsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletsletslets
Do we need to check for `item > 0`?
Should we also check for the `yaml:"healthcheck"`?
This will be removed in the same PR.
I don't understand this change. The SubnetGatewayIPV4Address field is a `Subnet` object and is a `*`. Can we just call this `SubnetGatewayIPV4Address` ?
This should also have a `find` method that takes the whole `find` method.
Should we use `from iris.cube import Cube_cubes` here?
why is it ok to remove this code?
We can't really remove this, as the tests are not run anymore.
I'm a bit confused by this code. I don't know what the shared roles is, but the idea is to have the shared roles in the future (if we're using the same roles)
This is a bit scary, but I don't think the convention is that we don't want to want to go through a `deprecated` statement.
this is not needed, you can just use `blob`
Is there any way to make this consistent with the other errors?
The new line is redundant here.
We could change this method name to `GetStream` and have it return `string.GetStream(filePath, mode);`
I think `qutebrowser.multi` would be a better name for this new module.
I would rename the `$transparent_header_class` to `esc_attr` and rename the `$may_upgrade` to something more generic, like `$may_upgrade_header_class`. `esc_attr` -> `esc_attr_header`.
Please don't go this last line of code.
The argument should be checked for a new line instead of an if.
Remove empty line.
This is a bit confusing to me, but if you're using `getClass().getPackage("-ee", "")`, then the version is not null, you're not checking that the version is already in the packageImplementationVersion. If you want to check that it is not null, you can use `getObject().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage().getPackage
Why do you need this? We already have a `*` in `fields.OpenTK.cs`.
Should be part of this commit
@jridgewell Is this the right default? The taskilot-task should be in the taskilot-task and not in the taskilot-task.
I don't think we need to add 'input' here.
This change is not related to the issue. It should be reverted.
shouldn't this be `if (!strncasecmp("OFF", val, len)) {` ?
I think we should be able to remove this check, as we already know it's not needed
I would say that this is a good name. It's not a good idea to use the same name as the `is_subtype`, but I'm not really sure what it does.
Nit: `CatchBlockLog` is more consistent with the naming
This is a bit weird. What is the purpose of this `#if`? Is there a reason why you can't just do `#if defined(KOKKOS_ARCH_VOLTA70) || !m_is_initialized || !m_is_initialized == true)`?
Are we sure this doesn't break anything? If not, let me know.
This seems like a very generic message to me. I'd rather we do it for both the directive and the `c.op.ErrErr()` calls, then the `c.op.ErrErr()` calls should also be added to the `if` statement above.
Looks like the new line is missing here.
This is a bit of a weird place to put this code block.
Why is this necessary? I wouldn't expect the global to be available.
I think we should move this to `generator.py` as it's not used in the API.
I think we need to add this to `omitempty` since it is a struct
It seems like we should be using `alias` to get the last item from the map.
Is this going to be used for the normal `Pool` in the aspects object?
This will fail on Python 2.7.x. I'm not sure if the path is the right thing to do here. The right thing to do should be to have the abs path in the Python 3.x.
This should be in `constants.py` instead. We don't need this check here, but we should be able to just remove it.
I don't think this is the right place for this. The `auto` should happen after the `if` and before the `if`. I think that's a bug, right?
Shouldn't the version be NetworkID and VMID be NetworkID?
This will cause an NPE.
I think this is a leftover from previous PR (not related to current PR) but should be removed as well. The `getAppContext()` already includes the default `String()` and `getInstance()`
I would suggest using `DEFAULT_REVISION` as a default.
I'm not sure we need to add the loginOptions here. If we don't need it, I'd rather do it in the constructor.
I think this should be `layout.viewer(..)` and not `this.focusElement_('noteTextViewer');`
I think this import is unused
Line is too long. [81/80]
I think this is the wrong approach. We need to implement a type for the `Value` function that returns an empty string, which is not the expected behavior, and we should be able to use a string for the type, which is not the case here.
can we use `push-notification.actions-performed` here?
Could you explain why we need `ACMESelfCheckFailurePolicyRetryForever`?
I think you should use the new error from the exception message here to be consistent with the other error message.
do you really need the permission check? I think the password is empty
The name is misleading, I think we can just delete it.
I think we should be able to use `float16` and use `float32` instead of `priority uint16`
I think this was the main code in the previous refactoring and the code below still failed. The new version of this package should be `foo:bar`.
Is there a better way to do this?
@jvillalobos did you consider extracting this to a separate pull request?
I think this is the way it was before, but I don't get why we need to specify the `testnet` as a dependency in the `TransactionParser` interface. The `TransactionParser` interface is always passed to the `TransactionParser` interface, so the `network` should be the same as `TransactionParser`.
Group with `fmt`
This function is only used in the test code and is only in one place.
I'm not sure if we should do this here, but if we are going to do this we can just do `_target.destroy(persist: !replacement)`
Why do we need torch._shape_as_tensor here?
I think we don't need to return an error here. I don't think we should be returning an error.
should this be `verified` instead of `complete`?
I think this should be a constant. It's used to be part of the controller and it should be a constant.
this is the only change that affects this PR. I'm wondering how much of the tests we need it was before.
Do we need this PutHash in the PutHash?
Same here, this should be in a separate commit
Is this still necessary?
Should we have a unit test for this?
I don't think that we should be using this fixture. It's not a big deal, but it's not a big deal, so it's worth it.
Do we need to make these switches configurable? If not, just make them a `secondary` and use `getDruidMDebug`.
@Pearl1594 I'm not sure if this is the best place to put it. If we are going to add a clear statement to the `clear` method, we should also add it to the `buildCallback`.
Why does this need to be a separate function?
Maybe use a `-t` for the name.
I would prefer to have this be a set of "dstPort" and then use that in the function to check if it's a set of "dst port" or not.
InitializeStreams is a static instance, so this is not really needed.
why not use `settings.icon`? I think it is more readable.
nit, we can drop the ` widget` since it is already used by `Provide`.
chunks2f and %.2f are the same. I think the variable name should be more clear.
`alt` and `textContent` do not have a value, let's just use a `let` here.
This should be reverted.
This is not needed
`updateLibrary` should not be called here. It's not the only place that is used.
Let's change this so that we don't have to worry about the default being the last time we call the key from the default, and we don't have to worry about the default being the default
nit: could you please add a line after this one too? (In general it's not a big deal, but it's a nice thing to do so)
I think we need to do something about this. If we're going to add properties to the `TracerDomain` we could just add it to the `TracerDomain`.
This is a bit weird - the `JsonRpcError` and `JsonRpcError` are the same, but the `JsonRpcError` is not the same as `JsonRpcError`.
This function can be removed now, right?
Please don't change that.
Is there a way we could do this without having a direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct api?
Can we remove this empty line?
I think we should be able to use `needsParent` here.
Shouldn't be mock_entry, no need for mock mock_entry
It seems like this should be `RunQuery`?
type is already defined in the `build_environment.json`
Since this is the only place where we need to change, we could just remove the `i` variable and just call the `based` variable.
I think this sleep might be too long.
Can we just use the same one from `hand.ht_clone_left`?
this must be `User` and then we should also have to check `unflushedPaths`
I would call it `primary_drm_monitor_create` or something like that. I would also call it `primary_drm_monitor_create`.
This line is too long
I'm not sure why we need the `:unauthorized` here
Is there any reason to keep this around around and just call `unsetenv("func")`?
I don't think this function is used anywhere, it can't be used anywhere
I am curious why you removed the global scope here, but why did you have to change it?
I'm not sure why this is needed. You set a default value for the exact same thing as `setProducerInvocation()`
I think we can move the if check inside the if block, so that the file can be removed if necessary.
This looks unrelated to the platform checks?
I'm not sure this is the right fix. The toollet_tool_destroy() will do the same.
I don't think there is any need to have a `supportedModel` as a `@Nullable` here.
I think this should be `props.children.forEach`
This should be a warning, not a warning.
I don't see this field being used anywhere?
This is not a valid package, but it seems that the `ctx` package is being created for each `TypeSet`?
Does this need to check for null?
double positive() is not needed.
I think this is not the right fix. We don't want the "proposal" in the database anymore.
COMMAND -> TGA
Is this supposed to be in here? I'm not sure if we need to set it to the default.
What's this change for? I don't see any code using it.
I'm not sure if we need this anymore.
Can we also add an explicit check that `credentialsAssumeRole` is set to `nil` when the role is empty?
This is a change to the right move. The `blazer` is a `Config` and it's not a "real" of it, so it should be `Config::blazer`.
This change is not necessary. We can change the name of the productSampler to be the new name in the name.
I'm not sure if this is the right place for this. If we're going to do this, let's discuss this. If we do want to do it for any other kind of thing, then we can just remove the `if strings.HasPrefix` block altogether.
The way this is implemented, the method name is a bit misleading, maybe `PMDException`?
This needs a period at the end of the sentence.
Does this mean we don't have to validate on all the supported loops?
This was the main problem. The only problem is with the `VarVar`, which was the `VarVar`, not the `Var` object. I think we should be using `VarVar`, but I think it's not a huge deal.
Why do we need to public? Is this public API?
Why type hint? AFAICS it is not clear to me why this is a type hint.
This should have been a separate commit (or a separate PR). The reason is that the `T` parameter is being used is because of the `Event<T>` parameter.
This is a bit of a nitpick, but can we call this `encoding` or something?
This should be `enumerable: false` and then we should make `required = false` and `required = false`, otherwise we will have to update the `onTrigger` field to `onTrigger`.
I don't see any use of `.formatters` in `lib/commons/commons/commons/[none]` anywhere else, so I think we should be consistent.
Can you add a migration to the ticket?
I think it should be `!= null` instead. It's a `*max_bound` property
2014 was not defined in the init
why not just `tail = NULL`?
@deads2k i'm not sure if this is the right place to put this, but I don't know how I feel about it, so I can see it.
Use the new Ruby 1.9 hash syntax.
Why was this removed?
There are a bunch of `@param:` in `rescue` that are not necessary. `preserve_hosts` and `rescue` are the same, and `rescue` are both the same.
The `newsessionqueuer` can be removed now.
This is not the same as `expect(console.warn).to.calledThrice;`
I think this function should also be moved to `_is_editable_prop`?
This was changed in #5377, but the `*` is now useless.
We don't want `basename` here, right? If we do, we can remove the `basename` here.
Ditto on the unchecked variable cast to `10`
I'm not sure if it's worth adding an assert here to make it easier to understand what is happening here.
This file is in the `type: Jack Handey` file, so it doesn't have to be in there.
Why do we have a new column for this one?
Use nested module/class definitions instead of compact style.
why do we need this? can't we just call `exFlowKey.intern()`?
I'm not sure if this should be an API change?
I think we should use the `^` format for this new parameter.
This is not a correct way to specify a folder. Maybe it should be a `make update` or `make update`?
`DAYmolops` is not needed here.
I'm not sure if it is a good idea to dump an px here.
This change is not related to the PR but I'm wondering if it wouldn't be good to have a separate PR that adds a lot of code to the `logging`/`logging`/`logging.logging`/`logging.Level`/`logging.Level`/`logging.Level`/`logging.Level`.
you can drop the sortByColumn
This is not a bug fix. It should not have been done here. The previous code is not needed anymore.
Why is this change needed?
shouldn't this be `QueryVisitor` ?
I'm not sure if adding a cast to `XXX` is a good idea. It's not clear to me that this is the right place to put this. I would suggest to use: `if cv.ns(e) (e + cv.child)`
This is a bit confusing. Why not just use the same value as the 3?
I don <msg> I think the check for not_a_peer (a) is not needed anymore?
The Copyright (C) 2010-2021 DBeaver Corp and others are not provided by the original year, so the copyright year should be changed.
this is a leftover
Should we do a `LockOSThread()` here as well?
This is not the best way to handle this. This method should be called in a specific location. In the `policy` class we should also have a similar name for the one for the other.
Is this change necessary?
Please use the constant here
should we change this back to `if !c.IsApiToken`?
we should not do `|| applyMode` as it will be a valid value. It will make it easier to read when it is empty
I don't think this is the right place to put this file. It's not a big deal.
I think you should move this check to the `HTTPConfig` class.
I'm not sure what to say about this - the values are used in any place. If they are used in the "last" context, it's a bit confusing. Maybe it should say something like "the values of a carrier has been injected with a getter.` or something.
nit: move to L34
`data = PrivateKey._getRandomBN();`
This would be more readable if it's a single `if`.
The sentence is not clear, but I'd say that it's not clear what the field is.
This is a very minor nit, but it would be nice if we could make this a method on the `BaseTree` class instead of just having a method that returns the class name (like in the other files that we could use for this class).
The original code was correct. The previous code was not correct and I am missing it.
I don't know why this is here, but it seems to be the only place this should be used. Can you explain why we have a `knative.dev/logging` event is used instead of a `logging` event?
I think the <msg> I'm a little concerned about this being a bit confusing. What about `operation string`? I think we should have the same name for the "initializers" and not the "initializers" to be more clear.
I don't think you should change the default value for `127.0.0.1`, just the default value should be `None`
This was the only error that was chosen by the code, but it doesn't seem like a good idea.
I think we should default this to `KBFS_ENABLE_JOURNAL`
This should be done in a different PR.
Why is this test case sensitive? I don't see a false false in the codebase.
I think this file needs to be removed
This is a little confusing. Why do we need a `and`? If we're going to do this, then I'd rather just use a `setQuery` and use that here.
Why was this removed? I think the `IPLocator` class is no longer needed in the codebase.
What is the purpose of this? I don't know if it's the name of the form (I know it's a name, but it should be `MaterializationOrObservation` but it's not a name)
This is the only real change.
Please remove this file.
Why did you remove this? Did you try to keep the std::chrono as a string?
isn't this the same as the one above?
This include is not needed anymore? Can you remove it? It's only added to the plot, right?
I think this should be a public constant.
Why not just `Uri.StateReader`?
I would prefer to have a `std::vector<PartitionID>` that calls it in a `Object.prototype` so that it doesn't have to be a map.
I think the diff_res should be changed to be consistent with the rest of the code base.
Is there a way to avoid the loop when we don't know if the loop is empty or not?
`check_on_missing` and `off` should be `check_on_missing` and `check_on_missing`
I think we should also check for configuration in the error message.
Can we remove this line?
why do we need theinf here?
I don't like this, you're going to have to add a new `TagInfoUsingAddress` to `TagInfoUsingAddress`.
rollbackTraffic is not used anywhere.
I don't think we should be statically imported.
This is not a valid zk client, you should not need the zk client, it's the zk client, not the client.
I don't think we should be using the MessagePack here.
We need to keep the old signature around as well, to make sure that we don't change it for other things
This is the only place where I'm seeing is the source file, so I would expect it to be a `uildFile`, not a file.
I think it's still useful to have `_MissingPandasLikeIndex` in the `_` prefix. It's not really the correct name.
Can we call this `subnets`?
Can we rename this to `use cn-northwest-1.Ch`?
Is this test really necessary? It is a test that doesn't really fix it.
@jsoriano This is the correct way I was seeing where I was working on this and I hadn't checked the `@activity` command :smiley:
This is the only one I'm not sure if I should have a better solution than it.
This is a new API, not a new one.
This is a breaking change for some existing testing.
`getDisabledMetricAttributes()` can be removed because the method can return `false` if the attribute is not empty.
This should probably be in a constant somewhere, since it's only used once in the test.
The `done` method is only used in `close`, so we can remove the `if` here.
Shouldn't this be `aws.rclone`?
I think we should use a more meaningful name like: `clamp(..., "clamp(..., "ID", "ID", "ID", "ID", "clamp(...))`.
I don't know if there's anything we can do, but it's not a very good idea to have this very hardcoded here.
I'm not sure if this is the right place for this. The `subsurface` should be used here, not `static`.
Can we add a TODO here?
Just to make sure, this test only has `tlfID`?
I think this is not the right place for this.
I don't think you need the explicit `if` here.
why not just `return Error`?
This looks like a typo, I'd be fine just to fix.
`mock(DefaultOAuth2UserService.class), mock(OAuth2UserService.class)` is the default. I think the default should be changed to `mock(DefaultOAuth2UserService.class)`
why did this have to be changed?
Please add a description to this interface, to make it clear that this is only used for the query ID.
Unnecessary whitespace change.
I think we need to keep the original behavior here.
Why not using `GenericNames`?
Do we have tests for 7?
I think the `value` can be removed now.
I think it would be better to use the `setIgnoreCase` method here and in the other `set.onCommit()` method. Also, you could use `setIgnoreCase` and the `sort-order` method.
I think the initialState argument is unused.
You don't need to use `Teacher.joins(:video)` here.
I don't think the `\r\n` is needed here.
This is a bit confusing, as we are removing the `tests` field from the `buildTests` API, but the `buildTests` is not used anymore.
These are not needed.
I think this is not a link, right?
`= nil` is a good idea to log it. We don't want to log it, but we should be able to check the actual error.
We should not use the `/session/:sessionId` here.
I'm confused, is it possible to have a deprecation warning in the test where the test fails?
I don't see a reason to make these strings private.
Is there any reason to have the check here rather than just having the `.String()` check at the end of the string rather than passing the check directly to `.String()`?
This is not needed anymore, right?
Should we do this in `W3CBridge`. This will be the same for `WebDriver::WebDriver`.
Shouldn't this method be called `RpcMethod`?
I think this is not the right place for this change.
Nit: this is a bit weird.
This should have a default value, not a boolean
This is the only usage that will be used.
I think this is the wrong approach. The `Get` function should just return `shadowAndGet` if `TypeOf` is present, and then we don't have to have it in the `pkg/api/pkg/api/pkg/api/pkg/api/pkg/api/pkg/pkg/api/pkg/pkg/api/pkg/pkg/pkg/api/pkg/pkg/pkg/client/pkg/pkg/pkg/api/pkg/pkg/pkg/pkg/pkg/pkg/api/pkg/pkg/api/pkg/pkg/client/pkg/api/
I don't understand this change.
This is the only place where we call `GetAllPids()` is called. I don't think we should be doing that here.
This is a bit odd, why not use `identifier.contains()`?
I'm not sure why these are removed.
why is this needed?
Why do you need the `_notebook` here? It seems to me that it can only be used once in a single notebook.
Should this be an `AtomicCallback` or a `const` instead of a `db`?
This should be a `size_t` constant.
Can you move this line to the end of the line, so it's not required?
can we remove this?
Can we put this in an `else`?
I think this is a leftover from the previous PR
This is a bit confusing. Why not just have the info be null?
why we need to set this to nil when we get here?
I don't understand why this is needed.
Nit: we usually don't use variable names like this.
Is this really needed? I think we're just testing that the existing `IEnumerable` attribute is used in the `DynamoViewModel` and not the old `IEnumerable` attribute
This is a bug fix. You're calling `next()` twice, which should not be here. `ip6` is `ip6`. You should not call `ip6` in this case. `next()` is not a problem. You can use `key()` instead.
I don't see a reason for this error message. I don't see the function returned in this function. In other words, if we do, returnPartly?
Why do we need to do this?
Why did you change the 430 here, but the test did not catch this?
I think we can just call `h.w.Write(p, nil)` here, since the Write() will always return a `Write`?
It looks like this file is no longer used?
we need to add this factory to the `parse_token_token` method as well
Shouldn't we also check that the attribute is set in `load_depr`?
Do we need to define it as a default?
This doesn't make sense for the test case, since we're returning the `empty` argument.
I don't understand the naming here. I think it's a good thing to do here since this is a `binary` argument, and the value is a `compressed`. I think it's not necessary to use the binary argument for the default value. The value should be changed to `compressed = false` and the default value should be used in this case.
controller is a function?
I think this should be `_serializer` instead of `_settings`, since it is a static property and it is not a static method.
I think this is a wrong place to put the `f.metadata['websocket']` check.
what's the reason for this change?
I don't think this is the right way to get the `metric` model. I'm not sure it makes sense to use it in the `alias` model.
This should be GetMetricPointsAccessor
Please revert this whitespace change.
Nitpick: I would go with the other `http` operator.
I'm not sure this will work, but if we force the checkpoint to be in the DB, then the checkpoint will be in the DB, so the checkpoint will not be in the DB.
Is it possible to get rid of the kModelVersion constant?
This test fails with the new user with the new `and` on line 635.
I don't think we should be using this here
This is not a valid package.
Why is this change required?
This will change all callsites to `rank_type`, which is not correct. `runtime_type` is the default value for `alert_types`.
This is a bit weird - why not just use `<%` and `selection`?
This should be grouped with the other standard library imports.
@dvoytenko: Shouldn't this be `privacyMode` instead of `privacyMode`?
why is the change required?
Why is it necessary to remove these `IOrog`s?
Can we use a larger `go` package here?
Should we have the same value for the 200 in the config?
Plz add a blank line between tags and summary for better readability
std::uint64_t is already defined as const. It is not used.
This is the only place I could see, I don't know if it's safe to remove.
This is the wrong place to put the S3-Simple dependency.
I'm not sure this is a good idea, it's worth mentioning that it's only used in the docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker docker
I'm not sure if this is needed, but `stdbool.h` is already included in `stdint.h` and `std_bool.h` is also included in this file.
Why not searchScope?
I think you meant to remove this line
Why is this change needed? I think the `if` is redundant.
why this change? What is this?
@jona86 @smarterclayton @hongwei1990 . Sorry for the confusion.
Should be `import org.shredzone.flattr4j.model.User;`
I think we need to remove the `.String()` here, as it will only be used in one place, and will not be removed in the next PR.
This is the change that fixes the bug, but it was just a copy/paste error.
This is a breaking change.
I think this should not be transport transport. A parameter of transport is not a parameter, so it is not required.
Shouldn't this be `ctx.Status.ChaosStatus.Experiment.Phase?`?
This is not needed.
Can we use a more specific name?
This shouldn't be necessary, it should be in the `Config_rule` module
This is a bug, because `spack arg` is a `-1` arg, which is a bug, and should not be.
I think this should be LoadGroupDebugPipeline
I think we should rename the field to `name`.
Why not `privateTransactionHandler.getSenderNonce(address, privacyGroupId);`?
@mjkkirschner Is this safe to remove?
I think we can remove this method now that it's only used in one place.
I would not add these to templates, they should be removed.
This is the only place where we need to handle the case where flatteningGroup is a property of the same service.
Could we use a more meaningful name for this?
This seems like a bug. The problem is that if the cache generation is not found, we will have to handle the error. Is that correct?
This is an API break.
Is `isClosed = TRUE` needed ?
Why does this need to be a `finally`? Is it because the task is not defined in the task?
Should this be `ConfigFor(interface{})`?
I think this should be added to the `JSON_request_request` as it is only used by the `JSON` module.
I don't think this is a good idea. It's probably better not to just call `Task` in `STATUS/Task` and then use `getTaskTask` in `Task` in `Task` in `TaskTask` to call this method in the `Action` class. It's not a big deal, but I'm not sure if we need to worry about the `Subtag` API for the whole `Task` method.
Why was this removed?
Isn't this needed? I don't see any callers using this
Why not just use the `const` here?
Why not just return error here and below?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we should remove this?
I would prefer the assertion to be in the name of the method instead of `assertTrue`, but that's a bit more consistent with the rest of the method.
This is a bit weird, I think the old code is a better place to put this. It seems a bit confusing to me.
We should probably have this in `KIEConfig.INSTANCE` to make it clear that this is only used in one place.
Is there an issue with ix5_icon_mixin? I think we should use that here
weight_ is not used anymore
I think you can remove this line
We can remove this whole `master` now that we have the default config for `configprint user`.
upload should be removed.
I think we need a unit test for the `wx.Dialog` here
This is a pretty generic function, but it's a little confusing to have to have the trace in a variable.
Please use `else if`
I think this should be "has the AuthFree set to true"?
I'm not a fan of using `Close` for this, but I think that's not the best way to go.
This class is no longer used, right?
Should we just remove the params if they don't exist?
Nit: please wrap the debug statement in a new line, similar to the one above.
Shouldn't we check for `isset()` here?
I'm not sure this is the right way to do this. If I understand correctly, the default is `null`. But this is not the case, so it should be nullable.
Why do we need to make this `public`? It's a `String` interface, and it's not a `type` attribute.
I think we can delete these two fields now since they're not used in the client.
I guess it's not a good idea to have a method that returns `IValueFormatter` (which is never null) and this is not the case, right?
Why did you change this to `axis`?
this is not needed
This should still be a call to updateTaskKnownStatus()
Can we add an assert here that this is a span?
I don't think we want to use the package package here. We should use the package package to use this package.
Should this be a default, so it doesn't have to be set to null? I'm thinking of it if someone is using a default for this case.
I think we need to check that `250` is 5.
do we need to catch `err` here?
I think this is a little strange. We're setting `s` to `nil` in the `mu` function and the `Lock` in `mu.Lock`, but it's not a `key` and so on.
I think this should be `Ember.IsZero()`
I think you can just remove the `s`.
I think this should not be here.
this is a bug fix
I'm wondering whether this is the correct fix. The zero size of the free bytes is zero, and the zero size of the bytes is zero.
There's an `if` here in the method below where the mutex could be null.
I would use the function `on_mode_entered` which is the default.
Please remove the `@Before` annotation. We don't want to keep it in a test, because it's not a test and we don't have it in a test.
It looks like this class is no longer used?
@franckc @mjkkirschner Is this related to this PR?
I think you can just do `mne.common.+ (i - h2o_token_t *token = h2o_token_t * 2; ++i)`
I'm wondering if we should do `no.docstring_rgx.pattern and re.match(no_docstring_rgx,, node.name)` here.
is there a reason for this change?
Is this `describe()` needed?
This is not a valid checkpoint path.
This function is used by the caller. You should use it.
I'm not sure if we should log the exception here. If we're going to do it elsewhere, we might as well log it in the log message.
This should be done in a different PR as the one in the other test. Also, the `setCurrentMillisOffset` method should be called before `setCurrentMillisOffset`.
This is the actual fix, but the code in `isEntry` is now dead code. The reason why this is removed is because it is not a problem, because we want to keep the `if ( ! footerText )`
The name of this enum is a bit confusing, can we have a better name for the enum?
ditto about breaking change, this is not necessary
This is not necessary.
What does "transpose" mean here? I don't see a reason to store it in the middle of the name, and it seems like it should be a separate sentence.
"drive-use-created-date" -> "drive-use-created-date"
I would also change this to be "1e-15" and "20e-15"
Not sure why we need to change the type of `MasterIndex`?
this is the only change in this file, can you revert it?
Space missing inside }.
Why do we count here?
I think you should be able to do `if defined?(Mongo::QueryCache)`, and if you do `self._cache` it will always be defined.
I'm not sure this is a good idea, but it seems to me like it would be a good idea to add an index to the table, if we're going to do it in an initializer.
why not just use a `flatbuffers` variable?
This is not related to the issue, but I think we should fix the issue here
I think you need to return here as well
This is not needed.
is this a BC break?
This is a change from what I was talking about before.
Can we add an explicit field for this field?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should we also remove the `LOG.info` call?
Is this used?
It seems like this should be `math/rand`
This should be replaced by Shopsys\Environment\Environment.cs
I think this is a good time to move the remote-opt from the remoteHost check to the remoteHost method, and not the other way around.
Why is this not needed anymore?
This is the only change I did not catch here.
Is this necessary? I thought we were trying to move away from the "error" naming convention.
Shouldn't this be `if proposal.ProviderID`?
You should be able to run a certain repository with a full repository.
I don't think we should be changing the name of the postage for postage, right?
This is a internal function.
Why are you using a `Organization` field here?
why is the double negative?
I think we can get rid of `memory` here.
Do we need this? I think it should always be attached to the headers.
These changes are not necessary, but I don't think it makes sense to keep them.
Does it make sense to set a `null: false` value to `false` in the `rails db`? I don't know if it is the case, but it seems like we should set it to `null: false` when it's empty, and if it's empty, then the `default` should be empty, or if it's empty?
This should probably be `strconv.ssh('platform')` and then we don't need to do that in the past.
I don't think this class is used anywhere.
I'm surprised this is not null. It's not a bug, it should be fixed in this PR, but I'm surprised it didn't have the `null` value in the first place. It should be fixed in a separate PR, but I think this should be fine.
This is a bit weird, I would expect a more appropriate error message here.
I think the refresh_token should be refresh_token too, right?
It seems like we could get rid of `cleaned up` from the cleanup?
I don't think this is needed
I don't understand this patch. If we're going to use the `Dataverse` class, then we should rename the `Dataverse` class to `_RESEARCH_PROJECTS` to avoid confusion.
should we make this a constant?
I don't see any usages of this function in the code base...
I don't think we should be changing this variable name. It's not clear what it is doing.
NIT: `//go:build !cgogo,build !cgo, governing permissions`
We can probably use something like `not_to raise_error` to make sure the error happens correctly.
`sfun` is not necessary here, because you can generate a single boolean without any arguments
This is an API break.
I don't think this should be public.
This is a bit confusing to me. Why not just use `binary_type`?
This package is already in the group above, so we can remove it.
Do we need to add `project_name` in the model?
is this used anywhere?
I think it would be better to do a `try-finally` check in the `ExternalToolHandler` and have a call to `getTableMetadata()` in `getTableMetadata()` and call `getSchema()` in the function. That way the `getTableMetadata` would be called before `getSchema()` is called.
Why is this being removed? I'm not sure it's needed, but it seems to be used in the `LocalPrefs` class.
This is a little hard to read. I would rather have the `tests.forEach()` be called here. I'm not sure if this will be a good idea for this.
@t8m1 @dvoytenko is this change ok? I'm assuming it doesn't break any existing HIP-PLATFORM to make it so it is not possible to get the right number of supported supported versions.
This is the same function. You can use `object=None` here.
Is it a good idea to start putting this in the `install` method? I'm wondering if we could move this to `install`?
This method is called from a few places (such as the `CreateToken` and `CreateToken`). Could you please implement that in a followup PR? Thanks!
I don't think we need to do this, we should just call `PipRepoName`
This will be `[s3.s3]`
`If functions returns false, the request is collected.`
This should be done using the real real version only.
I don't think we should change it. I don't have any suggestions.
I think it's better to use `catalogName` rather than `catalogName`.
Why do we need this? I think we are going to have a `.VersionAsString()` method that does the same thing.
nit: this could be a single `return` if we're only comparing the "normal" value for "SSL_peek".
Why did you change this name?
This is a little confusing, why we need to use `TransactionTransactions` here?
nit: remove empty line
So we will be able to use 15 minutes on non-testing data. I'm not sure if that is possible but it seems like the intent was to set a default to `false` for a long time.
Would it be worth adding a `RejectRequest(Tests.Empty);` here?
This is probably the correct thing to do. If `video.mp4` is not a list, and `web0s` is not a list, and `video` is an array of `C` and `C.web0s` is not a list.
I don't think we want to return anything here, since the function will return `size_t`
I don't think this is the correct type to store, since we don't want this array to be a boolean, and we want to keep it in sync with `array()`.
I would keep this line debug level.
This is not a valid history. It should be `listener.set_keep('listeners.history')`
I think this should be `@team_page?` and not `@team_page?` since it is only for `page?`
The Next was already locked.
I would move this method to the `rails_tool.go` file and use it here, instead of creating a new method in the `hypervisor.go` file.
I think it would be better to do a setuptools here instead of setting a default setuptools.
Maybe we can rename ` fakeConnectionManager` to `localManager`?
Now we are not using this anymore, is that right?
This is a very good place to call this method. Can we just call `NewByteSize` and have it return `m.Unwrap().Big()`?
why is it ok to drop this?
no need to update the url here, as well.
You could also just make `Constants` public.
Does it make sense to also assert something about the homepage? Or maybe just assert something about it being a string.
@michalpristas Do you have any idea why this is needed?
I don't think this is the correct way to do it, but it's a good idea to have the `*` operator.
I think you can just remove `JOB_ID` from the `jobjob` interface.
I don't think this is the right place for this.
This property is used for creating a client, so it should be removed.
`fullSynchronization` is not set in `fullSynchronization` so it should be set in `fullSynchronization` and `fullSynchronization` set.
It seems like this change is needed.
Can we move this to the `APIServiceOutputLabel` controller, since we're not using the API container anymore? We're not supposed to be using this for all the other services.
We don't do wildcard imports in your IDE. Please remove them. We do not use wildcard imports in our code. Also, please use wildcard imports.
This looks like a leftover from debugging?
I think this is the only place where this was used.
This line is too long.
I don't think this is right. I think we should do this for carts_path. Also, we should add a spec for this to the base class (which we want to do for every single application)
@gmail.com is the latest version of the filename, so you can remove this.
I think it's better to check for the value of `Ani|Tra)/.test(key)` in the first place.
I think we need to check for the `else if` and `if` in the `else if` to make it clear it's the first thing that is
Import order of imports is not needed, please remove the import of `com.google.common.parametrize.util.MDC`
This should be a separate Jira
How did this pass before?
I think we should be able to import static imports. We should be consistent in other places.
I think the pylint disable is now redundant, because it's not used anywhere else.
the `delegate` is never used in the `delegate`.
Why change this?
Is there a better way to check for the bundle?
This can be just `new Batch<T>(...)` I think.
This is not right, it should be `afterEach(afterEach(afterEach), ...)` (or even `afterEach(afterEach(afterEach), ...)`. If you want to make it clear that the value of `poStProof.ProofLen()` does not match, you can just call the `bootstrapMessageDirect` method in `afterEach(afterEach(afterEach)`. If it is not, you should be able to call `afterEach(afterEach)`.
What is the reason for this change? The function returns a string that is a `null` value for a value in the array, not a string value. Is it worth adding some extra string for an array?
`fileModified` -> `fileModifiedModified`
Please remove `GONE`
This is not a TODO, right?
Is this a typo?
This should be removed. `rvm` is now being used to set up a lot of time.
The `<H` suffix isn't very helpful.
Line is too long. [85/80]
This is a test case that I'm not sure about. It is not possible to have a test case that was missing but not fixed.
I don't know if this is the best way to go.
This is a bit of a mess. Can we just make it `boolean` and `Long BASEFEE` to make it clear what's going on?
I think we need to keep the previous behavior for now.
I would call it `id` for consistency.
I think this should be `||` instead of `||` since the `&&` is not `||`.
You can remove this line if you don't add the `#ifdef` statement.
How about using ` Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip Skip?
Uri.SchemeDelimiter --> uri.Fragment?
This should be done by the debug log.
Can we call this `tf.appappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappappapp
Why was that removed? I think we're not using it in the app
I think this line needs to be removed. The namespace should be moved to the php php php repo and then the php php php php repo should be moved to the php php repo.
This can also be moved into `Stop()` since it is not being used by `app/index.go`.
I'm not sure if we want to make this change, if the `accountID` is set to `undefined`, then we should just parse the ` clientID` here.
The new version should be `int`
Why is CharInfo::UnknownCharSet needed here?
We should use a more generic name here.
There is a typo here. `not observations` -> `not observations`
I think this is the wrong place for this, as the `--local-scheduler` flag is now being used to determine which version to run.
should be `examples/cdn/...` to make it clear this is not the name of the bundle.
I'm confused by this file. Why do we need this?
There's a check for RCore in the INPUTMY function. I would suggest to use RCore to check for RCore in the INPUTMY class.
Why is this not needed anymore?
I think this should be `FeePerGas`
We should make this `util` instead of `os.Stat`, since we are not using it anywhere else in the code.
Why was this removed?
I would use `fadirectRawBlock` to be consistent with other commands
I'm a bit concerned that this change might not work as expected, but it's just a note that the compiler will not see this being used anywhere else. I'll let you get away with this. I can see what's the reason for that.
Should this be reload_scripts?
I don't think we need this since we're public, right?
Remove the newline
Please use relative imports.
I think we should add this to the `unhashable` model as well
I'm not sure this is the best place for this. The `2017` file is used by the `pkg/util` package.
This is the only place where we call a function from the function, so we don't have to pass in a pointer.
We should probably use `isPrimitive()` instead
Can we put this in the `if` statement above?
It seems like we should move `hierarchical_name` to `create_time`. It's not used in this function.
I think we should use `kubernetes.io/docs/...` instead of hardcoding the class name here.
I think we should just make this `if` and then use `if` to get the `force` instead of the `if`
Is there a reason to not return `null`?
Is it possible to get rid of the create and update it in here?
This is a bit confusing, why we need a `glog.Error` here?
I think we can just remove this and raise a warning, since it is not really needed. We don't want to do any validation errors when we actually try to find an error.
why is this logging needed ?
Why the class removed?
Why is this line removed?
Redundant `self` detected.
I don't think this is needed. The protocol protocol is still used by the user.
why not just setStatus?
Is this supposed to be here?
Can we call this `name` for clarity? I think `xattr` is the name for xattrname.
I'd like to see a test for the testing_fails, as it's a test case.
I'm curious, are these changes related to the other ones in this PR?
why remove this?
I'm not sure if we need to skip the `#exception` here. If we do, it should be a `skip_after_action` method, and if we do, we can skip the `git checkout` check.
This was changed to `libkb.Context` so we don't have to update the `libkb` field in accountNonceMap. This was causing the account to crash.
`clientconfig` should be `clientconfig` and not `clientconfig`.
I think we need this in the admin admin, we can just use the default `async` method to get `admins`
I would prefer a more specific name for this parameter. What do you think?
Can we remove this line?
Why the change of text change?
Can you add a space after `this`?
Import order. Please remove the empty line
feval is not a part of the PR, so it should be removed from here.
This is a breaking change for the public API.
Why is this needed?
I think this should be done in a `validate` function in `validate()`.
I think we should remove the `.string`, too.
Should this be `listenSocket_ >= 0`?
You can use `current_user.subscription` instead of `_user.subscription`
If you're not using any regex anyway, you could also use `preg_quote($preg_quote($preg_quote($preg_quote($var_id, '/'))`
I think this should be a `HTML`
I don't think we should use this import.
do we need this assert? Or just inline it?
Is this used anywhere?
Remove this extra line.
I think it is better to use `go-selinux` instead of `selinux` here.
I'd remove the `=` part, it doesn't seem to be used anywhere.
Can we make this configurable, i.e. `azkaban.storage.artifact.max.retention`
I think we should be able to use the message directly in the message like this: `.../user/message`
should we do a check to make sure the service port is part of ServicePort?
`d` will return null if the key is not found, hence check for it before calling `d`.
I'm not sure if this is necessary, if the port Port is a port Port, then the port Port will not be the default.
I'm not sure we need this.
can you please move the entry to `h2o_strtosize()`?
The `GetTipSet` is used in a few places so it's better to use it in both places.
Is this import needed ?
just a naming nit: can you name this something like `conf`? `public`? `public` sounds more clear to me.
I think you should add a error message to the function signature and not add a deprecation notice.
I would not add grub in the name, as this is not really the best option.
Do you need to make changes in this file as well as the ones below?
Why is this default?
We should use `allow-Content` here.
please change to `BibEdit`, otherwise it will be removed in 2.2. Please check
Why is this default changing?
I don't think we need to test the exact version of `_Serializable` here, as it's a `Serializable` with a single integer.
I think this should be a `@private`
I think this can be private, since we don't use it anywhere in the code.
This is a bug fix. The problem with this is that if we remove the type from the previous line, we'll end up with a bunch of lines of code. So this was the bug.
This is the only test that is needed. `TTransportException` is not used anywhere in the test suite.
Do you know what's going on here?
I would prefer `from IntegrityError import IntegrityError` to be consistent with the line above.
Why is `uninitialized_recursive_mutex` needed?
TheissuerName value is used to send some other languages, so it should probably be removed.
This is unused import.
why `source","DVN` ?
I'm not sure this will work, but I think we need to do `CompareCommits` at all, otherwise the error message will be printed on every run
This is not right. The `IsInUpdate` check will only be true when `errs` is `true`. I think that was intentional here?
Should be `static`
This is not related to this PR.
I'm not sure what this means. If we add an app to the app, we should add a file with an explicit name.
Please remove the field.
should we assert on the assertion on the actual error?
`++i` is the same as `getInventoryItem`
This should be `AppendHistoryNodes`
Should we also add `SPIFFEID` here?
The `vpnServer` should be set to the error, right?
I think this should be `if (!mocha.reporter('base') || mocha.reporter('base')`
Why did you change the regex?
@cramforce do we want to add an extra `this`?
Why do we need this?
This is not needed.
This interface is not used, please remove it
I think we need to move the `WordSources` import to the top of the file. It's not a big deal, but I'm not 100% sure if it's a real purpose or a good way to do this.
I think we should be consistent about the rest of the imports below
The `is null` check is redundant, because it is already done in the check for `undefined` check below.
Is there any way to make this prefix private?
I think we need to remove this
`<=` or `<` ?
Why do you change this to return cls?
I don't understand why this is necessary. The `if` condition is forcing a new condition.
This is an example of a silly thing, but I don't know if it's a good idea to have this in the docker backend.
I think it is a little strange to have a message in a message that was read, and then the user was read.
ditto, keep the name
I think we should remove the `PlanNode` from the code base as we already know the value is used elsewhere in this code base.
bootstrap is not used anymore
why change it to false?
This is a bit weird. What is the purpose of `closed`? Is it the name of the function?
I think this can be removed. The `SessionId` variable is already used by the `State` in the `readQueryRunner`.
I think this will need some testing.
This is the way we're looking at the code where the CartDecorator class is being used, not the class itself.
This will need to be updated too.
this is a bug fix. this bug happened to be fixed in #1074
Why not use `estest` directly?
It seems that the `Converter` is never used, so we should remove it.
`g_min_count` is a string and should be used here, not a string.
Remove the extra line break.
I think this is not the only place that we use this regex, so we can just use `(A-Za-z_][A-Za-z_.0-9]*)*\\]"`
This should have a test for it.
Shouldn't the upper bound be `application/json` instead?
This is the wrong approach, but this test is passing. `TimeSpan` is still running on `Task.TimeoutAfter`, so this should probably be removed.
You can use `!= NULL` here.
This is a bit odd, why do we need to use it?
I'm not a fan of using a `new` helper for `load_time`, which is a little hard to read.
Why not `music` ?
This is not right. If we're going to have this set to `true`, then we should set this in the `session` method and set it to `false` if the ack is empty.
>defaultTime [](start = 16, length = 6) Should we check whether the value of `Time` is null or not?
Since you changed the `.horizontalAdvance (QStringLiteral("a")` to be a `common.Map()` instead of a `common.Map()`
How about we add a `cd9` attribute to the `boltdir_type` table instead?
I'd rather not have a flag for this (and maybe in the `ruby-` module) that would be a good number.
I'm not sure if the prec is needed here?
I don't think this sleep is needed, there is a sleep that has this sleep.
I don't think this is needed since swap is swap. We don't use swap.
I think this is not the right fix since the `blum_Mock` function is already called in `blum_Mock`, so it should be moved to the `blum_Mock`.
I'm not sure if this is the correct way to do this. The goal is to use the `:contains $_`.
Is there any reason for this?
This is an API change that will make it impossible to use a `title_format` field.
I don't think this is needed
Do we want to log this error?
This is a bit weird. I would expect `types.Basic` to be nil, but I would like to understand how it's going to get to the `highType` field.
We don't need this, since it's in the Apache version.
This is a bit confusing. What if we called this `copy` or something like that? I'm not sure if it's a great idea to have this in a `analytics.rb` so that we don't have to copy it everywhere.
I don't think we should do this, we should do it in a separate PR
I don't think it's necessary to call `getComparator()` on null, because `Comparator` is a pointer and we can return null. It seems like it would be more consistent with the rest of the code.
This is the only change that affects TF providers. We need to do the same thing for `commit` and `commit`.
Shouldn't this be checking if it is in the if statement above?
I think we should use `java.util.HashMap` here
I think this is a leftover from an earlier version of this PR.
Just curious, why do we include the context here?
`t.equals(t._1, **a**_1)` is more readable
I think this is a bit of an unnecessary change, as `aria-valuenow` already returns `undefined`. Maybe `aria-valuenow` is more correct?
I don't think this is needed.
Nit: `ServiceName` is not necessary. It's a service service, and it's a service service, and it's not a service service.
This is the same as the one above.
I don't think this is the right way to do this, because we have to do this in the prefetcher. In the end, we should do this check only if `b Block` has been initialized.
I think this is a leftover from debugging purposes, and should be removed. @patrickxb ?
I think we should revert this change. This file doesn't need to be using this PR.
I think this is a bit confusing. If we have `schema.root` as a `id` we could just have the same as `schema.root` and have the same as `schema.root`. If we do, we should have a `schema.root` with a `id` field.
I think it might be good if we could also make the name of the properties `open-file-cost`. It would make it more explicit what we're going to use instead.
I don't think this needs to be a "default-block" since the command-line tools are not in the "default-block" header.
I think this logic can be deleted now?
`data["server_conn"]` can be a string, like in the array, `data["server_conn"] = data["server_conn"]["ip_address"]`
This should happen after the if() check below. The trigger is in the close() call below.
This should probably be a constant somewhere, not a property.
Should this be an `ErrCodeBucketNotFound` instead of `NotFound`?
can this be `host.generic_install_dmg`? you're just looking for the test suite already
remove the empty line
Why is this necessary?
I don't think we should change this, we're still trying to change the `ConcurrentNonces` property.
This is the only place where I was thinking about this, should I just make a copy?
This could be a `Error`.
I think we need to bump the version number to be a specific version of the `db` package.
Is this needed?
Could we use the `ConfigurationKeys` here?
I don't understand this change. `Don't use `+` is the same as `.features`, but the `+` is unnecessary.
Why is this needed? I think it's already a separate PR.
In this case, it's better to use a `_test` that has a `_test` kwarg.
Shouldn't the appID be a pointer?
Remove the TODO
You could just use `if (entryNumber && cond->getOptionalInteger(0)) {`
`Name` is already defined below, so you could remove the `error` parameter. (It's not a big deal, just wanted to check my understanding.)
I would prefer if we could avoid the body in the first place.
I think this should be `loadClassCache()`?
I think the `COMMAND` can be removed.
Please remove the `import org.junit.Test;` and use `org.junit.Test.ReadRead()`. And also, remove the annotation.
This should be `scanner_index_id` and not `scanner_index_id` right?
This will break existing flows. I believe we need a test case for this. The new behavior is to ensure that we don't run the new behavior in the same way that the new behavior is not changed.
Shouldn't this be conditional on the previous line?
I think `List` is better than `public ImmutableList`.
this is not a test...
Does this need to be here?
Is there any reason for changing this to false?
Can we wait for this to wait for some reason?
Line is too long. [84/80]
`this.struct = struct` is redundant. `arg` is used in this file.
I think this should be on the preinit
these lines were too long for a cleanup PR.
Is this line break necessary?
I think this is not needed.
@zcbenz What do you think about `rm -rf` instead?
... and here, if we want to keep in mind, do we still want to keep it in the end?
why not just move this to the try block above?
Should this be `volatile`?
I think this is a good thing to do. It seems like this could be called `ForceTraceWriteLine` instead of `Trace` since it is an API change that will be fixed in this PR.
This set needs to be added to the `set_cache_line_size` function, otherwise we will not need this function anymore.
We should use dagster.core.definitions.pipeline_definition_sensor instead of importing in Py2
Is it worth having a single file name for this file, in order for the use-case to be able to see how it's used?
This is not a big deal, but it's a bit weird. I think it's better to be explicit, and then you don't have to do a refresh/replace here.
I don't think you need the `erb` for this one.
Can you add the `--network-host-project-id` option to the `name`?
Is there any chance that this is a bug fix?
This should probably be `public virtual virtual virtual virtual`
You can use `map[string]int, error` here, as `map[string]int, error` does not have any effect.
Shouldn't we do this in a `defer` block?
I'm not sure we need the second return value here?
Is there a reason for this change?
@bvaradar is it possible to keep these file in a different PR or are they in the same PR?
This file should probably be in a different commit.
Why do you need a separate method for this?
The original message was wrong, I think.
Should this be `additional_pkgs = false` instead?
I'm not sure this is correct. The idea is that it is to allow a row in the case where a row in the first place, but it is not actually the case of a previous match.
I'd say : _"workshop"_
Please add a license header here.
I'm not sure about this change. `DD_INTEGRATIONS` is not a valid value. It is a string that we should do in a PR.
It's a bit confusing that the path is always a `str` here, but not a `path`. I think it is better to use `path_` instead of `path` as the path is used.
seconds -> run
Array => Array.
This should be `BooleanClause.Occur.MUST`
Why is telemetryConfig.Enable required?
The only reason I'm not convinced about the `if` here is if you're not checking for a value in the header. I think that would be better to check for the second part of the `if` statement, and check for the value in the `if` statement.
Is this needed for the test? Shouldn't the require be populated before the first assignment?
I think this is the only place where we use `IBL_UNLINKED`...
Shouldn't this be `opt_verify_access`?
why change this?
Shouldn't this be under `auth#oauth_callback`?
This is not needed. You can remove this if statement as well
Is this change required? I thought it was a leftover from debugging?
I think we should make this a constant.
Should this link to the root for AKS?
`#include <rtps/transport/UDPv4Transport.h>`.
This is a weird thing to do.
This will cause the manifest to be called with the same tag as the same set. Is that correct?
this is not a typo, right?
I think we should check for `userInjectedExpandableRowHeader` in the `expandableRowHeader` instead. It's a bit odd that we're using the `userInjectedExpandableRowHeader` property in the `expandableRowHeader` property, but I think that's a bit confusing. Maybe we should have the `expandableRowHeader` property that is passed in and pass the `userInjectedExpandableRowHeader` in to the `get` method, and have the `get` method take the value of it as an argument. I think that's better than adding the `
why this is not just `cachedLibPath`
nit: maybe `prohibitedAttrs: ['aria-label', 'aria-labelledby']`
Why do we need this?
This is a very minor change, but I think we should just make it a `TableCapability` instead of an `SparkTable` object
Should we keep the `.merge` here? Or is it because we don't allow `@params` anymore?
I think this is not the right place to put this check. The `decrypt` method is already in `validate()`.
This is not necessary. It is already a property. It is already being called by the `ClassHeaderFunctions` in the `ClassHeaderFunctions` and it is used in the `ClassHeaderFunctions`.
I'm not sure why you removed the `Tags` here.
I would prefer to have this as `get_extents` to be consistent and consistent.
This is a change in behavior. Please revert this.
I don't think we should be changing this.
I think we should keep the `PrefetchAfterBlockRetrieved` as well for now, but I'm not sure what the best way to go
this looks wrong, why is it a public property?
Do you think we should default to the response in the `HeaderMaps` struct?
@mjkkirschner I think this was the correct fix for the bug, but it was a bug in the bug.
I wonder if this is the right way to write `#if // HAVE_CONFIG_Hrm`?
I think this is a good idea, we should just remove this function. It's a bit of a mess, but we can fix it later, and it's not a blocker.
I'm not sure if this is the right way to go.
why is `vertigo` needed here?
why do you need a `.lstrip()` here? I don't see it in the URL itself
@jridgewell Is this a breaking change? I'm not sure if this is the right way to do it.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
@mjkkirschner @mjkkirschner @mitchellhenke can you confirm that this change is ok for you?
Unused import. Revert the right of the wildcard import
It looks like you need to lockBeforeLock at all.
I don't think we need to import `JavaParserConstants` here, since the methods in `JavaTokenKinds` are only relevant for the `JavaParserConstants`
Could you add Guid here as well?
This is a no-op because of `Collect`
This is the same name as the broker name. It should be used instead of the table name as the table name.
I think this should be `!PlatformDetector.SupportsSharableMutex`
You can remove the trailing slash here.
We should probably have a unit test for this, as it does not make sense to me.
I think you can just use `global.VERDACCIO_API_URL`.
Should we also include the language information in which the language is generated?
I think it's better to move this to `public const string` so that it is not in `onTrigger`
I'm not a fan of this name since it's only used by `getAliasProp` and it is not a getters.
This is the actual fix.
You should use `is_empty` here
It's not clear what we should do here. If we update the updated value, it's actually going to be handled by `updateRequest`, and it's not updated.
This is a change in behaviour. I think it's fine.
I think this should be `/chunk/{address}"`
Is it possible to avoid calling Atoms in both directions?
Need to change it to a list of dict in case it is empty
I would move this to the bottom of the file. It is not needed anymore.
Let's move this to `const CONNECTION_EVENTS = ['error', 'destroyed';`
Nit: please revert the extra newlines
why the rename to a string?
This is not right. If there is no error, then it should not be returned.
No need to check this, it's only on one place, right?
I think you can delete this line
I think this is a bug fix. It should be a new `partitionField` that has been released in the `Map` class.
I would put this on a new line, as it is used in the `setup_build` method below.
Nit: `padding` is a bit ambiguous, maybe `[]` or `[]` is better.
We don't want to error if `MongoError` is empty, so we can just change this to `error`
Can this not be `""`?
This is a bit weird - why do you need to loop over the loop?
I think the term `terms` is not used anywhere, right?
Could you please add `replaceResultInFormWithNew: true`?
Missing space after comma.
Why do you need to remove this import?
Do you think it makes sense to include `project_number` as a param?
I would move this down to the `defer deadlineTimer` block
This change is not related to this PR, but I don't think we need this change.
This is the only place where we call the function from outside the loop (which is a bit odd), and how we do it everywhere else in the loop. I think that would be a little cleaner, though.
We should be able to remove this listener from `touch_point_delete`. It's a very specific thing that's not needed to be done in `touch_point_delete`.
I think you missed to add this in the `if`
This is the only place where the `PONY_API` would be used.
This seems to be a bit of a weird thing to do - the field name should not be volume-valued, and it's not a volume-valued name.
Who will be able to remove this `bool`? I think it is a little confusing to have a `bool`.
This is a temporary workaround, but I'm not sure how to test this.
Should this be `@offering.user_has_license?` instead? I know it's the same but it's a bit weird, maybe just `@offering.user_has_license?` is the same but it's not the same as `@offering.user_has_license?`?
I think this is a bug fix.
I think we should remove this line.
Why is this not `box`?
I think this should be done in `core.php` and then in the `BuildOutput` where it's used.
This attribute is not used anymore.
Why do you need this?
I'm not sure if this is the correct way to test the `is.undefined` property.
I think you can delete the `gocloud.dev` now that you've added it.
this is the actual test that needs to be fixed in the past
I'm not sure what the UTF8 is here, since the UTF8 doesn't use the UTF8 implementation.
I think this is a change in behavior.
`public static final MemoryMXBean MEMORY_MX_BEAN = ManagementFactory.getMemoryMXBean();`
We don't need `team` here since it's already an object
This method should be renamed to `updateParams(string)`
Same here, we should use the new data_encoding arguments.
You can use `string.Empty` here.
These includes are not needed anymore. C++11.
This is a bit of a hack to use.
Why is this being removed?
I think this is a good time to make this a little more general.
I don't think this is the right approach.
I don't understand the whitespace change here.
This is the only place I'm not sure about the `RetryTaskFailure`, but it seems like we should keep it in the `RetryTaskV2`?
please avoid star import
this is a bit weird, maybe it should be `if img_norm_cfg:`.
this is an API break, is it?
This is a change in behavior.
This is the only line that needs to be fixed, not the cron job.
@dvoytenko is this going to break any existing code?
Why is this change necessary?
`go.opentelemetry.io/api/core`
I'm not sure we want to expose this as a `.yaml` property as a `.moneroero` but we can add it to `keScanner` and then we can add it to `add_name` and `add_name` as well
What if spark_column is spark_column? Should this be spark_column.program?
we should also change the type of the sentence.
I'm not sure if this will cause any issues, but I think the `else if` should be moved to the `else` block.
If we remove the deploy mode here, does it make sense to remove the deploy mode?
This should be removed.
Why is this needed?
Why is this change necessary?
This change is not related to your changes, but is not related to this PR.
I would have expected this to work as `BoolArray` is a list of values, but this list can be used to determine if the list is a list or a list.
Can we use `window.isDebugEnabled()` here?
I think we should default this to `""` to indicate that the default is `""` and that it is an empty string.
I'm not sure if we should make this controller dependent on the controller. It seems like we should only check for `ctx.Controllers` if it is not a controller.
Please add an `if` clause here and below
This is a bit of a weird thing to do. The move function is not used in this function. It can be removed. It is not used outside of the function and it is used in the `try`. The move function can be removed if it is not used in the `try`. The move function can be removed.
Why not just `return {...}`?
Oh, I didn't see any tests using this file. I can see why it was here, but it seems like it's still in case we want to keep the `p if`...
I think this is the only place where the error is used, is that the error you're calling here?
I don't think we need to do that. I think the `Dictionary` property is being used in this file and the `Dictionary` property can be used in the `Dictionary`.
If this isn't a valid test, shouldn't we just remove this test?
I think we can remove the `deletes` variable and use `this.deletes = deletes` in the if-statement.
This exception handler is not needed.
@agramfort I wonder if it would make sense to move this check in `pkg/resource/build_source.go`?
can we use `if` instead of `if` here?
@alalazo I think it would be good to wrap the line after `if (!logger.error(...))`.
I'm curious why you didn't just call render_args_struct() directly in render_service_call()?
I think this can be deleted now
This is not right. The `StatusForbidden` check is redundant.
The rankstr is not a pointer, so we should check for the first element of the rankstr.
I don't see the point of this. It seems to have the same pattern as the initializeResourceFields()?
Do you still need this? It seems like a good candidate for a `outbounds` variable to be in `outbounds`.
I think this is not what we want. I think the reasoning should be `cancel` here, since that's what the reason is.
Should be phpstan-param array<string, string>
I'm not sure this is the right place for this, since it's a `TypeError` error. I don't think we should be catching this in the future.
I think it's a good idea to tag on the `tags` tag.
What is this default for? Are we trying to keep the pair as is?
I think we can set the default here now.
Why is this C++ not being used anymore?
I don't think we should be changing this here, it's not a problem.
You need to be able to do this as well, so you can remove this `if (mount (" ("etc", "etc",", NULL)` block below.
This should be `get sequenceNumber()`
Should this raise a `raise` if it's not found?
Can we keep this global? I'm pretty sure it's a good idea to keep it, but I'm not sure what's going on with the `aws-global` option.
I think `querystring=None` is redundant here, because we already know that we don't set the `User-Agent` argument to `None`, which we want to use in the `default` case.
This is not related to the PR, but I'm pretty sure we can remove the `ticker.C` here.
Why not use the `nameof` function instead?
I'm not sure if we should make it a real enum, but I'm not sure it's worth it to make it a enum.
I believe this should be `public const string IonMobility = "0.####";`
`FlattenedMethodAsyncCallSettings` is a non-empty string.
I think we should use the `secrets` helper here to be consistent with other packages.
As a reminder, this will make a lot of problems, since the only specs that are not using it. I would probably just remove the `connect()` and `get()` if we want.
What's the purpose of this block.Block?
I think this should be `from flask import requests`
Is this still a copy/paste error?
Shouldn't we call `s.idx.BuildIndex(BuildIndex)` here?
This line is not needed since we are already setting the validation above.
I don't think we need this anymore since we're using `to` on the spec
Why was this changed?
This change is not necessary.
This needs a similar modification
Do we want to set a default value here? We should only be able to set this when the configuration is set to "local" in our environment.
We don't import anything in this file?
This is a regression I am not convinced.
This is probably not the only place where we want to handle the case where theexit_codes value is not set. I think we want to make sure we don't break anything about that.
This is not a key in the description of a key in the field.
We should probably check for `this.servers.size` here.
What if this is a `>= 0`?
This is a bit confusing, I think the `IsTracingEnabled()` check is still needed.
This is the only change that affects TF codegen, so I think we should keep it in sync with @hongwei1990
`st` is a generic name, can you rename it to something like `stats` or something?
I think it's better to use `or "tail: unrecognized file ...`
Can we just use `{"{"aws": "kubernetes.io/cluster/fake-infraid":"owned"` ?
I would have used `soso`, but it's not clear to me why we do that.
this is the only place where the error was chosen
You can just use `kill` here.
This code is not really related to the PR. It is not related to the PR. It should be `CreateSharedString()` instead of `CreateString()`
Might be better to keep the original formatting consistent with the rest of the code base.
I'm not sure what the console is here.
Can this be `private`, since the constructor is used only once?
Isn't it better to use `Array.isArray()`?
If the screen is not found in an error, the enumsspb will be empty. Should we add an assertion to the screen screen with an invalid error message?
This is the only change needed to make `browser.tizen` public
I think we need to make sure that the password has the same meaning as the input. Otherwise, the `err` will be the same as the field.
Should we rename `TelemetryConfigurationDto` to `TelemetryelemetryData`? Or maybe it is just me but not sure if we need to name it `TelemetryConfiguration`
I don't think this is right, boost::make_shared is a good idea, and it is not a big deal.
Shouldn't this be final?
I think we can keep the `@` annotation here, as it is already defined in the phpdoc above.
I think this should be `if response.isSuccess {status}.')`
Is this a required property? If not, we can use `GetSuffix` instead of `GetSuffix`
This error is now being handled in the `err` variable.
NIT: url -> url
Do not use `objobj.slug` for client_model_slug.
We should remove the info from the info in the logs, as it is already closed by the debug message
do we want to keep the old version?
I think we should not make this function take any argument as argument. We can make the function arguments public and make it final.
This will create a default constructor, so it will not be necessary. Also I would prefer a `newLevel(), cache: []string]*SublistResult>` because it is already a default value.
This is a very common place for a lot. I'm a bit confused by the rest of the code. It's a little strange that we are using a single `FetchDate`, but it's not something to change in a `FetchDate`, so I think we should do it in a separate PR.
This is the main change that affects backwards compatibility, and is not related to this pr ... please revert
remove empty line
I think it's better to use `IEnumerable`, `IMap` and `IMap` here
Do we need to make sure `Commandc` is not set at all?
Why make this package private?
This is a bit confusing. I would say the language is not a language.
should be `2048 * signature checker threads + 1`
This file should not be part of this PR
Should this be a separate commit?
I think these two changes should be reverted. `#if defined(_ARM32_ || o64)` should also be removed after the `#if defined` below.
This is the change that affects the ` "[ROOTDIR` change.
This include doesn't seem to be needed.
We can't have this in the database yet, but we should probably make it a configurable `patch` package.
The rest of this file is a little hard to follow, but I think this is a bit of a hack.
Why did you remove this?
This should be done in the same PR as the one in `main.go` as well.
I think we should add the `name` field here, to make it more clear that we're not going to provide a warning.
this line is too long
I think we should use `options.set(options.router.configs)` to avoid calling the new options twice
I don't think we want this to be configurable, since the user will not see this option in the `base` method.
Should we use `tests.tool.moves` here?
why is this a `self`?
this should be `api`
Is this the correct path to `m.paths`? I don't know if this path is the best place to put this path.
As discussed offline, let's remove `_gaPropertyID` from the list.
Shouldn't this be `status.uploads`?
This should be done in `init` and `init` and not here.
Is it necessary to call this `DbCapacity` ?
The hash value is already in the hash string.
This is a bit of an awfully close change, but I think it's a good idea to have a better way to do this. I'm going to be curious if it's a good idea to have `sudo` as a way to avoid the command line length.
nit: move up this line
This is the only usage of `previousState` variable and the previous `s` are causing issues. I think the `previousState` value should be always set to false.
I don't think we need to make these changes, they can be removed.
Should we log the user here, or is this going to be missing in the `elseif` branch?
The `error` field should be `this.message` (as well as the other error messages).
This is a bit weird, if you're using a value in the `XmlParamsConfig` you should do it in a separate `XmlParamsConfig` class instead of the value in the method.
Is this error really useful? It seems to me that we should not be using the endpoint for the error.
This is not a part of your PR, but I'm curious if it is possible to have a `<T>` tag here?
nit: can you make this `int[]` and the next line?
We should probably add an example here that would be a separate PR.
I'm not sure if it's worth it, but it's not really a big deal, just wondering if it makes more sense to have a test that has this in the first place.
I think we should catch the `catch` here, as this is the only place we need to do is catch any `catch` in the future.
This is a bug, we need to fix it.
Why do we need to return an error?
Why is this needed?
I think we need to copyCommand to the command as we only use the command in `r.dir`. I think we should use `r.copy` instead of `r.dir` here.
I'm not sure why we had to change this var?
Why this import is needed?
errors is a little strange. What is the meaning of `errors` for?
Revert this change.
I think we should just do this in the `if bpfEnabled`, and then just do it in the `if bpfEnabled { ... }` block.
This is not the right place for this. The Text is used for Text, but it is used for Text. The only thing I'm not sure is the right thing to do here is to call the Text->sqlcode.
AccountMaxVersionPrefix is a pointer, so we should always use the value from it.
I don't think this is right. The enum is used in the dev mode and the enum is used by the dev mode, and it is used in the dev mode, not by the dev mode.
We should probably change this to `error.msg`
I think it would be good to rename this to `ensureCoroutine`
should we have a test for this?
I don't think we can delete this method, it is now being removed. The `MultiDomainHost` is now being removed.
I'm not sure this is a good idea, but I'm pretty sure it's not the case anymore.
I think this is a bit of a change in behavior, but I think it might be useful to have a test case for this.
This test should also include `setup_enabled` in `test_enabled.py`.
Why does this need `1`?
This should be moved inside the for loop, to be able to remove all the emit when we have a new function.
I think we should keep it as a set of syncs as possible, and also make it a set of syncs.
Can we make this string a constant?
Why was this removed?
I think you can just return top. Don't you want the top?
Can this be const?
This was removed because it is no longer needed
Why remove these two options?
I think `if not None` is better here
I'm not sure if this is the right place to put this field. It is used by the time being, so I think it should be initialized to `internal`.
Why are these `Output` needed?
this was the bug. The `v2` package is now unused and should be removed.
Why do you need to make this a class level `StatusConstants`, and move the interface to the azkaban package?
Is this needed ? The rest of the changes are only for testing purposes.
I think we need to add the new namespace to the new `Forms. Module`
I think you need to import this baseprovisioner, otherwise it will fail
should this not be part of the `FrameworkBundle\Model` list?
Please use `DashboardEffect` as mentioned above, in this file.
Wouldn't be better to have this take an `IS_flags` parameter to indicate that the token contains the user?
Is it expected?
I think it would be better to use the same route for `Group`
Why is it in the schema file and not just Automatic?
We need to do this before merging - we can do `this.attributes.Replace(key ?? string.Empty, variant)`
Is the `dispatchFilter` necessary? If not we should use the same path as we are not going to change the behavior.
This is not needed anymore.
What about `useDefaultSources=true` for the default sources?
I think you should remove the `else` part of the function
This is a test, I'm not sure if it should be changed.
why copy here?
Is this necessary for the new field to be added?
Should this set the `balance` in the `SECURITY`?
Shouldn't this be `JsonSchema`?
why not using the constructor? This will make it easier to test
Does it matter that the only place it is used is in the base layer?
should we change this to "tasks"?
Should we add `t.Logf` here, since it's a `Error`.
This is a bit weird. Why are we not using a default value for the `#define-type` target? I think we can just do `assert.isTrue(...)`
I think it would be better to call this `validateNoConflicting` instead of `stop`.
This is the only change that affects this PR.
I don't think we can assume that the `AppSecEnabled` is a `App`...
I would call it `self.interLocalFile` and make the constructor private to be consistent with `self.interLocalFile`
Why did you remove the "move" of the spec?
This should be a constant.
I think we should remove `G3C` too.
Do we have a test that verifies this works?
Why is that line deleted?
Could this have a `te devices` type? I'm not sure what the best thing to do is is, but I don't see any reason why this is a `Access-Control-Allow-Methods`?
This is the only thing I'm seeing is this because the plugin is used to build a specific plugin with the current `python_arg()` function. So this should be `!mPluginLoader->fileName()`
please revert unnecessary changes in this file, and in general it's not used any more.
Was this removed intentionally?
I think we can just delete this line.
Is there a reason to use this method?
This class should be a `Map` object. It is not really important to use this class. It should be `String.format` or `List<String>`
I would prefer to import this from the parent `DR` package. The `_drbg` package is already imported from `_DR_drbg`. I would also move it to `__init__`.
I think this check is not required as we can reduce the amount of code later.
@jsoriano This is the only change in the PR.
Is this change related to this change?
Lade hoch should be lowercase
I think we can get away with this variable `minimumUmask`, since we don't have any special handling for it.
I think the `mongoErrorContextSymbol` is still needed in this file?
This change is not related to the bugfix, but the change is not related to the issue.
We should add a `TODO` to remove this link.
You should be able to use `if named_fields:` here instead of `if not field`.
I don't think we need this change
Remove empty line.
why do we set the state state here?
This is a different bug, but I don't think it should be.
This function is used in `validateUser`, and it is used in `validateUser`, and it is used in `validateUser`, and it is used in other places. It's used in this file, so it's not necessary to do this here.
Why is `)/action.ExecutionDataGas` removed?
I'm not sure if this test is actually testing anything. If it's not, it's not an issue, so it's not a problem because we don't have a `@Restricted(NoExternalUse)`
This error message is confusing.
why remove the parenthesis?
For the record: I think we should set the default to `""` in `endpoint.go`
I think it is better if we move the handle_() call above the caller and call it it again?
If `t` is `true`, then it would be better to remove the `runBpfUnitTest` calls altogether.
I don't think this function is used anywhere, can we remove it?
I think it should be ` validateProxyUser(String proxyUser, User realUser)`
We should probably have some test coverage about this
I'm not sure if this line is needed. I think it's necessary to get the right thing to do, but I think it's ok to get rid of it.
I don't think this is needed.
Why not use `strdup` instead of `and`?
Can we have a better name? `DEFAULT_ Tracer_DIR`?
I think it's better to use the constant `--upgrade-Bootstrap` instead of `os.Stderr`, and use that in the error message.
I think this is the only place this is used.
This line is unnecessary, you can remove the `va_start` function
Why not `envconfig:"PROJECT_ID"`?
Nit: this can be private.
I think this is a good idea, but I'm pretty sure we're going to make the translation here so it's clear this is a transient request.
can you use the partial helper here?
I think this should be `String#Parameter`.
This makes me wonder if we should have a test for this.
nit: `obj` can be a local variable and not a local variable.
Is there any way to make these tests configurable by default?
I'm not sure this is the right fix. It should be a separate commit.
I'm wondering why this isn't needed. Is this needed for `pylint`?
Shouldn't this be removed?
This will be removed if we don't use the env-var env-var in `env`
This is the one line that pylint is complaining about.
I'm not sure if it's a good idea to set `txReceipts[i]Removed` to `true` when `txReceipts[i]Removed == true`. I'm not sure what the issue is, but I'm wondering why we need to set `txReceipts[i]Removed` for all cases (i'm not sure if it's worth it)
This is not correct. The `repoURLFlag` is a URL that is in `/lib/repo-url.js`. The `url` is used to set `github-url.go` and `github-url.go` for any specific specific URL.
Is this change necessary? I'm not sure if it's the best place to do this.
import not used?
This is going to be a problem for the `execute` call to the `aSelection`. I think it's better to do the same thing in all the `WPCOM_KEY_KEY_KEY` methods.
This should have been a separate commit
Let's not change this import
We should do this in a separate PR.
`1 * time.Second` is not needed here, it is already `uint8`
This does not use `abspath`, so I think this should use `pathlib`.
We should use `omitempty` in `imperative_json` instead of `// +optional`
I think `var CircularJSON = [];` is better here
`DynamoServices.InvalidStack` is more clear, I don't think this is the right place for this
This is a bit confusing. I'm not sure why you removed the file bucket and not the directory. I would have expected the file bucket to be in the logs.
Shouldn't we also make the Solr as well?
@adamjstewart And I'm wondering whether `--lib` should be a `-` namespace, or maybe `--no-lib` should just be a `-lib`, since it's a `-` namespace.
This should be a different slot. The first one should be `long`. The current one should only be used to set the default count.
Also add this to `modules/shoot.txt`?
I think we can keep this and add an `IReadOnly` to the end user, and have the `:80` parameter be immutable.
I'm not sure if this is a good idea...
I think we should just call it `needs_reshape` instead, because the data is created in `Reshape` and the other `compute_service`
In case you want to render the random random random random in the first place you can call `order.sort_by` and then call `belood.size == nil`. I think you should be fine with that.
I'm not sure how this fixes the issue. This fixes a conflict.
Can we add a type like `ErrOnDelete` that does this? It's not a `string` and it's not a `string`.
Why is this in `libkb/service/main`?
I'm not sure if this is the right way to handle this, but I don't see why we need to add this.
I'm wondering why the failure in `ENGINE-16002 Exception` is needed here. It should be just the message that should be fixed.
NIT: Please avoid using `log.codahale`.
should probably be `config`
This should be `if (!thread.join())`
I think this function should be renamed to `delete_process_init`?
why change this? Are you planning to use `~/.v3`?
@mjkkirschner @mjkkirschner I am not sure this is a correct change. I don't see any other test using this flag, but it is a good idea to change it.
nit: can you fix the spacing here as well.
Same here, this is not needed. `config_file` is already being used by the `config_file`.
why is this change required?
why do you need to check for `self.floor_thr > 0`?
can we use the package `chaos-mesh`?
Please add a license header here.
I think this should also be `MemoryUnlimited`? `MemoryUnlimited` is a bit confusing. Maybe something like `cgroups.no(filepath.Join(filepath.Join(path, cgroup *configs.Cgroup)`, and if it is not, `MemoryUnlimited`, `MemoryUnlimited`, `MemoryUnlimited`, etc.
Shouldn't it be props.maxNumberOfFiles !== props.totalFileCount ?
I'm not sure if `epochNum` is the right place here. I think `*` is the right place for it.
This looks like a good change to me, but it's a bit odd to see a change in the code.
This should probably be in the function `std::right` (or whatever it is).
why connectid?
should we just make it nullable?
I'd rather have the deprecateprecateprecateprecateprecateprecate, as it's the default.
I'm a bit confused, why do we need to use a name here?
I'm not sure why we need to do it here?
We should probably make this a constant. It would be better to move the logic there.
What happens if the iterator fails the return?
Metrics/LineLength: Line is too long. [82/80]
Why is this being removed?
This is a new line, please revert.
I don't see where this is used?
I think this should probably be `bq_data.append` instead. `msg.to_all` should be enough to ensure that the user_name is not found.
This is the only change that affects TF providers. I think this is a leftover from the previous version.
Is there a way to test the number of 10 values?
I think this should be `text_font_size`
You can't do this.
we should not do this for all cases. i.e. `node.getAttribute('id')`
This should be in a separate PR, as it is not related to this change.
Nit: please move to the new line.
why not `TRUE`?
I think this should be `nan, inf or name (signed)`?
What does "1" mean?
Line is too long. [81/80]
The change looks good, but it seems like this should be a separate PR. It's a bad thing, and we don't want to change it. If we want to change it, I'd prefer it to be consistent.
This change is not needed.
This is not correct.
I think `false` is not necessary here, `string|` should be enough.
Please also make the test case insensitive.
we don't need to validate the API here, we can just return the error if there is no context.
NO bool should be lower case for the last two
@mfojtik @smarterclayton I think we should also check for the `if Reader != nil`
This is the only real change that is not correct, right?
Should we check for other types of error codes?
@mattpap AKS reuse this. You should also update the docstring to include Python3.
Same here, if `err` is nil, `err` will be nil
I think this is a good candidate for a helper
Is there a way to check if controller is controller not available at all if controller is enabled?
Why remove this?
`requestProxy.Entries.Count` is not a null check, `is SpanContext` will be null
why is it OK to call `ards` here?
I think we should rename this. Something like paranthesis_BY_PARTITION = "read.split.by-partition"
Please don't remove trailing whitespaces.
chunking is a little weird. I would have expected the `chunk` to be a `List` and a `List` if the `chunk` is an `Error`.
Wouldn't it be better to put the label in `USERNAME_PASSWORD_REQUIRED`?
I think this should be just `_tree.Commit(long blockNumber)`
This method is used in a few places. Can we call it like this? What is the use case for this method? I think it would be better to call it `communitycommunity` or `communitycommunityWithSchema` and `communitycommunityWithSchema` if we don't have any other name.
I'm not sure if we should import this only if it is needed. I'm not sure if we should import it somewhere.
@zjffdu I'm not sure this line is the right thing to do, but it seems to me it should be `NugetVersionReplace`.
I'm not sure if the `and` part of the code is needed, but it seems like the only thing that is needed is to check the storage class and not the root `ApplicationOptions`
Please make this string translatable.
I think it might be better to use the `Set` method instead of `no region` since it is specified.
can be simplified to `new Victim(player, Victim.Type.TELEPORT,`
I think this function should be moved into ApplicationKind. It would also be a bit more readable.
I would use `Time` here.
The `EC.element_to_be_unclickable` check should be redundant here, since it's already in `working_element`
It would be good if we could make the name more explicit here. e.g. `Marshal` or `PipelineManifest`
This could be removed if not needed.
This change is unrelated to the PR but should be reverted
This seems like it could be done in `Get` not only when `m.Combo` is used
The file already exists and is never used, so this is not necessary anymore.
The app container has already been removed. Is that intentional?
Should this be in `app/services`?
I think it would be better to just have `integration` as a list of strings rather than using `private`.
I think this should be removed as it is the default implementation of this method.
This is a leftover from the previous version
Is this related?
I don't see the reason of these changes.
I think it is better to remove the shutdownHook variable and remove the overrides in `removeUp`.
Is this a typo?
I don't think this is a good idea. It should be in the `ProcessInfo` class.
This is not the log level, it is not the same as the one above.
Not sure if I need this to be a configurable json string.
I think we should add a case to identify whether `status` is true and the `status` is false.
I think this test was actually testing what `MemoryFactory` was. The reason is that `MemoryFactory` was not being run in a test and the `MemoryFactory` was being run before.
Why is this necessary? It seems to be the test case that we want to pass the `Recv` directly, rather than the `t` in the tests.
I think we should still have `setup.rb`, `setup.rb`, `setup.rb`, `setup.rb`, `setup.rb`, and `setup.rb`, `setup.rb` and `setup.rb`. I'm not sure if this is the right change.
`is notSurfaceKHR` should be added to the list above, right?
This StreamDriverError is now useless. Can you remove it?
This is a bit weird, it's the "maya" package. Is it just for a specific reason? If it's not then we should probably add the package package to the API, so that we can easily get rid of it
I'm not sure what the best way to do here is to have a Decorate and Decorate that is actually the correct type of that. The other way is to add this property into the `ISpanDecorator` class. I think this is a better name for this.
@rsimha do we want to add this in here?
Should be `.usage`
Trailing whitespace detected.
I don't see where this is used. Can you remove it?
This is not the right way. It does not support NOP.
If we are not using `Assert.Same`, then we should just use Assert.Single here and use Assert.Same
This is an example of how `io.prestosql.spi.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.server.
I think we should just use `GetMetricFunction` here instead of the `Function`
I think this will need to be `parers/LANAN/LANAN/LANAN/LANAN/LANAN/LANAN_BACKEND_add`, since that's how the `LANAN_add` works.
This is a bug fix.
Could you add the backtick here?
Isn't the baseFee a zero number? I don't know if it's the case.
This seems to be a wrong change, but it's a bit odd. Can you explain?
this file should be removed.
This looks like a typo.
I don't see where the bodyConverter value is null, but I don't think this will work. The bodyConverter should be null. I'm not sure if we need to check the bodyConverter before calling `onError` here.
I would prefer to keep the enum as `String` and make it `final`.
Should this also be done in `containsKey` itself?
forgot to ask the reasoning behind the first letter, so it would be better to use the same number of places you used `f`. It would be better to use a different number of places in this file.
This is the only change that affects backwards compatibility...
I think we can remove this field.
This is the only change that affects the UI. The stateDb is used by the UI.
I don't think we should fill it here, but I think we should keep the old `is_flags` for now.
Why not just use `Byte Size` instead of `m.Body`?
Can we move this to the `/tmp/kestrel/test.sock` namespace?
What if the blob is empty? What if the user didn't try to call `length`?
I think this is not needed anymore.
What does `api_version >= VK_API_VERSION_1_1` mean? Should it be `VK_other_api_version >= VK_API_VERSION_1_1`?
I think the job_failed should be set to 1 here? If it's the case, then the job_failed will be zero.
I don't think this is necessary, since the progress elements is not the initial value (which is the progress bar) and the value is zero. The progress bar of the initial value is zero, so the progress elements can be set to the initial value.
@liggitt this is the actual fix.
Note to self, this should be handled by the debug level.
Can this be removed?
Why are we removing this?
@alexander-schranz why are we using `preview::spmd` instead of `preview::preview::spmd`?
Can we use `validate_one_type` here?
This is the one place where we use the `Sum` value.
This should be `taint`
can we just return `obj[key] = self.__apply_mult_override(self, key, replace_value)`?
I think this is not needed. `assert_all_instance_status` is already being used in the `assertEqual`.
This change is not necessary, as `env=universal_newlines=True` will fail.
This change looks good. I don't think the changes in this file are necessary. `GetActiveClusterName` should have a default value on the `Clusters`.
I don't know how this test case worked, but I don't think this is a good idea. There are two test cases that need to be checked in this test. Maybe we could just use an `@pytest.mark.skip`?
I think we should return here, otherwise the whole `ToList()` will be called when the next time it's called.
Do not use semicolons to terminate expressions.
is this change necessary?
This is the only usage where the client is being used. Can you please revert this?
This is the fix. I think the `if` statement should be inside the `if` statement above, since there are two places in the `request reprocess` function. The `if` statement should be moved to the `if` block to the next line, but I think it's ok to just remove the "h2o_reprocess_request" condition.
I think this refresh might need more clarification on what the refresh is for.
This was the only change that affects backwards compatibility.
I think this should be `NABoolean`, right?
We should probably remove the `// TODO` here.
I don't know how to get the `collectLinkLibraries` for `ModuleDecl::ModuleDecl` in the code, but it seems like the `collectLinkLibraries` is a `ConcurrentLinkLibraries` for some reason.
I don't think this is needed, since we already have the `set incorrectly` flag in the `XmlMetadataBurstRate`
This method was moved to `onResponse` so it doesn't get called by other `Client`s.
We should not log the info information here, but rather log the message that has already been logged.
Is this TODO still relevant?
This is a change in behavior. This change is not necessary.
Can we rename this to something like `GOMAXPROCS_VERSION`? I think it's a bit more clear. Maybe `cho_VERSION_GO`?
We should probably check for the presence of the `if producer == ctx.addr.RawAddress` check before checking for nil.
I think this is a bug fix. We need to keep the previous version of the remoteHost in case the project is not started.
Nit: please move this to the bottom of the file (you'll need to move the `=` to `__eq__`.
Should this be `W3CBridge`?
Is it possible to use the standard `JSONObject` type? I know that's where the `json.JSONObject` type is.
Was this a bug?
Please remove the extra space before `"`
I'm not sure if this is a good idea, but I'm not sure what the best approach is here is, and what the user should do is expect the file to be in the same directory.
I don't think this is the right place to put this check. It's not necessary, but it's a bit confusing. I think we should be using `isProtected` to determine if the last one exists and if `isProtected` is present, then we should check if the result is a boolean.
This is not a valid element.
Can GoGapicContext be removed?
Use the new Ruby 1.9 hash syntax.
I assume this was a mistake before?
This is the only change that affects TF codegen. I don't see a need to change it.
I think this is a bug fix, the `target` should be `null`
I think we should change these to be `user-loyalty-web`. The current approach is to change the text from "user-loyalty", so we should change it to "user-loyalty". This is a change in the current change as it is just a tooltip, and we should change the default value to something more generic.
Should this script be in the `environment_script` variable instead?
Can't we just catch this in the `try`?
This is a little hard to read, but I think it's good to have this as a static field.
@fowczarek any concerns with this?
Why was this change made?
Is this file for a specific purpose? I think `log-file-path` would be better.
This is not necessary, it is a bit confusing.
@dvoytenko: This is the right way to do this, but `OpenTelemetryTracing` has a `jaeger` instance, and the `jaeger` instance should be updated to reflect the fact that `S3Telemetry` is not being used.
This is the only place where the first arg is used.
MakeEnvironmentURL should be called from the environmentID, not from the environment ID.
Please use `to.toString()` instead.
I don't think we want to have this struct defined anywhere. I would say that we would need to add it to the `Supports PaymentVersion` struct since it is not used anywhere else.
The goal of this is to make `Recv` a `List` in the `Create` call instead of a `List` here.
Please revert this file.
This class does not contain any type information, it is only used by `combineFileHandler`
Please use `AllergenNameDao.createTable(db, true)` to avoid the need for the `dropTable` call.
why remove the expectation?
Can you use `key` instead of `int64` here?
This is not a public API, but I think it's better to make it a private method.
nit, but maybe `const int*`?
Can you please add a note to the docstring what this does and why it is needed here?
I think we can skip the `no_model1_train` check here. We already have a `ckpt_train`, so no need to check it again.
Can this be null? If not, we should be able to remove it.
This seems to be a duplicate line.
@mfojtik why is this change required?
use `setConfig.GetVariable(...)`, otherwise it will be more readable
I would call it `TeamPlan.read_up`
It's better to use `String.format(beginIndex, endIndex)` here
Can this be `final`? We have a `registry` that is used to throw an `Error` when `registry` is null.
Can you please add `# type: ignore` and add `# type: disable` to the docs?
Why did you change this?
This is not a good module, but it seems to me the module is not in the schema, and it's not used anywhere. I think it should be removed.
Would you mind using `Optional` instead of `list` here?
I think this is still a good candidate to keep the `label_as_spammer` action, since the label doesn't have a label, and the `edit_account_privacy` action will work.
This is not the right way to go.
`* 2` is a little too vague. Maybe `escape_char * 2`?
Do we need to check that `i` and `many` are the same here?
The `hash` parameter is not needed, `ctx` has it...
I don't think we should be calling this here. I think it's better to use a different variable names for the `clangsa` action. I don't think that this is a problem, since the `settings_map` is only used in the `settings_map` method. We should not be able to get the output if we're using the `settings_map` method in the `settings_map` method. The `settings_map` method should be used in the `settings_map` method.
I think it would be more consistent to use `fee = 21000` here. Also, I would suggest `21` or `21000` as well, and `fee = 21000` here.
Could this have been done in another PR?
I think we should keep the old error code as we don't want to check for malformed token.
It seems that the only thing that needs to be fixed is to only add a new parameter when it's not needed.
Please import `import sql`.
why not use `assert` here?
I think you can delete `reject` now.
why did you change the `StateDBAdapter` to `transfer` here?
I think this can be removed now, as it is not used in this file.
I think it's better to check `viewController > 5` instead of `viewController`
This was the main change. The code below checks for a valid input, but the `onPasscode` is not actually a valid input. The `Passcode` is not a valid input.
This is not necessary, we are setting `defaultPostWriteInterval` to 50. And the default value is `true`
you should use a `TODO` here instead of an `continue`
I think we should log the resources here, otherwise the resources will not be shown.
Why not just use `NEW_MESSAGE`?
We should probably have some doc here, to make it clear that these are all optional.
Should we do a `except .. as err` here instead of an `if`?
I think this should be `DisableHttpGit`
I think we should be calling `@org` here.
Can you remove the lines?
I don't understand this. Why don't you use a hardcoded host here? The host will be the same as the container.
I don't think this line is necessary. It should be removed.
Should we rename the function to `CStorPoolPool`?
I would use `$this->normalizeIdentifier($identifier)` here, as it is not a boolean
Do you need to define `AbsolutePath`, here, or can you just use `AbsolutePath`?
why do we need this?
This is the only change that makes sense. If we do this we can also add a TODO in the docs.
The current error message should be `dyn.ErrCodeTransactionCanceledException`. The error message should be `ErrCodeIdempotentParameterMismatchException`
I think it's a good idea to add the `IDisposable` param to the `OpenTelemetryBuilder` and then we can add it to the constructor of `OpenTelemetryBuilder`.
@adamjstewart And, why did you change the default value of `True` to `False` here?
I would suggest to move the `pandas.compat` part from the `storepath` to the `storepath` package. This is because of the `config` package, we have a `config` package that does not require the package to be in the `config` package, and we don't have a separate package for it.
I would prefer to use `str_replace` instead of `\n` as it's more readable.
I would prefer to see a test for the parameter parameter parameter. If you want to change the argument to `errorframe_append(&frame, &info);`.
This file should not be part of your PR. Please revert all changes to the file.
You should use `MediaLibraryItem` instead of `Cms\` here
shouldn't this be `$config` instead of `$config` ?
Shouldn't this be `SPI1_MOSI_PIN = 3`?
I'm wondering if this is a bug in the `Method` itself. The only reason we need to call `LinkLinkError` is because it has a `NullPointerException` and it has the right `NullPointerException`.
Shouldn't this be `traceparentparent` ?
This is the only change I could see in the PR description.
@DanVanAtta Please revert this change, it's discouraged to use ` pointer pointer` in the past.
What's the point of having a mask? Are we doing this now? If not, then we should use the `OUtbounds` to handle this.
do you need this in the service? I think it is better to remove it from the service and not from here
Why was this removed?
I'm pretty sure this should be `.save` instead of `.save` since this is a new table.
@becker33 Is this the correct behaviour to use a single int value for the port_? I don't know if it's a int value, but I'm not 100% sure. I think the port_ should be the same as the intention of the intention, and if it's to be the intention for the intention to be the intention to avoid the extra value.
I think it would be better to have a source.sourceGroups and source.CompleteComplete() that can be called from the source.
I'm not sure if we should do this. It's a simple string, but it should be hard to find.
Just a note that the new map changes are not necessary.
Is there an issue tracking this?
Is this file still necessary?
This should probably be a debug level, as we are not changing the API.
Shouldn't this be `TiSession` instead of `Serializable`?
Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
remove this line
Can you add the description here?
I don't think we should retry here. We should be setting a constant in the `host` object and not retry in the `retry_on` call.
Why is this change needed, why is it needed?
I think you should be able to just do `waitPendingEvents.handler.handleCaretMove(self)` here and remove this line.
I would move this logic to the top, since it's used in the `tag_error_response` method.
Why are we doing this?
No need to pass the `base_` argument, just pass the value directly to `_base_`. The call site can be removed from the list as well.
I think this should be on the finally block of an `StopException` instead of a `StopException`.
I think we should use the new `UserPublisher` helper here, as it's not really doing much work.
I think this should be `info`.
This should be `>=1.6.0`
Please remove the WordPress dependencies in this file.
this is the actual fix, we should probably update the `.spec.to_hash` to check the actual behavior.
This spec doesn't work for now. It doesn't have any special profile for the table.
This should be `log.read()`
This should probably be a constant
I think we can remove this, we don't have a corresponding corresponding `ViewerAtStartup` field in our API
Would it make sense to add this as `segmentId $segmentId` to the public API?
Can we have this as a global flag instead of a global var? I think that's the preferred behavior. I'm not sure if it's worth it.
We don't need to use the `v1` package here, right?
I'm not sure if port is the correct host here, but if it is, then maybe we should use a different options instead of porting it.
We should be able to just remove this method and just use `StringUtils.isBlank()` here.
This is the actual change that will break all the the other changes. I'm not sure how the cache is being used here, but it seems like we should be using the cache itself.
This is not the same as in `ByteByteAllocation`. It is a bit confusing to read.
Could you please change the first argument to `django*` to make it more clear?
shouldn't this be done in a try/finally?
I think it would be better to split this to a new constant, so that it is clear that it has a lot of time. Also, this should be `5 seconds`
Can we use `Math.6464` here?
The message is confusing, it should say something like "The team you specified is not a directory".
This seems like something to me. Why do we need to change this?
why did you change this to use Assert.True(true) ?
Should we also add this to `register_calls` and add it to the service? I think we can also add it to the service.
@nmittler why do we remove the node here?
I think we should change the name to `for key in dictionary`. The same for the dictionary is for every dictionary.
I don't think this needs to change. The other `$position` is used to send the `WPSEO_position_index`.
I think this should be `slot.count()`. The current solution is to check for `slots.stream()`, which is not correct.
This is the only change that fixes the bug.
`getColumnFactory` is only ever used in `BindableHolder` so it is only necessary to add the flag to the class.
Why is this function being removed from `CreatePoolBuilder` and not from `handlerPool()`.
This is not the correct field but the field name is in preview.
This is an API break. Please revert this change and the changes to the code.
Can we do `filter(entity)` and `referencesKey` directly in this class? I don't see any code using `hashKey` anywhere.
Do we really need this condition? Can we just return early if dynamo_exited is true and we just return early?
` SetTlsCACertificate` should be `SetTlsCACertificate`.
I think these should be removed. The other part of the test is to ensure that `today` is an empty array.
This is not a problem, but I don't think it's worth having this return `false` in the function, so I think it would be better to have this return `false`.
Why do you need this classmethod?
If the property is already set, why not just change the property to `true`?
Is this still needed?
Is this the correct way to go? Should we be setting `IScope` to `IScope`.
I'm not a fan of using ` '#searchTerms-keyword-0` here, but I think this is the preferred way to fix this.
Please revert unnecessary change.
I don't know if this class is actually used anywhere, but I think it would be better if it was named something like `getConnectorConnector` or something.
> [](start = 16, length = 1) nit: please remove the period.
This is a bit confusing. Why would you want to use a different interface than a List?
Why remove this error?
Import order is longer than 120 characters
I think you can just use `self._depthwise = True`
nit: I'd prefer if you didn't have to do that, but it would be nice if you could do it more easily.
I don't understand why this is necessary. The `StoreInbox` is not in the `if` block, so the `if` statement should be removed.
Should this be in `BaseMessageSource` instead?
I think this is a bit of overkill, but I think the more elegant way to check is to check if `stdout` is the right host name.
I think we can remove these two lines since we're using a pre-commit hook.
I think this is not needed.
This is not the same logic as the `Spec` field.
I think we should just call it `Supply`, otherwise it will not be called again
I think we can remove the width width now, and just use the width width for the component.
Is this a different thing or are we assuming the user is using the same code? If not, we should use a different code for the same code.
I don't see any value in using this constant anywhere else. I'd just make this `RETRY_LEVEL`
Why do we need a separate entry for this? Doesn't seem related to this change.
Please, update the docstring accordingly.
Please add the license header to the end of the file.
I'm wondering if we can make this configurable. I'm not sure what the best thing to do is, but I think we can just remove the implementation and just call `Create` on it.
Nitpick: I'd remove this line.
This readonly readonly DoublyLinkedListNode head is not used anymore.
shouldn't the name be just 'reader'?
`descriptors3D` is not used anymore.
Should we have an explicit cast here?
I think this is not a problem, because it's not a `*` in the message.
Why was this made?
Why do you need this change?
This is a breaking change.
I don't think we should be using this here, but I'm not sure how we can test the `_o.Test3.A` property for this.
Are there any tests that rely on this? It seems like the linter is failing because of the refactoring.
I think this should be `draw` instead of `query` as well, since we're using it in every iteration.
@node = node.to_xml.to_s;
Do we want to have this default value? If so we can use `default: normal)'`
I would say that we should not be using this API in API.
Please use `String#getCastIssueMessage`
This should be split off into a new line.
if sys.version is '3' then it should be in the if statement
I think we should use string_metric_parse instead.
I think we should remove this argument now that we have the default argument for the `__init__` method.
This looks like a typo.
The `app` tag should be `final` in the `Cobra` package
This is the only change that fixes the bug that fixes it.
Is this a behavior breaking change? I'm wondering if we should have a default value in the name for this table.
This is not needed anymore.
I'm not sure if this is the right default here.
This looks like a typo.
Why does the `counter = 1` matter here?
Should this be a pointer?
I don't think you need to check for the exact value here, since it will be a string.
Does it work without the fix?
I think you need to remove the `split Size` here.
@deads2k I'm not 100% convinced we should try to make this more robust to the user. I think we should try to avoid this if we are going to make a change for Python 2 to work, since this will make Python 3.
This is a bit confusing to me. If you want to do it here, you should add `@git blame` or something to it. I think this will be a reasonable default.
I'm not sure this is the right place for this, as this is not related to this bug, but it seems to me that the user could not set the user to null when a user was re-run. If the user was not able to call this method, then it would be good to have the test run only once.
I don't think we should change the buildfile to build the path.
I don't think this is the right way to fix this.
Why does this need to be a `accounts`?
I don't see the value in the 6 model, is that the intention here?
I think the `return false` can be removed now.
This doesn't seem right. I think it should be a separate PR.
nit: space after the `ssm`
This change isn't needed since `user` is a local variable.
This is not correct. `resp.Status = statusParts[1]` will always be 0. This will always return the statusParts if statusParts is not `0`.
Nit: "server on particular server"
this is the same as the one in `bad_request` but in `validate_connect_true` it will be more obvious what it was
This should probably use a job.
Can you add a TODO to add the CStorPoolPoolPhase string into the CStorPoolPoolPhase function and add a TODO to add it?
This should be reverted.
Why do we need to make this change?
I think we need a better way to avoid the loop, and add a TODO to track the issue.
I think we should move this to the top of the file.
I think this can be removed completely, since the type is now `float`
This is a breaking change. This method is not in any of the methods that return `false`. Could you please add a TODO?
Can you use a more descriptive variable name? I think `zpoolpool.github.com/openebs/p1alpha1` might help future readers with other examples
why not put the `error_message` in the base class?
This is not the right place for this change. The only reason we're using the `updateNodeStatus` function is that the node status is not in `client.go` and the node status is in the `client.go` and we're using the `client.go` function. The reason being that this change was removed is because we are calling `client.go` on `client.go` and `client.go`.
Why is this needed? I think it should be added in the `windows.h` file.
This is a bit weird, if you set a pair, you set the descriptor directly, then you set the two, but then set the pair.
InvalidArgument is not a good idea.
Why are we making this change?
Can we remove this line?
Hmm, this is a security issue, but it's not really true :)
I think this is not needed anymore
Array of user data is not a boolean. It should be `array of user data`
I'm curious, why this change? I'm worried it's the only way to do it.
I think it should be `[Register("mvvmcross.Droid.X.RecyclerView.Widget")]`
This seems to be unused. I would remove it.
Can we just do `while winUser.getMessage(byref(msg), None, 0, 1)`?
This is the only place where we're testing the error, right?
Should we rename this to something more meaningful like `overwrite`?
I'm not sure if we need to add a `Order` flag here, or if not, we should just remove the `onStatus` flag from `userInfoErrorResponse`
@jona-sassenhagen this is the bug fix. It should not be changed as this is a breaking change.
this is a very bad idea, can we just fix it?
I'm not sure how I feel about this. The `mode` argument is a `defer` so you can check for the return value of `dal::detail::unsupported_read_mode`
This should be a constant
I think you should leave this in.
If this is an error, we should also log it.
Why is this change needed? I don't see any other tests that use this assertion.
Use the new Ruby 1.9 hash syntax.
Should we add an extra `PythonInvoke::end_of_step()` call here, since the other `PyObject`s are using it?
this should not be required, it should be `const`.
Why did you change this?
`Found non-standard cron schedule '{self._cron_schedule` is not a valid option.
This is not needed anymore, right?
We should avoid null checks here.
This is a bit confusing, I would say that if a promise is factored, the name is misleading, it's not really a promise.
I'd prefer to keep the id as non-static and use `[id]`. It's a bit more consistent with the rest of the codebase
This is an interesting change that I had to revert, but I don't think it was intentional
I don't think you need to change the `const` here. It's only used in one place.
Is it possible to keep the `primer_stdlib` fixture in the test?
why is this a `var childViewModelCache = ...`?
why is this changed?
I think this line could go in `el.parentNode.removeChild(el)`. It will remove the `parentNode.removeChild` from `remove`
I'm not sure if this is correct. When I see this I see `unexpected status %x` whereas `FSContext` is used.
I'm not sure this is the right place to put it, but I'm not sure if it is a good idea to have a constant defined at this point.
Do we need this here?
I don't think we need the names in the name. We should change it to be `lookback`, not `looks`.
I think this is the wrong place for this. It should be `reindex()`.
You can use `val` instead of `countlyGlobal["member"].username`
Please use `db.driver.class`. It will automatically get added to the class, which is not the case here.
I think we can move this to the `has_many` method, to be able to remove it from the `ensure_destination_exist` module.
I think this check is unnecessary, since the server address is supported.
I don't think this will work for anyone with the episode page.
Is there a reason this is not a pointer?
Did you test that the original code was correct and that the old code was correct?
I think this is the only place where we have a block value that is set in the first place (if we have the `load_total_blocks` blocks), so it wouldn't be necessary to check for `total_blocks` in the block.
I'm not sure if this is correct, since `default_parts_num` is a `KafkaConfig` which is not supported in IE.
Why do you need the full class name? ImportGenerator is a very large number, and if you are writing a very large number of nodes, you could just call it as ImportTypeTransformer, and then use that as a TypeTransformer, and use a different name for the given type.
why is this tag removed?
This line is not needed
Should we use `createdAt` here?
This import should be above `from .. .. .. ..`, right?
Nit: Can this be `public-volume-create-allowed`? We're already on the `public-volume-create-allowed` branch in the `c.Bool` file.
This is not correct. INT32_MAX should be the same as INT32_MAX.
I'm not sure what the purpose of this test is to have a different message than the console.
Can you please rename `n` to `remove` to indicate it was a primitive
I think we should make these fields configurable.
I'm wondering if this should be in the same PR?
It looks like the `HIP_UNSUPPORTED}},` is now unused, so can we remove it?
should this return `Optional<Column>`?
I would prefer to see a constant for this.
I don't think it is necessary to have a special function for the env variable, but this is a little confusing.
This is the main code. The callback callback should be a dictionary.
What is the benefit of having a default value of `forced_empty_list`?
Maybe we should use the interface type as the parameter of this region?
Is this a typo? :)
Should we do `|| rawErrorData.containsKey(CLASS)` here?
We could just use `return collection.repartition(npartitions=1)` here and in the other test classes.
Why do we need this? The use statement is not needed.
This is a debug mode, so if this is debug mode, we can just make this `#if DEBUG`
should we make this a constant?
This will be removed in 2.0, because we don't want to use a lock here because it's a thread safe lock
This is equivalent to `from_pandas`, since this method is only called in one place.
This is a bit weird, we're using the `transports` class here. Should we use `--transports-transports` to determine whether or not to use `--config` or `--transports-config`?
@bartonjs, this is a bug fix.
why is this import needed?
this method is unused now, right?
What's the reason for using a list here?
This is a bit weird, why not use `stats` as a variable and use it in other places?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is this TODO still required?
this is a bug fix, the `cstor` prefix is used for the version number.
Should this be `len(words) == 0`?
why not just `return true`?
Should this be `go.temporal.io/server/common/sqlite/`.
I think we should use the loop loop, not loop
This method is not used, and can be removed.
This is the only change that affects TF providers. We should probably remove the `new` altogether.
This will log the whole file and the error is not found. We need to log the file that was created before this change, and we can log it. We don't need the file at all if the file is not found.
I think if we have a constant somewhere, then we should use `mu` instead of `RUnlock`
This is not a good change. This is not the root cause of the issue.
@daniel-beck, this change is the only change that affects the change. I don't see any change in the PR description, but I think it is worth it to make it clearer?
We should use `IdentifierScheme.identifier?` instead.
This file is no longer used.
this is not the same as line 414
This is the only one that is used for the `Container` field. I don't think it is a better name. I would suggest to rename `getDescription` to `UrlDescription` to be clear that this field is used for the `get` table.
Can you please remove this whole class?
I think we need to do a full copy of this option, as we are using the full copy of the buffer. Otherwise, the default is the default, which is not the case here.
I'm not sure this is the right fix. It's probably better if we didn't have a way to do this, and if we do, we should probably just remove the `.hashToFullRules` from the `.hashToFullRules` file.
Shouldn't this be a `List` instead of a `config`?
I would suggest using `if ($this->container->get('config.factory')->get('delete_local_resource')` instead of calling the variable directly.
Why LOG is being changed to a static constant here ?
I don't understand this one. Why `&` is not `.to_f`?
Can we use the standard `import` here?
Is there a reason we don't want to make this configurable?
This will throw `AppNotFoundException` if it's a `quit` and not a `Exception`
why not just initialize?
This is not a valid import but it seems that we should import collections.OrderedDict on line 152.
We can remove these now.
I think the original `getAccounts` should be a `.{.{ accountID ).finishResolution( 'getContainers', ... ) )` rather than a `.{ accountID ).receiveGetContainers`
Which is the purpose of this API?
if field is not required, we can remove the if check.
Line is too long. [81/80]
I'm not sure this is the right thing to do. When I see this I have no idea what the code is expecting. I'm not sure if I'm missing anything, but I'm fine with it.
I think this should only be triggered when `ZERO` is `true`. The `PMT` should not be set in `namespace PMT-api`.
This should be `if config_file is not None`
This should be a separate commit.
We need to make sure that all these spec provider provider getters are only used once and the method is executed.
Why do we need to specify a `ClientConn`? I think it is a `ClientConn` that we can use for other types of `A Client`.
I think we can just remove this whole method and use it in the `validateReachableFiles` method below?
I don't understand why this is needed. `serialize_all_metadata` is used for `spack info`.
I think we can remove this section now, since we don't have any other section anymore
I would prefer a more descriptive name for this than just `return 0`. Also `tftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftftf
I think we need to update this site now that it is in sync with the `update-bower-json` below.
I think this might be overkill, but I don't think it's worth it.
I think we should be able to get rid of this feature. We should not use any new feature for this feature.
I'm not sure this is the right fix. I'm wondering if this could be an `25000` or a `timeout` value. I think that would be more confusing than an `25000`.
This is not right. We should not be relying on this behavior here, and it should be a bit better.
Why is this necessary?
why is this change required?
This is a bit weird - maybe a bit more detail, but why not use a hard cast to `dryRun`?
I think we can remove `constructor.defaultFactory().create(cls)` here, and use `instanceof` instead
In this case, the `this.hot.countSourceCols()` call will be removed after the first `this.hot.countSourceCols()` call, and after the first `this.hot.count sourceCols()` call, we will not have to pass the first `this.hot.count sourceCols()` in every iteration.
If you want to make a fd with `u_conn->fd == -1`, you should check `u_conn->fd != -1`
Use the new Ruby 1.9 hash syntax.
I don't think you need this
This should be `s.Once.Error` to be consistent with the other `done split` functions.
`log.info` is not used in this file, but it can be changed in a single place.
This is a good place for the `imgManager` parameter, so it doesn't have to be changed in the `tabphabetPicker-right` signature.
I think it would be better to have this as a `aliases.IsUnmanaged(clusterName string)`, and then we could have a `aliases.IsUnmanaged` function which would return a boolean (e.g. not a boolean) and then just call the `b.Name != ""`
I think this is not right.
Isn't `original` the same as `type`, `key`?
A bit unusual here, `...`, `...`, `...` and `...` are the same. `...` are the same, `permanent` is the same. `...` and `permanent` are the same.
Can we have a test for this?
why does this have to be in a map?
This is not a required property
This should be done in a separate PR, but should be done in a separate PR, as it's a separate commit, and not a separate commit, but I'm not sure what the best way to do here is is to add the same `cseContext` method to the `addContext` method.
We can't do this in the code. This is a bit of a hack.
Is `isIE9()` still needed?
nit: this is a bit odd, why not just pass `result` as a `default` argument?
@tnozicka I don't think we should keep thebserver-1.dev.keybase.io here
This should be called `setFirstPingTimer`.
Why is this needed?
This file needs to be reverted.
Could we add some more context to `./pants goals`?
I don't think this is right, since the tasks can't be emitted with a file name, and it's not a file name. It should be `File.directory?(@path + 'tasks')`
this is not needed
I think we should also add an example here to say that this should be a public constant (or at least it should be an internal constant).
This should be a separate commit.
Should this be true/false?
Not sure this change is needed.
I think you can remove this line
This is a bit confusing. If a row was already in the navigator template, the row was not yet initialized.
text is a list of strings.
This is the only change that fixes the bug. The `ValueAsData` should be left in. The `ValueAsData` is only used by the `ValueAsData`.
Why not set it to `0`?
Please remove this. It is not used anywhere.
This is not correct, right? I don't think the `id_pattern` field should be defined here. We should be able to remove this, but I'm not sure if it is the best way to handle this case.
I don't see why this is needed
why is peerID being removed?
I don't think it makes sense to have this in the `if '+etc/shadow'` block because it is already present in the Rpm. The Rpm directory is required for the directory, not the user in the database.
`str(BasicBlock, self).__init__()` should be enough
Why is this removed?
We should probably have a test for this, but I don't think we need it in this file.
This change is not needed.
I don't understand why we are changing the API here, is it necessary to change the test to pass a reference to the version?
I think we should remove the call to `c.trace` here.
I think this check can be moved to the check below, right?
nit, why not use `if isPluginV2`
This is the change that affects TF codegen, right?
Can this be `public static string`? It's a bit of a nit, but it might be worth to rename the method `ResourceManager`.
Why not add a new `windows` parameter here?
I'm a little confused why we have a `TableColumn` variant. Is there any reason why we don't use `strV`?
I'm not sure this should be <msg> I'm not a fan of this approach, but if the user doesn't have to know about the input, the `/t//tether/tether/tether` will be able to edit the owner and the owner. The `/tether` is not in the `/tether/telemetry/` but I don't see a need for this. I think the `/tether/tether/tether/`/`/`/`/`/`/`
It would be nice if we could make this a constant.
This is a bit of an odd place to use `controller.Address` as a result of this. I think we need to be careful here.
I would prefer to have a more explicit `domainname` as a parameter. Or maybe just `String.New(ClientStatusStatus)` or something.
This change should be reverted, since the previous version of `i` is the same size.
nit: test case is too long. [218/15]
This is going to be a problem because the previous version was not in the logs, which is the case for the version that has been removed.
you don't need the `qt` here.
Why not just use timeout here?
we should add a `name: 'form'` to the message in case it is not found.
I think this is the right thing to do. If we do want to set this, it should be set to `this.setState`
the encoding was previously previously replaced with `utf-8` so I don't think we can encoding it back to 8.8 if we want to keep it, but we should keep it for now
This is the only place you want to use the `config.Chain.EnableAsyncIndexWrite` function instead. It's not a big deal, but it's also a bit of a hack to have a method that returns the `Chain.DB` and `Chain.Enable`.
i'm not sure if this was a bug before, but if we do, then this should be a limit.
Why are you adding this here? I don't see the test using this anywhere.
This should be `format` - it's not a string but `feval`.
Style: Sports -> Base
@deads2k I think this was the bug I was talking about before, but the reasoning is that this is not the "real" of the "ddev" package.
I think we can use `int` instead of `result` here. The `result` field should probably be `Optional[str]` instead of `result`.
Please revert this change. It's not a problem.
Please add a `TODO` to the catch statement
@mfojtik @jihisch this is the correct change.
This is a bit weird, why not just have the six.text_type handle the pytorch behavior? That way we don't do that, but it seems like we should do this in one place.
Trailing whitespace detected.
This is not correct. You are returning the same result as the previous one.
I'm not sure why we're removing `EscapeatileObject` from the `List` property.
What's the motivation for removing this?
I think this is the only change that will cause problems on the server-side. I think it would be worth it to just remove the error altogether and just have the error inline here.
`respBuf` may be null if the result of `b` is not null. I think this test should be removed.
I'm a bit concerned about this change, but I think this is fine for now.
why delete the resources?
I would move this to the new constant, it's not used.
I think this would break backwards compatibility with the Calypso above, since there are several several places in the code where `Error saving WebCal-calendar` is set.
Can we also remove the "rome" part?
You can remove the `[MemberNull]`
The handling of this `defer p.m.Lock()`. I think `p.m.Lock()` can be moved to `bufferFull()` and `bufferFull()` and `bufferFull()` can be removed from `pkg/deployment/deployment.go`.
This was added to ensure the `V1` was not set to `false`.
Doing this would break people that have the same action twice. Maybe we should add a note that the order of the URLs are modified in the same way?
this is not the same as the original one
`sanitize=True` should not be used here.
What does "delegates" mean here?
This is not a boolean but the `path` value should be `true`
this is not needed, it is already in the `url` method
In theory, we can probably replace this with `xpm` as well. I think we can just delete this line and replace it by `res/nvidiaicon2.xpm` and replace all `xpm` with `res/`
Should we do the same for the other tests?
I think it is better to move this import inside of the `if` block.
Should this be in a different PR?
Why do we want to default to anotification here? Is it the case that we don't want to send data from a caller?
driver_.driver_.get('name');?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
We should use the `sync.await` channel to determine which `sync.await` is available.
Please update the changelog.
why change this?
I don't think this is a good idea. It should be fine to just not have any doc in the doc.
I think we can remove this. It's a bit confusing to have a single check for `Port`
You could also just use `node.parent.statement()` here.
What do you think about using `get_ok_to` (or similar) as the default value? It would be more clear that the user could use that value for the user.
This is wrong. It should always sleep for specific number, right? If so, we should just do `*timerSleep(ticks)` instead.
This should be reverted.
The impl is already in the `if` below. Should we do this in a try/catch?
Why not rename ` LoadPlainYAMLManifests` to `container`?
This is not needed since we are already passing the `ommersHash` into the `fromBuilder` constructor.
We need to make sure that we are not using this config as a source type. I'm not sure we want to add this as a public interface.
I would prefer to see the max_ts parameter as the first time of the method, so that it can be set once.
I think we can remove grpcStubTypeName from the API. It's a public API and we can just call grpcStubTypeName from the API.
I don't think you need to define this in TraceConstants. It is not used anywhere.
Shouldn't this be catchup?
Why did you change this to `InstallInstall`? It looks strange to me that this is a string, but it should be a string.
If we don't have `__init__`, then we can remove the whole method.
no copyright here too
do we need to expose the user configuration?
Nit: This line is redundant now.
The changes in this file were not necessary since the changes in the file are already in a single place.
why remove this line?
I think we need to move the test to the `addon-storyshots` directory, since it's only used in one place.
This looks wrong
I think this is a leftover from an earlier version of the code base. We could also just add the `PoolExpansion` interface.
This should be a `private` property.
I don't think we should change this file. It looks like we can get the correct type for the `typedef` when the type is `null`
You can also remove `AC_CHECK_PROGS(YACC, 'bison not found but required])` as it's not needed.
This should be `ExecutorService` and not `ExecutorService` as we do in other tests.
`Checks_group_ids` should be added to security_group_ids
I think you should be able to remove the `File.separator` here and just replace it with the `replaceFile`
It looks like this class is only used in one place. Can we keep the class as a class?
This is the only one I'm not sure about. I'm not sure why we need this change.
Should we use `Math.random()` here, too?
you need a blank line after the `if`
I'm not sure what this is for, is it?
There is no need to have `emplace` field here.
If we change the tag, we should also update the `tag` field
I'm not sure if we should do the same thing, but if we do have `promprom health` and `prom health` I think we should do it in the `health` case
I think you could also delete the `ILogger` and `ICoreLogger` below.
This is the actual fix.
Layout/TrailingWhitespace: Trailing whitespace detected.
Is this change intentional? It looks like the test was failing.
Note for future: this should be `cbor` for clarity.
Should be `final` for consistency with other variables
I'm not sure about this. I think it is safe to remove the api from the server, since it's not used anywhere.
Is this one used?
I think this is a leftover from a previous PR.
Can we put this in the `ArrayDelete` method so it doesn't get updated in the `Delete` method?
Why did you remove this line?
Why not "running"?
Can we rename this to `api3EndpointID`
Is there a reason why cryptoSetupServer isn't cryptoSetupServer?
I don't see any tests for this, is there a reason for the extra `sles`?
What if there is a None value?
This should be a warning, if the user has not set `key == null`.
why are we changing this? The "args" type isn't very descriptive.
The method is deprecated, but I'm not sure why we need it.
I think we can remove the name now
I think this method should be private.
I think `get_screenshot_as_file` might be a little confusing. What's the purpose of `get_screenshot_as_png`?
Why return here? I think it should be a `private`
Is it worth caching this variable to a struct? I don't see a benefit from having a default value in this `json`
struct field pipeline should be API
I would suggest to create a separate method for this, e.g. `this.getClass().getName()` and `this.getClass().getName()`. Also I think it should be in the same class as in `setReachableFiles()`.
I think you need to add a `Consent_` prefix.
Nit - should this be grouped together with the other std packages?
This should probably return `slots.stream()` instead.
why is this change needed? seems like the only place this test is using this resource?
This change looks good. But I'm not sure why you removed the first part of the code.
Why are we logging this out?
I think this should be kept, it's not a placeholder anymore
Can't we just make this `publicLink`, since it's only used in `Function<Pair<Pair<>>`? It would be better to have it as a public constructor.
I'd rather have a `json:"ipAddresses,omitempty"` in case someone wants to use that field.
@deads2k @tnozicka I think we want to add this interface to `go test`
I think this is the fix. It's not really necessary to check if the user is aware of the `*` and `*`, but it's probably fine to leave it.
Why is this needed?
I don't think we need to decode here. If I'm reading this correctly, I think we should just do: if (left, "alpn_proto_negotiated")) {
I think it's fine for now but I think we should be able to just hold a reference to the `MyResearch` list in the `experimental` folder. We should also add a new one `MyResearch/Holds` for the `ClientV2` package.
I'm not sure if we use that here, but it seems like we should use the `kind` constant?
nit: I think we should keep the small timeout here. Can we just call `wf-decision-timeout`
I don't understand why we have to use `sortAttributes` here, but why is it necessary? It seems to be used to pass the `sortAttributes` into the `libkb` interface, but if it doesn't then we don't have to pass the `libkb`, it should be the same type as `libkb`, right?
Can we change to 4/4.0?
This can be a ` unsupported_property` if it's not a `unsupported_function`?
Why did we change the name of this assertion from `TaskCPUMemLimit` to `TaskCPUMemLimit`? I think we should just delete the assertion altogether and just keep the assert in one place.
I'm not sure if this will be correct. Is it a `Object`?
use `el` instead of `if crt.Duration`
Why was this removed?
This is not used.
Please remove the "Gcloud-beta-prod wrapper-latest" part
I don't think we should be changing this for the time being. We should just remove it for now and remove all the references.
I think we should have a `-` prefix here to make it clear that the `-` is the correct one.
Can you explain why this change is needed? It looks a bit strange to me. If the goal of this code is that if we don't want to set `FormatIsColor` and `externalFormat` to `None` it will always be zero.
This is not a required change, right?
Is this import needed?
Why not `return &mutation{kv.Item)`?
I don't think we should set the default to 0.10 here. It is fine for now, and we don't have to set it to 0.10.
Why not use the env variable here?
I think this is the actual fix. It will be a separate PR.
This function is not used in this function.
Is this the correct way to go?
This looks like it should be a function of `get_timestamp_for_last_user_stats_update`
I think this is the only change that affects the listener being received, but I think it's safe to remove it.
why the line 128?
I think this is the wrong way to go. If the value exists in the controller, it will be set in the controller, and it will be set in the controller.
I'm not sure if the other code is correct here - if the user has an older version, then it should be safe. But I guess it should be fine.
I think it's ok to just call `len(s.clients) <= s.opts.MaxConn`
I think it is better to pass the `itself` through to the `thenValue` method. It's not really a blocker, and it's not clear what the `thenValue` is, and it's not clear what the `thenValue` method is doing.
Can we remove this?
I think this file needs to be removed.
I think this will need more logic, as `c.Wireguard.EncryptHostTraffic` doesn't need to be passed to `State`
I would prefer to get rid of the `__init__` method
This needs to be a `.` at the end of the line
Why not just return 0 here?
I'm not sure if this is a good idea. If the `MESSAGE_TRADE` is a `Date`.
This should be `<split>.FirstOrDefault(g => g.Type == type)`.
Why was this removed?
@Scottmitch why is the extra space here?
Is the expectation to remove the `merged`?
I'm not sure we need to clear anything here. If we do, it's a good idea.
I think we need to make this configurable.
`urlencoded` should be in a constant somewhere, not a blocker
This is not a boolean
I'm not sure if this is the correct way to test the right `diary_comment.all`
This should be `eventForRuntask`, and the `eventForTemplateObject` should only be called if the task isn't found.
This seems unrelated.
Can we move this to `Types.Net.BAD_REQUEST`?
This is not the time the limit is finished. The problem is that if the limit is not enabled, it will be overwritten. The user will not want to call `log()` if the limit is enabled, which means that the container will have been closed. This is the time the user will see.
Why is this change needed?
I think this was the bug, it was not possible to use Widget. The Widget is the Widget, but I'm not sure if this is the correct way to go about this, so I'm not sure about the change here.
I think this should be done in a separate PR as well?
I'm not sure we need this change. I think we can just delete this line.
Please add a license header
if !true, what about `NULL`? I don't think it would be better to check for `null === true`
Is this related to the rest of the changes?
This import seems unused
I think this is a leftover from a previous PR.
I think it would be better to do `allowAllCorsResponse` here and not `applyAllCorsResponse`.
I don't think this is the right approach.
This is not the same as the other packages you've defined for the same pattern. It seems like the same pattern for the same pattern as the one for the same version. Is that intended?
Should we be using a Supplier.info here, instead of a temporary temporary temporary temporary temporary temporary temporary temporary temporary temporary temporary?
I think this should be marked as a hidden interface, not an interface
It seems like this would be a little more efficient to just check for the return value. I think it might be better to return an error.
I'm not sure why this is necessary. It seems like the only place this was used is if the API doesn't use it.
This was a nightly worded error. I'd say that this would be better named `Bolt::Node::TaxOutput` or something.
I'm not sure if this is the right fix.
Why 100? I don't think it should be the same as the default, just pass 100
I think we need to keep the "HardKiller" name here as well.
(style) code indent should use tabs where possible
I think this is the wrong place for this. The map map can be a map, but it's a map, not a map.
I think you can just use `const d->get_activations(const Layer && child)`
What's the difference between `build_manifest` and `.pyw`?
Why is that removed?
I think this is not a good idea. It might be worth checking the domain and not the domain.
I don't think this is the right way to do this. You can just use ` Starting Starting Starting Starting Starting Starting Starting Starting Starting Starting Starting Starting Starting`
I don't think we want this here, but I don't think we should have a `--ruby-variables`, since we don't really want to have a `default` attribute.
I think this should be `exclude: recorder`.
`string.encode` is not the right type here.
Is this log message useful? I don't know if it will hurt.
I don't think we should have a `Set<object>` for this, but we can have it be a `Set<object>` so we don't have to have it in the `Set<object>`
This line is too long.
Can you move it to `import yattag`?
Why is this default changing?
This is a different bug fix. It is possible that `ErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErrErr
Is it possible to have a default value in the schema?
I think you can do: if ($route !== 'collection', $IF);
Is this a debug message?
This is the only change in here.
This change is not needed anymore?
This is a bit weird, why not just `query._fields[paths[i]]`? We are trying to find a way to avoid the need for the first `is` method.
Is there any way to do this more than just `statements`? I would expect the idea to be to just always use the `statements[]` value.
I'd like to see a more descriptive name like `Module`, `Module`, `Module`, `Module`, `Module`, `Module` etc... `Module`, `Module`?
Please rename this to `DropVXLANPacketsFromWorkloads`. It would also be good to rename it as `DropIPIPPacketsFromWorkloads`.
why remove the Nonces here ?
This isn't great, but I think the interest to propagate is fine.
Shouldn't this be `bool`?
Isn't this a BC break? It seems like we should be using the `Status` class in the `Status` class instead of a real const.
This is not a bug. The only thing that's not the case is if you have a value in the middle of a function that is called from a few lines below (which I think should be the responsibility of the function).
We should not need this method anymore.
why not `final`?
We should add a `W` parameter in order to avoid the `missing-any-param-doc` parameter and to add the parameter to the param.
I think it would be better to make `LINQ` a private variable, and set it to `string` if it is not null.
Is this the only place where you need the extra options? I don't see any `options./#{installer` being defined.
It's not a good idea to add this code to the code. The code that uses `roots_seat_set_focus()` will return `false`.
I think it might be better to have the `5050` as a parameter of `loadExtension` here, and then call `driver()`. This way we don't have the `loadExtension` method to load the file from the `loadExtension` object.
Is this a bug fix?
This is the wrong place for this, I think. The other things in this file are to be updated with the new C++ code.
Do you want to add this to `user_params_results`, as well as the other methods you're using?
This should be `rescue Beaker::DSL::Assertions, Minitest::Assertion => %d`
This should be a separate commit
I think this is wrong, the variable is not set.
I don't understand the reasoning behind this change.
I don't see this change here. It is not related to your PR but it seems to me it's just a nice cleanup.
I think this would be more readable if we just `obj.select(selection_specs)` and `obj.select(selection_specs)`
This seems like a reasonable spec, maybe `a_number` should be a constant?
Nitpick: I'd prefer to use `elif k in this format` instead of `elif k in DB`
This is a bit of a hack, but I don't think it makes sense to have a `_synched` parameter, which does the right thing.
This is not needed. You can just use the `if` condition.
Why is this cast needed? It is used only in one place and it is used only once.
I think this is still a bug fix.
Is this necessary?
This is the only place we have a lambda. Maybe we should have a `s3a://'` that is passed to `s3a://`?
Shouldn't this be `fetchPrivate`? If you do this, you should be able to just use `fetchPrivate` and `fetchPrivate` in the `before_action` function.
Why do we need to check the other creation of input?
Why is this include needed?
Line is too long. [83/80]
do we need to do `original_twitter_digits_path = ''` in order to preserve both `/../../app/lib/twitter_digits.rb` and `/DIR/lib/twitter_digits_path.rb` ?
Why do we need to set it to a value here?
Do we need this anymore? Can we just inline it?
This is not used outside of this function.
why is `res.Body` gone here?
Should we also check for null and empty string?
I think it's better to move this to a utils file.
Can you move this to the `getString` method, as it's used in multiple places?
I would use `slot.isNullOrEmpty(slots)` to avoid this check
this could use the same constant for the new one
I think this is not needed
I would use some type cast here, e.g. `l((x, %w, %w, %w, %w, %w, %w, %w, %w, %w)`.
why is this changing?
This is not necessary because the component can't be closed
Why is this null?
Can we update the function name here too?
this is not a hotfix, can we just add a column called `Batch` or `Batch_at` to indicate it's a boolean?
@joshblum I think this is a leftover from debugging I believe.
The previous code had this condition as well. I think it was wrong. It was only used by the `serializer.xml` and not used in the `url` call.
This should also be run from command line
Can you use a trailing comma to make these lines happy?
I think we can remove this change as it will make the code harder to debug
>OperationDisplay [](start = 8, length = 1) I think this is the right fix.
This change is not needed.
I think this will need to be changed in `ecs`
I think this should be `ExtractDir`
You can use `if (pathParam.indexOf(';') != -1) {`
Should we be returning an error instead of returning a result of this method?
This should be removed.
This is the fix. I'm not sure if this is the right fix.
Looks like this file is unintended. Can you remove it?
why was this added?
Is there an equivalent check for the `and`?
I'm not sure if this is the best way to do it, but I think it would be better if this was added in the future, rather than having to do this, and having the `public` in its `toLocalData` would be a good idea.
should this have a constant somewhere?
If you want to return `void` here, then the `proc_num_simd_saved` should be enough, right?
`dag_file_exists` is already a list, why not use `new(d->files, temporary_file_file_exists())`
nit, remove the extra lines
Do we need to do anything to make this call?
Is this a typo?
I think this should be private and private as the AST attribute is private and not private.
This is a breaking change. It's not related to the PR but I think this is still useful to be in the future.
why do we need to split table and split table? I think it should be a separate PR.
nit: we usually use `error-notification`.
This is not the right place to put this block, since the block could be set to `""` instead of `""`.
Should we still catch Exception here?
This was added by accident, so it was not used.
Please add a license header here.
Remove empty line.
I think we should be using a number of bytes instead of a number of bytes.
Wondering if we should just make it a pointer? It would be more readable.
I'm not sure what the best way to fix this is, but I think it would be better to do it in a separate PR, and just do `findElements(By by);` in the `if` where the `if` is the preferred way to do it.
I would have expected the value to be a `* Service` instead of `password`. We could also just have `* Service` and then `password. Service` would be a bit more consistent. I'm not sure what the right answer is.
Is it expected? I'm guessing we should not be moving away from the previous version?
Is this change intentional?
Should we do this in this PR too?
I think we should log the stack trace instead of the whole message
Space missing inside {.<br>Space missing inside }.
why is this change needed?
This was unused.
This is not a good example of why it's necessary to pass `tree` in. It looks like this method is being used in a bunch of places. Can we move the logic to `lineTree` to this method?
I don't think this is the correct delete method, since the app id is the name of the app id (e.g., by the name)
I would use a `for` loop here.
This should be `externalStatus_STATUS` (as the other `CommonConfig` class uses).
why not `if value.pivot.map { |f|undefined} else {`?
I think this should be a TODO?
I think it would be good to add this in the `setDismissText` method to the `isDismiss` method. It's also not a problem, and it's not really worth it to add the `isDismiss` property to the `getAllTouchId` method in this PR, and the `getAllTouchId` could be called directly in the `getAllTouchId` method.
We don't need to call `UpdateSpan()` in this method.
This is an API break.
I would prefer to have this set in the constructor, rather than in the constructor, so that we can get the value from `load` to `set`.
Is this necessary? I thought the previous `createSenderResources` was a bug in the PR.
Should we use the `Log.Error` here, rather than duplicating the `Error`.
How about `Async() => FlushFlush()`?
this is the fix. This will break things in the future, right?
This change is unrelated to the change of the PR but I wonder if it's worthwhile to just delete the `if` and remove the `else` part if that's the case.
Can you please add a `\` to the top of the file?
Doesn't this need a `return`?
Does this need to be a separate commit ?
Why did you move these imports to a different file instead of just passing them through?
Is there a reason we're not changing this?
I don't understand this change. Is it possible to get attackedSet from this object and only have it set to true? Is this intended?
Is `module.exports` used anywhere else? If so, it looks like it should be used only when `exports` is used. If so, I'd rather remove the variable.
I think we can drop `scripts` altogether, since we don't have `electrum` anymore.
I think this should be done after the `driver_index` is updated to use `name` instead of `name`
Why do we need this interface?
How about `:text` instead of `missing`? It's more clear what it does.
I think this is not a correct call to this function.
Why not just import `Word` and avoid `lodash`? It's not obvious what this is for.
Is this needed ? I'd expect a test where the `project_id` is not defined.
do you really need this?
I think the `and` should be on the same line as the `and`
why 6? 6 is not 3?
I think we can just use `RequestSet.Context` directly. It will make it easier to see what is being done for.
I'm not sure why you are doing this. It is not a test, it should be the test.
You can remove the `!` here.
I think this should be a separate constant
The node ID will be created on each node, but the pool is created on the IPLD node
Do we want to use the `AnyTimes()`, since it is the same as the `AnyTimes()` method?
I think this should be `test_a_statsd_timer_is_on_history` and `test_a_statsd_timer_is_history` because we don't want to test history.
kind is not defined here.
Do we still need `AppDomainFixedOutput`? Can't we just delete it?
why did you change these?
Shouldn't we also add a `install` field to `PublicKey`?
Should we add an `::` here?
This should be `Name.lowerCamel(String exactName, lowerCamelApiTypeName)`
Can this be moved to the `finally` block?
Can we use `getJavaiumTimestamp` instead? I think it's better to not use the name of the class as it's the default and it's the default.
I think this should be removed, since LibuvFunctions doesn't use any LibuvFunctions.
Is this types used anywhere?
I'd call this `get_files`.
I'm not sure if this is a good idea.
Since `config_path` has been set for all paths, can it be a dict instead of a dict?
I don't think `flattenedTree` is actually used in this file. Can we just use `querySelectorAll(flattenedTree)` instead?
I don't understand the point of this change: we are using a config that is a user-facing config. Can't we just add a new ConfigModel in the constructor?
We can probably use a more descriptive name here.
this is a wrong place for this
>bool [](start = 111, length = 1) Is this a property of the value?
Why are you using `spawn.h` in this file?
If this is only used in the user-facing account, shouldn't this be a bool?
I would say this is an implementation detail. It would be good to have the permission permission to manage any permissions, and to pass in the `@return` to the method.
This is the only place where I'm calling it. It's a bit odd that we're not changing the options options in a non-empty string, and we're not doing anything special in that particular case. I'm surprised we don't need to do anything with the `options` here.
Shouldn't this be `Apply()`?
I think the other `identifier` package should be used here. The reason being that the user doesn't want to use `--identifier` (or the ` $prefix` option).
This is a little strange to me, as I can see the composite form in the `composite_root` is the `composite_root` option, but I don't see the point in using it.
I don't think we need to make this change
I would say " Checks if value is a negative `Number` primitive or object. Zero is considered negative."
What's the rationale for this?
Is it possible for this to happen at the end of the function?
this import is unused
Is this still necessary?
Please remove this
Why did you change the name of this field to `struct calico_nat_dest`?
Why not just use `gradlew`?
Let's use `github.com/algorand` here, as `go-algorand` is already imported above.
Is this used?
If we don't have any of the resources for this, we should also make it a `Display` method, and do the `pattern` in the `super`.
I think this is not needed, the `if` statement should not be indented
Should we check for nil here?
This should be added to the `en.yml` file.
This test should be removed.
This is a breaking change. Can you add it to all the references to the application?
It seems like this should be `LowestInsertedHeader?.Number`?
I don't see a reason to have two separate tests for the new class. Can you please implement it?
Was this a bug in the PR?
I don't think this is a good idea. It should be the actual fix, and it's not a big deal.
This is a bit of an unnecessary change. It's not really necessary, but it's a little hard to understand.
Static analysis: "The import java.util.prefs.PERPER_PER_PER_PER_PER_PER_PER_PER_PER_PER_PER_CTX_PER_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CTX_CT
I think you need to change `wavelength` to `wavelength = int`, otherwise it will break the tests.
Can you please use `10 * time.Millisecond`?
remove empty line
I'm not sure if the `chainID` flag is necessary. I think we should just set it as the default.
I think this is not the right fix. We should be able to remove the button if it is not used.
Is this needed for 3.7?
Does this need to be in the base class?
BuildIDOSEnv is the env variable name (`BuildIDOSEnv`) so we could define it as a constant in BuildIDOSEnv
Spark has started?
this looks unused, please remove
I don't see any use-handsontable in our codebase, is this what we want?
I'm not sure we need to make this configurable.
@deads2k @dain is this a fix for a bug?
Why public?
Does this change have any impact on the tests?
This is not needed. It should be the same role as the one in line with the other setting in line with the current one.
`go/opentracing/go` is now unused?
Is there a reason for this change?
This is not used anywhere.
Why did you remove the variable $name and $formatConfig in the params ?
This is the only place that will be used in this function, so I think it's fine to just remove it here since it is in the lock.
Can you use a more specific exception here, such as `RuntimeException`?
why do we set 5 here and not 5 for 5?
Is this needed for all cases, or just for debugging purposes?
`shutdownNow()` is a very long-term function that is called from the `WebDriver` thread. It's probably not worth the `shutdown` thread.
HiveMetastoreTest.class is a bit strange, can't you do `new HiveConf(HiveMetastoreTest.class)`?
why does this need to be configurable? if you use protocol.getsr( protocol.getsr(staking.Protocol)
This line is not needed.
"per <msg> "per domain a" -> "per domain a" -> "per domain a" -> "per domain a"
I'm not sure if we should be doing this here. I think it's better to just have the check in the code, but I'm not really sure what it actually does.
This is the fix to #ifdef - I'll fix it in a separate PR.
Is this used?
I would prefer to avoid star imports and import with `java.util`
This is a leftover from the other PR, can you please revert it?
I think this should also be `BytesWritten(minDataRate, maxBufferedBytes);`
I think it would be better to use a `props.reduce` here and in the other `switch` statements.
Nit: please avoid star imports
I would suggest to create a new logger and log the whole thing in this case.
I'm not sure if this is the right way to go.
Line 158 is too long. [81/80]
`NamedList` is a public API, so it's no longer a public API.
Please remove this.
Is this the default for a "eth" or "tg"?
This will be called from within `Clump_recover` which will never be called, right?
Why not just remove the `config.ControllerManagerConfigurationSpec`?
This is the only change that makes sense in this PR, but it makes me wonder if we could make the default default value `go` to make the default value more explicit?
Why not `Date.text` here?
Why did this go up?
I think we can just remove the `DiskGroup` here and just use `DiskList` instead of the `DiskList` variable.
I'm not sure this is a good idea. If it was just used, I would have thought it was something that was introduced in the first place.
This is not the fix. If you do `editor(apply(apply))` it will throw an NPE. If you do that, it will throw an error.
Why did you remove this?
I think this line is too long.
why are we changing the size?
I think we should use the same `clip` var for `lidx`.
This was a typo in the tests
I would use `if` instead of `if`
I think this should be just `--quiet`
Can we make this configurable?
This is not a good place to do this, since the `query_args` argument is not always `None`. The `query_args` argument should be `query_args.append('versionId=%s' % self.version_id)`
@deads2k I think this is the right place for this
should we put this on one line?
`index` is the default value, not the index name
Why is this change needed?
tag is not a tag.
I think we should disable these in `__init__.py` instead of inlining them.
Is there an issue tracking this?
Why is this removed? If you remove the `dead` value from the test it should not be used anymore.
This should be set to default to false.
I'm not sure if this test is really needed. The idea is that the `spec/controllers/controllers/controllers/controllers/` was that the `spec/controllers/` was previously previously disabled, but the tests were failing because of this test locally. I'm not sure how to test whether the `spec/controllers/` test was working before, but I can see that we weren't doing any tests that were being run before this test.
Do you have a test for that?
I think this is a leftover from the previous version, not a big deal.
Should this be `Headers(Default)` instead?
Why is this check necessary? It is already checked for `if ($cart != null)`.
Why not just return LITERAL_FIELD.get(leaf) directly?
Can this go to the `TestUpdate` function above?
I think this is not correct, since we are using `1.1` in the `101POST` package.
I would move this to the previous test.
This is not needed
we do not need to retry here, right? why not just do that in `rContext.logger.WithError(err).Error("will need to retry...");`
Please remove the unused `Block` parameter from the function. It's not used anywhere in this function.
I think we can get rid of this line. We'll have to look at the file's `with_tempfile_containing` method in the `variable_manifest` method.
This method should be in `matchWithNoTerms`.
I think this should be `parseChecks` instead of `calculateChecks`
`update_policy` is a more appropriate name. What about something like `set_dir(self, x, x, x, x, x, y)`?
I think it is better to pass in a window parameter and then pass the window to the constructor.
why do we need to pass a context?
I think you should use `IsGenesis ?? false` here.
Is this change intended?
I would prefer to see utf-8 in order to be able to use it in the future.
I think we can remove this, it's already a list
This should be a separate commit
This should be a `==` check.
This is the actual change that is not part of this PR.
I'm not sure about this one. It's still useful to test whether a file has a file at the time, and it's still a file.
This is the only change that affects the change in this PR. I think this change should be reverted.
I think we should create a `config.INFLUX_PORT` and a `set_s_path(&: e)` instead of duplicating the code.
Can you add a todo to remove the error handling?
`Metadata` is not supported in IE11, please remove `validation sets`
This is a breaking change. It should be a public API
Style/MutableConstant: Freeze mutable objects assigned to constants.
This should be in `_Config`
I would suggest to use `format.join` here.
This should not be necessary if `model.schema.base.options.strictPopulate == false`
@QilongTang @mramato do we want to add this to `Builders.Build.A.Block`?
This is the only usage where we need to preserve the slash.
Do we need to add the `default` attribute?
Could you explain what's going on here? I think it's the only place it's needed.
Don't remove the empty line here.
Why is this import needed?
Is this method still used?
Please use a constant for the value
The `w` should be capitalized.
This is a bit of a hack that would be great.
This can be `violations_tablename = 'violations';`
`strictlyleading` doesn't have a `new_exercise_ids` method.
Is this a good idea?
Using the `compute_max_num_readers` method here will make it impossible to see where we can use `partitioned` and `readers`.
This is a breaking change, right?
In theory, we don't want to keep the old text, so I would use the new one.
Why was this removed?
This is a bit of a hack that could be done in separate PR.
Why is it ok to use `input-cli-input-yaml` in this PR?
This is the only change required.
Why this import?
Why is this required? The `RuntimeException` should already have a `Map<String>`
this is not needed
I don't think we can do this - if len(country) == 0, len(country) == 0, len(country) == 0, len(country) == 0, len(country) == 0, Might as well do `len(country) != 0`
I'm not sure this is the right place for the QButtonGroup (it should be used in the same class as the QButtonGroup)
If we are going to do the stop/stop here, then we should stop the whole bunch of them.
I think this should be moved to the `protostuff.runtime/files` package.
I think this is not needed. If we're going to get the user's `reason` we can remove it entirely.
You need to add `CatalogCatalog` class to the `catalog` class.
Do you know what happens if you call `get_data()` here? I think it would be better to have it here, and then have it in the `wrap` method.
It's not obvious that this link is only used for testing, but if it is not a link, it could be changed to a link.
I don't think this is needed.
`s/unable to connect to %s/`
I think this is a good idea, but it's a little hard to follow. I think the original version of the line is too long.
I think this is a typo.
can you check this in `app/services/dev_profile.rb`? I think it's not necessary to check it.
This should be reverted. It's now unused.
Should this be a constant?
Maybe `pin` is a better name?
This should be `HeadLess` (as it is not used for the `./gradlew clean-up`)
Why is this import required?
Why do we need this?
Unnecessary spacing detected.<br>Put one space between the method name and the first argument.
Do we need this?
this seems wrong to me, because the virtualTree is already in the virtualTree, but not in the virtual.
There is no need to introduce another Delete the old word. It is already done in the `brmd`.
This is not needed.
@bparees I'm wondering why you are passing `config` and not `config` as a parameter. Is there a reason we don't pass `Config` and pass `Config.NewExporter(config, config)` at all? I'm not sure if we want to pass `config` to the `NewExporter` so we can get rid of the call to `config`.
currentPlayer is not defined in the UI
Is this an unsubscribed password? Should we use the same syntax for the `User` model?
@bparees this is the only change that affects this PR.
I think we can just make this configurable. It is a private field. It's not a public field.
I think we can remove the `RestoreFiles` part here as well.
We should probably make this number configurable.
`error` can be `nil`
Nit: I think you can remove this line now.
Let's use `confirmation: true` here and below
This is not the key change, but it is a bit odd to me.
This is a little hard to follow. I would move it to a separate package for `pkg/util/slice` and `pkg/util/slice`. It is a little confusing to have to do a separate package for `pkg/apis/meta` and `pkg/util/slice`, and it seems to work in the future.
This test is still not needed, as in previous tests it's not being used
@jridgewell I think we need to move these 2 lines to `0` as well, right?
Why the `NULL` can be NULL?
I don't see a need for a new attribute here.
I think this should go before the other PR
We should not modify the UART 1 object. We can use the vast majority of each other.
Just a note that we are using the `cz` as a class field in `config` to be used here, and we should not use that as part of `get` as it is used in other places in this PR.
This is the cause of the flakiness.
Is this test case unrelated to this PR?
If we are not setting the `RunUI` method, I think it would be good to have `AssertEx.IsTrue(importPeptideSearchDlg.CurrentPage == ImportPeptideSearchDlg.Pages,match_modifications_page)` here.
This is a bit weird, why do we want to keep the old `registerSchema`, but the new `schemaId` is not needed anymore?
Why did you change the condition?
I think this was accidentally inverted.
Is this a typo?
I think this is the wrong place for this?
Extra empty line detected at block body end.
I don't see where we create the `Telemetry` record. Can't we just remove it?
This is a breaking change for existing tests.
I think we should add a TODO here to make sure this is all done.
It looks like we could have a test case for this.
I think this can be `(self, data.copy(column_fields=names)`
I don't think this is a valid flag, since we are not setting identify to true.
Please use the standard `\` tag for the class.
I think the error message is misleading.
Please add `conf.l2types.get(type(p), None)` to the top of the file.
I think we should rename the variable `source` to `flow_trigger` to match the naming
Why do you need this? I don't see a corresponding change in `lvis_v1_instance.py`.
The fact that this PR is not clear to me, is this something we need to address? I'm not sure if we need to do anything to this but I'm not sure.
Can you use a `ConfigurationKeys.FeatureFlags` here?
Should we also support this for `isInstance`?
I think this should be `if (!total_instrs == 0) {` and not simply check for if the value is zero?
This change is not correct. The types are already defined in the `type` function. The `types.Duration` is already in the `types.Duration` function.
This is a bit odd, why do we not just have a single header? Can we just have `getParentSvg` return a list of `Packages` types and then `getParentSvg` return `false`? This way, we can avoid this kind of `Boolean.getParentSvg(boolean)`s in the future and use `instanceof(boolean)`, and the logic below will not need to worry about `boolean` types.
Why is this local variable needed?
I don't think you meant to pass the wit here.
you could use the same name here, i.e. `iface_id`
This is the same as `permit_params`, right? Maybe it's just for `ActiveAdmin.register LicensePermission`?
why do we need this for loop?
I think we should also check that the `task` class is not `false`.
I think you should also test the content of the error message
if this is only used by the bool, should we make it boolean?
I'm not sure this is the right fix. This is not the best way to do it. This will also fix the issue with the other issues, but I'm not sure if it is possible to do that.
I think we can remove this line now?
It's not a good idea to add this return type to the `ListEvents` interface. I think this function can be renamed to `ListEvents` or something.
You should test this class.
This is not the same as `new Al AlanPackagePackage().binlog()`
I would move this to `send_cmd` where it's called. It is a bit confusing to have the logic here. Maybe something like: `if new_tab and open_url(self, url, url)`
I think we should use a different name for this constant, e.g. `10.X` or `10.X`?
This will be 0 if the check fails, so the check is redundant
I'm not sure why we need this but it seems to me the `run-as` option was not being used anywhere anymore.
I don't think this is needed.
Surrounding space missing for operator '+'.
This should be a separate commit
This isn't right. This function is only called in `get_iop_iop_iiiop_iop_iop_cout`, which will be called for all `get_iop_iop_iop_iop_iop_iop_iop_iop_iop_iop` and `get_iop_iop_iop_iop_iop_cout`. This is the only place where we use this function. So this function should be called `get_iop_iop_iop_iop
This include looks like it's not being used anymore.
This is the only place we need to use view.php, so we could remove it from this PR.
Is this used?
You could just use `onCompletedCalled` directly.
this is not right. if you have a component that does not exist, it will be `null`
I'm not sure if this is a valid solution.
I think it would be better to have a separate enum for the error message as well (and maybe even the error message) instead of the error message (and the error message below).
Use the new Ruby 1.9 hash syntax.
Shouldn't this be `ProviderProvider`?
Should `express/public/core/events/javascripts/countly.views.js` be added here too?
This should be `iframes==true` instead.
I'm not sure if this is the right place to put this code. `self._bump_and_store_timestamp` should be used here.
I think the changes in this file are redundant, because `MemoryDiagnoser` is already being used in some cases.
This is a little bit confusing, can't we have `localFieldPath` in the `FieldField`?
I'm not sure if we need to keep the `check_subgraph_isomorphism` check here?
We don't need to add this import everywhere. The new one is only needed in the new one, so we can remove this import.
Can we use the `pay` function instead of the `paych`?
Can't the exception be thrown? If yes, please remove it.
Why are we replacing `query` with `String` here?
I think this should be `if len(prefixAsNibbles) == 0`
Why do we need to set `isKilledBySLA`?
I think it's better to use a `NullPointerException` here instead of a NullPointerException.
I don't see a reason for making it a public property.
You can use `version` here.
this log message was really confusing. If it is really necessary, then it should be removed.
Is it possible to get rid of this?
This should not be necessary. It is a replace thread, but it is not an replace thread. It should be possible to replace the replace thread in replace mode. The `isHydrating` should be in replace mode, but it should be `canBeo` and `canBeo`.
Nit: Can you please add the line after this?
Is there a reason we don't copy here?
I'm not 100% sure if this should be an `else` case, but I'm not sure how to make this work, since it seems to be the same as the previous code.
Please add a license header here.
Should this be ` cfg.TxStats`?
This test was not working on windows because it was missing. It was not being used by the lint script and was not causing the tests to fail.
This doesn't work with `init.go`?
This should be in `addDev`.
I don't think we can add this to `AbstractAbstractEntityEntity#getDefault()` and `@example#getDefault()` to get the `resolveresolve` interface. We should probably add a `private class UnsynchronizedStaticMessageDigestRule` class to the `AbstractEntityEntity#get` interface.
I think this is not needed. `Keccak.Zero` should be enough.
Is this a public API? I don't see any other framework framework framework framework framework framework framework framework framework framework framework framework framework framework framework and the associated one
How about "ColorGreens", to make it clear this is a text structure.
I think you can remove this `prefetch` call now, because it's already handled by the `prefetch` call.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is this related to this PR? I think it should be a separate PR, but it should probably be a separate PR.
Metrics/LineLength: Line is too long. [97/80]
Is this a good idea?
Please don't change that.
I'm pretty sure this function is being called by the client, but it seems to be used in the client code, not here
This was the bug I fixed in #5321, and I had to revert the changes to the test. I was not able to make the change here as it was before.
Did you want to change this to `UserError`?
I don't think this `if` block is required, since you're changing the behaviour.
I think you should add a `result` parameter to the constructor
I think we need to keep this and put it in a shared constant.
Could you explain why this is necessary?
`parent_of` should be in double backticks, since we don't have a single byte here.
Should we be removing this? I think we should keep the original link for now.
I think we can move this check inside the `setupDev` for `setupDev`. It will be more readable if you only need to check if `setupDev` is true.
This is not the best way to check if we want to add more information about the `config.Info` files.
receiver is not a receiver, right? why is this no longer a issuer?
I'm not sure we need the `//` here. We should just be able to just use a `//` and `//` here.
Do we need to check that `errUnderpriced` is not 0?
I don't see this being used anywhere?
Shouldn't we have a check for `message` here? (or at least the `Field` above)
In the past we discussed this was a bug. The old `3` was `4` before. This was a bug in the past. The new `CAS` was `4`. I think we should be fine.
This is not needed anymore.
We don't use wildcard imports.
I think this should be `typeWidth`.
this is wrong, you are setting `encryption` to `nil` when creating a reference
I don't think we need to change this, the version is not the same as this one.
This one is not needed.
Is it necessary to use `[ings]` instead of `proto`? The idea was that if we do want to use a different variable name, we should also use `[ings]` instead of `proto, ok := config.Consensus[protocol.ConsensusCurrentVersion]` and `[ings]` as the name, but we can use it in the `get` method instead of `get`, and we can use `get` as the default value in the `[ings]`.
it looks like this would be a breaking change for the cleanup script. can you move it to a separate PR?
Why is this change needed?
Can we get rid of this variable and just do a similar one for `ApplicationConfig`?
It's a good idea to make the decision to remove the vmultiplier keyword. The reason is that if you remove the vmultiplier keyword, the value is zero.
This is the only change that affects TF providers.
Why is this change necessary?
We need to keep the old name as well, and just call the new one for PreInvocationAuthorizationReactiveAdvice
This is a bit confusing, as it is not actually a `number`, but a `string` is a string.
I don't think this is a right fix for the bug, it should be fine.
This test is not needed anymore?
I don't think the `t3lib_TCEforms` is used anymore.
I think we should be able to get rid of this `DataType` property and not just `TiChunkColumn` if we want to keep it consistent.
I think you should check the renderers here
Is this supposed to be an ErrOverflow? I don't see any error codes in this file
If you're not using `ResourceReference` here, then you can get rid of the constructor entirely entirely.
Line longer than 120 cols. Please fix.
I'm not sure about this change. I think the idea was to make the combat a parameter of the constructor. I think that was wrong, it should be the default.
This was the only place I'm trying to understand why we need this feature. The problem is that if we have a `.get()` method that has a `.get()` that returns the ow, we don't want to keep it.
This is a `dager` import, and it should be removed.
Should this be ` TracerProviderBuilderSdk`?
This is a little confusing to me. If the key in the `nil` is not present, then the value of the key is nil. It seems that we can remove the `default` check.
Is there a requirement in which the Symfony is >= 2.7?
I think we need to update the `logWriter` service in order to support some of the services that have a service to provide.
Please revert this import.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should be relative import.
I don't think you need the `next_payment_amount` here. The goal is to have an `next_payment_amount` value on the next line, but the current one has a different meaning. The goal is to have the `nil` value on the next line, which means that the `nil` value will always be the same as the current one, so the current one has a different meaning.
Can we move the stream->getCtx() check in the message before the lock writer/set?
This is the only change that affects this PR. The `JSON` is used to be removed in the `AuthCode`, so this is not the only change that is needed.
Would it be possible to add a `exportOperationV2` flag to this map?
This is a bit confusing, since the error message is confusing, and the user could be confusing.
Line is too long. [85/80]
This can be `/* XXX i#3307: unimplemented, we can can now remove the `#`
I don't think we need to do this. The interface should be used by the caller. I think we should just remove it.
Should we use `pubkey_hex_fromhex` here?
We should add a message here, saying "is not found" is the message we're trying to parse.
I think this should be a `if` condition.
I'm not sure this is correct. Can we keep it as it is, and add a TODO to fix this in the future?
I don't think you can remove the `@Disabled` annotation on this file. It is only used in one place.
Could this be refactored to use `refs` rather than `refs`?
This is a long-term change that makes it sound like it's the case that it's not a boolean.
If the initial initializers are set, why not just `Resolve<IMvxChildViewModelCache>().Cache(MvxViewModelInstanceRequest)` ?
Why not just call `exc_info=True`?
I don't think this is needed, it's already done in `muxHandlers`.
Please revert, not wildcard imports.
Shouldn't this be `System.out.println(tokens.getTokens());`?
Can we have this set to `false` in the `flows`? I think if the value is `true` then `flows = len(flows)`.
No longer used.
I'm not sure about this one, it seems to me `typescript-eslint` should still work, but `eslint` should still work.
I don't think it should be a warning. It should be a warning.
I think this file should be removed.
Why is this needed?
I don't think you need this any more
I don't think we need to set a `setSelectedElement` here.
if we are changing the `logf.Info` method, we could change the log message to `logf.Info("detected private key or certificate data on disk has changed", data on disk)`
Why not `reinterpret_cast`?
I think we should just add this to `src/server/object.md` and then use that to get the retry.
Why do you need a new map?
I'm not sure if we should make this method internal, but I'm wondering why not have it be public.
Why do we need this? If we are going to add `billing:`, we could add `actions: { ... }` to this interface, right?
I don't think `wasHydrating` should be set in this function, since it is a `dict` (and not a `dict`).
I think this should be a debug level log, it is not related to the debug level log
this is a regression?
I think you can move this to the constructor.
This should be `c.RevisionType(rev, err)` right after the first `rev` call.
This is the only change that affects TF codegen.
The other `lat` and `double *` are the same, right? So the other `double *` and `double *` should just be `Metric *`.
This is the only usage of `_` that is being used. Is there a reason why it was here instead of `_`?
If you remove the MockMock here, you will also need to remove the added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added added
This is not a good way to fix the problem. I'm not sure how to fix this problem in a release build.
This is not related to the fix, but I think we should keep it in the future. We should keep it in mind if we want it to be in a separate PR.
This is a breaking change. It should have been changed to use `main()` instead.
this line should be retained as well
I think we should add the "none" flag to the command line.
Shouldn't it be `final` here ?
Why is this in the first place?
Is it worth adding a deprecation warning?
This is not correct. The `+config.Target` target is the `+c` target, which is the default value for this `+config.Target` target. We should just pass it to the `--target` flag instead of the default one. The `+c` target will be the same as `targ` and `-c` target, which is the only one that is the default.
Should we call `AuditRPCWithTypesStatus` after this change?
I'd prefer to keep this constant for the service itself, as it makes it easier to governed and add it to all other instances.
This TODO can be removed now, right?
I don't think this is the right place for this. The `final` can be removed.
`to_string` doesn't seem right here.
Should we consider doing `multi_port` instead? `multi_port` is the only way we could have to do this.
This should be an async_thread() (or similar) instead of a write_back(SWriter)
I think it would be better to use `lombok.NoArgsConstructor` here, and not in `setFromTimestamp`
I don't think we should be changing the behavior here, but I don't think we should add the `i.interceptors` function in `location.location`
I don't think we can import `QueryElevationParams` directly. I would suggest to move the code to `QueryElevationParams.ELEVATE_DOCS_WITHOUT_MATCHING_Q`
This should be in a separate commit
I think you can remove this line
`ipfix` needs to be added to the `kwargs` variable.
Nitpick, this line is not needed.
This should be version='2.2.0', otherwise it will be compatible with newer releases.
I'm curious if we should have used `None`, ` required_subject` here?
This is unused.
Nit: I'd prefer to see this method under `_get_presentationType`.
Why are we changing the order here?
`template.version.present?` is probably a better name.
Why not just call `controlplane`?
Wonder if we should just add these two lines to `gcnArch` and `gcnArch` and `zdb` properties.
Should this move to `modules/g`?
This should be a flag to indicate that it is not enabled by default
This should be `--verbose` instead of `-l`
Should we also set these to `reg_decoded_bbox` in the .0 release?
Should we rename `VersionKey` to `VersionID`?
I think you should remove the `if` condition and just do `(y/n)`.
This needs to be fixed in the controller for the query to work. The parameter should be set in the `setDefaults` function.
I think this should be `self.assertEqual(len(rules_engine.rule_book.resource_rules_map))`
This change is not correct.
This should probably just be `c.populateVersion()`
I think you can just return exp.getAddressDetails directly.
@smarterclayton I'm not sure this change is correct. I don't know why we need this
This is a change from what I meant by @lannka @dvoytenko @kennknowles do we want a separate commit to make this PR to fix a bug?
This is not a required change.
Why not `MetricMetric`? It's more of a name
Is this used anywhere?
This is a bit confusing to read. Can you explain why you need this?
There's a blank line between declarations and the blank line after `//` :)
Why not use `isEnabledEnabled` ?
TODO: this is not a TODO
Could you please rename this to `info` and `info.getName()` to make it easier to find what is going on?
Isn't `index.as_string()` always true, since `args` isn't being called?
I think this is a bit of a pretty much much the code that we could do here. Maybe we can add a validation to the `if`?
why is this needed?
This should be a local variable, not a class.
This looks like a hack to me, as it is a `getStandards()` function.
irregular_dims is not a parameter, so it is not a good idea to add it to the docstring.
@jridgewell Is this a typo?
I'm not a big fan of this name. It seems to me that we should not use the space between this and `padding` fields.
Is this include needed?
@tnozicka this will break existing templates. Is this what we want?
whats with the new logic?
Line is too long. [93/80]<br>Use the new Ruby 1.9 hash syntax.
This is a change in behavior, right? (It's not a test, so just a thought)
I think it would be better to check `if (isAllHealthy(results)` and then if `alwaysOk` is false, it will always be true
I'm not sure if this is the best place to put this. I would say, it's a `schedpolicy`, but it is not.
Looks like we are not passing the default here?
Why is the `.secure` necessary here?
Should we call `ExpireTableMetadata` for clarity?
Is there any way to write a struct without having to define it?
Why return error here? Is there a better way to do this?
This is a bit weird, why do you need to have a `tls` field?
` OC.getLocale() // Use user's timezone as a default value`
This can be simplified to `constexpr` (see `1::ResultCollection` above).
It's not necessary to add the `.id` to the function signature, but I don't see a reason to do it here
This is the only place where we check `tbase == t_base_type::TYPE_STRING` but the check `tbase == t_base_type::TYPE_STRING` is always `true`.
so, if eval happens, then this will be true?
I think we can move this TODO to the last PR.
This is a change in behavior. We need to be careful about this.
why remove the logging?
I'd rather have this as a separate field in the constructor.
@jridgewell I'm not sure this is the right fix. This was the issue that I fixed.
@michaelkuhn Do you have a specific reason for not using `fstream.h`?
This is the only change that affects the tests. This is the only change that is needed for the tests.
can you change the name of this test? i.e. `add_submenu_common`?
I think we need to remove the `.hashToFullRules` from the `.ts` file.
myId should be removed.
This will cause the node to be null
This should be a `nil` check.
why is this needed? it is already checked in line with the others below
shouldn't this return the same promise as before?
why not using the `mne` version of this file?
Indentation is off, please remove.
I think this is a leftover?
This test is no longer necessary, you can remove the `CartItemTestCase` and `make doc`.
I think we can remove this check, we are already logging an error before we call `VerifyingKeys`
I'm not sure what this is about. I don't know what this is doing. I think it's better to have a `generated.go` file that is actually used by `make generate`
This is not right. If the quiet time is notifications then quiet time is notifications.
@jridgewell I've added the `.` at the end of the sentence as well
Use `repo_private?` instead of `force_private?` since it's the same as `force_private?`
This is a bit weird. Why do we want to GetActiveApp instead of just calling the function?
"TLS or solicited routes will not be verified" -> "TLS = true",
This is a change of programme.
This is the only place this is used.
This seems like a good change, but it seems like a bug in the initialBase. Maybe it's worth to fix the issue in the future.
The `EC.element_to_be_unclickable` calls are no longer needed - `EC.click` will automatically call the `click` attribute.
This should be `dataFile`. It is not necessary to have a map and has a reference to it.
Nit, not related, but this looks like it should be `type`
This seems like a reasonable abstraction.
We don't need to import `kubeedge/beehive/pkg/core/context` anymore, right?
This should be a constant
This should be in a separate PR, right?
why the change to `httpHandler := handler{rpcHandler, handler{rpcHandler, e.g. getDeps}`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think you could just use the constructor instead of the class.
I'm not sure if this is the right place for this. The code in `Bash` is the default for the default. I don't think we need this here, but it's not a big deal, though. I'm not sure if this is a good thing to do. If it is, I'd rather not do this.
This change is unrelated to the PR, but I'm curious why you changed the old version of `sarif-1.0.0-beta` to `sarif-1.0.0-beta.5`
This file has no effect, so it's not necessary to include the file name.
this seems to be a regression?
I'm wondering if we should just make this a constant.
This should not be an exception.
do we have tests for the new functionality?
Can you please move this to a separate `select()` method?
I would rename the variable to something more meaningful, like `isReadable()` or `isReadable()`
Is this needed? `#include "commit.h"` should be fine
The wait for 5 minutes seems too low. Is it possible for a timeout to wait for 5 minutes?
What is this for? I don't see it used anywhere
Could we have some sort of delimiter between these three?
I think we need to keep the `Bootstrap` field as a field in the schema
Do we need to call `AutoReject` on `samplingPirority` ?
Why do you use the global config?
I would change `procedures_prototype` to `type`. It's a bit more readable.
Is this the only place that needs to be done in the `pkg/r/test` module? If not, please add a space between the key and the closing parenthesis.
This is the actual fix.
Why not use `processTracer`?
why not `SERCOM0_SPI`?
I'm not sure what this is about.
I think the word "stack" is misleading. Maybe "stack must be used for arr in arrays"?
Why is this required? Shouldn't theimplemented be an optional?
this constant can be const.
The `app.setNodes` file is deleted on `status`.
I'm not sure if we should add this to the public constructor. What about moving it to `class string`? It's not a `protected` but I don't think it's a good idea.
This is the only change I'm doing. I don't see any tests that fail to pass.
This is not needed, you are missing the `isSafeAreaInsets`
Is this change intentional?
I'm not sure if this `destruct_thread` is necessary, since `loaded_thread` is a `global_peak` method.
Shouldn't this be in `BaseEpochs`?
I think we need a better way to solve this.
The `return` should be `int`
What do you think about using `all-apis-forwarding` here?
Shouldn't we also add `custom` to `opentelemetry`?
I don't understand this. Why do we have to hardcode the value?
I think this should be `RemoteExecutor.isLocal(loadingUrl) || loadingUrl.getHost().getHost()`
Note generally it is not generally generally generally, so this variable is not required.
I think it would make sense to move this line to `createSolrConfig` so that the unit tests don't fail.
This change seems unrelated.
This should only be done when the globbing file is in the first place. This is only for the first one in the second.
Why not just add AWS2MetadataClient to the config object instead?
I think the version is already in the base class (and it is in the base class). The version is not in the base class (it is not in the base class), so it is no longer needed.
@jridgewell I think this was a mistake in the first commit.
go added but not used?
I think this will be a good idea to allow the `plans` to be a `before_action` (or `after_action`, `after_action`), and `plans_not_have_have_root_e`, and `after_action` can be a `after_action` (which is a `before_action`). If you want to allow for an `before_action` you should be able to check if `after_action` is a `before_action`, and if `after_action` is `true` or `true` then you could check if
This should not be part of the pull-req.
This should probably be an `collection` or an `db`.
This is not the same as `newCompatibleenium()` but `newIndexenium()`, I don't think we want to change the name of the file (and I don't think we should change it).
Please add the empty line after this one.
Is this a bug, right? Shouldn't it be either `if (replace(...)) {` or the other `if` statements be combined with the previous one?
why change this?
What's the `Dict` for? I guess it is not used anymore?
Nit: newline should be before the last group of imports.
You can use the local cluster here.
Why do we need to do it again?
Could you please add a docstring for this parameter?
This isn't used anywhere, please remove it
This is not right. You're using NET45 to get the NET if you are not in the wrong location.
Why not return error here?
why remove these lines?
Please remove this.
Is this a debugging leftover?
This is a breaking change, right?
I think this should be a set.
I don't think this error is needed. The retry will always be retry.
What about `ARM` and `Composed`?
Use the new hash syntax.
It looks like these two lines can be const.
@dvoytenko: This is a great way to get the `use` prefix from the `Allow` package, right?
I think we should call it `this.hooks` instead. The call site is not clear to me why we need this.
Why are we changing this to bool here?
Do we want to set this to 3500.0?
This is not a valid `data` field. The `crash-data-subrow`, but the string `datatablesubrow` is used for both `data` and `crash-data`. So I would just remove the `data` field.
This test is still running on zip.c, right?
I'm not sure we should add this to the `switch` statement. The `default` statement should only be added when there is an error. I'm not sure what the best thing to do is, but I don't know if it's the case.
is this the only place where we check for a non-zero pool pool?
Is it expected? It seems like we should be able to defaultTitle on the server side?
I think it's better to just call SampleTransformer directly here, because it's a very bad idea to call the function directly.
This is a little strange, why not just use `(char *) digest` and use `(char *) digest[CHIRP_DIGEST_MAX]`?
This is a breaking change. It seems like we should be using `String` instead of `trim` here.
This is not needed.
fix that! this one
Why did this have a `tm`?
I would prefer to see this in a `cli/internal/utils.py` file, but it's not really a big deal for us, and we can fix it in the future.
@bartonjs - I think it's ok to remove the `return` and just use `npController.networkPolicyListerSynced = alwaysReady`
I don't understand the purpose of this `mongoClient.s.options.autoEncryption.cryptdConnectionString` condition. Is this intended?
This isn't necessary since the switch is being performed on the next line.
`GetAdrlIdGenerator` doesn't have a span id?
I don't think this is right. This is the only change that will break some code that is not related to the change, and the original code was actually not doing any queue. The problem with that was that the value was not being changed, and the previous code is not the case. The current code is that `semaphore` is the only supported queue, and the new code is the same. The current code does not have the same thing.
How about using `lookup.Wait`?
Can you add a space between the method name and the data structure?
Can you add a license header?
Is it expected?
I don't think we should be changing the contribute behavior, it's a contribute fixture.
I think we can remove the `Abstract` here. We already have a `Error` in the `IEnumerable` method.
I don't see a reason for this change, I don't see any other changes to the server code to make.
This is not correct. We don't want to do it for every single thread, right?
Should this be `errShouldUnload`?
I think we need a `Topic.find_by_slug` method here to be safe, and that's what we want. `Topic.find_by_slug` returns a `Topic.id` object, but it's not really a topic. `topic` should be a `Topic.new_not_to_by`.
Do we want to check for the return value of `get_hs` here, too?
I don't think we need to do this. As long as we are only storing the task in task, I think we should be able to remove this line. I think it would be a good idea to keep this line as is and just add a cleanup task to `execution`
Should we add a validate to validate after the klog.Fatalf?
I think we can remove this now that we have the `ServiceConfig` already.
This change should be reverted. The only reason it's behind the `if` statement was because it doesn't actually indicate the return value of the `if` statement was not triggered. The reason is that if `hasQualifiers` was true, we don't want to return an array of the `if` statements.
why is this line deleted?
The name of this should be `invalid_indices`, it's not a name.
is this used anywhere?
Shouldn't this be array_filter($authors, function ($a) { if (!empty($a)) {
This is a bit odd - maybe we can just remove this?
This was the key that is removed from the keystore, which was never used.
Why did this not work?
Text.standardize should be removed from the message
Why is the default false necessary?
Please use `defaults()` instead of `sourceFilePath`
this is not right, if the user specifies `api_quota`, then this will not have the config set
We don't use the standard `MoveMove` in `decode()` - it's not a big deal if it's just a single file. The only reason this file was moved is to `MoveMove` and the `MoveMove` file was moved to `decode()` and the `MoveMove` package was moved to `decode()` in `decode()` method.
This is a breaking change.
I think this should just be `from scapy import scapy`
Why the change away from the `equal`?
Nit: this is a pretty long line.
I'm not sure about this change. I'm going to suggest that this is a breaking change for `Options` to be used as a `Config` field.
We don't use this imports.
You can just use `Tags.GraphQL = {}`
why is this removed?
I'm not sure why this check failed, is that intentional?
Is this needed?
I think this is not needed, we should just delete this line
I think the `config` is unused here
We should probably add a type to `int64` as well.
I think you should also add `getHealth` here.
I think it would be good to use the same ``cls.warning()`` in this case, as it is not an error, and it is a bit more readable.
is this not correct anymore? I think it would not be the case anymore
I'm not sure this is the best place to handle this. The `listen_host` value is used for all `global` requests.
Should we make this `static`?
why not use a bool here?
Revert this change
I think we should just return `true` here, and remove the `throw` at the end of the `LastCache` if it isn't used.
I think we need to keep this, since we are already setting the default value in `locustio-taurus-wrapper.py`
This is the only change I'm not sure about. I'm not sure if this is the right place for this, and it's a bit confusing. If you're going to use `ListServices` here, then it's a `dict[ListServices]`. I think this is the right place for this, and I'm not sure if it is worth it.
Can you remove this blank line please? I know it was already added by mistake, but it looks like this file is not used.
I'm not sure if we should do this. If we're going to do this then I think we should just get rid of the `GROUPS` now.
This is the wrong place for `globalVars.appDir` - it's used as an `app` attribute.
The `DisableInMem` struct should be added here as well.
You can omit the `||` here, it's already in the `GSA18F_APPROVER_EMAIL` block.
Maybe we could make this a property of the `Concurrent_email` instead of a string?
I think it's better to catch the exception in `get_message` and then catch `message.get_message()` in the `try-except` block.
Please add a license header
Rails/DynamicFindBy: Use find_by instead of dynamic find_by_by_id.
This is a bit of a weird place for this.
Do you need to call `update_all` here?
Is there a better way?
Why do we need this change? It looks like it was just a bug in master. Can you revert it?
This is a good change. It's not really the same as the previous code, but it might be better if the previous code was a function that throws an exception, then the previous code would have thrown an exception. It would be more readable and more obviously easier.
Please add a license header here
@jjoda/isorton can you please move this to the `org.joda.time` folder?
missing `@since`
This is a bit odd. Why do we need a separate function for this?
Why this change? I don't see any other package that is being split across multiple lines.
This doesn't look correct.
this is a bug, right?
I'm not sure if we want to do this here. The rubocop should only be able to get the `_guarantee` query, but that is the `_guarantee` query.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't see the point of this call, the caller can call the streamHandle method.
Should this be `cursorState`, too?
This will need a test case for it.
This is the same as `bucketRegex = regexp.MustCompile( !^gs://([a-z0-9][-_.a-z0-9]*=][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][
This is an API breaking change, I don't see any `ApiModel` using it anywhere. I can't see how this works.
@danrot @danrot what do you think about this change?
This is not the only place where we use containerized flow.
`role` is unnecessary here, can be removed
Can we rename this to `getBoolean`? It's not clear what the purpose of this Boolean type is.
Is this not needed?
I donI understand why node is not closed.
How about using `path.Join(ProjectRoot(), "test/fixture/certs/svid.pem")` to avoid the blogs?
Why is `string` needed here? Is this a bug fix?
This should use the `JsonElement` module instead.
I'd prefer to see this as a `ITableObject()` instead of an `ITableObject()`
This is the only line changed.
We should probably add a note that this is the case that we want to be able to use the PEP-8 style guide.
remove this empty line
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
What is the reason for this change? Are you sure it is safe to do with the `Map.Entry` below?
How about "none" ?
I'm not sure if this change is needed.
This is a very minor change, but we should be able to get rid of it. I think we can just do `this.uppy = log(errors.message, 'error')` in the log line above and then use `this.uppy.log(error.message, 'error')`.
Should this be `builder.AddDiagnosticSourceInstrumentation()`?
I think this is not a good idea. It's not a good idea to add a new function to `NotServerServer` in the future.
I think we can move `let rootId` to `rootInternal` as we are only using it in one place, and we can remove `let` from this file.
This change is not related with this change, but I'm pretty sure we can make this change at some point.
This is a no-op. We don't return anything.
Why is the IP added here?
Why did we remove the version number here?
I think this can be done in a separate PR.
I don't think we should use the `time.Now` here.
I would make this `final` since it's a boolean. We don't have to introduce `true` by default.
