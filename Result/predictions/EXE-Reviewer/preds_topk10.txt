Is this a breaking change? Shouldn't this pass `transport` to `java`?
`$config->Index->record_batch_size` is a better name. What do you think?
is it possible to get this message by itself rather than silently ignoring it?
I think the original code was wrong, because this function is being used in `application.properties` and it is only used in one place in the codebase that's not a problem.
I'm pretty sure a new feature is being taken from a previous version of the Reset URL is not necessarily a device (e.g., when calling a function in a post-merge). This would then be a breaking change. We could change this to a helper function in the `isNavigating` function to reduce the overhead of the `isNavigating` function.
Is there any other way to fix this (the first question), that the correct thing to do is to pass the `Mat` to `free_channel_num`, where a user doesn't have `from_channel_num_dims`. This is because `from_channel_num` is called by the call to `get_num_dims()` and it is an implementation detail.
I think we should be doing this now, we should be able to get rid of this
Did you intentionally made this change for a change in printfprintf to avoid this change?
can we move this to keyboard, defaulting to openshift-logging, defaulting to openshift-focus, and allow WM_CHAR to be a constant
Is this needed?
Just a thought: we could change the `setParameter` function to take an empty string.
can you use `shared[:shared]` here instead? I'd also suggest to use a more generic name and name the variable `shared`'s name like `GetSharedValueValue`
It is confusing to me what "re-render" means. What is the intention here?
I think you need `ToHexString` here as well.
@agramfort @safernuds call it `err := current.SetSet("image-provider", provider.Name()):`
This file can be removed, it's not used anymore
I don't think this change is needed
Is this a leftover?
Should this be a constant instead of a constant?
It would be nice to have this check first (on the `let` block)
I think we should add this to a view spec, since we can't use it here.
can you rename this to: `NONEXIST_ENABLED = {'scanners': [`
this can be handled in a different PR.
Not directly related to this PR, but `isEmptyType()` can be `Optional[str]]`.
What is this change for?
I'm trying to reduce the history history in a better way: 1. The user could be saving the command history 2. I would prefer to have this be something like `process_history_history` or something to keep in mind that the user doesn't want to be used to get the command history history.
Nit: I suppose there is a new line at the end of this line.
I would prefer if this was a separate commit (I think it's fine), but it is more robust to have all the unit-test options in this commit
I don't think you need to check respond_to? Or is that handled by the code?
This seems to be an actual change to the behavior of `runner.withDirectory` in line 246.
We need a better way to define this namespace. It is not used and will not have the namespace in the namespace
Redundant `return` detected.
I think this is not enough, as we only care if the user explicitly started the last time, so it is the last time, and the block should not change. We need to make sure that the last time the schema is updated.
This is a wrong thing. The default should be alters, not alters.
@mmaxim this was the bug.
We should probably add the topic name in the test name.
Why not ` []byte("node1")`?
This can be done with the defer below.
We should be able to get rid of this interface. It's not a big deal since the method itself is called by a single interface.
Doesn't this need to be `SetTag`?
This is not used anymore
Why change `2014` to `2014`?
This is wrong. `BiConsumer` already has this import.
Would be nice to have this take into account the log level of ex.
I'd be happy to use `isEmpty` for this, because this is a `Device` that is called for every `cartFacade` class.
Shouldn't we also update `validators.of(true)` to check the return value of the property name as well?
I don't quite understand why this import can be removed.
This line is not necessary.
This should probably be split into multiple lines for readability. If it's the only line needed, then `for (int i = 0; i < feeds.size() {`
I think we should just leave this as it was before. I don't think `pipeline` has any value in the public API.
Do we need the string? We can just inline it. If yes, can we get rid of the `error` and call the method?
We should only ever need to add `chain` object since it isn't actually being used
I'm not clear on what this is for? How can I get it out?
This should be a separate PR to fix on windows.
why is this logging logging not there?
You can use `PromisePromise`.
Should we do that in a separate PR?
Shouldn't this be indented at the `__class__` point and at the end of the class?
Why are we returning `false` if `!isCurrentermal==true`?
I'm not sure why we do this. It doesn't look like it will be used anywhere?
Why are these changes required?
double check should be done in the same method above
Should this use `sizeof`?
Should we do `lib-python` for this in-memory-python.go?
We don't know what the best method `new_user_settings` is for. I think we should have this check outside the `if` statement.
I think it would make more sense to have this check outside of the `if (pending != null) {` block.
This would be more consistent with `\` and the name of the string. Perhaps we should call it something like `\d` or `\d` to make these more obvious?
Had about this. It would be good to name and have `frastructureReady` as-is if we're going to rename this file.
do we need to make these 3, and the malloc test below the DW buffer buffer?
shouldn't this return `false` and the next line be combined with `return code.Intentional("unchecked")` ?
I don't see `padding` being used anywhere else.
Is it necessary to do this assert outside of `assert(sibling->parent == subsurface->parent)`?
I don't feel like all of our tests need this for the time being. I'll just add it there in the model and use that constant here. Thanks!
Can this be replaced with DgManager::isExternalTable(), that means that the HBase tables will not be set. Is there a way to make this specific, so that it can be re-used?
I'm a bit confused by the description, but the other one seems to be using a different meaning. The other two are the same, one should be the same.
I'd prefer to see these test helpers on a single line instead of all the others. It's more like like `test_internal_client.rb` which also allows us to test that they're all equal to what the difference is.
This was changed to allow for `cltest`, not `cltest`, but the current `webenginesettings` needs to be updated.
What about catching the original exception? In this case, it will catch all exceptions, so it will be much useful to have this logger.
Is there a reason we don't do these error codes here?
Can these params be omitted?
This is a bug fix.
This option should be a separate `_replace_variables_replace` flag.
No network calls in this pr, please revert if necessary.
I don't think this is the right place to generate the data. We should be able to use the data manager here so that the data attribute name doesn't match until we have a data.
why is this needed? It is always called from the manifest? I'm not sure whether this should be a public manifest.
Just to confirm... this is the right thing to do to set the `elif` on a timeout ?
Not used here. Use the import statement above.
This change was necessary because the tests pass now?
Is `localConnection` still necessary?
container is a container
Can we move this to `custom-client/` file, so `org/apache/os/http/db/cli/db/gardener.hive.erb_util.go` (or something with `import static import from  `)
do we need to make sure `useBinaryBinaryBinary` is always true?
This is just to call the test to pass. It does not look like you are missing an init function that calls the init function in the test.
This should be done in `mu_acc_ROOT`.
shouldn't it be `(source || modifying)` for consistency with other methods?
This change should be reverted.
Can you add a note here that we have here the level before we name it "toplevel"?
Please use a regex for clarity.
What does the project do here have to do with your debugging?
why not use the one above, `fetchFlow`
Shouldn't we check for `obj.type` for `'null'`? Or does `isArray(obj)` be nullable?
`el` shouldMatchElement or shouldMatchElementElement be null? or shouldMatchElement be not null?
These are not imports in the import block
`JavaParserVisitor` is unused.
This was unrelated to the changes in #1610
why is the pointer needed? is the `PortBinding` used somewhere else now?
Hmm. I wonder if it would be a good idea to make this configurable by the time we switch to a file with a file with a specific name. It's a bit confusing since `provider_secrets_key_base` isn't a file
It's not a good idea to use <msg> Can't we just use either `pollId` or `pollID` to get this value directly? That's weird.
`Array` is an array, not a array
The disguising is that this is not a link, so you don't need to read it, you just call `i = readlink(buf, buf, BUFFER_SIZE_ELEMENTS(buf));` on the line above `i = readlink(buf, buf, BUFFER_SIZE_ELEMENTS(buf))`, right?
nit: update copyright year in header
Plz add a blank line between tags and summary for better readability
This line can be removed.
@tzz why not keep this?
I think we should add a default property to the config file, e.g., `default: nil`.
NIT: do we want this to be part of `System.Linq`?
@bvanessen can you add `req.add` and `req.add` to the end of this `req._opener`?
breakpoint is already an `int` (which means it will break). Does that mean there's a `breakpoint`?
The current code, which is a different issue. I believe this is a change in behavior to be the same as in the `AppFile`. The `AppFile` above also needs a single `self._x` parameter.
Shouldn't we also use `pkg/configurator` here?
Can we move this to the top of the file? It seems like a bad idea to move this logic into the same package.
This is incorrect. The first character was always `undefined`, so the `std::distance(first, first + 9)` will cause issues. If there's no such keyword, then it will not.
It looks like `app.kubernetes.io/part-of` is still a `etheus-operator`, why not `app.kubernetes.io_name`?
What is the reason for this? The `!` check should be moved into the `if (parent != null)` check above.
I think this should be `xrc20`, not `err.com/iotex-core/cli/ioctl/cmd/xrc20`.
I think this should be done only with the context passed in. I don't know why there is a single flag.
We already have a dependency for all these Mining events, so this should have an impact on the field that is being used.
Is it possible to add a new entry to the existing one instead of a new one? If you do this, please avoid making this change backwards compatible.
nit: wouldn't be easier to set this to false by default if necessary.
`typeof fetch = typeof fetch` => `typeof fetch === 'undefined'`
I think we should just have actx here at all.
Why does this condition is removed?
I'm confused by this. I'm not familiar with codeGenVersion because it seems like the codeGenVersion is already being used. What are we sure about this instead? It's not used anywhere else...
Why `setFileState` was removed here?
@smarterclayton @tgamblin @kalefranz @bparees this was a bug?
is this a typo?
Why is it `Without` needed here and not `Path`?
Do we want to also add a case for "single"?
Do you really need to call it like `tag`? We might not have to pass an empty column for this.
where is `where(created_at: [end_time].equal[:end_time]...]` it would work
this function is already used by the `__init__` method
I'd call this `str(props)` because it's the name of the hash. It's an implementation detail, but I don't think it's an important special case.
Is the `h2o_next_token` function called on a bad job, or should it be called during the test run, after you after it's updated? (it looks like there's a couple of times for the same token parameters.)
@jridgewell We can remove the `Recycling` here since we already have the `includeCacheFor` and `includeCacheFor` in `build-system/scala.cs`.
This also fixes a bug where PaymentVersionV3.
the `for _`.
needs to be able to remove
I don't think this is correct. `canBeamLink` will always be true because `canBeamLink` is false in case `from_motorway` is false in the `EdgeID eid` method
I think we should keep this one as the third argument to `SCM_cert`, since we only support master.
Do we need `ssd_vgg` now?
I don't know why we need to keep this here.
Do we need to set a check here?
Redundant use of `if` around the `=` around the `--warn`?
`EdgeEdge` may be misinterpreted in some cases.
Seems to be the same as in `notificationManager#updateReport()`
Call is not sufficient. Please have a test to see if there is any RequestFeatures stored on the transport
I don't think `GenerateAPIKey` will be used anywhere?
Again, do we actually need the cfg here?
This is actually a bug. It is actually OK in the tests, to not depend on the model. It's not a problem, but we should use `convolve()` instead, so we should change the behaviour in the tests as well.
This test has been updated to reflect the new functionality. We should try to keep the `calledThrice` and `calledThrice` values together.
Is the `error` argument really required here? If it is, maybe we can remove it? If it is, maybe we can remove it.
For some reason, we can't make messages accessible by their messages we've had, but we can use the message here.
Style/SpecialGlobalVars: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This was not used anywhere
This is the only thing I don't want to have to add here. We don't want to remove super().states in all of the methods of the functions. I think it is more consistent.
Why do we need to make it `protected E` ?
Did you mean to leave this in?
Did you intend to include these extra headers on Windows?
Does the default of `WebReader` work if we return a string?
don't need this variable, it is already done in the above loop.
Hmm. Is this the best way to test this? It looks like you are doing an `l` check in `cancel.js` - is this supposed to test that the input value has the same effect?
I am not sure that we should test this differently now... can't we have another test case that tests the code and that it still test locally and that it doesn't have to run for that?
We should do this in `component.rails`
This may not be the most helpful catch case.
The new parameter is required here to match the new parameter name.
This is probably a typo.
This should be in `pkg/PACKAGES`
Could this be an imported as `javaslang.Serializables`?
why not using ip instead of ip?
this looks unrelated. Why is it being removed?
Do not use `first` here.
style: sort alphabetically
This variable is already used in the constructor.
This was a bug and should not be part of the PR
I think you can move `i` to `line` (the next line of this function will need to be `i-length`). We can move `i-length` to `numba.SPEC_ID`
does it mean there is a test for this?
if we move allEvents                   to a separate const this will break existing templates.
nit: should `pip.utils.os.path.join` use the same context as in L26?
This is called in the `isHydrating` function so it is not actually required.
This seems to be unnecessary as the event handler is still running in CI. This is a very minor test IMO.
can you please add this to the "conftest" of the core (which I am not sure if this should be the default?)
use check_disabled_client so we don't need check in check_disabled_client anymore.
I don't think it is really a good idea to query this test. The `find_header_has_header_has_find_query` method should work.
`apply_helpers` here seems unnecessary, can we just inline it?
You can remove the `class` declaration, it is not used anywhere anymore.
why change this line to `start := r.Seek(0, 1) // Read the whole stream at end` ?
This is just used to generate generate generate, and it can be removed. <msg> `ource` is already in `lib/common/time.go`
Maybe `GetDevInvariant` or `GetDevInvariant` is better, and more importantly more flexible that more commonly used this property name.
Nit: this var might be better placed inside the var, so that users know when there's no reason to have this variable.
Shouldn't we have a `.dat` tag?
I think this is better than the directory itself, we don't need to check if it's not working.
Nit: import sorting
I don't think we can add this part to `enable_metadata` in our `enable_metadata` for example.
why not using a `GetPosFromResult`?
This is going to break existing flows (if needed), you should just do a `Config.IsNullOrEmpty()` instead.
I wonder if we should keep this as `#elif defined(AARCHXX) {... }`
do we need this field too?
I would put the call to `getAvatarFilename()` in this method and the `application.json` check in the call to `getAvatarFilename()` in line with all the new call together (and similar places in this PR)?
Is it worth logging that we get here in the error message?
`As a setter for default` and `As a setter as a default. Can we also add a default case for `DefaultTextMapPropagator`? It would make the intent a little more readable (it is not clear what we're using it for the implementation of the `TextMapPropagator` but this has nothing to do with it).
@saghul, I don't know why this was added...
This line is not needed, the line above this.
why not simply `len(flow.request.headers)`?
I would prefer the `required` as a parameter in the `install` method, because it's not a list
Why is this needed?
I think there should be an option in this way that we should have some sort of concrete class names: one liner, one line should have a comma between the last line and an array
This is not the correct way to go, but in the future it may be better to have a constant that requires to put the response (the one above). Also we should add a field for the method.
We should probably have used an assert here.
I'm not sure if this line is necessary. There is only one `empty()` call at which `empty` isn't used.
the `error` parameter was added here, I don't see it being used anywhere
Shouldn't be `@GString` (and the `out` constant)?
I think this is the wrong way to get the `labels` argument.
This is really a part of the fix, but I think it would make sense to do it in a helper function.
nit: you don't need to change this line
I was expecting <msg> I had not got the `.rb` suffix in the past, but the tests for `/session` had to be updated, and they were originally not included in the `/session` model, because I was considering considering using the `.rb`, but I had been able to test that.
don't need Dimensioned, it is a big deal if it's not used, but if it is, let's use `numba` instead (or `numba`).
Maybe I am missing something, but I wonder why the other options are preserved in this commit.
I'm surprised this didn't fail. I'm not sure this is the right fix.
Also do it now, but you have to look at the changes below?
I wonder if we should just make `pkg/errors` package private?
You could move the `init` inside of `initCapabilities` method, as it was already here.
Trailing whitespace detected.
Space inside } missing.
Maybe we need the `fanout` flag?
This is probably a good change. It might be worth moving the `puppet` to a common header.
Whilst, why did the original go go up?
I'm not sure we want this to be public - do we want to add it to the `docker ID`?
I don't think it's a good idea to keep it. It's only for tests not that it should be used.
I believe this is not a required change
It was probably intended to be this key, but we were still trying to get it out of the box.
This is not a test-only fix, since I'm using a `.MAX_to_one` to get the `googlesitekit-publisher-win__small-image` src. Is it intentional?
I think this can go, no compilation
This line should stay here. We're already at the beginning of the cpp.
Why `factory` and not `factory`?
I'd call this `std::string`, because it's an internal thing that is confusing to call
Why don't we just allow `0` and `1` ?
why do you want to remove this?
I would add a TODO here as well.
I think the way this function returns `WithIdentityRegistered` instead of just `WithResult` and you can save another function. The purpose of this function is to return a reference that does the conversion. `WithIdentityRegistered` returns a reference to the function that is being called, but that is not a big deal for now, I don't think it makes sense the function that returns a reference to the `WithIdentityRegistered` but it seems to be the case that `WithIdentityRegistered` takes the `Process` parameter, so that you could have a `ProcessInfo` that returns a reference to the `ProcessInfo
I don't think this is the right solution. It should be `wav` instead of `src/**/*.cwd` in my opinion
This can be simplified by using `luaA_object_push_swap`
this is just to confirm that the action is not `note_id`
why is this done here?
I think this should just be `contains`. I'm not sure what is going on here.
This looks odd to me - can we use a default for this value instead?
Line is too long. [81/80]
You don't need the `if(ptr==NULL)` condition here, it just checks if `!ptr==0)`
do we really need to add ` okay_url` here since the action is used only when `welcome_mailer` is `mailer`?
The more "if _ _check_ checksum is not in the client, we also have the "if _obj_ executed" check that the lock is closed.
Can you also include the prefix for `enableDownloading`?
" method method" -> "This method"
No need for an enum here. Just a set spans should be fine.
Let's add `# pragma: E0` and `# pragma: E0`
I am not convinced we should put the entire config file here. This will allow a connection to create a connection to create some other system data, which is not supported by other communities. What do you think?
isn't this basically a breaking change since the "root" message will be executed by a file in the `err:` and not the archive?
One of the earlier actions that was added in the controller was much more expensive. I'm just not entirely sure what this is supposed to do
This is probably not the right place to put the file. I don't like that we have a file somewhere, and it does not. This seems to be a problem in the `beaker/options_group` file. It might be worth adding a note on that to the docs about why they both exist and the file does not exist.
`year` will return null as we don't have to return the year, right?
this is wrong, we should remove it and keep the Containerf in the docker and the Containerf in the docker and remove Containermake it from the docker and the update. If there is some test to verify that the docker docker is removed, then I don't believe this is necessary. @stephentoub
If you're using a flag here, how do you ensure there are no events on the user's machine?
Does this need a constructor?
I believe this was a mistake @mheon @mitchellhenke @kraftbj do you know?
I'm not sure what's going on here. `type: :model` is a reserved name for the `includeResponseSpecHelper`, not a `type`. I see that you're passing `type:` in.
This is a pretty bad place and it might be worth moving into a `utils` module in the `utils` module and then re-use.
Not necessary since I was looking for an error when doing something like: `>= 0`
why are we supporting a default value instead of a number?
Was this an issue before?
I think the original version of all these tests is more correct. Unless we are going to move them to a dedicated file (not even if the dependencies aren't in the `six` package).
Line is too long. [83/80]
These checks aren't needed since we are here in the tests.
does this mean that we don't have to update the schema in the test?
You can just use `__DIR__` if you wanna be a path. See ` . DIRECTORY_SEPARATOR . 'psrw'`
I'm confused, this is the one in `test_package_test` I'm not sure we have in the `map` package. What's the reason you're changing the `package` module?
Is it still needed when there was no own histogram view? I assume it doesn't have tests for this purpose.
why not using a `*block`?
This should probably stay as it was.
This does nothing?
Do we have a `.rb ` file for signing up` somewhere?
@jona-sassenhagen @bharatviswa504 Is this what you meant by adding the other options?
Why are we converting this to a Hive table?
Please use wildcard import.
We can use import alias from imports, then this can be avoided.
`s/c/c/Getter/`
what's the reason for this change?
These can be moved into the `emplace` method since that's what they can do.
Unnecessary spacing detected.<br>Operator `aws_` should be surrounded with a single space.
Why are we making this change in this PR?
Why would we want to check for an error here ?
Is `metaServer_` a global field in `AvailablePort`? If so, would it be better to pass that in as an argument?
Why is the locator removed?
Can we also include a brief docstring on what `projectName` is and what it actually is? It's not that expensive.
shouldn't there be a null check in the other cases? #Closed
This return statement is no longer needed.
This was just a mistake, because the WriteAsync never returns false, so I removed the call to delegateAsync() here.
Why was this change made?
This whole class is missing the `@`
I'm not sure how to handle `attach` as the interface of the method, but it seems like we should just rename it to `attach` to clarify that it is being used as a `String`.
Please add IOException to initDefinitionLevelsReader, otherwise its not as part of the api api
Why is forceRDKit used here? Is it used somewhere?
Can `find` be avoided here?
Do we need to keep the old one?
I don't think this will work in any case. I would rather return the err from this point in the code, but in fact I think `BuildRequired` would not return a `nil` check.
I don't think you could simply remove `protected`. It's not needed at all, since the method will be public.
`$this->getRequest()` could return null. If this is the case, the `?` should return a default (or `null`).
I think this could be done with the `logPackage.isVersion()` function instead of `validatePackage` so that it can be shared across all `logPackage`s.
NIT: should we use the variable `self.map(map_fn, specs, clone=False)` to avoid this particular error every time `map_fn` is called?
I know this is the only use case. It seems that adding a new `Reset` to the chain could be that the `Reset` chain could be used to determine that `chain` is an `int` and the `Reset` chain is always the same as the `chain` is not.
Why do we need to use Trace here? It seems to me that we should not be using it in all places.
I am not quite sure what the best way to fix this is, but it should probably have been the other way around.
We need to remove the `Rails.application.config.blacklight_export_secret_token` part here, and make `application.config` `Rails.application.config.blacklight_export_secret_token` public, otherwise, it can be reused.
how do u know that this is not the same as the lambda?
This looks wrong...
I think that we should add `HostDataDir:                    ` and `HostDataDir:` to the `HostDataDir` list as well.
should this be `ipsecESPOverhead = 38`?
This is a bit confusing. The `MeasurementItem` method has a `TryOnEnd<T>.Metrics`, but it's probably worth having one.
I think this import can be removed now
Could you explain this bit please?
Why did you change this?
you should not change the query. Use the new query for the query parameter.
Is there a reason you changed this line?
Can't we have a separate constructor for `isMining`? It's used only by `isInMemoryed` on a `isInMemoryed` which is the default value of `isMining`. Then, that could be the default.
`getConfig` has no effect on Linux so I think you should not be able to use `getConfig` everywhere.
I am not sure if the `Unlock` method is necessary here, I can live with it.
This is the cst change that was made.
The default of `9J2OjH8Ao_A` was required here.
Use relative imports, not two concatenated together
Is this actually the right place to handle unsupport?
I am not sure about this. I am not saying `_CleanFpInfoAttr_` is a good idea to have a good way to do this.
Can you also name the variable `RAY`?
Use `TODO: conflicts` between method name and class. Use `exercise#register(:edit_url)` instead.
`ExerciseWithProgress` is now unused, right?
This is only public API - can you remove it?
Can this just be `public`?
We don't want to keep the old version twice (in the case that `version` is not present, but not the number of versions)
It feels like this function can be moved into utils.go and move the other methods in `oc get`. Since the new methods need to be renamed `oc get` as well. So we can keep this method around and rename this function to `oc get` to be more general and rename the method to something like "one of the v0"
Why is this no longer required?
should we just use an enum here?
Should be `Sy_LEGACY_HELLO`
This is a hack, so I would expect a change of behavior. `symmetric` has to say `http` as `true` and the `privilege` is not an `vert`. It is a good change.
this is for consistency with our examples and our CI builds don't go away
This is a bit confusing to read, I think. How does this happen?
This will be set as false by default, right? Is the new `dokan.ExistingDir` still true?
Why not replace with a `listRegions`? I think it is a bit clearer, as it is a `listRegions` instance.
`editor-container` can be replaced with `this.container =`
this function is only called in the `defaults_get_search_form()` method, please remove the `defaults_get_search_form()` function entirely.
Is this needed?
This is wrong, Rubocop will keep track of your mile.
Can we rename it `azkaban.jvm.args`?
I guess we don't need to fix the `\s` part of the code base. It's not a realisticistic thing, though.
Do we need the `GetCancelledZeroTask` here?
Can this be a `boolean` if it's not a `boolean`?
I think that we should not have an auto block for every block. The auto block needs to be done at this point in the loop.
I'm curious, did you mean to add `@Restricted(NoExternalUse.class)`?
why change from `(callerAddr, e)` to `return 0`?
I think we should just have the table version always be the same, e.g. `NewBlockDataVersion`?
I'm curious about the purpose of this? Is this just for code that is the only place where we're trying to have the same effect?
Why the previous version change? It seems it was just to be able to work.
@jvanessen you could move the above move to `.es star` file and move the `.py?` there.
Why does this need to be public?
Please don't remove this
Line is too long. [98/80]
@mateuszgrzyb I don't like having the PropertyMetaModel attribute, but I'm not sure it's necessary to modify it.
Why is this removed?
Is this used?
This seems to be unused.
I'm not sure why the charset is here
This will change the way the test setup is working without it, is there any case you can write it to the test case?
why not use the `omitempty` field here?
If the tty is closed, why not close it and close it in the `defer` func?
I think we should keep both `implicit` and `mutateElement`. We can add the special handling for `getIndexIndex` and `getIndexIndex` as well.
`protoreflect` is now unused and can be removed
Not a fan of "skipOSConfig" as the config value. I guess you want to use `strings[int]` here.
why not just call `getMimeTypeFromUrl` directly instead of calling `enclosureType`?
I don't think you need to check this. The `Client` is only used to set the url. Also, I'm not sure we should do this, but I think that's a good idea. But if we do that, I'm not sure if this is something we want to do so
What does GLOBAL_DCONTEXT mean here?
nit: revert unrelated changes
would it be better to make this `cell.id`?
Why use `raise error(errno)`? I would not expect that you'll have to cast to a negative value here.
We should use `isort()` instead of `!== null` here as well.
This is unrelated to the PR.
Is there a reason to change this?
Use `if isinstance(BSON::Decimal128)` instead of `if isinstance(BSON::Decimal128)`? This will make the code slower.
This seems to be missing a `.require 'bolt/plan_creator'` line.
Why is the number of values 20 minutes? Should we set this to `20`?
Please, remove this line.
should not this be a user error?
I'm assuming this is a change to a public API, but it is going to make it less confusing in future. I'd say we can just make all of these changes to ` storage provider: ` and then delete the code in `include/adddata-machine.go` and `exclude`.
This line can remain unchanged if any limit is considered considered the `define_reader` (not sure if it would affect performance).
why removing this? Don't we need the `release_history` method anymore?
isn't it better to keep this and just have the TLSEntries be wrapped with an if, and make the TLSEntries part of the chain, and add a new `DrandEntries` and use it directly in the DrandEntries?
what is `current_key` used for?
I think we could remove these too. The `mode` is only used once in `Run` and the default value of `raw` is `True`
should be: if timeout <= 0, then timeout <=0
Do we need to keep the limit? If so, we can add it to the struct.
Shouldn't this be `const` too?
rollbackPrimary is called when rollback is called in rollback mode
This should not be necessary.
`isGHToNode` not used
This function is used to fake the fakeListOk
Why are you using k8s.io?
This import is from the standard library library.
AFAIK this is the only change needed to do this, I believe we are using `regexp` to get the pipeline stack from the `deleteSecret` here
Can we just remove this now?
Can you add the newline above the imports?
this is the wrong way to fix this. The first time we run this code is called. This code is called for a part of the build table, so it should still return a `List` instead.
Use relative import
I don't like this name. It was already a variable and not a variable. It should be called in `var`.
This is a bad place for HTTP and not a single route.
We can remove this test.
Minor thing: I suggest not to check `return Value{}` here since that's where all the `tabletable` and `reflect` are actually used.
Is this correct? This seems to me an extra `nameLower` has been renamed.
Is this change necessary?
If the self.Promise is a string, it might be better to return this in a variable and use it here. I think we'll need the explicit conversion for WebOS 2, but that's a bit odd for a couple of examples.
what happens in the `skip_targets` method? do we want to remove it?
This function is a bit confusing. I wonder if we should rename this function to `features_resource_size` for consistency?
This should probably be done on line 234 if we don't have to do that - we should only check if the limit exists and then only set it if it exists to `numpy` when `pinger` is `nil`.
I think this interface might be more correct for the `File` interface. We don't need `DeleteAll()` here, it is just a `File`.
It would be nice to add a `TODO` here to remove this.
I don't see a strong reason why you're adding this as a parameter to the set of people who don't use it -- it will be easier to understand what the method does for it (e.g. via `setConfig`).
I would keep the OpenTelemetrySdk.EnableOpenTelemetry() call.
`__time_SYS__` also needs `__time_SYS__` for now.
I guess you meant the volumeg here
Should we also catch `excessDomChildren[tmp] != null` here?
I would prefer to pass the `user_func_array` here as well.
I don't think the `ctx` can ever be used here, but it does make the logic more readable. If you pass `ctx` to `NewConnector`.
nitpick: it's better to just add "Erstellen und weitere hinzufügen" as the "that we are adding" type of action-value (like "snake", "that", "that is a very long" part - it'd be better to add the 'Erstellen und` type to the "weitere hinzufügen" and "that is a normal normal thing we should be using "weitere hinzufwithwith"
Is this needed?
What is the point of having an `keyword`.
This <msg> This is still used in the TIII've used to be able to remove the TII as there is a couple of other things to use in `Marlin.h` in the TIIIIII've used used to remove some more TII to see. This is a required field and I'd be tempted to remove the `S2` prefix and the `bare` parameter as well.
I think the initial value of `TogglePrefetcher(false)` is a no-op, right?
Can you revert this change, right? I see it's unused.
I thought about naming these alphabetical?
same here, if we just return `undefined`, then this will break the code.
Could this have the same problem as the getAllprojects()?
should be `data-lists`
so if a conf.use_winpcapy is not available then you can use the new `dll` variable in the function to get conf conf if it's not available?
Add `#asset_defs` to the docstring
Why did you remove removencpy from the file system?
Should we be checking if it's not both or not and we're not going to be doing anything about it?
shouldn't this be done by the new require below?
why change this?
I don't think this is the correct term, but we use this to pass in `gulp help`, which was wrong because we want to pass in the `kinto` path in the `config` package.
are you sure this is correct? should `!r}'` be `!r'` if not, right?
Wouldn't it make sense to move this line into the openerFromDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDB
I think this should actually be added in the event-source specific constructor and not here. @kalefranz @rhtyd
I think you can also write 'go'
`options:` has to be `configFile: false`, so let's remove this `options`.
Is this a debugging leftover?
@mateuszgrzyb I think we need to bump this here.
@KonajuGames - How about we rename this to: `write_FakeFakeFake whatever whatever "accident" is for each one to use it (e.g. have "add"), `sprintf(save(save(write_FakeFakeFakeFakeFake)`. I think that should be a follow up.
Does it work for `-O` without `--SO3H`?
why don't we use relative imports here?
Why do we have an explicit `LongDomain`?
Is there a reason this is now `/C` rather than `/`, or is just a copy-paste error here?
This should be in the same way as the other plugins in this file, no?
Maybe `https://search.maven.org/lib/jmeter-plugins/0.8.jar` is a more appropriate thing?
This should still be there to make the docs more readable.
The right way to check for `gc` here is to give a more unique name to the variable. Otherwise, no `System.gc` here.
Should we call this `SolrInputDocument`?
If this is the case I would not make a difference between the two arguments.
This is a very old error message as it might have been easier to find in the error message.
@josegar74 I think you have another bug here.
Shouldn't that also be added to `setup_single_tasks_style` ?
Not sure we need a newline here?
you need a function or use dataTransfer in the above two functions
this seems unrelated? Could it just be a cleanup commit?
Why is that change needed?
This is the only change that will break existing functionality.
These can be removed if they are not needed.
missing '.' at end of line.
SAMPLERS will be the same type as you do for mmdet.py
I think we don't need this any more
@rhymes Why is this needed?
This is now the default.
I'm a bit confused... What's the purpose of this method? I see we are already in the code where it is used.
why not just add `state:` above it directly?
Line is too long. [82/80]
This file is missing the license header
`location` is not null and the method is not null
I would also call the package `execution`
why add this extra line?
This looks like a hack to me - it's a little odd to have an EEPROM property.
It's better to expose the `time.Time` value.
I think we should add some docs to this docs, e.g. "minval=0, maxperc=100", "minval=100", "minval=100", "table" etc.
Did the interface changes here have to be part of the `# type: BeginMethod` or `# type: THandler`?
I think we should remove `_find_elements` altogether because there is now no `_find_elements` field. The `all` field will never be present, and we should probably not be breaking anything.
I believe this is a copy/paste error
Is this assert still needed?
I think that we could just use `winrm_nodes` here, rather than using `-t` everywhere.
Copyrightright should be removed as well.
Why not replace with `getTableName()`?
Is this enum used at all?
I don't think we should include this in the expanded group of the page, since the page has a default of 0. I'm guessing that we could set the option to 0 or 1.
This is a bit scary, but it looks like there's no reason for this change...   I think this needs to be updated as well, or should I leave it out as is?
@danrot @jglick - This makes this change backwards compatible -- it will change the value for ` '\\r`, but the version doesn't match. I would keep it.
This interface can be removed.
I would make it `cfg.SynchronizableEntitiesPrefix`, and then you can call it `renderrenderrenderrender` or something
@tgamblin I'm not sure if this is the right place for this. This will fail when the path is not explicitly present or not. If the path is not in the `build` directory the `build` should not be provided, the `build` will be sent to the `build` directory.
I think the changes here are not needed.
This will always be false if you don't have `self._tab.is_deleted()`
`profiling_enabled` isn't actually used anywhere.
`v_file << "  c.ssh.forward_agent = true, c.forward_ssh_agent'].nil?`
I don't think we should add these numbers, they should be in a separate PR.
I don't see how this works with routed state. Can you explain?
Can we revert the space changes in this file?
Should this be `if ! current_user.id`?
missing '.' at end of line.
If it's going to show up on the server, this would be fine for you
Was this intended to be considered?
If you're using an atomic integer, I think this will result in an error, which I'd expect it to not be possible to have it set a max.
`s/Enable/lib/importTicker` (the default). Consider: `- X in (log.Errorf("select public subnets: %w", err)`.
I would rather not do this in the constructor, as in the `subprocess.run` function it is only called in the `init()` function in this case.
Should the schemaMan be nullable?
It's not immediately clear what this is for.
Do you know if this will make it worse than it's worth it to make sure that the go-routine will be started? The `r.scope.Eval` function does the same as `interpreter.Eval` right?
should we rename the default value to `operated-alertmanager`? I think it's not a bad idea
We should not do this. We'll allow this for users to pass in a `default:false` value.
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Do we want all of them to be imported somewhere? I.e. in a few other parts of this file, or in a different PR?
How about `path:` and `location`? The other option is `location` (or `location`), and `path` is `location` (or `location`?), and it's `path`)
Shouldn't the class be renamed to something else?
should we also do the default thing in `wxLang`?
This will be removed in multiple files.
this will fail with environment. I believe you can always get the root level of exception.
Can you add a blank line between this and `(` should be false, right?
Don't remove respond here.
Should this be an error instead of an error?
Can we remove these file?
This line should be removed.
Why are we changing the signature of this function?
Shouldn't this be flattenIndex or not?
What do you think about using a generic `addMask` that will be executed when searching for `100v1`?
Why not call download directly in the download function like above?
I don't think it's necessary to add `.message` file here.
`dialect` is never used and `dialect` is not used anywhere. You can use `dialect.dialect` directly.
I would like to avoid the full list if possible, but I would prefer to have a separate parameter for this.
We should add `Code` to `errerr.Unknown` as well.
Should we just use a constant for 5 blocks here?
I'm not sure why don't we have to save save file in the cache if we've already got a file in the state.
I think it might be better to pass this to `if` now that you're doing the params.qstring.method. The same is true for other params params.qstring.method.
I think this should be set only if the configuration is not `null`.
This isn't a good idea since it's used in the main application, but it's not too big of a user-facing endpoint.
this file is now unused
Instead of the same "dataverse.rserve.password" I'd rather not set it to non-trivial name.
`strnlen_s` is not needed here because `len()` is called in a few places and `tmp_optarg` is not always guaranteed to be called for non-expensive `strnlen()` is called.
cc made me think that this should be called from a email because we don't really need to create an email here, as we don't have a email anymore.
Why does this apply to the previous iteration of the bracket?
This block_a is the same as the one in this line, but it looks like it should be moved to the same line after the body of the `else` clause above.
Would it be better to get the LegacyFormHelper from the name and return it here?
nit: I would add a space after `opt_port`
`for (var i = 0, name = categoryNames[i];` is faster
I'm pretty sure that we have to make sure `UnknownDeployment()` is not called on all the tests in here. It might be better to make the code more readable, and just always call the function when the value is `UnknownDeployment()`
You're missing an `&`: `0`
don't do this. we're doing this in validator and don't have a key for a shared validator to know which validator to use and which validator does not.
This test is failing because it's no longer an error (it doesn't work)
I would move this check to the caller of the `registryAddress` package
This is an example of how the deprecation paths could be.
So if the cluster is usable it will be usable for all of the tests? Is it OK to have an attempt to set the timer.
We should test for a more clear status here. The `variable` field is not really important, but it's good to test both that and in the unit tests.
how about `hasAndStruct` ?
I think there's an unnecessary way to write this into `Wire`? Maybe we should just delete it.
Why not put these below the DTO as LCMN and the other imports?
In other words, if we want to add files like this, we can remove the `''`, `''` and `''` attributes, to make it easier to reason about.
Since we don't have a `const`, I think we should move this to `github.com/pkg/apis/certmanager/v1beta1beta1beta1'`.
How does the `BlockChanSize` value make the default `0` and now we have to pass off `BlockChanSize`? Why? Should the default be `0` rather than `10`?
This change looks good since it was in the `plans` validation, but it was no longer needed.
@aparajit-pratap @ruflin I have a look to see this constant being used in two places. Are you using it in your mule-framework? I guess it should be `const trouble = NRF52840-DK` and not be used in this module.
If the option is only used in the `--dns-server` option, why should it be an optional flag? Is it more of an option on the `--env` command?
Can you put it back :)
I am not sure whether we need the key name here. It's not really a key name. The `key` is an attribute name but a key name.
What's the purpose of the change to add this field to our public list of keys? Maybe we don't want to introduce a new class that has it already.
Is this change intended?
Can this be `desiredUID`, what do you mean by "or desired"?
Why are these imports removed?
We can just use `errors.UnrecognizedEncodingError(req.Encoding)` directly.
Should this be `passwordModificationTime.getTime()`?
I don't think we need this check. It wouldn't be a problem because we have no SmallStart in the config but only one AT AT (which is not the case of one AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT AT
I think we should use `log.Printf` here
Please add a space after the `,` to make it easier to read
can you get Action by Action?
Can we use the shorthand for this?
This log message was not caught by the issue.
This one is a leftover?
We don't need the `.` prefix for `nent`.
I think we have this in the `common.go` file, so the `--storage` flag is no longer necessary.
This is a test - I think it should be moved to a "client" file. It's in a separate package so it's more generic.
Could you add this to `nativeSys32`?
This is where you need to edit the controller when edit is disabled
No spaces in the square brackets
what does this do?
I think this should be `value[]` instead.
I think it's not possible to get the task itself directly from `getTask` which is a `saveTask`.
Do we need the output here? Or does it not depend on the content type?
you should also set the default here to default to `None` in line 218
This is not a part of the fix.
Why is this change necessary?
This looks like a bug fix. I think the fact that `RCLONE_CONFIG_PASS` is not used anywhere else. It does not make sense to me to duplicate this code, but that would seem a little bit of a mess.
Please also update the test name in the test
I guess you want to remove this
Does this still need `compiler.evaluate_string('type PlanResult = Boltlib::PlanResult')`?
I think the new test needs to be updated as well (I didn't catch this in a separate PR).
this should probably be: > if the input is zero then no need, this line should be: if the input is zero, the input in that case, otherwise the next line will be displayed if the length > 0 (if the length is the length > 0) and the default is 0. if the length > 0 it doesn't break anything.
Why the double underscore here?
I think we should also have `asLenField` as well.
Another example that doesn't allow to return a tuple of `Enum`. That doesn't need to be wrapped in some cases.
`min` and `maxQueryLength` should be consistent with all the others (see below).
Is this change necessary? It doesn't seem related to that change
This is a breaking change, I'd expect that an `@return` here would be fine.
It would be good to also check the `isglob` and set `arg == name` when calling `isglob_PERIOD` instead of the flag.
I'd leave it as-is
Should we check for other resources that use nil? Or is that an error?
Why do you pass in `onSteadyStateDependencies` here? I'm not sure why it is necessary?
Since this is a `.has_annual_plan?` method and it looks like the `has_active_subscription?` logic should always be there, right?
I'm not sure we should be changing this, but if I have to make a new pylint I wonder how likely would be useful?
Hmm, I was thinking you could get rid of this. :+1:
I would prefer the name `nodeid`. But it's not clear what the function is.
The only place where these are used would be `./pants lint`, which is more appropriate for the `schedule_1x` and `./pants fmt`, but I think that would make this more clear
does json:"store? I thought the visual violation was to send the `omitempty` back to the `exit`. I thought the visual option is to use that instead of `json` since `json` would be a better way here :)
Maybe we should rename this function to `s.Image.BuildRequired` or something similar.
Instead of "deploy", we should use a different name `build_` for the target.
Perl_croak() won't give us one parameter to the last parameter. I suggest that all the changes in this file should be reverted. Also, you'll want to change the code to use `Perl_Croak_` instead of `_`
@stephentoub is this correct, or should I just call out the `HasTransactions` state, not `HasTransactions`? This is a very strange approach.
This looks like the only place in this class is where we want all the components to be set. Is it safe to remove this line?
nit: `STATS_COLUMNS` is not used in this module, it can be refactored to use ` Email:port` and use a more meaningful name here.
If I understand correctly, we want to pass an empty list for this one, I think we don't need to do this for us. Can we add the store store in the service?
Can you please add a `#include` to the new headers?
Why are min min and not min?
I'm not sure if we need to do this or the `.Resource` call below. Can't we just return the result of `WithEntryEntry`?
Is there a reason for not using `exercises`?
This feels like a wrong place for having the mode file in the config file. Is this something that needs to be added to your new API?
this isn't going to work for now, but it might be better to do the same thing for the user_name and to be set to the same level.
I think the idea here is to have a `waitForResponse()` method that calls the translation on each request.
This would not work - there is no default value on a string. It is only used to set a string once on the first call. I'd rather not use an array for this.
nit: you could use the `/status` helper directly here.
I think this should be handled automatically by the `application.config` package, since all of the `application.config` and `application.config` properties should be set there, so this should be a separate PR
You can use `false` in the query parameter as well
I don't think this is part of the public API.
Can you make this final and just call it `UsersLoop.currentTimeMillis`?
This call is no longer necessary because the `AuditFields` method is already doing something wrong, and it is now a no-op
What happens if this is `0`? Doesn't having `0` still return an `Optional`? Maybe we should just check `if (contract.Visibility == TypeMemberVisibility.FamilyOrAssembly)` instead?
this variable was used to preserve the call to `var`.
nit: I believe this is an unintended cleanup.
I'm a little confused by this - if you're using multiple paragraphs for a view model, I think you're fine with this?
please use `load_awf` instead
Shouldn't it be `default=None`, instead of `allow_None=True`
This is hardcoded in rolebindings (which was not doing before with the rolebindings) and it wasn't. Please don't make changes to this file.
rm is a convention for this package.
Isn't this already present on your repository? It should not be part of your PR
Is this needed?
Why is this needed, there is already a `TypeVariableResolutionCapability` attribute?
nit: change the naming to be consistent with the other naming
I don't think it's a good idea to have a list of supported values for tests that are not using the list. It's a little hard to follow. I would suggest to use `.change` as the second parameter of the list in this file as the `checked` argument.
Shouldn't we call this function instead of removing it?
<!--new_thread; commit:3e9b4e8d5a3c6; resolved:0--> Which of these is do you plan to do? It seems to work for `Bla` but I don't see the use of `Bla`? I think we can do `Bla` in the appropriate places.
I don't think the original intent was this change. The user should only be created when the user is already created, even though the user has a `''` value. I think the `recids` should be created in the `aggregate_tenant` method and then just `now_int` is created.
`ContentMD5` is used to create a new error message. I think you need to check if it is in the constructor.
I think we can get rid of this. Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add Add
Nit: Move to the last group of imports
I'm not sure this change is required, as the default job name is already in the default job for the default job.
Please use `cmd/lib.ini`, `file/lib.ini`.
Would it be possible to just have an `WriteLine` that checks for the output of the `Commonizers` as the parameter?
This is not the only thing I'm asking. You'll just have to set instrumentationName here, and use a different value if we use the same value for other instrumentation names. Also, I think the naming is a bit more descriptive. I suggest `DEFAULT_DefaultINSTRUMENTATION_NAME = "besu"`. It's also a little confusing.
Same issue here about not using warning for network access.
I would move this to a new test file.
It was probably the case that we could use `I18n.t` here.
Can we add a TODO to fix this issue?
The password is a bit misleading. It might be better to use the `Basic` constant from the function that you've defined in the `/`
You can change this to `BAZEL_TEST_DATA_PATH` (also change the test in `pkg/config/os/config.yml`).
I assume this is going to make sense to add the `:time` to the `get` model, or something like that, so that it won't be included in the base `create_marker_index` method.
this is only needed if we have `granteeList` in db
This would cause a failure if the subscriptions already exists in the subscriptions
This makes sure you get a warning for the devhub too
Would be great to have a separate PR for this.
Is this needed? If I'm not mistaken, does this mean that the `isFinal` method will be called in the future?
I'd suggest not hardcoding this variable and use `if (!enableCellEditOnFocus === true) {` to keep the pattern of `if (!gridCol.colDef.enableCellEditOnFocus) {`
This is not necessary, as you can already use RemoteTypeName in the tests
Maybe rename this to "rows"? "run_id, start_time, workflow_type_name" would be clearer
Why was this added before?
does this mean there's no linter checks for all of them? if so please remove all the other ds and delete this line
nit: why this is not null?
Out of curiosity, what does "Out" mean?
This is incorrect. It was returning the container.Exec before.
What's happening in here in the context of an else block block?
`cacert.get_subject()` doesn't seem to be used in this test.
what is the difference between `License` and `experimental`?
This is unrelated.
Is there any reason we need to support both sec and sec?
This looks unrelated to the platform checks? Is it related to this commit?
I would prefer `result = {..., result| ... }` over `(reportable_id)` to make it more clear that this is an integer
Same here, the function name is not very descriptive (e.g. if you're doing `getClass().getName()`).
@mattcaswell, are we going to have a hard time to implement this url for all versions? Looks like we might be using `approval_response_path` directly in the `let` and `app/views/urls.js`
Please use alphabetical order for imports.
This won't work. You do `json` in `SearchFields`. You can't just use `SearchFields`. We only need to change the behavior for `SearchFields` to be correct.
This looks like a logic change and I'm not sure why we're using it... I don't think we have any use-case for this, but I'd suggest making this change `return err := b.Read(buf[:]).orElse(n, err)` at the bottom.
Let's keep this to reflect our naming conventions. Also, `validateNoConflictingAppends` is too slow.
Does this work with other modules? I don't think `platform` need to be included.
should this be done with the other option defined in the `isReadableically` ?
Could this logic be done in `app/services/actions`?
We have several `reseted` items in this component. Should we be consistent about whether it is a component that is reset?
@tnozicka this should have been a separate PR and should have a separate PR.
Should the data message be renamed as `ACTIVITY` or `ACTIVITY_TIMEOUT`?
There's a whitespace at the end of this line. I didn't realize this was causing the CI failures. I'll revert this.
Do we still need to use the `processRefCGs(ingressRule.SourceGroups)` call? Does it have any side effects on the code? Is there a usecase to use `--verbose`?
Should this just be `spcObj.VersionDetails.Desired`? The same for `Pending` below.
Should these params be referenced in the `getWidth` method?
Do we need to call call `nextPageTokenName()` here or can we just call it inside the `foreach` of that method and then call it once again?
hmm maybe worth discussing this in a separate PR
I think the best way to do this is to add a `allow_move_to_entity` method and to `allow_delete_tax` to the `allow_subprocess` method.
There should be a `TODO` here, so that the user has to know what causes the data to be written in the user (or at least the dataframes will be different)
I don't know what this spec means. I don't know how the `attr_to?` method works, but I guess the reasoning behind it is for me is that we should be getting the actual name of the component?
can we use a custom `getAppCache()` here instead?
Please use `await` or `Collection<String, StringComparison)`
Please remove the annotation.
I don't like using `if len(sha1) > 7` as the second arg here, so I guess the more complex check in this method should always use a pointer (e.g. `if len(sha1) == 7`) and we should probably just remove the condition. Also, why `if len(sha1) >7`?
Nitpicking, but I like this sentence. :)
This is the new behavior for the test.
why not return a `Constructor` here and in the line below?
This constant isn't named to `orderPath`. The purpose of this enum is to create a new enum for this config.
Let's not export this in the PR.
nit: revert... remove
why? this one should be able to be updated as it's an object, not a class object.
@jcotela is this going to make the code in the mule-provider to avoid any kind of issues?
The name should either be an organization or a organization that has a bit more clarity, e.g. `models/components/list.exception_type`.
This import should be changed to use the new consistent with the other imports
minor: move the condition to next line
why not import static
Is there any reason to pass the `consumerID` around here?
So, override is not cached? I think we need to be careful here.
I'd prefer using `recently_published_first` here instead of `components.published.recently_published_first` since it is more informative than a whole class
nit: move the new lines after `test.v2.validatePath()`
Should this be `0.5s`? I think `0.5s` is too short for this one, but the style guide is clearly fine.
I think we should use leftField.accept() here instead of using the jsonField.
should this include added in the PR description?
Don't forget to update the `axis.` above too, since it's a public API.
We may want to move the method to Launch TemplateVersionVersion so that it can't append a new version if the current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current version but the old version still doesn't have the current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current current
Can we get rid of this altogether?
What do you think about using `unless` instead?
I thought we were going to need to remove these changes from here?
We can probably remove these. <msg> I don't think these changes are intended to be here.
I think this can be done as part of this PR. We need to import `amp-story-plugins.js` directly, and use them.
Why is this using the `run` decorator?
I don't know if this will be a problem for now. We should not introduce `type.str` on `type` for example. In a separate PR, we should fix this in a separate PR
I think there is a better way to do this.
Should we remove this as well?
I think this is the only usage of this method and I don't think it should be the same. We could simply call `new MetricStreamConfiguration()` with `MetricStreamConfiguration()` and use it for all other properties that have `new MetricStreamConfiguration()` in the `if`s.
We should use `six` here, I think.
>type [](start = 8, length = 7) nit: the declaration of Type type is `unknown`, `type` should be `type != Type::None`, and then call `type != nullptr` instead.
This is the change that avoids sending the original author's data to the real app. Is there a way to fix this without accessing the previous data?
This can be just `def`, right?
Please update the changelog
Actually, this is not needed.
Is this a public API or only used to implement the default?
How about log.Warning or full trace output?
This seems to be a change to the state for a test that uses this new parameter. Is this intentional?
I am not really familiar with this, but I can't remember why.
@jmhooper @QilongTang @rsimha I think that we can remove the `||`
inconsistent `return` statement, better to use `self.discriminator_key?`
Please add similar code to `variableHolder()->get(varname_);`
Can you remove the "type" and call `g te.jitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsitsits.com`, or some other "type".
I guess this is not right. `!` should not be needed either
why change from `Shutdown` to `includes`?
It looks like you can use the `fraction` constant, and not the `get` function.
You can just pass this directly into the `peer` variable, right?
`=true` => `=true`
I thought the config path was never used and I assume the default path is always `true`?
I don't like this name either, since you're using `createcreateState` to get the test (with `alt` or `isIntrinsic()` on it). That should help with the test and check if any of your tests are still using it.
Do we need `except` here anymore? It's already in the `userscripts`.
If we have `get_sub_type` which we don't need to check for other types (eg `get_sub_type = 0`.). Or does this need to be checked for each other?
I don't think you can remove the trailing semicolon here
Please remove the empty line here.
Should we use `getCurrentEntityURL()` here and then we don't need the `useSelect` function? The code below already includes the value of `useSelect` and it looks like you're doing that.
Is this change required for the new behavior?
Use the new Ruby 1.9 hash syntax.
Is this variable still necessary?
What if there are any items in the message that may be useful?
@deads2k i'm not sure this is worth it. If the user explicitly wants it, I would assume it is the current user.
I think it would be more readable if `&attr` or `||`, just like the style of the rest of the if statement
should be defined in static variables
minor, remove new line
Why is this `false`?
This is the main issue I did not see.
You can use `__init__` here, as in the other tests you're using.
@saghul, are you okay with this change?
Is this still needed?
Can this be private? Can we make this `internal` please?
`self._doc.setHtml('{}'.format(html.escape(self._opt.text)))`
Shouldn't this be named "NTGame.azkaban"? I mean, what is this used for?
Shouldn't this be `var err = _update(typeof callback);` to match the code above?
You need to use `f2o_ASYNC_NOTIFY_USING_EVENTFD`. See the `#if defined(__linux__) {` part of the function for the LINUX_VERSION...... } `
why not use a set rather than a field ?
Ha! I guess the `shutdown!` is the preferred form for it :D
this should be set in the `baseAccess` constructor.
if we have a constant that does it make sense to make it explicitly explicitly passed to this method, and add a default value for this constant. Or is there a reason for making patching a constant in the same method?
Could you make this `git`?
Line is too long. [90/80]
Revert this class
I'd like to see a unit test for this, but I guess it's not necessary. We don't do it now, so I'd like to leave it as is and see the error message for the "return" case.
Btw, you can do a `setWindowState(window_state_before_fullscreen, self.has_fullscreen)`. The above function should be renamed to `setFullScreen`
@nvazquez can you please take a look at this?
I believe this line is not required, and it is not related to your changes.
We don't want to show the default behavior?
is it okay to use a length? why not use a length?
Why was this removed?
We also need to be able to remove this and refer to `mConfirmDiscard` in `mConfirmuseDiscard`.
I'd say that this is the correct approach for this. In the case of a fatal error, the caller will not have the file defined. I think a fatal error should be thrown. We can have the same effect here as an error, but if we're going to do something else, then it should probably be a fatal error, but it would be more useful.
Don't delete the whole section, just use `nested_flatbuffer = 0`
I would move this to a new location, so that it is available in `lib/commons/store_builtin.go`.
I'm wondering whether we should just ignore this case since we're not going to be logging an exception.
This is only used in the base class which may also need to be resolved in some other place.
This line doesn't belong to this PR, but it doesn't look right.
Why do we want to do this here?
This is the only place where we need to do this, is `installedVersions.remove(versionKey)` still relevant? I don't think `versionKey` is needed since the `isVersions` method is not called anymore on the `if` block.
I don't think this is needed, since `bridge.send_command` already returns a boolean
Why do you need the nil check?
nitpick: We have a blank between & Serializable and & Serializable before the first pass.
This was the only one we found out.
This should remain `disable_iptables` and not `disable_se_linux`. It would simplify the code to work, but I wonder if we could change it to be explicit and use this function in both places instead `disable_iptables()`, which seems to work well with `google_compute_linux`.
go is not used.
Should we log or log level log?
This was a bit odd - `panic` was returning an error. In fact, it was only here before, right?
Remove the unused variables
I think this can be done just like: `readPreference.mode !== 'primary'`
Revert this change.
Could you remove this empty line?
You don't need this check because you're creating `--powershell` on `cur_path`.
Why the extra `aria-described` is necessary here?
Can't the `link` be removed?
add_html to add_html?
Isn't this the default? What is the behavior of the `Marshalers`?
@Murrant @kdcins any opinion on this? It looks like it's just a question. Why do we need to create a new keyboard, why do we need both?
The condition is not needed. This will prevent us from using the value `checked` value.
Might be useful to also specify the glue-code for the glue-code here.
you need to add a docblock here
Could we change this to `symsymsymsymsymsymsym["symsym["models"]` or something similar? For example, if we do, that would allow us to remove the "models". It would also be more appropriate for `allowedallowedMessage` and maybe more in this table that would be a problem in the future, but we don't want to be able to change all the other `symsymsymsym["["models"]`.
Do you want to put these in if-else to make them work?
I think we should just remove all the `qutebrowser` stuff from here.
Is this an unrelated change?
This doesn't have to be released, since we're using `lvis_v1_instance.py` to get a `_base` value.
I'm not sure about this one. It's really necessary to use the debug level `info` function in the builder. The warning will be printed at a level, but the builder should not be in the info class.
I'm not sure if this is a good idea. The RaiseSingleton raises an error when the ILLinker was created.
I think that this should be a `TaskExecutorTests.class`, since that is the class of a `ExecutorTests` property
For consistency, it should only be done by the check for the presence of the channel being allocated.
I think that it would be nicer if these were private, but they'd be nice in the future if this is a separate patch and it's probably worth a sanity check (and probably even though they're not really needed), and they could be a separate patch.
I believe we want some of these tests to be able to run some tests with Ecs on AWS.
This is an example of how we want it to work. Please make sure you run `make check` instead of `make check` on the next deploy.
Why was this removed?
Note for reviewers: we need to make a change that would have been to add `KeyNode` to this new `kubernetes` interface, and then pass that to `KeyNode()`.
What is this is removing? I don't see a reason to test both files in the repo (which I guess isn't working on Windows).
We should avoid making this type dependent on the `RangeFactory` and keep it as `break`.
This function is a bit of an unrelated but we generally try to use the function to return a function to prevent this from being called. I'd prefer to have it return an error in case of no reason.
Do we need to add this method to the `TParameter` interface instead?
I would just do `values()` here.
nit: I was wondering if we can just call `parentSeed` here and remove the `private` and just call `unprivate` directly in the `equals` method.
You need to use the class constructor too.
I'm not sure how this is supposed to return the value of the embedded array. Do you want to return the array directly (as the return type of `[]string`)?
I think this is still the case. The `File` should not be removed. It's a breaking change. I think we should not be using this as a public API.
why is the order changed?
Please add a license header.
Let's not forget to remove it once we remove `action` from the `action` package. @jolivier23
Style/ClassVars: Replace class var @@ @@ with a class instance var.
Aren't you going to do this in a future PR?
Is this still necessary?
You can remove the `if` here.
I think we can keep this package private, but we don't want to keep it in this PR
Is this change related to the changes in this file?
I would move this line down to `create` since it would always be a reference, and we'd only need to do it in the `setup_dependent` function.
Is this related to the bug? Does the datastore have any implications on the name of the `fake`? If not, I would recommend to be consistent about the rest of the function `fake` as the parameter.
why not just `f.Vectorized` (as opposed to just `f = f.`) and make the function return an error instead of just returning `f`?
Lint/UriEscapeUnescape: URI. aren't used in all the tests, so can be removed.
This is a bit weird - maybe not worth it.
can we also check that the value of `x86_64` is `0` here?
Would it not be simpler to do this in `CompleteComplete` itself?
I think you forgot to remove the if statement here.
I would call this something like URISafeName_image_import_URI
I think it is better to move it to a new line.
Why not using `rel="noopener noreferrer"`? It will allow the user to specify an empty string.
No reason for the removal of the `throw new Error();` ?
Do we want to check IsThreadAgnostic or is it just the case that the cachedResult != null is true?
`StringUtils.DEFAULT_Logger` is not available in this class.
Do we have this code somewhere in theory that we can do something similar for other types of timeoutes?
Success or cert cert? I think that you want the error message in the middle
is this really necessary for this reasons?
please use `com.google.common.localeCompare`
Why is this not done?
If we have the same `s.scope.ManagedMachinePool.Spec.RoleAdditionalPolicies` as in `login.go`, what if there is no such a case?
You removed the `$facetSortOptions` class and it didn't make any sense to keep it in the `get` method.
Please use a strict comparison so the `if`s aren't consistent with the rest.
shouldn't this be `public`? Or do you think the `if` of the `if` should be on a new line?
Should we make a similar change in `RequestServer`? I mean why we do need this?
How about the `-1` here?
I don't think we want to do it, because we don't have a single path defined in the code. We don't need that. Can we do it in a single file or something like that?
can you remove this const?
Can you use the standard `payments` package here?
you can also add `Bibliographic` to the group below.
we don't seem to be using this constant in dscra
Please add a space at the end of the string.
Can you change the name of this `hashivault` to `hashivault` in `gocloud.dev/secrets`?
I would prefer a separate `elseif` statement here, as in `else if (strcasecmp(value, "false") == 0` instead.
This line is still useful, right?
This is a test class, should be removed from commit
This is the bug fix. The only reason for the `CheckErr` was because it was previously written is that the `gitIgnore` is a valid input type for the `IsErr` function and now it does some sort of call.
Is this actually an issue, because the two checks are identical? I don't see any value in this method. Also, we need to check that the value is 2 bits (it's a constant), and the name is only for the max bits, and the value isn't, but in the same order, the bits can be 3 bits in the same order (the first one is 4 bits).
In theory, this function could use the default format for `C` and `cxSmiles`.
The super class should not be there, since it's not being used anywhere in the class.
Why is this necessary? Are we removing the `final` field from the struct? If not, can you please remove the `final` part?
What is the `entity['name']` parameter?
`return client *clientFake + error.ip` (the method name is `return clientFake`)
NIT: usings like this is an unwind variable, not a block.
@daniel-beck I'm assuming `Mec` is supposed to use these to be the most recent code path. I'm wondering if the `max-api` version is intentional.
Why was this removed?
I'm not sure what this is doing is, it does not seem like it will be a gas problem
Just to be sure: it's the interface to wait for all runs, right?
Why is this being removed?
We should rename this method to `synchronized` for consistency
If we're using a good practice then we could add a column to the meantime to create the email and create a migration for that case.
I think this should be `'Este :attribute já estáDENado.'`
you should check `testmod` in `testmod`
maybe return an error instead?
How about just let the doc handle this?
@matt-gardner, I think this is what I meant by "completed_trails/trail"? Or should this be `Bucket??` ?
Can this move to the bottom?
this looks like a debug statement
The reason is that you removed the test code because we have an issue in the code.
IMvx would it be better to have one of these for TLS TLS? It would be helpful to have one of them there.
why did this change?
I think you need to remove this entire block, right?
@lannka Shouldn't we also add a `artist` field to the `__init__` method?
Is this useful? I thought you had something like `first_tuning_args()`.
are you sure you need this?
This should just be `if browser != 'firefox':`.
I think we should just check that the string is known and not include it. It's not a requirement that the string is actually empty so this code is not expected to do anything (and should be a separate variable if it should be a separate variable).
Same here about the param name (e.g. `test_link_to_non_account_id`), and `test_link_to_user_to_account_id`
Why was this added?
FYI, you can use `UART_RX_PIN_DIR = 28` here, because it's a bit odd with the rest of the function.
Shouldn't it be `async`?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Please add a description about what this does.
You can remove this.
If we're going to send on the production, can we make sure we're in a release version that we're in lots of tests? e.g. `TestFormatURL(...)` can return `*testing.T)` so that `TestFormatURL(...)` can only be called in `config.Config` and we can then call `TestFormatFromConfig`. Then we should probably just have it in `TestVeyingService` and reuse that. `TestEaralActive`
Any benefit from making the test fail if it's not set to the zero-value file here? (I thought I hadn't been able to test it!)
I think we should also add this flag to all fields that should be used in the `handlehandle` method.
I wonder if there is a better way to do this? Like, do we expect the return type to be `nil`?
I was thinking of the sole reason, because I don't know how to use it (it's hardly clear it's an admin), and I was thinking about it...
Should this be `required=True`? If so please use the same `required=True` as the `required=True` kwarg for `logFilter`.
I don't think we should be changing this behavior here.
Why is this needed?
you don't need the `name` here
Can you add this to the `app/models/server/pants.go`?
Can this be `null`?
I think we should be consistent. We should be consistent and fix the link description, but that will be a lot of noise in the future
Shouldn't we just use the old `Groovy_JDK8252739` here?
Why make this public ?
Please, fix indentation
I think a simple version here is fine. I would use ><main> if (!year%4? ><main> checking}`
I think the docstring needs to be updated too? The docstring still says that `build_rule` is a prefix that's not really a `<build_rule>`.
would it make sense to make the same reference for the other components too?
Hmm should we do something with the `**kwargs`?
Please do not remove the parentheses here; it was not being used by this function.
Please use `GetMetadata("ReplacementSubstituteNew")` here and in other places below.
nit: remove this newline
Do we still need this check? `peer_params.network.default_node_port` is the default before `spec = true` below.
This was an error by accident.
This line should not be deleted
This should also be `Object.hasText(&))` in order to avoid calling a single roleText.
It seems that the second argument is unused now.
Why this? It is unrelated to the PR?
Looks like a typo, should be reverted
I don't think you need this line.
pleaseaseasease move the logic of `to` to be above it
This change is needed in the test code.
This file doesn't need to be included.
Trailing whitespace detected.
Why this change? I mean `comma || strncmp(resource_str, "id:", 3)` would work fine?
I think this will cause the build to fail, as it will be always non-null
There is a typo in ForkConfig, should be `ForksSchedule`.
@becker33 this was an unused import
Not sure what the best way is   I don't think this is used by the tests, so I'm not sure about it.
nit: for me, we usually prefer to not have a separate 'positional' parameter to add more info, for clarity. I'm not sure why this is required for the formatting. For now, we can avoid that as it's a breaking change in case we ever want to add an empty string for positional params.
I don't understand this... Why isn't `0x00` just a regular `0x00` in the case of 1100, and then just do it in the loop?
@fabianofranz @johnsimons do you remember what this is for ?
For the fence: `html_safe` will be set by the html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html html
does this mean we need the subject at all if the subject is not an admin?
Is this needed? `defaultSamplingProbability` is already defaulted to defaultSamplingProbability.
Why did this patch need to be generateDeploymentStrategicPatch?
why removing this check? it is already part of the logs
I think you can just do `DCHECK('modified');`
Why remove `default`? We have the same pattern in the code, so this is no longer needed.
I know it's old code but I would rather have a `using System.pendingEffects.forEach` check in the try-catch block.
Was unused and removed.
I am still thinking about `videoConstraints`, if this is the only thing we need to do here, we can get `type: videoConstraints` by default. But it's not clear to me if it's the right thing to do.
Layout/TrailingWhitespace: Trailing whitespace detected.
Any reason this is `config.Target.WasmAbi == "js"`? I think it should be fine.
`Append` could just call this `Append`.
I'm a bit confused why we have this extra span and not a span?
Shouldn't this be `t.topology.SearchTopologyRequest`?
@wachterjohannes Shouldn't this be the new admin admin for the new admin?
Why not just pass in ClaimFromRewardingFundTGas?
This was the only place where the `NOGIL gil` is used for testing. Is it safe to remove it?
I think we need to give a more explicit values here. We can do that as I'm not sure if it can be useful. In the future we can change the name of the `height`, but I think that would avoid the conflicts between the `height` and the `height` field.
I think this is the wrong place for this?
This was not used?
This is not related to the change, but the code in this method is a code smell. We could be sure that all o will not be an array, which is probably a problem.
same as above we should also throw an exception
Could you move this to the top?
does it make sense to change this to `abstract` now and make it consistent?
the reason for this is that `-028` isn't used in `app/store/v1-the-config.md` is because the flags are not known at run-time (or even at run-time). This means if the flags is not provided, the flags are already set, then it will be not supported, but the flags will not have been updated in the `app/store/store`
I see that in all these `ToDbKey` that use `KafkaTable` but they're not supposed to be used. Can the key be `protected` for `KafkaTable` instead?
I think we can remove `return x.tbk.Size() - 1` here as its no longer being needed
This isn't used. You have to define the name ` IsAppInsight-plugin.js` and set it to `true`. Also, is this intentional?
Is it not an error?
we could still have an ending `checkState` in the previous if block
Is it possible to have an assertion that this doesn't break?
I think this would be better as a CPU command like `[a-zA-Z0-9fc-0101`.
This seems odd, as in `setup_rvm` will be managed by `def configure` and `setup_rvm` will also be managed by `setup_rvm`. Why would we want to enable it then?
What do you think about putting this in `MemberRef` so that we can get the `Validate()` method so we don't have to do this validation everywhere else?
I'm not clear on why you don't need the `is_ts` here.
I don't think this is needed...
I think we also need to have a new call for `Score` in the peer function, so the new one could be more readable
This would also fix the missing `isBrowser`
why did you change the include to match the actual include?
Please remove this file
should this be true?
Should these arguments be replaced by the `plugins` package?
This seems to create an unrelated list. I think the best is to have a different list.
It looks like the path is still present in the SDK
Should we add a space here?
nit: please update the name.
AARCH32 is not defined in AARCH32. It will not be the case in AARCH64. You need to add your own #ifdef if you need it.
This seems unrelated to the platform checks?
This option is a boolean value, not a string value.
This doesn't look right to me. You're just doing an extra copy of the double expression. What about changing it to `TryParse`?
You should check if `WorldType.getWorldType()` is not set in the `if`.
Hum, this is probably necessary because we want `mlvl_confids.append(confidences)`
I'm wondering if we need to use a constant for the `102102102102102102102 jdbc` instead. Maybe `102102102102 jdbc`? Also, I'm curious why we would have to use "Excludevs0" as well as this name here. I'm a bit confused that `102102102102_` is a bit clearer, so it could be the name of an component that we're not aware of a name (that's why I don't see that in this PR).
hmm, I'm not sure that we want to change this line?
this is just to be a safe place, it would be an option to just have the return type as it was (with the error) and only use the right thing to do when the function returns. That way the condition here will be correct for the case where the error is not `resource`
why are we making this a regular regular expression?
I'm wondering if we should make this a bit more specific - the reason for the change is for `JSON_DATA` but `JSON_DATA` are not used in this PR.
I think that it should be lowercase or changed to match the other arguments, as there is no way to make this more complex. In this case, we don't seem to make any changes like this to the API. If the method `PMasterMaster.validate(scopeManager)`.
Should the field be modified somewhere? I'd rather not make the life more sense if we'd be able to just use the config here.
We should just remove this whole block.
Why not use the member variable in the constructor to avoid this kind of utils?
Why do we need to have two map states here? I find it weird that we can't have two finalized fields for this.
We could make a big migration if you need to add the `diskImporterDiskName` property to `disk-importer-inc.go` and avoid this change.
`index_scols` could be `null` here.
> parsing JSONValue [](start = 8, length = 3) nit: use JSONValue map[string]s instead of a dictionary type.
Same question as above - what is the reason for this change?
Seems `ChannelImplementation` is not defined here? Can we rename it to `ChannelImplementation`?
This will not work on any of the existing `ensureFiles` files with `setC:\Files}`
Can we change this to `(i == 0)` or similar? We don't actually allow idx fn, it should be that long.
This is the same as in `IMPORT_leader`... it should be `IMPORT_leader`...
This will need a copy of the list of exception handling if you have a reference to the list.
convert_to_timestamp should be a list, not a list
@bartonjs, any reason not to have this `if` statement in this body? Also, is it okay to simply store the `if` into an `if`? The logic here should be in the `if` condition.
should this be set in the controller?
Is it possible for this to happen in an `if` statement? Since it's only for the `metaTaskExec` object and not for all the `resource` implementations?
Why are we making this a pointer instead of a pointer?
(style) line over 80 characters
I'd like to see a constant somewhere for these headers.
This should be split across multiple lines.
I don't understand why it's necessary to return the nil if the attribute is set and only if the nil can be nil?
why did you remove this?
I don't really understand why this is necessary; the `<%= trail.unstarted?` should have a `<%= trail.topic.name %></span>` attribute, but we should make the `_` in the `name` list.
You should use `Stop` to get the response type.
I think you need to be careful here. This is a private function in Warn.go that just calls that function in there. It should be better that you didn't use it here for this PR. I think that we should remove `util.go` from the config file that uses `pkg/util.go`.
How about `defer` here (and in case)
I think I missed this in the review, but the old code was good to go.
as per above, can we put it into the `create_team` callback?
It's a little strange to me that the bit here currently has been updated, but it's not really necessary now. I can see why this should be changed in the first place.
Can this logic be moved to `REQUESTED_worker.cpp` instead?
Why is `lodash` not `lodash`? I don't get it.
Can't we make this `public`? It's a public API, so it can be made internal. It's not a public API but it seems like it's still being used anywhere?
We should have a `dependencies` dependency on `GoogleUtil/svg-icon`. It would have been preferable to have that here and then have it as part of the `GoogleOption` interface.
`assert dtype is none` (and other places in the file)
Can we make this `public`?
Please consider adding `12288` so that we minimize indirection.
Why did you remove this?
I would prefer to have some logger to make it consistent with the other media media commands.
This was the original intention. We're using a "root" solution for our API, and not the code that is used.
zip doesn't seem to be used in any of the other environments in this module. can we just rename it `zip`?
reason is not needed here
(style) trailing whitespace
I'm not sure how to test this, and instead of calling `TLS` for every new `TLS` command - the `TLS` property is actually used, the `TLS` property could be moved to the `TLSOutbound` command. I think this change can be removed.
Should we also print a error here that `res` is empty?
We could move this up to the top, to make me scared
This should not be necessary, because category is not defined in the category.
I think we can remove this public parameter.
Was this causing the build failure or was it a bug?
Is it the correct that it is the last item of the item and not from the current item? If not, I would just make it a little shorter.
Please don't use wildcard imports. Please use wildcards.
This looks like it will be a candidate for an `expect` to convert to a `status_finder` and use `status_flags` instead.
Since these two lines are the defaults you can just call the class `getA_ToString_and_release_resource_attributes`. The same goes for all the two.
Should this be `lookup.Protocol() == address.ID`?
Why not just say `elix EMRFS commands`
It'd be good to update the request handler so that we can get the body request from the request request.
Should we keep this as a separate commit to separate PR?
Could we rename `dialect` to `dialect`?
This is the only change in this file, is this a breaking change?
You can probably add a `__init__.py` class (line 31) to this one that takes a boolean flag.
@tgamblin I think you'll have to do more in line with `setup.py`
This is the cause of this change to pass. This should be set to `tmp` in case of `fixed_resnet` (which is a test that is not running).
can we add `[key]` and `keyValue`
this should be on the hot path as opposed to calling `Status::Error`
I don't think this should be outside this package, but is it necessary? It looks like `pkg/bpm` will be used as a package, and I think it could be moved to a package or similar, no?
We have to keep the old name as it is.
Revert this class
I think this is a bit confusing - since we're not using `level.lookupPath` in a LPM. The only difference is that the first `buffer` is 0, but the second `buffer` does not contain `buffer` (which should probably be `level.lookupPath(buffer[:0].lookupPath(buffer[:0]`). Is the intent here?
@martinandakov could you please explain why this change is needed?
how about logging a error here?
Remove redundant code
This check is done on `isKilled()` method (it's not a `flowFinished` but a string). Is it intentional? If so, we're not really doing anything with a string given but not the `isKilled()` method in the `mainSyncObj`, then we should change the condition to something like `isKilled()`.
Isn't it better to call this `WorkflowView` or `WorkflowView` ?
Why not `symbolic link`?
@drcrallen did you mean `@param string $dateRange`?
Please don't make changes to this file.
Is there a reason we are using a node here instead of a `push`? If yes, please use `getFunction`.
Why the change?
is it necessary that you set `isFocus` to False? It doesn't seem right to set it, but I'm curious how it is for some reason.
Why do we need a separate `_` here?
Should this be `aps[i]` rather than `len(aps[i].Subjects)`?
We should probably add a `repo.Create` here
@jridgewell I think it might be better to return an empty object here instead of returning a bool.
Why not call `JSONBool`?
Should you check if the `sampled` is an instance of `Optional[str]` here? Otherwise we're only looking for a single instance of `sampled` but the first instance in `sampled` has it as a string.
this is a test so we shouldn't need to move it to a helper, it is already a bit redundant, since it's a little confusing since it may be used in other places
this needs to default to 0 for the number.
`posNext` is not the same as `var limit = input.IndexOfAny(new[[0].0404040404.3.3)`, right?
We should check if the `checkAvailableStock` argument is true for the config
Can we add a `klog` package to k8s API?
Align the parameters of a method call if they span more than one line.
is this change supposed to be here?
Can we have some utility functions which represent `maxCapacity` and then fail if it's empty?
`config->http_proxy` should not be set to "" or should we remove this condition?
I would add a `if/else` to the `if/if` below, but that would prevent the warning from working on the width and `== null` checks.
I think we can drop the `=` part part here.
Should `splitSize = Long.get(TableProperties.SPLIT_SIZE))` be added here too?
I'd rather have the prefix `Running` for consistency with the rest of the method.
You're not passing `result` in here anymore.
This shouldn't be necessary because you're not using `_commands` as the input. You have this in the `__init__`, but you could remove `_commands` in the `_not` function.
I think this should be `encoding` since we are not encoding in `__del__` - we are not re-introducing the encoding in the method.
The parameter `positional` isn't actually a valid parameter, so it should be `positional=False`.
You should remove this.
can you make spark_session_local a class constant, for example?
Maybe it would be better to use the `Config` type here and in the other `Create` methods.
@spadgett @kdakshmanan please review the change. This changes the default behaviour of the existing functionality.
This is wrong. You should only be setting mediaAdapter to null after the mediaAdapter of it is enabled.
I am not seeing how this works, but the API parameters get set to None. Should I remove the keyword argument from the API?
nit: remove trailing white space
Why change these three lines?
is this used anywhere?
I don't think these includes should come here.
Shouldn't this be a constant?
Why did this get removed?
this looks weird. Can you explain?
Please, fix the spelling of the file header like this
This was only added to `isFirstAdmin` so this would not be necessary.
I don't think we should change this. This will prevent the user from getting a validType from being passed in.
It is strange to have these private methods for the test. It should be removed.
Can you put this on the `SpecSource` class as a `json` param? This way we could have `SpecSource` be an object of `SpecSource`.
this line is too long. [85/80]
What does that mean, why is this change in the first place?
@jridgewell Is this safe to do?
The problem is that we have to do this in a separate file (e.g. `config.all.*`), and the file's `config.template` needs to be sorted as a `config.template` directory. In the past the config file we want to have a general `config.template` module. We could have a different file to do the template at all.
Probably we should use command-line arguments here and in the other places.
Remove empty line?
Please also make these `StaticNodes` consistent with the other fields, like `RemovePeer` and `RemovePeer`
The way you're doing this was to pass the type to `__enter__()` instead of the argument? If you don't want this, let's pass in `__enter__`?
Could you make this a helper?
Is this change intended?
why did you change this?
Is this TODO still required?
In case anyone was not able to set this, it will be null even after the process is removed?
The formatting of this looks strange :)
This looks good to me.
I'm not sure I like having this logic here. If we have 3 other keys we need to keep the code consistent. Can just use one of them?
this is the wrong test :)
`TlsHandshakeHook` is a pointer to `StartClientHook`, I think we need to call `tls.TlsHandshakeHook` here.
We should use a different form of `_` in `System.Net.Requests` instead of hardcoding a Pojo.
Can we not add a new attribute for the `RouteCache` parameter because we don't have to have a `getUrlFromRouteCache` at all?
I think this is the only way to get the number of threads in this component, right? If it is, can you remove it?
Does this mean it can't trigger trigger trigger twice in `alias()`, if `err != nil`?
This is the only way I could do is remove where `IUsesStackTrace` is passed to any method, right?
Why is this removed?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Was this meant to be here?
`return unicode(tokens.string)` might be a better type than `str(tokens.string)`
should we add a validation to show the exact equivalent of what we usually do?
This is a public API change, can we fix it?
I think this can be removed.
nit: can we revert this file?
why is there a race condition?
This looks wrong, I removed it
style-wise, does this need a space before `#`?
You might want to rename ` HttpsConnectionFilterOptions` to ` HttpsConnectionFilterOptions` to avoid mixing up the code and the other call sites.
do you really need to use the new version?
This should be moved to the `__construct()` call in `lib/__construct()` (assuming this was a bug).
Shouldn't this be done inside the try.. catch as well?
Should we use the same name for the v1alpha1 version? It seems to be used in other parts of the code in this file.
Can we move it to `mne` package? It is already in there, right?
This is a bit odd... maybe it should just use `_in_source_source`?
@deads2k this is the bug fix for MOC-server, right? We should not be able to make this configurable.
I don't think we can do this, I believe this is necessary - the host_tags will be defined in host-mail when we try to access it. We should do it in a separate host, not in host. We need to de-deleted this behavior as part of the host.
would it make sense to move this loop up, into its own method?
I am not sure what you are trying to do here, but it seems like the `while (currentCulture == 'zh-tw' || currentCulture)` is not the correct thing to do here because if `currentCulture == 'zh-hk')`, then it should be `while(currentCulture == 'zh-unified' || currentCulture == 'zh-hk')`.
`QueryVisitor visitor` is not thread-safe
Line is too long. [81/80]
You'll need the `"""` after the push.
`InnerObjectWithSelector` is used in the file name now, can it be removed completely? The same is for this PR, but I'll let it be thought about this one.
`init()` is the name of a method that calls `InitContext` in `init()`. I think it might make sense just to `init.Base` or `init.Base`
can we add `command` to `default_window()` to make it clearer?
This is the fix. We should not do it for any other way. Can you also add a TODO to fix this issue?
It looks like this should be an `else` block below.
Can you explain why this is needed?
This should probably have a unit test
This is not needed
Do we still need `ChecksumAddress`?
HeaderRestart is a string too but not a string. Please fix that. Also, this is not actually an string.
It is not necessary to call `.__version__` here and in other files. It is not a big deal but it is a little confusing to use `__new__` as a parameter. What do you think about renaming the parameter ` Block` to `isHeaderBlock` to be consistent with `HeaderBlock`. This is the naming we have here for the `isHeaderHeader` parameter.
Does this need to be in `application.go`?
I think you need to add `:` after `classifiable`
Please don't change these to match the ones in the file. They're just unnecessary.
What is this doing?
I believe this is the fix. Why do you need to create a separate pull request for this PR? Can you just use `index.alias(index)` ?
if the user explicitly set the root device, it will skip the root device. Is that the root device or is it a problem?
I think we can remove this event altogether.
Hmm, this is the case. The length of `value_size` should be None. I believe this is because `optional_name` is `None` because `int` does not work if it is `None`
The `type:"Set` should be sufficient to specify a `Set<string>` type.
I don't quite understand that the `_get_windowText` method does the same thing, but I don't see why this method should be called every time we call the function?
I would also recommend making it available as `cast_ recognize`
(uint64_t)mmap_errors -> (uint64_t)mmap_err
Is this still needed?
`noext` is not an array, so you need `second` here.
this will not work for every single call
Why did this change? It doesn't look right.
"... to allow quality matches.
I think this is not the right way. What if we add config to the config, and pass the config here?
I'd expect this not to be part of the task so it can be used outside the task if the task is in a transaction.
Did you mean `mlflow` here?
Should this also be `false` in `beforeAutofill?`? I think it'll just be more readable.
Is there a reason for the `FileSystemIntermediateManager`?
I think `_is_locator` should be `_is_locator ` (which is what you want by default).
is it really needed?
If you change the function signature, you could just add the `return` statement to `doRequest` (or `return`), and remove the `.source` call in the next line.
Nit: This is a leftover from previous version, right? (or maybe move it to the same? I'm pretty sure that's a good thing to do here.)
@nmittler why do you need this file? I don't see it being used in this file
We should rename this to `dep_status` (we'll want it to be consistent with how other packages do).
I don't see this file in this PR.
Do we still need this test class?
can this be grouped with the other standard library imports?
Hmm should we do `nameof(true)`?
Doesn't this change the behaviour, if ` - see: ' to a new . $issue_data` is not defined?
Please move the `switch`, since it's part of the loop
Will this still happen for the next iteration of the code or will we be looking up an extra string for every single element?
Did you mean to leave `\r` here or was there a reason to change it? I'm not sure it is the best way to go
@pgavlin, what do you think of this change?
Why do you need this, the sleep is a `sleep`?
Why not just use `return KV to update updateMetaVersionMan::updateMetaV2(engine, if (ret.ok()) {`?
This change is just a thought, since we have a `NodeAttestororV0` package, and we should only have it there. We'll also need a similar change in `nodeAttestorororV0.dvc` in `nodeAttestorororor.dvc`.
Unless you are already setting `NAME: {...}` on a line, do you think you can remove the `...` here?
remove the empty line.
Why is this necessary?
This is not needed any more.
@jona-sassenhagen, can you please review the changes in this file from host.HostFactory.host in order to pass host in as parameter?
there is no need for this in `goBackInTime`
why `setLanguage` rather than just using `setLanguage`?
@mmaxim this was the correct change for v1. This was just the bug, @becker33
What about revision instead of this?
This is a bit of a mistake - it makes the tests fail. Should we add a `&&` or `&&`?
Please keep the copyright at the same level.
this looks like a duplicate, please use a constant
Could you please move this to the bottom, after all, after `instr_t *instr`?
I think these extra points should be in the `if` condition?
Just noticed the above fix. I'm not sure about the extra lines of code. I think the code should have the same in `ProductFragmentPagerAdapter`.
This was moved to another place where we moved to `StartTime_StartTime`.
This is needed because it's already dump_puppet_log.
can you change these to daal_V2_t, so that the final "reject" doesn't need to change?
I don't think that this can affect other users, as it's not going to get used by any callers to build it at this point.
I'm guessing you removed the `ValueTask<Keccak?> SendTransaction(Transaction tx, TxHandlingOptions txHandlingOptions)` because I don't think there's any reason why we didn't use AddTxResult?) here, which is the only place it was used? It's an implementation detail to be able to pass the `ValueTask.AddTxResult?)` to the `Keccak`
this will change the name of the entire promise. There is no default name in the DB. You should use the `create` function instead, but you have the other one you have done.
Was this change required? Or is it something the result of `ArrayType`?
does InstallCRD get set on the func func? Is it true or false by default?
Do we need this?
the `return nil if line == '-e:1, nil` does not return the correct line
I would have expected to keep the `emo` here, but the current example is to allow for `emo` to be the `emo` in the `config.rb` package.
This will remove the file after the write indexes. I think we need to remove this line. It will allow for the repo to be successful if the commit still removes the issue. Also, I'm not sure that this will work as intended because we have `Read` and `Read` that we are not already in the repo.
This is not a key, but a user who has access to it, I'm not 100% sure if this is a good idea.
Since we already check if `toolbox_` and `toolbox_` are always present, can we move the if and remove the `if (this.toolbox_.position();` into its own line if the method is called multiple times?
It's not immediately clear to me this is the actual change. ReSharper disable client-side :)
Can you add a TODO here to remove the `plugins` here, or create a new one instead of using that one?
Extra empty line detected at block body beginning.
can you please add `@sig` and `@example` to this file as well (and all the others)
I'm not sure we want to expose this as an interface, but I'm fine with it if we want to have it as 'flow for the flow for the this namespace.
I don't think this belongs here. The function functions must be defined in the `install` method, not in `install` functions.
`Active Execution` -> `is_complete`?
why do you need this?
why the rename?
I assume this is just to not break the API? Is this a "last mile" command?
This file can be removed if not needed, since we use the new-facingcing-beam-POSIX code
I'm not entirely sure if this is an issue.
Is this a copy/paste error?
why do you need to import first and count?
Why is the `visibilityProcessor.NotifyNewTask()` necessary?
I think you should be able to import `Client` directly, otherwise there will be no need for a class without importing this new constructor.
"fips region not allowed in the palette"
I'd rather we avoid the `__all__` import.
base_r ?> already has a python path, so this should probably be a separate entry (or at least you'd need to change the default value of `mne.util.util`).
Make sure to check if you are checking `currLimit` and ` ModuleLimit` here
I'm wondering why we need this extra arg? I don't think we need a `RSpec::Core::Pending` at all...
I think we want `podnetworkchaosos` to be more consistent with `podpodControl`?
I'm not sure why you need this. `codecs.register()` will call `register(lambda name: codecs.lookup('utf-8') if name == 'cp65001' else None)`
This message seems confusing, it's not a name, it's an invalid name. It's a bit confusing.
`paramName` is used in `DynamoView.V2.driver_name`. Let's just keep `name` and `name` the same as `w3c` for consistency.
Same here, this file should probably be renamed.
This could be a const too
Does it make sense to have this be a `with...`?
I'm not sure we want this to be the blockNum.
The backoff only works when `v3` is used. You can remove the change to `spire_backoff`
Why was this needed before? I think this include should be removed (in a separate PR), right?
The only thing I'm asking is this is the first sentence, so you could do it once in the same line, and in the line below.
Why not `lonely_UPDATE()` here? We have a test for the `OnBytesBytes` which does this.
This is not enough for this PR. This file doesn't need to be included. It can be moved to the `tab difference` package.
We probably need to keep these imports alphabetically sorted
The `==` check is unnecessary.
Isn't that already the standard for SQ (with a random integer) ? I mean is it supposed to be the same as `--help=--help` (i.e. `--help=--help=`)? This seems more reasonable and more complicated than me.
InitialPackageDir is only used in the installation of the package.
This is not necessary.
I'm confused as to why we should not set the FIPS version here (as it was before for some reason), but the following is more correct: `cci->num` is not the same as the FIPS version, and not the binary of 15. This seems like a good way to add this flag to the FIPS version if you don't need to. I'm not sure how to get it, though.
Maybe we need to add `@ermsOfUse`?
I think this will need to be removed. @gardner do we want to remove this annotation?
I don't like this name :) Why not `sendAll` ?
Is it possible to move these down to the `RELEASE` folder and have a test for the `archived` backend, to make sure that they're in sync with the new `RELEASE` backend? I don't know which is the case, but if it is, then there may be a way to make them run between the `DAGSTER_EARLIEST_RELEASE ` and the system_RELEASE `.
This was causing the perf test to fail on Python 2.3. I think we need to fix that. Also if we are not using the hash, it'll be more efficient to use `git blame_CollectCollectors`.
Should this just be `bool`?
The goal is to have the default in `evloop_latency_ms`.
This is the fix and I just noticed that the "txs[t]._getHash() is not defined" in "txs[t].
what does this do? it would also print a warning if `gengenOrgen` is true or false...
I would use the enum just in case.
I'm not sure why you need this extra line. It is not needed if we use it below, the `docker-d` tag will be `docker-m` and this test is not needed when `podman-d` is running.
Could this be merged?
I would make the check for list and use `list`.
@deads2k @tnozicka any reason you did not want to do this? I'm wondering if we need to do this for now.
Revert, it didn't cause problem
This was the issue that I missed.
I don't understand why this is changing - the `emby-select-withcolor` field is not needed...
You should remove the cast to be equal to the `InMemoryMemory`
Is it possible to move this code to the top?
This is also cosmetic but I would prefer if we made an explicit explicit check that `if (doc.hello)` is true so that we can check if `isMasterIndex` is false or not
nitpick, but I don't think this needs to be a `skip_links` variable
Same as above, do you mind adding a todo? This may also help us the next commit, but I think the changes below are not needed for this PR.
We already have `IsDockerEngineRunning` in the file name and `Running` in the file name.
I think this should be `get_string_by_dialect(dbengine.dialect.name, 700)`
What happens if the prefix is 0?
act_cfg is defined twice in this file, so it's not in the original format. Can you make it public?
maybe we should use `default_type` here, so this can work with the `default_type` value
I'd prefer to include this file in the `folly/runtime` folder rather than the file being created here.
Why do we need both the `name` and `dom`?
Why can't we just remove the row entirely?
Just an idea - if you are using a test that was defined as a `*string`, then it will be a `var fixture = 1;` and we should be able to use that here, but that should be done in another PR for this PR.
I think this method could be private, but maybe `cancel_by_language` or something so that the code doesn't grow too much
why the min min?
This is going to compile on all platforms (the default is `false`) but not `batchSize` which is `false`. I think a better fix is to have a separate `try` block for that case.
I think the `codes.Internal` was left behind from debugging. It was still in the wrong location, right?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is wrong. The main purpose of this PR is to keep track of the old behavior on the old-style checks and see if it's ok.
Why did you remove this line?
Can we also add this to `config.NetworkConfig`? We may have some discussion about this in the future if possible.
I think we can still return the default transaction pool, and remove this method. I believe we need to move the logic up here. Also, the `createPrivateMarkerTransaction(privateMarkerTransaction)` call below will do the same and I think we're still showing the transaction pool twice.
Not sure about this. DefaultErrorMessage should default to null.
I think this should be "error"
`cali` is only used in `QueryServiceImpl` so we don't need to remove it
`application/opensearchdescription/` ?
Do you need to add the condition there?
why did you change the lines above?
If the `base` property has been null, I think it should be removed. We don't have to add any extra checks at all. It is a bug when `base != null && base.file() != null` which is the default and `metadata.addPreviousMetadata(base.file().location(), base.file())` should be removed.
This will result in a lot of the data in the detach list if you are writing out all the data in the DB, which means we're not doing any more data in the data in the DB. We'll get into the data here so the data would be rendered correctly as we do in the other classes.
This is the only real change.
Can we change this to `'users'`?
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
I wonder if it wouldn't be better to have it in the view file itself rather than introducing another helper. WDYT?
Let's also change the doc string to `causalConsistency=true` to indicate the feature will be taken care of.
This change seems unrelated.
I would use `Access-Control-Allow-Origin` here instead.
This is not a `Namespace`, right?
isn't this array really needed?
maybe not implemented is better?
I don't think the `notificationId` is necessary, since you use it only in `pkg/api/platform/notification.go`. If we use it in other classes (e.g. a class from a subclass), it will be fine for now, but it should be fine.
Nit: please avoid star imports.
We could use `SetContractState` instead.
Shouldn't this also check `items.keys()` ?
this should be `// +build !`
I believe this line is not needed anymore.
@uranusjr Can you review this change, please? If we have a test that passes with `IEnumerable`, we should probably update our `Histogram` APIs.
Please also mark the whole test for the regular `\nx8` in the test files for the local saleor `Hx2` files.
`breakinging a set of bin edges` -> `""` -> `a-b-t`?
Please move this to `throw new KeeperException.NoNodeException("No collection found at path: " + path);`
Is this necessary? `:download_url` doesn't exist, right?
`support` is removed removed in the event. Can we call the `Bolt::Logger` here? The warning is still valid when the signal is logged in `before_action`.
the `.filter_options` method is `unfiltered` which should never return an empty object, so we don't need to have a default.
I wonder if it would be possible to just pass it in to `deleteFromFavorites`? Then we can do it in the `if ops != nil`.
Is there a reason we use this property? This will make use of the new property in `rowatile`
Is this not true anymore?
if the condition is nil, does it show up in the case where this happens? I wouldn't expect that it will be nil, but if it's a valid alternative then it would be fine to return empty string.
The `URL` and `approvals` do not have a `URL` attribute, so we shouldn't need to pass it directly.
Maybe add a `// Encoding of the handler, used for introspection, and used for `optional Encoding` as an option?
We have `metric` in `configure` for this PR.
We should still call `ILGauge` here because that is why we're not using this method anymore.
Why are we making this change? Isn't `docker.Split()` the same for `docker.Split()`?
Why not `if (p_jmsg["compress_method"] != nullptr)`?
This could be simplified to `return undefined;` since `debug` would be an `errorDialog.builder()`
Can we use a `pylint` helper for this?
This is the only change you're testing the wrong thing to do.
I'd use <msg> can_t do_types here and below
The solid colors are supported by default. The reason is that the default color will not be built anymore. The description will beautiful border color for the time being, which is not expected to be implemented. The same should be done for the new version below.
@smarterclayton do we want to use the `<rootDir>/` helper for this ?
I think this should happen first.
Please revert unrelated changes to this PR.
Can we add a utility function to this? I think the `isandonedandoned` could be used by the caller, so that it would just be `parentMetricMetricBuilder` and `parentMetricMetricBuilder` would be `null` and this will not make sense for the `Heittable`.
i think you should check only the `config` param here... just to make sure the property exists
What do you think about making it `!= NULL` here so it doesn't check the return value?
I'm surprised we haven't changed the logic here. If it's just for the second clause, we should also do the conditional on the end of the `email`.
We can use the `Time` var to do this for now. This is a slightly faster change.
@dvoytenko do you know if your editor did `/` and `/` while your changes?
It looks like `braille-patterns` is a leftover from the previous app. Will be fixed later if you don't want to be able to run this locally.
Why remove the year? We don't want it to be the same as the subnet?
I'd like to see this as a static method as well, but I think it's fine to keep.
Why does this count count count?
I am not sure if this is the right way of doing this - the sql sql can do it for the second time, but I think we can just use `.to_sql` everywhere.
Unused method argument - `_tuples` if you don't care about it.
Could we make this import more specific?
Not sure about this one.
We should not have an explicit constraint on this one. It wouldn't be better to have it there for all the other files and it should be implemented.
why is this needed?
I am not sure we need this, it is not enough that `scheduler` is used by the `__init__` of scheduler messages. What I would say is that the scheduler messages should be received in an `Customize` mode?
this line is not needed.
I don't understand this change, this is going to introduce a breaking change, but it looks like it's going to be a bug in this PR? Can't we just change theampler class for this PR?
The `HttpParameterType.BODY` is the proper way to fix the issue with the value type being created.
I thought we were going to do this?
can you add a note on what the status of the status is here?
I'd prefer to have a memory pressure parameter instead.
Also, should we use `logstore.fetch_or_create` here so that it is clearer what this "manually".
Could you explain why this is necessary?
This is a breaking change, because `concurrency` doesn't have `stop` and `chan` fields in the db. So I think we should be explicit about what `amp.start` does and what it does, then the `stop` can be removed, and if that is then I'd be missing something.
If we're in the docker package, how about using the same prefix for all the auth properties?
It would be nice if this was made private and renamed to reflect the new annotation.
Can't you pass the path on line 152?
Is there an option to not add the RepoFSRepo() call at the end of the repo?
Let's add some details about how to handle the case where we need to be in the `auth-go` package.
If `0` is not supported, then `if user.options.Reuse(0, 1), "1" {`
Not sure if this is going to change any existing flows.
You can also use `nameof` here.
why not use `this.table.io` ?
Do we need this?
remove the empty line?
I'd rather call this `_tracesEndpoint` instead so it's consistent with the other call chain of the trad state.
I think it is worth moving this to <msg> libgit2/env.go so that we could generate the API as part of the API package if we can.
`BaseApi QUORUM` -> `BaseApi QUORUM`? This allows us to use RpcApi directly instead of RpcApi `QUORUM`
Let's rename this to `isCoinbase` to be consistent with the other params
The `TestCase`, not `TestCase`. I'm not sure what the better command would be.
This is causing the MacOS build to fail. This is the core version of this PR. This was not causing this problem, but it's not worth testing.
It looks like this is not an error, if we're not already doing any it should do a conditional `if guidance.save`
this should probably have a `context` prefix, to match the convention we use elsewhere in the package.
I'm just thinking about this, but this could be a separate PR
We should probably be asserting on `/usr/uninstall` here, to make sure that the `.aio` works correctly for the test suite.
I am not sure this is right. The warn_if_key_taken() should always be called for a RSpec. I can change it to: warn_user = _^ +\|/, ''), warn_if_key_taken(source, key, new_block);
Should use a `const MessageTimeOut` constant?
We shouldn't store the body in the tests. The reason why it's not written here is that the user may have an `Update` method, and if they don't have a body it should just be an `actually`.
Please keep the old name as deprecated and add a new field to the new field `mGetNewBuildType`.
This function can be replaced with a shared `Filter`?
why is this a public constant ?
This is unrelated, can you revert?
I think we should also use `run_example_specs_with_formatter` when we don't have a single source.
why change this?
You'll want to add a way to add this to `am-columns` to `OS_VOL_SUPPORT` if it exists.
I think you can just remove the argument and always use NULL.
I believe the `doc` field is always undefined. If you are going to do the check here, please let me know if you need the first part of the condition. Thanks.
Is this change intended?
This should probably be marked as `CSCS_6` to be consistent with other people who are using it...
Maybe also mention the trailing slash.
This is incorrect. The first error is in this function, right?
Should this be `id.id[0] = b` to ensure we don't iterate through the result?
You need to add this too.
Are these changes intended? They are used in other locations
Why does it have to be disabled? `cci->num_simd_skip == 0 /* save all regs */`
This is the main thing. We should just make a build failure.
Shall we put "set" around this?
I'm not sure if this should be `subst[tv] = v.cs.f.Fresh()`
I would just call it `wxLang.Language` or something, since this is a special case.
Can we remove this?
This is not a required change, but I'm not sure I like the idea of the default setting for the default behavior. I'd like to make sure to check it.
I'm not too sure we need to use `branding.dig` here.
Should this be done in a different PR as the one in `nnictl create/resume` for consistency? Otherwise, the new `nnictl create/resume` will be created in the same directory, no?
The name of the terminal's type is confusing, it can be misleading to the secret. There should be also `DATAFile` or `DATAFile`. It might make things more clearer.
I think it makes more sense to use a `contact_us_url` for this url, as otherwise it looks like you can use the `\` url in the url.
It's not obvious to me why these are needed, is there a reason you removed them from the end?
grpcDescriptors should not be a public API, as grpc is not a private API.
Is there a reason you're not calling `delete()` when called for a single file?
Can this just return `removed` instead of just `return impl_->remove_all_changes(removed);`?
should we add a TODO here to remove that?
I'm not sure how much the Group" format work here. If it is an actual Group color, it might be useful to show the group that has a `name` and be a list of resources.
Why not expose this as a static field of the ctor?
We should probably have an issue for this in the future to remove anyone who might consider that
No need for this to be a list, the engine doesn't need to have it.
Are there any cases where 8 is not the same?
This function is being called in another test, so you don't need to add it here
Use the new Ruby 1.9 hash syntax.
I don't think we should return anything here.
wrong import order
can we rename this to `delete` and make it a `_id` or something so we don't introduce it everywhere? e.g., `instanceID` or `staging`
I wouldn't worry about using dict instead of dict
I'd just rename this to "position"
The same issue as above, can you please re-add this to `dataset`?
Why this change? It is not clear from the usage of this class.
Why are you using `insightfil`?
This would be a nice "hacked" thing that looks like the `optional_round_first_not_not_not_not_not_not_not_not_round`, which is what `is_round` and then `is_not_round_reference` would be in a different PR, but would not be needed.
I think this is wrong and should be done in the base class
Why are these Symbol added?
Did you mean the `\` here? If so, you can just `return /[\u2000-\u2E00-\u2E7F\\'!"#$%&&...`
Please add an example to the `TestAccAWS()` method that takes an override of `phil` as it does
I think I would move this line up one line, it's used in one line with the other `out_file` argument. I don't see the point of having the `out_dir` variable, but this isn't necessary.
This seems like something which should never happen. I'd suggest we use `return` instead, which is a bit misleading. `return (sig == 0) { warn }`
Why the change here?
Wow, this is a breaking change.
so, we don't need this any more?
Wondering whether we should use `ErrorListener` here, instead of `ErrorListener` to make it clear what it does?
Is `ResourceType` the default here?
why is the `ChainID` provided by the Blockchain method? should it be renamed to `Tip` as well?
I wonder if we should not remove `NativeClient` altogether. We should just add it to the `IArray<Integer>`
`violation.get('rule_name', '')` should work. This is a bug, just the current behavior of `violation.get('rule_name', '')` and the `violation.get('resource_name', '')` above are just passing `on_rule_name` as a string.
This should only be logged as an Exception if we have this in wl_resource_get_user_data, but not in wl_resource_get_user_data?
What if we called this `""` or `modelsmodels.key_name`, so we could make it immutable? Also, you'd need a test for `min_name = self.artist_msid` to be able to override the `key_name`
This is a bit confusing, I see that you're not using `s_val`. Could you fix that? It looks to me like `strlcpy` was the only place that uses it. It's not the case, but it seems like it might be better to leave as-is.
I'm not sure if there's a better way to do this without a package.
I wonder if we should change this to `ws = sf.NewWorkingSet();` ?
I think we should remove Rating config here.
Is this something we want to show? I'd rather not depend on this.
Why not just add the `bucket` argument back in?
it looks like this variable is not used anymore
(style) please, no space before tabs
> When bumping the line, `with_nms, 'PAA only supports "with_time augmentation'` and `with_nms=True` is not support. I think that is a bug. It should be.
It seems this is only used in one place now. Can we delete it entirely?
How about using `content-pages: string` instead of `content-pages`? The same for other language files.
I think it is too short, but I'd rather you change the name of it "retry" to "retry".
I'd like to see this live outside of the scope of the package. But if we're just setting it in a `api.*api` package then we could also change all the `ConfigManager` to use `*api` and then we could use it to `*api` package for `api.*api` and `EnableAdminAPI`.
I don't have enough concern here: it would have an impact on the type in #984, which may not work. I have two possible calls to `Removed_type.getPointer()` in the `build-system/jenkins/bin_test.cpp`. `Removed_type` is the latter part of the function so it is easier to keep the code around to the `if (isa, swift_can_type)` call `getReferenceStorageReferent()`
Thanks @rileykhenke, I don't understand why. It doesn't work anymore but the `configMaps` was created in the original version.
why did you remove this? I think it is not needed anymore.
Would you please add `@private` annotation for `isTrace`?
This function is not used anywhere. `clear_loss_weight` will already be called on the `save()` callback.
I think we should change the state of the conflict on this line, because otherwise the conflict suffix would be present.
is there any reason to keep the old one here? `apply_prep` is not guaranteed to be a `@context` anyway, so it can just be a `@context`
nit: missing comma
I'm surprised the linter didn't complain that. You should probably use a `test_close` method that will work for the test.
At some of the other filters could be put in a `try` block?
nit: this could have been a separate commit
why not a function called timeout? we have a more intuitive name
It feels more like the idea behind having an attribute in the `__len__` and its `_size` was that we're passing around?
why change to default?
This is the fix. `module.sph.offsets = (2, 1)`
We should probably update the docs, as these are internal configs.
we need to handle `merge`s in this file
should we do `cmd/local/ghc_version` here? We are already in `cabal`
Just remove the `?` here too
Does this really need to be excluded? The default should be to set `loss_weight`
This could be moved to a single `if serialNumber != 0`.
I believe we should also support the `nameof` and `nameof`.
Is it okay to remove this? Can it just be changed to use the `rerender` above?
you have to update line 70, see line 70
The original behavior was incorrect, because this code would return `false` when it was `nil`.
I'm not sure if the best way to fix `blockAPI` is to add more things to that.
This should be `AttributeCode` too.
should we have an example which checks for a non-bootstrap column that does not exist?
How about `time.Duration.Error(Create(allErrs, err...)`?
Shouldn't `s.err` always be `nil` here?
Need to update the `HIP_user_annotation` constant.
you could use a boolean here
I wonder how many of these fields in `RunControlPlane`, do you want to change the test to use the `ConfigureChannel`?
I'm curious why we have to lock the set of permissions here - if we do not change it, then how about changing the `tables.lock` to `IptablesLockTimeoutSecs`?
I guess this is not correct... if you want to have the file in the repo, it would be better if it was named "Key_Enter"
why did you remove the "texture" macro here? the line below says "texture". The "texture" one was more "with the value "with", "with", "with", "with", "with" or "with", "with", "with", "with", "with" and "with", "with", "with" "with", "with" and "with", "with", "with", "with", "with", "with" "with" on its first line" and "with" on this line"
Why use `decode` here, but not `namednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamednamed
Does this still handle `respond_to?` only?
This logic is a better fix, the `newnewqueryset()` function was never called. `newchars[$i]` is supposed to be used in another PR. This PR does not seem to have to be related to it.
please make sure to fix the code style
Is this related to this patch ?
This is a good change. We shouldn't be removing the parameter at all.
How do you know the provided account for non-null attributes?
This should be `!linux linux,android`
I'd rather `s.w.Sources[k] = 0.0` since `init` is used for everywhere and in this case, we can just use `workflow` here.
Use the variable declaration for the variable name.
Why is this change required?
The `list` here will cause the metricset, not the `list_db`.
these updates are unrelated to the PR but are also unrelated to the PR
This looks like a good candidate for a more specific name.
I'd like to see an explicit explicit test on the server side. It looks like this will prevent the user from being able to see the possibility that it is not active.
Should we set this above `ipsets-file` in `util.go` instead (e.g. `util.com`)
I believe this can be imported above.
maybe add a little bit more details to the storage location that is started
I think it should be `use` instead of `true`
If we are not doing this, I would remove the cast to int64 (e.g. to avoid any type hint that the type should be the value that can be negative).
The other `cache`s are used to initialize `null` when the cache is not created.
I don't understand why you added this; I can't see it anywhere else
The event could be in a more specific location.
Could we make the same changes in the model's `products_for_home()` and `GameFilePath`?
please keep passing `name` to `assert` so that we can use `name` directly.
This seems like something that should be called `updated_at.to_i`. I'm not sure what this means... I think this needs a test or something similar, maybe the following is fine since it's just one case and the updated code is going to be a bit confusing to me.
I don't believe that we are trying to parse the appExe from a public app. It's probably better to make `appExe` a global const.
Shouldn't we do something like `StandardCharsets.UTF-8` instead? Otherwise we can get rid of the `StandardCharsets.UTF-8` bit.
Since you can remove the import here, you can just do `from astroid.io.elix.Pruner import utils`
this will fail fast. The check in `_corruptedRequest` is for the same reason
Was this an accidentally breaking change?
This seems like it could be abstract. Do we have tests that were already there in the schema?
why not just "plan active plans"
Since you're only removing the `is_ipv4_or_v4_mapped_address` assignment and changing the `mapped_from_v4_mapped_address` to `is_ipv4_or_v4_mapped_address` would that mean that you're not doing any checks in the code?
Should be a single line string.
It would be good to also add ChromeDriverCommandExecutor to the other Chromes
Inconsistent with the `type0.getType().isEnum()` check I think
It is strange to have a dict with some dict (`param` vs. `dict`) here.
I think the new line is not required.
nit: remove empty lines
This doesn't look to be correct. We don't want the logging at all when it is logged.
This is not necessary, we are returning the result from `prepend` in any way.
Is this field still needed?
Not sure I like it, but should this be a set or a set?
I thought about `space64`...
This is not an actual bug in our coding standards: - we don't have to wrap the header into `if (eventually okay) { } else { }` - we need to add a `Span()` method in each `AmpAmp.HandleHandle` constructor - we should also do the `Amp.HandleHandle` in the `HttpSpan` method (or at least for `Extension` to do).
I'm pretty sure this was a bug, because the `FrameworkDescription.Create()` was never being triggered, so `ToString()` was removed.
I don't think this can ever be changed without a fix.
Shouldn't we check if the ID is in there instead?
Align the elements of a hash literal if they span more than one line.
If I am not mistaken, we should probably use the "line too long" name to make sure the field is unique for any kind of ID (which we're using for a variable name), and then we're not using it here.
I think we should do the same in `UpdateSpanWithErr` as in `beforeServiceMatch`. If the pipeline's name is not match, then `yarpcerrors.InternalErrorf` will return the right value here.
Maybe it should be the value of `Optional[https]` instead of `protocol`?
Is this needed?
What is this needed for? (I don't see this used anywhere)
Why are we deleting the Euid kwargs?
I think you should change this to `+ " " + ctx.Tr("dashboard")`
This is a very weird word, but I think we can use `Simple::simpleQuery` or `Simple::simpleQuery` to make this more obvious.
Does this error ever get called? If so, what's the motivation for not using results for the first request?
How about `_maxRequestHeaderCount`? It would read slightly more consistent and more clearly handle the case
nit: `[options.compareStartDate]` -> `[options.compareStartDate]`
The `Clear` here also fixes a bug where the Map is null. It seems that the service can never get called.
I think I'd rather we use the new `error` rather than the `toString` methods everywhere
Please remove debug code
We need to keep the analytics_true and pass the analytics_true to the `respond_expect` method.
Again why is `isinstance(key, (str, tuple, list, tuple, *)` required here?
Why was the previous name change?
I think you're missing a migration.
Not sure why this is needed - we always want to see when the server is not running.
Can you make it a constant? :-)
It's not clear why this is necessary, but the `/v0` route was introduced in the Rails code, but `/v1` was not being used elsewhere in the code, so I wanted to ask for the new way to go.
remove the TODO?
I am not sure if we should have a separate `AccessibilityIdentifier` class for that.
Is this what we want to do?
I'm not sure if this is a good idea. And it might not matter, but maybe it's better to use int instead.
should return error here
This is the same as the one in `title`, but it's used in the same code.
RegistryURL for all the en-US mode ?
I think this should be a separate commit (not a big deal if you can move it back in).
I think this should also be `IE11` - it's not strictly strictly part of this PR.
This is still used to read and never read. CheckSum will be closed and removed. CheckSum will be removed and that is causing a failure.
I think the file name should be `repo.Index()` (with the index)
Is this related to this change?
I think it's better to add an additional line after the `hasPk` check, it'll avoid the problem when a caller has the initial value.
This should be under `PipelineHelper`
I'm wondering if it wouldn't make sense to have the option on all of the options in one line, and only on the other lines if needed.
Why did this need to be changed ?
Why are we creating new partial instances? I mean, do we need to do any view checks?
Does the change in the end of the line break on this line still cover your PR?
Should this one be replaced with the one in line 121?
if its not needed, please remove it
This was a separate bug that we should fix
@rhymes I added the path here to prevent a mistake and I can't find any other options that need to be fixed, it is probably OK to put this in a helper, and add `.map` to `sys.path`.
can use `of` and `keyFilePath` here and in the other methods
We could probably move this closer to its usage in `build.go` to make use of this field.
I am not sure this is the right place for this. This check is being used for other tests and I can't seem to be wrong about this.
You can add a `var byte[]` to the `SecureRandom.GetBytes(bytes)` call below `GetBytes(bytes)`
I think this needs to be removed from the PR, as it's not used anywhere else
why remove this line?
I'm not sure about this, it seems that the imagestreams don't have a default value for this parameter?
Does this need to be fully qualified? I think it could just be a bool, not a bool.
Why is this in the sidebar, and not in the sidebar?
What is this check for?
We have to import the whole module instead of all the imports.
I don't think this will work - the backend backend will not depend on the backend.
Could this be `[]`? I'd prefer a not only `List.null` in this case, but this is a much easier fix. If I could easily see a `default` list, I'd be tempted to replace this with a `@Nullable`, so the nullability of the code will be very confusing.
Since it is an `AtomicInteger`, I think this needs to be moved up to the `AtomicInteger` project?
I think this is a leftover and we don't want it.
This is a big change, because the default is `none`
I think this needs to be `opts.spinner.Stop("Error!")`?
Please add a `//: ByteTracker` option to this file, and add a link to it?
I would prefer a different logging statement
Please add the descriptions for these new lines.
I think this is the only place where we need this parameter. The fact that you don't have to do this is a good place to add a new type like that is done in `set_name`, so you don't even need to call `set_name(type())` anymore.
Why the license header?
Is this include needed for some reason? The `self.c` file was added to allow `spawn.h` to include some special characters and the `.h` in the end.
I think this will break if the custom node has been started in the first place.
Is it possible to have `libkbfs.PublicPathType` in `libkbfs.PublicPathType`?
What do u think about using `ters_for_approver` instead? I know this will be different than the rest of our code, but I would like to be consistent about this.
this is wrong
This may cause some confusion. I think you need an infinite loop.
nit: this is a bit confusing, how about `std::vector<std::string>`?
`Boolean.boolean(String domainName, Boolean members, String tagValue)`?
We should probably also warn for all such messages. Maybe we should call it `allow_deprecation(message)`?
Let's use `oided_blitz_path` here instead (and in all places below).
In general `State`, `eq` and `counter` are not used, so I would rename this `if` to `tasks` as well. It would be easier to read and change this to "if service is not found".
This could cause a problem if we don't have the `driver` request.
nit: you can remove this empty line here and below.
can this not be final?
is `as_index` actually true? if so, why should we check that `as_index` is `false` here?
Please rename `$deleteModuleData` to `$TimeoutModuleData`
Is this version check for a version in the other place as well?
I think we should just get the constant somewhere.
Can you explain? It's not just for this PR, it's a bug.
@jcotela this might also look a good idea, can you try to re-enable it in your new PR? It could also be improved by removing this and adding another one.
is there a reason to keep this as a string without a checkbox?
why do we need this change?
MakeServiceAccount string should be plural.
Shouldn't it be _run.ToolNotifications?
This feels a little off to me. `.clear()` and `.clear()` both seem to work, but I'm not sure if there's a good way to do this...
This is a bit of a nitpick, but I guess we could just inline this test?
Why was the key name changed?
I'd like to see some test code changes in this file.
This should also be a separate fix.
This should use `onFocus` rather than `==` which should be `false`
@dvoytenko: This line does not look right to me. Is there a reason to remove it?
This should be moved outside the if-statement.
shouldn't this be done for a part of the config class?
Did you mean to leave this here?
Another `#include` candidate. `fmt/format.h` is too short for the future.
Please don't change this line.
I'm not a big fan of this name and the error string `errerr` sounds like something that can mean "GetOrCreateRootNode" and thus the returned value is not really helpful.
I would prefer to see the same as before, but we can make sure we get one more context here.
Do we need these 2 calls? Is the TODO to remove it now.
shouldnt the source be invalid?
this one seems strange. I'd rather you pass the `good case` and set the output in the output on the `/`, rather than the "name" case.
Why do we need to cast here?
Wasn't there some weird edge cases where these were added and the rest of the test file were explicitly passing?
Nit: This line should not be here
Why is the custom `object` attribute removed?
@deads2k i'm not sure this is needed any more.
Please add `java.nio.Scheme.File` and `java.nio.BoolBool` here.
I think this error message was not correct. It is only for the expected time we want to log an error.
Shouldn't this be `_this.getValue(path)`
This should just be `tabIndex && !isNaN(tabIndex)`. Also, can you make `tabIndex` a `const` check in the `isFocusable` declaration and have it be `const` in the `isFocusable` call?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why is this necessary?
Debug field should be lower case?
`update table table and commit the change.`
This is wrong. The default is 0 (which is 0) to check the key. Is that the intent? Or you could just call `getIpcEnv()->waitOnAll(0)` and remove this line?
Maybe we should create a runtime types on every iteration so people can easily get the source types from each iteration.
I don't see any point in using the `Low` field. Is the point here to avoid the `ToInt64`?
I think we can just remove this line. It's not always initialized on a transform, but the transform is not shown at all.
This is a regression IMO. The `reproduce()` function just gives me an error. Maybe the `toString()` method should return a boolean instead?
you are missing a comma at the end of this line
Why do we need a new `callerType`?
maybe we should also check `@user.id` instead of checking for the class?
This could be `//` right?
Please don't remove empty lines
I'm wondering how many threads will handle `toggleMenu`, and it looks like they're being used for the same reason to handle it, but I wonder if we should just remove it from this PR. Or is it not just used for the same PR?
Maybe we should also include the `SigKey1`?
Why do we need the `django.test.Path`? It looks like it could be used in the tests.
`page_ranges` and `page_ranges` are both used above.
ExtractSomeIfAny() is called twice in a few places so it's more readable.
I don't quite get why this is here? It seems like an error in the `configure` function, and it looks like it has the same result.
Is this a typo? `COLLECT.cs`
Should we check if error is nil?
Why not use C++646464 directly?
I don't understand why PrepareRequest is needed.
This is fine if preg_match('/^VuFind (\d+\.?),$/', $newConfig['Site']['generator'])
I would not call `getConfigName()` here, since it's a static method that can be reused in a map.
I think `CloseableIterable` is not necessary here because of `snapshot.empty()`
Is ` ArrayInitializationVerbosenessRuleTest` a typo?
There is a `disable` argument for the `force` parameter. Can it be done in the controller instead of from an `force`?
The reason the tests are failing is because of the "not working" test :D
How about adding a non-defaultdefault `!` to the event?
This is the only change needed in this file.
We don't need this here. We can just assume `user` is not nil and we will get default values in the `next` and sometimes `next` values. We can then set the `user` value to the old `destroy` value to false.
This import has to be moved up to the top of the go go library, so this change shouldn't be in a package. You can add a backlog line here and a couple of more packages below.
@erwinmombay @jridgewell can you take your opinions on this change? This change also seems to be a bug.
Why did we remove the condition ?
I think you'll have to remove this line
@stephentoub should we just change the exception message to be an empty String?
So what about other parts of `numAccounts` and `numAccounts`? Should we use a different variable name for this?
this is not needed anymore
Why do we want to use an unknown list to specify what the user has and then pass it to the context? If this is the case, the default should be 0?
Why the C is not just C++?
I am not very familiar with this code, but the original name was confusing... Can you explain this change? `cborStore` sounds better but meh
Could this be an unrelated bug fix?
I don't think the `ResponseTypeProcessor` is necessary here, I think it should be in the same `finally` block, because `ResponseTypeProcessor` is in order to not use a primitive `@Nullable`.
`self.config_.monotone_constraints[i] == 0`, `self._bin_mappers[i] != 0` instead of `feat_is_unconstrained`
`from pants.apply_process_index import` would be better
this should be removed
Don't we want to add this to the list of supported most of the time? Also what is `eventname` being added for?
`availableWebEngine` is only needed when `args` is not available. We can make `availableWebEngine` a class attribute on `from PyQt5.QtWebEngineWidgets import QApplication` and remove the `availableWebEngine` class entirely.
This needs to be a test or a test case.
Whatever this is the UX of the screen?
you probably want to move this into the `header.application` file so it will be much safer if the manifest needs the first and the last one
Just for my own understanding - why is the doc url not a valid value?
For clarity it might be better to rename `ConsoleColor` to `ConsoleConsoleColor` and add it here.
Why do you need this? There is only one flag.
All or ~0 should be just a list of bytes.
"Open to" should be in BSD-style, so it would be nice to use it here too
This is a bit of the sadness, and this code is not needed anymore because you could actually call the `admin` method instead of the `users` object. I don't think this makes sense, as I can see `admin` was being used anywhere in the code :slightly_smiling_face:
This option should be in place. Also, not in place. Also this is a new option.
Is this intentional? I guess it is because the previous implementation only validates a hash, and the new one has a hash that can be made non null.
Can we move this to the `pkg/apis` package since that's where we use it?
It is better to use the `pandera<0.8.0` helper to reduce coupling.
I would avoid the second array and just use a single array.
why is the `ThreadPool.submit` used anywhere else?
Can we add a message here? Or is it actually not necessary to store it in the if?
I wonder if we should make it `Object.prototype`?
This probably should be moved to some common folder and named `Template-path`, no?
We don't need to include the default number of logs anymore in the `host1.example.com` files.
I would move the initialization into the `TracerContext` function
same here, the trainer should only be entered if the user specifies a new variable (trainer)
Shouldn't this be `&&{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{}`?
I'm not sure how I feel about the packaging of the "DeleteFiles" call - shouldn't we be including that here and below?
I've removed the extra space, but removed the comma here too
Please don't use this variable.
This one also doesn't seem to be related to the `Anavenimap`. Why not simply `AnThere`?
why is 10 * time.Second? it is not enough?
Is there any particular reason why we're not using the array here?
This was just a minor thing: I had a feeling that this didn't break anything - it's not obvious from the name of the spec. Perhaps the description can be updated, since the test just has an `<p>` or `text-box-wrapper` option.
Remove unnecessary changes
The file name should be `lib/libversion-2.1`
`status` was added as an alias here so `status` was removed.
I'm not sure why this is here.
It's a little hard to see property name. I don't think this is a property name
this is wrong, as we use the really specific `calculating` resource, right?
I think there should be a typo I guess
I don't think we can move any of these lines to `export * from './%s';` since we can't really do this for us because it doesn't seem to work for any of them.
what about `require "#{Rails.fsfs.rb"`? Also, why do you need to define a config in the context of `require`?
We can't do this in an upper bound like this right? `getCache()` is already loaded by the grpcStreamingType() method.
Please use braces to determine which class the code path is actually used, it should be in the docstring
Is `curation center` a typo?
Can you remove this empty line?
Can we remove the kvm and kvm's ones?
What about unifying ` catalogName` into a constant?
The `isL uaHelper` function has some side effects, I think it would be better to just add a check to extract_next_token to make sure it's not a private method.
this is not right -- we're just checking in the `c.Wireguard.EncryptHostTraffic` struct
I think we could just remove the 'metadata' prefix. The 'metadata' name is more common.
I think it is better to have a single key `grunt.file` for this.
I think we need to get rid of these `driver_TO_WINDOW` styles, since they're not exported.
Line is too long. [83/80]
This should have been a separate commit, as it's likely that some changes should have been made to the core and the CI failures.
It looks odd to me that this should be `skip` instead of an `if !exist` here. The `Rails.Rails.Rails.Rails.Rails.Rails.Rails.Rails.Rails.Rails.Rails.Rails.Rails.Rails.
It's really awkward to check for `cart.ncr?` here, but it's not always true since it's the same as `cart.ncr?`. I don't have any idea what to do to do here.
This should probably be `&.`
Why do we need this change? Is this function's pointless?
`leaf` should be a `MustError` so we don't get a `leaf` error and we should just have a `Exception` in `leaf` and have it be a `Exception` with a `leaf`.
Can you use some kind of context here, and for other cases like "spoken for the object inconsistencies for the environment inconsistencies for the final one"
I'd suggest `SplitNWithTime(tagStr, ", ", ",)` as the name of the method, and call `SplitN` everywhere.
Are we still using `ports` in the container?
I don't think it is still a good idea to have nil pointer pointer. And I think we should check it for nil pointer pointer before not checking it. Also, why not set it to false?
Can this just be removed? (or maybe it does, if not, just remove it)
can this break stuff? this should never happen, right?
If `packages` is empty, then it will make the plugin slower, since it is a new `prelude` namespace. I'd rather we keep this in sync with the new `prelude` namespace.
I wonder, if a `!put()` should also be added in `std::vector` below as well?
Nit: could you add a type annotation here?
This should not have 250, 250 is 1Might.
Is this really a string? I think a better approach would be to just return a string that would be useful.
why would this error not be nil?
Line is too long. [81/80]
Should this be a `public final struct`?
addadd_str() to the else branch to avoid double quotes and avoid using string interpolation
I believe this should be `protoFile` instead of `protoFile`. The purpose is to set `getCommonResourceName()` to only set the config file.
Maybe we can rename this to `SERIES_DEFAULT_NAME ` and rename `SERIES_DEFAULT_NAME` so that users can know what users need to call it?
Can we make this enum `public` and extract the enum value from `application.r.count`?
@tgamblin I am not sure if this is a good assumption...
@liggitt do you think it's better to change the `iter` variable to `_` or `@resource`? It doesn't look like there's some whitespace on the line of the test that changed.
This change will be useful for other Solidated users. I don't see a reason to add an empty map here.
why is this a public parameter?
I think I agree with the original PR, but I think it would be better to do the same change for both frontend and frontend.
Why not just use `name`?
Shouldn't this be in `tableMeta` now?
Why is this check necessary?
We should use the `QLineEdit` annotation for this, it'll make it easier to see what it does
Don't remove those debug code.
What's the point of `ipify`?
Why is this necessary? Are we using `time.Duration` in other parts of the struct?
Since we're not using the called called on app, why not just called this as a `def communities` or similar?
This isn't used anywhere -- can we remove it altogether please?
Why not just use the existing helper method here? So if we're not in the scope of this PR, we may want to rename the method to the `record` interface.
It might be a good idea to have this be configurable too. We could also move it to the existing `BuildOutput` package.
I believe we still want to keep this.
This should only be done when `this.s.options != null`, no?
why the logger here instead of just `storer`?
`if queue` is always defined
It is not possible to just check every transaction, but only if we have 1 condition? I think it's better to check only one transaction. We could check if the conditional is more efficient.
@nmittler - Is this the only place where we need this change?
Are you sure it works without the change? This should just be `ci/...`, `ci/...`, so it shouldn't be `ci/...`.
This was added in the first place for a reason I was thinking about. The `Ready` function is called in the `p1ps.Ready` but I didn't want to go with it, so I'm not sure. I'm not aware of how I feel about this. I'll take a look at `p3ps` in it.
this doesn't seem right now. Is this a test?
Does it make sense to keep the "something" string as a constant ?
Why don't you use a lambda here?
I would just rename it to `AWS` since it's a number.
missing new line
This is not necessary. `isEmpty(...) && ! isUndefined( decimal )` will replace `undefined` without `isEmpty(...)`. Also I think the original idea was to replace all `isEmpty(...)` checks with `x > 1` (which is the original value) instead of `x > 2`
composite -> `composite`
Why change the imported arg?
I'd prefer a different name, e.g. `makeRequest` for `setRequest` and `makeRequest` for consistency.
I think you should move this to a constant
Why was this not needed?
Nice one! I think this should be in a separate PR
I'm surprised this works, but wouldn't there be any check when the error isn't raised, when we don't have this line?
rename this method if it is not in the method itself.
This message is a bit confusing, since it is also invalid.
This needs a unit test.
NIT: use `SYSLOG_INTERNAL_DEP_gp_VALUE` instead
We should probably add these checks in `options.go` so that they do not need them all.
Is this the right function name?
Shouldn't this be a getQueueProcessorUtils.getDomain().getDomain()`? Also, should the default be set to `Object.toHeaders(OPERATION:user)).isQueueProcessorActive()` ?
I wonder how this was supposed to work. I have a feeling that we could not have this in a release, so a one-liner.
The `__` tag should probably be renamed.
Why is this in the controller rather than using `poll.IgnoreNotFound`?
This is the only change that fixes the issue. The issue was that `serverserver.cancel` doesn't include the default testing of the `--local-dir` option, and that works, but I don't know why.
I am confused. The code in Math.min and Math.min will never be null. It should be Math.min
This check is not correct. A PE field will be 0 if the field is never set.
Why not `getAzkabanURL();`? The `ExecutorExecutorHealthCheck` method has a `'.format()` method.
I think `mask` should be `oauth2.11`, since we already do the `segms[i]`.
Remove empty line.
why log this?
Not related to this PR, but why are we converting this to a struct in the `Json.go` ?
I would use a `with` statement and put the condition inside it
Why is this change needed?
This class will throw an `playersException`
I think this should be async function and not async. And then this could be moved to async function so that we don't need to repeat async function in async function.
Why not put this in the `if (ec)` clause? It's used in a single place and it's not a function.
The current code works well for this flag, so it is no longer possible to just have them in the first place so maybe we can just drop it completely?
I don't think this needs to be done. The `rebuildExprTree` should be called from the `grpExpr` to `grpExpr` as it is only ever used to determine the root of the iframe. So, I think it would be better to keep this as it was.
This is a NPE. We should use `org.google.common.Name.getName` to reduce the overhead when `@Name` is used.
you don't want to check that if it does exist, you will get an error.
Remove unnecessary brackets
I think we should be setting name to `""` for this error.
Is there a reason to call `TrimForEmpty` on `kegg`?
I'm wondering, do we need to add `PropertyBackup ID` to each of the fields?
What about `compute_bound.SCSC_DC_SCOUT_RAIDS`?
Why not just return the integer?
I think if you could just set self.method != NULL here, it's not necessary to call it twice in the same method.
Should not be needed for this use case.
Can you add this to `sampleHeight` as well?
`closeUTCTime` and `closeUTCTime` are the only places where we use `close` to indicate time time. This is an anti-pattern. You can use both the time time to create `startOperationTime` at the time time.
What do you think about adding a tag to the struct so that they are always specified?
I don't believe this will break any existing requirements. I would keep it, but keep it in mind if there is some way to make it work.
What's the use case here, where `cache` can be null?
I think we need to add this to the DApp project.
@cramforce I think it would be cleaner if you just remove the check here. Otherwise if you move this line up, we have a `default-check-eress` in the `else` block.
We should do this check only once (and at least remove it in the same line) - and make sure this method is all called multiple times (i.e. the check for the same iterator as well).
I think this may break stuff in some other PR
These new parameters aren't used anywhere -- can you remove them? (also in the previous PR.)
I'm not sure about the name of the method. I would say something like `max_retrial_to_get_pods`
this should contain 255 characters or less. Please provide example. Probably want to be clear that this is a string and not a symbol for all characters
why did you change the order of the time here?
Can we put a `function` statement above the right of the ` file_options` declaration on the line after `case_options = file_options?` to match the style of the rest of the file?
This still fixes a problem. You could try getting a `::connect` to generate a new amp-story page that does something different.
why change this to IP?
I'm not sure about having partial partial here. Is it just me or wouldn't be helpful?
I don't think this is distributed or right.
Isn't the `else if(value.EndsWith(quote))` check redundant?
I don't see a need to close this, since `client.close()` is no longer supported?
I'm not sure what to do here, but this is a little tricky. We have to be careful about `func(string) Policy` as it's a function of the return type.
I don't know if this will be the most reasonable place, but it seems like we want to do it at some point, but we should consider moving it to a constant somewhere and have it happen somewhere else?
Please remove spaces.
Why use `boost::format` here? The new function doesn't match.
Wouldn't `containerContainsText` be better for all of them? This is an unrelated question of whether we can use the same variable name (or even `containerContainsText` or something similar).
This might not be in the docker app, but I'd be tempted to keep the `sh.PATH` arg and use the `PATH`, not the `PATH` value.
I think the `#else` of this file is not actually necessary.
There is no reason to wait for a wait here. It is not really required.
Standards: Please add a space after commas.
Shouldn't we call the method arguments `IdentifyTrackBreaks`?
import_mpi4py() here is not enough?
Isn't this now the same as the one above? Seems like this could be an unrelated commit?
You need this for both of these new APIs so that it only gets loaded by the `interfaces` view when the builder is not created.
Should the fix also be in `setCallName` ?
why are you not just `false`?
I see `reinterpret_cast` used in this function. Should we be consistent and use that here?
Is it worth caching this value in a more general location?
why change this?
Can we call this LibraryDetailsPanels ?
This is probably the problem. The order of the order of the order is `persistdir`, not `static`.
I'm confused by this function. It seems to only be used by `src/or_dest ` in a few places. It seems that it was never used? So you can just remove it entirely entirely?
Can we use `i.Workflow.DefaultTimeout` here? We should use `i.Workflow.DefaultTimeout` and not have a test-case for this, but we should have it there too. We can use the same pattern for `incldued_wf` in the `src/main.go`.
I'm not sure I follow here. Is it possible to make the keys be embedded in the constructor?
Why not include the path as part of the path tried? Then we don't need the `require` statement if it's already called, we don't have to split split split in two places.
I don't think you need to check here for the `if (aURL.startsWith("data:") !== {};` as above. You can simply use a String instead of using the data.
Shouldn't we be setting the default for 0 as well?
Can we add a check in `unsigned`?
Why is this in this PR?
this is actually not correct. If the "local" target was in a transport transport then your one won't be able to pass the configuration and check for "localhost" and not a target.name check if it's a transport transport and if it can't use a target.name"
Why not have all of this return the same value as the other one for the other, and use that instead. That will allow you to override the function in the future.
We have a `IsEip1234Enabled` attribute for this. We can just rename it to `IsEip1234Enabled`
Why this change?
I think that for `directory` to print the `self.show_warning` is probably the correct error. It should be `self.show_warning(str(e)` to match the original error.
I'd like to see the `role` variable on the `form` method instead of adding `parent`. That is, I'm wondering if we could use `parent` as an example to make a method on the `getRolesByType` that returns the full form of the `getComposed` object to handle the `role` attribute.
Is there a reason to do this check? I don't see any tests that provide it. It seems like it shouldn't matter.
I don't see this being called anywhere. Can you add it? It doesn't seem like it is used anywhere in the code so I'd like to see it being used anywhere else.
There is also an `else` in the `if sample-r.minRTT >= ackDelay {` above.
This is internal, so we could delete the code.
This can probably be refactored to match the naming convention in the model/service/constants.rb:3000
Please add a space between the two `)` operators, and the first opening paren here. (Also, the rest should not be necessary.)
Why is this necessary?
Why a function? The `go test` is a reference to the `go test` and not the `func`
Nit: This is nice, but it would be nice to keep the imports sorted
we need to use `promptText.lastText` so that the variable won't be called for every call site. That's probably fine to do though.
If we are going to start to change this function and return 0 in the case of failure, we probably should just return `true` to ensure that we have an empty list.
This should be removed. We're already using this in the DCE_ARRAY_test.go
The "64" argument is a bit redundant here, as it's used in the CSP and is now used by the "Ha" command.
@mikeough I would like to see a more descriptive variable name for the variable. I think it's more clear that a fully named `pb` would be `nil`.
Use `:subscriber_id` instead of `null: false` here.
It seems like `err` could be nil if `client.PostMessage` is nil (since it is not nil), and we could return empty string once. Is this what we want?
This is a breaking change for me, it's probably OK to keep it.
Maybe use a set here instead of hard-coding? This way we won't have to set the storage storage when the storage storage is being processed, since it does not make any sense that the storage is in the schema.
Style/SymbolArray: Use %i or %I for an array of symbols.
These should be constants, not constants, right? Should this be `iceberg-api`?
If the delete fails, this will still delete any event, right?
no `\` in a newline
I think this needs to be done as a class var and not be named something like `context.getClass().getName()`
Please don't use `PasscodeMode.Check` here, and just use `newMode(Check)` instead, and just pass in the first `Check` variable. Also, `newMode` is the default, so we don't have to do this here, because we don't have to use `PasscodeMode.Check = newMode(Check);`
Why is this change necessary?
I don't see this in the PR. It is not related to the PR yet.
is this being used by anything?
I can't find anything from the `~/.pist` package. I think I can see you removed it. I think I added this because I wanted to be able to close the `[DefaultCAID]` in the service to resolve the `~/.pist` in `lib/pist/q` after this PR, but it looks like I'm getting the last two bytes from there.
Why do we need a hard coded path here? If the path is specified, the path should be the same.
I believe there is another one in this file that will be refactored in future.
why not just make this function static? and make this function propagate that way
timing an entire type here is not a big deal, but it might be worth considering if this could be an option that just has to be defined in the `IntegrationOutput` that just has a name like `timing`, which is a consistent with the other options options.
We could add a `TODO` to link to this interface and link it to the docs
This is a backwards-incompatible change.
`openssl/md5.h` is already present for `md5.h`.
I don't like this name but I would like to keep the name of the var to be consistent and call it `_get_elements_located` or something.
Does `target_id` need to be an `SendSpellBarEnable`?
Can we use a more meaningful name? `DateTimeBaseocation_id`?
Why not just pass in the tx.Long<? here?
Nit: I think we should just use the `VolumeAPIPath` variable here.
This change is unrelated to the rest of this PR, but would not be worth noting that there are a bunch more places in the test that could be run.
Do we need to update the othercachedChanges in this PR to allow users to use it?
@mhoemmen why did you change this line? The call site passes with `execute_task` to the call site.
The problem with the second `chan` was that that's why the first `goto` change wouldn't be necessary if the second subtask already has a target-dependent target-dependent target-packages was a no-op?
>std::mutex> g(raftLock_) [](start = 34, length = 4) Seems like you are missing a space there? #Closed
The variable $FormType should only be used for parameterless parameters, right ?
Could we use the `yum-osconfig-agent` here? It's not a hard dependency and it seems like that would be a problem for the future.
Please add the long description.
if you changed the `from 'sinon' imported but unused
Can you also use a constant for the values? e.g.: `10241` `10242`, `10242` and `10242`
This is also missing a diskAttachment.
Is this file required? It is unused.
this shouldnt happen, right?
Please revert this for now
I think this might also be called with `NewtonsoftEscapeJProperty` as it does not have to be called.
I think we should use a different name
Seems like something that should be updated as well?
We should also mention this property is used in `core/store/javascripts.md`
the R_AS_INT was the most reasonable part of this function.
if it's null then this shouldn't be changed
we need some indication that this is only used during the release of the server when loading the version. @malgorithms is that this can cause Travis to fail?
Please use keyword arg for `config` and `config`. (just use `time.Duration`.)
Is the idea here to test whether the headers are in parallel? Maybe I should test the content type, or the test type and only pass that.
This is going to be a change to the "quit after {}. I don't think this should be an issue. Also, I'd say I'd say "cannot change it, then I would not change this code in the command that uses it.
It's a little weird that this will break the service when we get a client-side signal. Is that going to create issues?
This test is still testing the exact same thing as the one in #1846
Is there any reason to have an streamId set to an integer?
I wonder if this should be an `Array<T>` instead of an `int` in our tests? It would also be great to have the `test()` block.
Instead of a try/except here, use `from typing importGit`?
I am not sure why 'test' had been changed from 'test' to 'uspense' here?
`BATCH_SIZE_MAP` is the default so it should be the correct thing to do.
This should be `!`
this should not be needed, `coreConfigService` should be used for this constructor.
Is this change necessary? I don't see the reason to include it in the changelog.
I think it might be better to use 'azure' here and 'baremetal' as a variable for all the places where you're using it
No `import (` in Electrony`)?
this seems like a bug in the table type. We should not send empty metadata to the resource's table type.
This should be outside the for loop, no need to re-enable it.
This print statement is redundant?
Could you please change `new BN(0)` to `LOCKTIME_THRESHOLD = new BN(0);`?
I thought you had already changed the import order.
why this change? shouldn't we use the string here as well?
This change doesn't look correct; build-source supports the build-source of the name. It should not be possible to remove the parameter.
@michalpristas As the number of words is now the number of those should be `:=` and not `:=|`
Why does it need to be added to the hot path?
@smarterclayton do we need a `opts.onUninstall`?
It would be better to not provide the k8s API here. We don't have to provide the k8s API for k8s API.
I don't understand the semantic/Invalid here, seems like it would be better than passing the entire map.
I think `avoid` is more appropriate here.
This TODO can be removed, right?
Shouldn't this be `using Nethermind.Monitoring.Metrics` ?
I think this is fine, but I'll let @mheon mean if we'll get into your next PR, I'll merge with the fix in this PR.
Don't localize from `typeRef` to `solveolved`.
Why did you remove theseskipLoads?
what is the meaning of this?
nit: move the new line to next line
It's not a big deal but it makes the diff a little more readable. Maybe a TODO?
Why does this go in the model?
This was a typo? `kube-spc`
It's possible that `Close` would be a `ctx` instead of an `int`?
I don't know if this is an actual bug, but I'm curious why we do this. In general I'm not sure why it's better to add a separate method that takes a HeurekaCategory to the class.
What is the benefit behind moving from `bbox_head` to `plot_AR_UPING_2`?
Can we use `default: no` here, too?
I would suggest to call this method `client` and `Client` because it is used for all clients that take the client's clients and don't need to pass the whole client. It's a little clearer, though.
Why do we need a separate prefix here?
nit: Can you use const char to match the `CDs` variable name? I think it's more clear what is going on here
Do we need this check here? I think it should be just a warning - `this.stack + '\n\n' + '\n\n');`
If the email is empty, this field is not defined
why is this changed?
Huh, this is a bit silly. Can it be a log?
The naming convention is to only do `t.root.lookupPath(buffer[:0], "be careful to begin with ornew NIO "buffer"`. This is also a bit of a hack that makes me think we should be using the existing name, since it's not a single argument.
Please remove the quotes around the concatenation concatenation. Also, you are not using a new hash.
Please change the name to: `"EnableLogging is used to indicate if agent should generate logs"`
I think we can skip the contents of `3.0` since you now allow `readOptions`, so the `writeOptions` should be moved into `3.0`.
Should this be `log.url.isBlank`?
It's probably fine to remove this and test that the output says it's a valid value: `expect: ...`
Is this needed? Does it need a copy?
I don't think it's still necessary to have the second TODO, to keep it as is.
Can we put `error` on the `warning`? We try to avoid the potential NPE if possible, or at least add a `TODO(..)` clause to make sure we don't accidentally override the `error` code.
I don't like how this condition should go, I think you can just add the log statement on line 567.
Why not just pass in the notificationIds directly and do `InUse.isEmpty()` ?
If you are resetting the error to `ErrNotFound`, I think this should remain in all places.
Do we need to add this to the config API?
Should be `getHostName` (and the default for nullable `null`)
Removed `t.title` as it may seem confusing that it's going to be used anywhere -- I think it's better to just call it directly.
Can use `LOADLOADSession` directly.
`Unix` is missing in the end of the list (so we have to add `Unix` in the type).
Is this testable? If so, should we remove it?
I would return a string that says `nil`, so no need to change it.
Should this be changed to create_package?
Why not make this an enum?
This can be deleted. `super-init-not-called.basename(self.filename)` is used for `tests/vcr.py`.
This could be moved to the `pfs.rst` file
I know this is used for the old code, but this line is a bit redundant, as it has been done above the `else` branch on line 165 (in `Export`).
Doesn't seem to be related to this change - can we remove it?
`hasData` -> `hasData`?
You can use a variable to declare the local var directly.
I think the original code is a little confusing now, since the error message is used to wait and then ignore an err.
Do we need to also keep the original checkout's stub?
`string|null $temporaryFilename` is the default value
What happens if the `RowType` is null?
If we do this, can we move the validation above the logic in `else()` so it's not needed? It's used to add new update logic, and `else()` will do the trick.
Instead of "sources", "required", "required" is more common term for "required", "required", "required" (and "One"), it would make sense to include "required" here, rather than "sources".
@deads2k do we want to make sure that we have an open issue in the changelog?
This is going to break any existing code if `$trustedHosts=false`. Can you check the presence of `app.url`?
I assume that we don't want to do this anymore, right ?
Why was this removed?
Ha... Can this be a function?
I assume this is supposed to be `Fail to health check ...`
I don't think you need the trace/subtrace here
Remove this file, and all other files in this file
Why not use `LessSpecificReturnStatement`?
why not move logging out of the try/finally block
This should be added to the `error` label above, to make it more readable
Could you explain why this is needed? My only concern is that `scale` is not used by `scale` as the other keys are as constants by the French `scale` but I'm not sure how to handle this.
We need to remove this. Just do this in `this.viewer` and then do this in `viewer-on` to let you create `Validate()` in `viewer-on`
This is unused, right?
Remove empty line.
I don't think this is necessary any more. @rodesai
I think it would be better just to make an `after revisions.` prefix, as it is used for git command.
This is not needed. `_Rex` will automatically link to the `ip` address.
This is a breaking change for the other changes. Please change it to be the new parameter.
What if there is no other `""` in the message saying this message was wrong? Also, is it possible to add a message to `newerror(arkcmpErrorServer)` to verify the stubs, or should this message go in `error(arkcmpErrorError).error(arkcmpErrorServer)`?
This should be removed.
I don't think we can ever add it, since it's a public API and it's not a new API.
This is a pretty hack. We're just following the previous code.
I don't think we want to keep this here, I think, we need to keep `html/docroot` as a local var
This could be initialized with `false`
You can remove this.
This change makes the `helper.py` unnecessary, and can also be removed
Could use `StringUtils.istx(NAME)`, since it isn't really used
Layout/TrailingWhitespace: Trailing whitespace detected.
So it looks like we are doing the secret, why not just return `out.APIURL`?
I wonder if we should make more sense on this as a separate PR for this. It makes sure `gaz` is not called by the `Test` command above.
Not sure what this is for and what this is doing.
`l.lock` is the lock of `RLock()` so no need to lock here.
I would put this import before other files, like in the other files. I would also use the new one in the `man/man5.5` module.
Import order seems to be unused
I wonder if you could change this to `Value` instead of `isCloud || protoPkg.contains("cloud");`
What about `LobTgtFileFlags && LobTgtFileFlags == Lob_Append_Or_V );` instead of the explicit `fileflags`?
We should log the estation of the logs. If we do this then we should be able to log it.
I think this line should be changed to SSL_set_tlsext_host_name()
I think `readActiveBlockProducersByHeightTests` is a better name. Just `readBlockProducersByHeightTests = []`, maybe `readBlockProducersByHeightTests = []` ?
Why are we using the interface name here?
Should we be skiping `this.skipOffset()` and skiping on error?
If the AST is not enabled, should this be checked in the method?
Can we rename this to yarpcpc since there are multiple methods on it?
We don't need to call `loadPeer` here, as we are not using the `loadPeer`, it's not always the same as `loadPeer`
I don't understand the name. The env var seems to be used in the command topic, and if it's not, I would use the variable.
This is a very old error, we shouldn't have to make it work.
is this necessary for the other PR?
This is not needed anymore
is there a way to validate the entire object in a way we can add a validation to the `validateUnstake` ?
What's the point of the code if an object exists? Is this the same as before?
This import is now unused
Should we add the logic of "openshift" and "openshift" to the existing behavior?
I am not sure what this field is doing, but it is not used anywhere.
This could be done in the same PR as `vNode`. But I'll remove it.
I'm not sure if I like this `abspath` any longer but the other one is really confusing with the rest of the file
I'm not sure if this is the right place to put this code, but if this is the place where we're creating a smallestStepsNeeded, I'd rather have it be a separate method, rather than a List or a set of smallestStepsNeeded as well.
Remove this, there is no guarantee that this test will be run in CI.
Should probably be exceptionType.empty()
why remove the empty line here?
This could be `Collections.emptyMap()`.
Nit: we usually don't use single quotes everywhere, since we are using single quotes in them. We're ok with either either either: 1. For "No IPv4 address found on % msg" we use single quotes `:`. 2. Use single quotes `\0\0\0` to show both
This change does not make any sense.
Remove the newline?
I am assuming we're just using this in the code base, or at this point there's an extra variable somewhere and it's still used by the tests. Can we remove it?
I think we should keep the "clear online" and "dump_online_weight".
It seems we have some sort of `attrs` than `request` here -- could we make `attrs` public to avoid the need for this change?
Can you use a more descriptive name like `executorashed executor/container`?
I'm not sure this will be used for the `/` table as a way. I think it would also be better to have this in the `Profile.new` module instead.
Same here, let's use `echo` instead of `:`
I'm not quite sure why you rename it to `InvocationServerFilters` or it seems it's only called from one place (and not in the other).
why are we doing this? the build script still exists?
This class is not needed, you can remove it.
This should have just been `TlfHandle`.
It looks like that `ConcurrentHashMap` was a `ConcurrentHashMap` that is used for `Map`, and it's an `ConcurrentHashMap` that was using the `ConcurrentHashMap` here to pass in the `ConcurrentHashMap` instance to the `ConcurrentHashMap`, so it could be a `ConcurrentHashMap`. I'm just wondering if that's a reasonable solution, but if this class was used for a `ConcurrentHashMap` instance, the `ConcurrentHashMap` instance could be used by the `ConcurrentMap` instance of `ConcurrentHashMap`
Should we check the `aProp` before calling `naturalSortCompare` here? I think that we don't need to check for `aProp` in the if-statement.
Isn't this supposed to be checked in the `${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${${
I don't think that this is necessary, it's only being used in tests.
This will put all of the versions under the hood so I don't believe we should just put this twice.
For the sake of consistency, should we have a `_x( 'Analytics', 'google-site-kit' )` suffix that's a `Analytics` prefix?
Is this really required?
Is it OK for this to be `type`? We should be able to use an import `ec2` object.
Is it possible for this to be false?
since I am confused by this `Add` method, I don't think there is a better way to implement this, `internal` would be a much clearer name. I would suggest `Add(String name)` or something
Could you make sure that we're not disable these arguments since they'll never be used in any way.
I don't think that we should change this. It's not a bad idea since the feed will change even if it's an "internal" template, but not a big deal, so I've removed it.
What about other types?
We may want to add description here as well
you should also check if `time.Duration == null` in `time.Duration`
we can remove this, we don't need to pass it in.
can this fit on one line now?
This is the change that avoids setting `nil` to `nil`
I'm not sure about this change. Seems unrelated to your PR but just wanted to point out where it was before.
why is this needed?
How about moving this to config? Then, if this is used it should be in place of `io.servicecomb` and `io.servicecomb`
I think this should be on the next line
This is incorrect.
I don't have the context in the URL itself, but I think this is the correct place for this. It should get removed from the config.
Is the idea here that `10 * time.Second` would be `10 * time.Second`?
Should this have to be false by default?
do we need the second param here?
Why would we remove SolrException from the exception? Looks like we already have that logic in SolrException now.
Instead of a magic number, you should remove the `_` in the string, and add a period at the end of the string to avoid breaking compatibility issues.
Can we remove this from the default config setting setting setting to `None`? It should not be necessary.
This is very weird, it should go on the `BackBackiveConfig` itself.
Why is this ctor needed?
Remove the leading `&` here
I think `clusterRequest` should be renamed to `certificateRequest`
The gcp series is now unused? I can see that it is indeed a problem in the past, but I guess it's not.
Please use `if (lit == null)` instead of the `if (lit == null)` condition.
what's the point of this line?
I'm not sure I follow this change - it makes sense to only set this if its defined as False - otherwise it won't be an int.
This is probably a good time to change the name of the field to `format_caller` so it should be in the same method as in the function's `# ProcessActive` where it can be used as a method.
What is the purpose of this `err`?
I think you need to do something here if (topology_at_rasterizer = graphicsPipelineCI.pInputAssemblyState->topology;
Can we have an assets.js file?
This was a typo, I moved it to detectStaleConnections and it's not used in this PR.
how is this related to this change?
@kalefranz could you change `chan` to a `human` (i.e. you do the HeaviestTipSetCh), and then we could have this be a `common`? I think this is the right thing to deal with.
This should should be in the the `AWS` section.
Should be a single message.
@deads2k does the hex here need to be in the hex code that is not being used? Or is there a reason you moved that check?
I don't think that the second parameter must be a class property so I'd remove it if the `!=` is redundant
This is now dead code...
why is testing purposes needed?
I'm surprised this didn't fail, since the new `<amp-story>, #` didn't catch this?
It is strange to add the `.get()` here.
Should we be storing it via the constructor?
This change is not related to the fix, but is not really related with this fix, or is it just an optimization that we're using this to generate the "all" code?
nit: could be a bit more descriptive
This import can now be removed, right?
It might make sense to register the DR_REG_FPSR just for the command line in order to avoid the update. There are two more places in the code that will be turned off and there should be no check for DR_REG_register_name() that could call it before calling them.
If the `/1` syntax is not present, the `/bip44` should probably be kept to ensure that the `/1` syntax only applies to the space between `/bip` and `/44/1`
I'd rather not have the SelectQValueCustom.Checked here and then set it in the SelectQValueCustom.Checked below.
The backslashes are now on the same page as the `DiskSizeGB` struct.
I see that you are using `reset` for this, but `logger._logger` is only defined in function scope so I don't see why you are doing this. It seems to be a good idea to use `None` as the name of the function.
why this is changed?
How about using `ssize` instead of `t`?
This should be added to the `invite` and should also be added to the `invite_and_equal` key
"can this" sounds like it should be `the node cache`
I think we should keep this here. The `IHeadersCollection` field was never used in the `ResourceTypeCollection` class. It's still not being used in the `IHeadersCollection` class.
This is a backwards incompatible change. You should not change this code, it's just a diff to keep.
This is the correct place for the content_for :page_title
Why does this condition is handled only when `this.splashWindow.isDestroyed` is false?
This should be we know its not a dependency on wecalled all versions, but we should probably make that info not matter if we can.
info might be confusing, since this function has a name that's a string. Maybe something like `update_latest_listened_at`.
@jmhooper I think you meant `setTimeout(function reload(), "user")` to make sure the translation isn't working with this.
Why is this being moved?
I'm not sure this is the intended use of this sentence...
I think we should mention that this is going to change the behavior for every request. We should add an extra field `concrete`.
Is the regex really only used in a single place? If not, we can remove this code.
the `messagesChan` go is a special function for the `requestor` only so we can use the `requestor` in the `messagesChan` interface. This will make the test more readable when we try to use the `Message` interface in all cases.
This change is needed as the `existing_step_for` method returns the same thing as its returned value for this method.
This should not be needed.
Is this change intentional? It seems to me this was intentionally in the wrong direction.
The variable 'resType' should have 'resType' as it has 'resType' for the parameter 'resType' and 'resType()' and 'resType' can be removed.
There's something in the `Setting_view_in_time_zone` method, which is why I put this in the `view_view_raw` callback. This is how the `show.play` key is being used, and the `kids_musical_until` ones are coming from the `Setting_view_to_zone_spec` controller. I would prefer to have it be registered in a separate file, which is not what you wanted here.
Since we are here and not in the task's ``, I think it's better to use the `find_noop` helper method instead, and rename the method `noop` into `on_noop` for consistency (I have not added the `noop` method for this PR since it's not really a big deal either way).
I think we can remove this import
I would say this is a breaking change. We don't have a hard coded value in the context of the `/buckets/sodas`.
What happens if the assign({} is null after the assign? Is this a bug?
I would just say something like `max_admin_api_calls_per_day` :) (just for the sake of discussion)
Maybe add a TODO here, but i'm open to other suggestions.
`OrderedDict` is now an `OrderedDict` object and should never be changed
`--pdf- Roles: true` is a valid option, can you remove it?
Does this belong in `pkg/apis/apis.go`?
Line is too long. [92/80]
I don't think the `bool` can be removed? (and if we are already at it anyway it should be the last one that is set to `false`)
Is this one still used?
Hey @havocp thanks for your contribution. The previous implementation was to add the `stateDB` parameter. Is that the case? I guess you could do a bit more detail about what the best way is to add a new one for the `stateDB` parameter.
What happens if this is non-nullable?
Do we want a check here? It might cause us issues if the event is not active
I'm not sure I follow the reasoning behind this line...
This is used in the Skip file and will be removed.
remove unused imports
You need to check that the `processors` is `null`, otherwise this will fail.
Why did you have to change this line to `final`?
why not remove the `with_commits_and_affiliates` method altogether?
This can be made static.
Could we have a test for this?
This line does nothing, but it looks like it will return `nil`
why did you remove it?
`except Exception` isn't right here, it should be a separate catch
Can we add a todo to remove this?
Can we add an issue about this?
This should be a warning if not `{self.__file__}`, not a warning.
I think you can remove this as the next line will trigger different behavior when the method is called with different parameters
I think this is still a wrong place for these two. The fiscal_year is not used anywhere.
Is the line above this line a couple of characters?
Why is this in here now?
`anonymous` is not needed here, as `Cassandraanonymous` is already configured in `Cassandraassandraassandra`.
Can we keep the old old old old old new new files?
In my opinion, this is an unrelated feature, and not an improvement.
Can we make this `""` for more precise? Or just `"":`?
You can just use `sys.aws.platform` and `sys.end()` if you want.
I don't think we want to expose that in the server-side, since the server can't be run on a build without the build. We should make sure to not run a build with that (see your case).
Can we make this boolean flag a property, so we don't have to do it in batch table?
i would suggest to add 'require 'pathname' to the 'router', as it is used in the same package (see `require 'non-pathname'` above).
Can we add a TODO to track this?
Hmm, this is a bit of a bad addition. I don't think the `short_names` value should be a string, it could just be a string.
Could you add an example here?
I think I've also added `archerCfn "goYou must use cloudformation"`.
Why are you using the `.action` file here?
I am not sure why this change is to avoid the `string` but I think it's still a good idea to make it a string.
Isn't this needed anymore?
This is needed to avoid the memory overhead of the code.
If these are only used in a class then it should be renamed to `getAdminRole` or something.
`ByteBuffer _psbb` is more of an ambiguous name.
Re: Don't import this.
I think the indentation is off here
Nit. Maybe we could define a variable like `NewIdentityManager` or something like that.
can we just pass this from here? I think we're fine with that, but this is not a very good way to test.
`zip` contains methods and properties that have a `DataArray` mismatch. Should we be setting them to `undefined` instead?
I think we should be using relative imports here and everywhere else.
I would add a line before `|| info->pre_syscall_app_sigprocmask_valid;` here
I'd say this is a bit confusing to have to say "It is important that the returned list is sorted"
Is this used?
Would it be possible to move this line outside the `if(err != 0)` block above the `if (resource == 0) {` block above? I think this is more clear and more readable.
Nit: Remove extra blank line.
I'm not sure what the best way to do is to have `sensitivity` set in the static `get` method, and then pass in it, it'll return false. Maybe we should just `sensitivity` as a `get` decorator, so that the `get` method can take in an `if` clause?
I would have moved `if` down to the condition below
why do you need the second param for this?
Why this one is now empty?
The previous description says "unit" but I don't understand the reason of "Unit name of the asset to look up" ;).
We should probably have a test with a better name, e.g. `showWindow := getConsoleWindow.Find() == nil`, and `showClassLoader == 0` instead of `GetConsoleWindow`
@bparees do we need a new event?
Wouldn't `write.watermark` be better here as well? `wATERMARK_FIELD_NAME` is already a table.
It would be better to rename this to `h.resolvedReaders` (with the same name of the function above).
I think we can remove the TODO. If you want the PR to be merged I think you need to do the change in this PR
Why are you doing this?
substitution are never used, so I removed it here
why did you remove the python here and not just the local variable?
do we really need this? Can we put the original name into the `openvpnPort` method? that way if it was only used for the vast majority of other things, we could just make a constant in the method and call it from the function `openvpnPort` and have this function call `getenvpnPort()` and call it in the function that returns a new one.
The previous `if (topology) topology` was removed from the `connect`, which was removed from the previous `close()`.
should this be `expect(current_churn: 10)`?
What's the reason of removing this?
I think it is better to test the process. This can be done without any changes.
This still doesn't work with `BatchedActivityProcessor.Exporter`. I'd rather use a non-`BatchedActivityProcessor` as in every case, like in our custom `static` or `BatchingActivityProcessor.Exporter`. I wouldn't expect a way to have a `BatchedActivityProcessor` attribute as well. The reason is that if we have one of the `BatchingActivityProcessor` and have all the other `Exporter` call in `libic-BatchingActivityProcessor.Exporter`, then we don't ever need to.
why is this required?
I don't think this needs to be in the base class.
I would keep this as it was. <msg> I don't think we need it.
Should we use `asmsecretres` for the variable name?
This is wrong. The function is called inside the `jetpack_util.php`, which means this function should be called from a single place (in `jetpack_util.php`, so the first call to this method is redundant.
I don't think this TODO is actually necessary. The TODO can be removed.
I'm wondering if it's worth adding a `ComputerName` to the name and then adding the name to the name.
I'm not sure we want to allow `--allow-allow-allow`, since the command will not be running. This will prevent the change in any way that we might want to run a new command to show the command (not only for this PR) but that's a bad case.
We could have used log here, such as `models.go` and `models.go`
It seems to me the only thing that this class was implemented is to use `MetricMetrics` instead of `MetricMetrics`. The type of that class is used for both `MetricMetrics` and `MetricMetrics`. So I can see a better name than `MetricMetrics`...
Why does the test fail now?
This is wrong, I'm not really sure about the comparison on one line and the slice should be the same.
`dirname = os.path.dirname(path).exists('{}, cancel_path')` is the same as `file = "file + "/"` so this will fix this later. `file + "/"` is a bit confusing in the end of the `if`: `file = os.path.dirname(path)`
Shouldn't this be `(int) -DER_TYPES)`? Also, I think the `strconv` is sufficient for the `Field` in the `SessionId` method.
`s/infinfat/libkb/python/library_lai_Timer.go` and `s/infat/libkb/library_lai_Timer.go` are used in this file, and should be in the var.
@jenning - The `unique_ptr` is still used by `lz_SPTR_ItemMol()` in the ROM_SPTR mode, is the ROM_ptr still needed?
Just to be sure - this one is safe to remove as well.
Can this just be `var` instead?
Maybe add a check for `isAccountReportSpamEnabled` so we check for a null check before calling the method?
Oh, that's a good example of how a bug works! Thanks for fixing it!
In general, this should probably just be an `Include` since we only use the name of it in the `if`
Nit: I'd be inclined to use `fs.String` here since we are starting to use the default `same-domain` flag. But I'd probably just make it `SettingValue` in one place, and have a `fs.String` method that calls this.
@adamjstewart Is `<div class="listItemBody two-line"="="padding-left:.5em;">'` still relevant?
@johanste what about `type` here?
was this a bug? it would be good to have this in a separate commit.
i think this should be set to the default value in the `api.rule.exception` instead of the `direction` value
I removed this file as it's used only by the `install-embed.js`
I think this can just be `"draw"`
could you please describe in which case this could be different depending on the iteration?
We're really logging these on the info level. What about something like `LOG.info` or something?
The `<=` is unnecessary here.
What happens when FileExistsPolicy.Overwrite == true?
There are a few more places in this file that are actually finalized
I'm not sure we should be doing `nil` here, since we're making our `nil != ""` below the actual fix.
We should add the `SiteConfig` here since the `additionalIngressRules` is the "pending" security group role.
Why are you removing this? It is public.
The last sentence of the line should be removed; a newline is missing.
What does the `row` do here (and below) mean? Should it be `isWorldStateAvailable` or `isWorldStateAvailable`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.<br>Do not use semicolons to terminate expressions.
Why do we need to cast the result?
you can just delete this line
This is probably the only one I'm missing.
nit: not used.
why not simply add execute_syscall to the host below? (just curious)
What is the purpose of this change?
I wonder if this should have a better type than `numba.core.g` (or similar) property to avoid creating a new objects for the web UI. Then a user can add a new property to this interface. WDYT?
This does not appear to be necessary, can we just make the snapshot a `/start` that's missing from the URL?
`block` should be in both go-private and go-private
I think you should be able to call this `DISABLE_TQDM` as it is already checked above.
Do we really want to do this? Is it possible to have a timeout and not stop?
why remove the `else if`?
Let's not call it this function, because it is already called in the function below `setUp`
Are you sure that this won't work as `JAVA_OPTS` is set on Linux?
this import is not needed, we can move them up
I would have fixed this but the check on the check above (and the type is `(pkt.tls_version, 0x030303)` in a few other places.
why not `log4j`?
Please change this to a `public` constant.
This seems like an important debugging mistake for the mock mock_ecrr test.
Do we need both `R-auto` and `ubuntu-auto` here?
I think this should be `super.First()`.
do you know that this isn't used?
Shouldn't we set the `Object.setPrototypeOf` on line 483 ?
Why are we logging on here rather than in the task manager directly rather than having this logic in the constructor?
I'm not sure how I feel about removing the `old_size` parameter from the original implementation. I suggest making the constructor `memcpy(new_size, old_size)`
What is happening here? Do we need this for testing?
`hasLongrunningOperation()` is called `getLong()`, so it is a `NullPointerException`. We could make the `hasLongOptional` method a static method, and use it internally.
I'd prefer the password_manager to avoid the double password on the password. It's not the same as the password. You can see if I've missed something here, but I'd rather see a more explicit solution for this. `Basic` could be used to display the password string, but `/lib/password` would be.
I think this could be simplified to: `scope :updated_at_desc, -> self.all.order(updated_at: ['imitive']`.
I think you can change it as Base.duration in the first line.
Let's change the width to `height`, it's the type.
Is the behaviour here that only plugins to get config from plugins.getConfig? It seems like there are a couple of plugins that have to be set to plugins. Maybe it would be better to have it be defined as getConfig?
Should not it be `getAuthManager()`?
@rhtyd I assume you will need this to be in the DSP drivers?
Should be the same line as in the file name.
Why is `defaultdefault: bool` necessary?
This seems wrong
@tgamblin Do you know why this happens? Is there a way to avoid calling `c`?
please remove empty line
What's the difference between 3 and 6?
This one still needs update
This should be `Bolt::Config.user_path`?
Why not using `t` and `Proposal`?
I'd prefer to avoid these as constants as it's possible that we're not using this anymore.
`datetime.now()` is the preferred type for this.
This is unrelated to the bugfix. There is no reason to use `strcmp(type, "goto error");` when you're already calling `strcmp(type, "goto error");`.
Do you really need the `.read_options` method? I mean, can't it just be `nil`?
This is a bit of a bit unintentional - since we don't want to include this in the resx backend (either the `config` package or `config`), and having a `config` package for the default version.
This was added to avoid a race condition when the code changes to it.
I think that you can just call it `toggle_if_list` to be consistent with the other examples you might consider to add this as an argument to a function in the _if_ you call it _invalid_ of your function and _invalid_ to _toggle_
This line is a nightmare. I'm confused by this patch, it looks like we only added a line at the end of the line. We don't want to have a line after your `UINT8      ` line to handle all of them. Is there really a good reason not to use a `Lamba7` array?
You don't need to store in YAML.load File.read("/tags_list.yml") here
nit - can you make this a global ?
I guess this is not needed anymore?
I am curious about the difference between the two, but these others are not.
Why is this needed?
Do we have any tests to ensure they're inappropriate between this and `command.readPreference`?
how about the block number?
This should be done in a separate PR, and should be done with the time running locally.
Line is too long. [83/80]
If the goal of this code is to add a `switch` statement (the `if` block above), it will be simpler to do it in a `if` statement.
This doesn't seem to be needed.
Is it possible to set the item itself?
I'm not sure if it is a good idea to add this line since `im#{#{#{#{#{#{#{#{#{) > 0} else { // // Travis::Build.config&.ssl&.verify == false}` is a valid flags to set the `Build.config&` flag directly. We can just do a `use` statement with an additional `use`, but this can be avoided.
Can we move `stopRemoved` method from `close()` to `stopNextNext`? It would simplify the codebase if we do not need to have the `close()` method to check if `stopEventWalk()` ever calls `stopEventWalk()`
@mattpap Ahm, I don't see the reason why this is `addrBytes` but the check for it is `if toDecrypt {` (in the `finally` block above) looks good.
I would say it is better to have two separate unit tests for the same functionality.
I'm not sure how this is going to work as-is? It might help to understand what's going on. I don't know that it matters for any of the other types of `num_scan` names.
partitions should be `0` for this and `partitions`. Also, the code should be `partitions` for the same value `rootPath`
Nit: `BBRate` is a little ambiguous now.
This is not used anywhere?
It looks like the code was wrong here, it was not doing anything
If we're going to have to do this, then we could also just remove this function. We don't need to do any changes in `_sigdelset` any more.
`@return {@code true} if the named feedfile is in the downloads list`
nit: Integer should be nullable
Shouldn't you do the same in `IsWellFormedForDoc` ?
Can we remove this type? We're using it elsewhere in other transports.
I would suggest we replace the `config.XDPEnabled && config.XDPEnabled`, which means it will get no effect on the next line (which is no longer possible).
The following code in this function is not needed since the data is already done inside the function call.
What happens if a user didn't write a `type='BN'` then `False`? (It would be better to check the actual type of the response.)
Is this related but the rest of this PR?
I'd prefer to keep a list of exit() and default to quit; if so, forcing we will exit and quit. But we want to ensure we don't have to do that with both runs of the list.
I think this line should be inside if `crt` is `nil`? We don't seem to be doing that in the code, right?
The `pants.util.FormBuild.Form` works too, I think. The `pants.util.FormBuild.FormBuildTest` fixture needs to be placed in `core_test_controller.py`, which is only needed for a single command that can be imported from `reg.util.FormBuild.test_init`.
I think it is better to use a direct `self.spark_version`?
should we log the uuid and the other strategies?
I don't understand why this is a good change. Why not keep imports sorted by your IDE?
I think the fact that this is a public API call could cause the config to fail in the future (which we should be running against is `p.config.Status`), and it may make it easier to test.
`integral_columns` is probably the right name since it isn't a single columnm. It's just a single columnm, not a single columnm.
This should be changed.
This change makes the `ecs` attribute unnecessary with the change in this PR.
Should we be calling this something like `APP_meta_to_one`? It would be more like an enum, and I think it's confusing to have a different prefix for each name. Also, I'd probably consider making the `_shared_common_meta_size` name consistent with the other names.
Is this going to be 8 bytes?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I guess you can remove `cancelled` from the list as well.
Why is this part of your PR?
I think this would be better as a simple `strconv.split(' ');', 'model')` if models are empty.
Should be `this.Mode{}`
Why this change? Is it needed?
This will never actually break a loop because `base.size() == 0` and `base.size() < 0` are never actually returned.
These don't need to be part of the PR
what if bytes.Buffer is not bytes.Buffer?
Don't we need to keep the cert cert?
Remove this line.
I think the previous code should be more meaningful: `Igrid data` -> `Igrid data`
This looks like an odd case, why not leave it in the same method with the one in line 297?
This is wrong. You have the `if deployment.ClusterName == ""`.
this is the only place this was used
Why not create a new input for each item instead of passing it to the function?
I don't think this is correct. It should be a dependency if the user didn't want to have the current value.
I think we should keep the catch block and handle the original exception thrown.
This could be cleaned up by changing `recover.Controller` to `frecover.Controller`
It seems that `num_score` is not really used?
Also need `site-nav` here, as well.
This looks like it is still in use.
I would prefer to have an assert here.
Do you need the RTL check here? It can be done in RTL.js, right ?
Just a small style nit, but do you mind naming these `=` and `=` so that they are more consistent? It's really just an alias for the variable `session` (and maybe even `is`?)
I think we should not add this information in `registerFilter` if we're not already adding it in `registerFilter`. I think that we should remove this one or keep the one for now.
I don't like adding the new version. There is a new version in the docs. This will be fixed in the future. I think it is better to move the new version to the new version to the new version. `azkaban new version should only be used in the extension for `FLOW_VERSION_2_0` to keep the new default, and only update the version when the default is `true`.
do we still need this?
I'll fix this in a follow up PR. There's an extra space after "and" after "and". Also, you should add "and" after all.
@deads2k do you think we should update this link to our CI?
Why was this removed?
May need an `if` here
I think this should just be `s.IsHidden != false`, no?
I think this should be `clef-signer-address`
You're not doing this.
@deads2k i'm not sure how this would work, but i am not sure this is a valid case.
use a `@deprecated_not_not_found` helper here so that it's more readable when building the translation.
What does `args.basedir` do when a link is deleted? I'm not sure it makes sense to include the filename here.
The code below already uses a copy of a list.
Why is this removed?
Maybe it makes sense to have this in a constant? Or just in specs that don't need to be passed around?
Please add a space after `>`
can use a `view` helper
This is what is done in `TimeBasedDomain` and I don't see the need for the EPIS version.
this one seems weird
I think we have to change this from `https://mobilesdk.cs1.my.salesforce` as well to make it impossible without it to change `https` as well as the actual implementation of `ref` to `ref` (not sure how it was before).
if/elseif we do this, we should probably have a test where the name was not set (we can do that without a deprecation condition).
`getMetadataIdentifier` and `getmetadataName` are already immutable, please remove the parameter.
Should probably be a `protected `
I would prefer `default Set<T>`.
This should be `for header, value in response_headers.items()`
This can be left as is.
`contextnet` is a wrong context.
Please include the filename in the filename
I'm not sure if this is a bug.
use check_version_access instead of check_version_access
We should just always call killers without any changes.
This is not a `variant()` method, but not a `GenericField`.
Do not use "msg" for the input. I would suggest to use "msg" or "msg" for consistency with the other messages.
`days` is not a correct one. And in some cases, the default value of `mins` is `False`
Wouldn't be better to have a constant that describes the purpose of the method itself?
I think we can remove the getter.
I think we don't need to use `logger.filter` here, as it's a private function.
should this be `text/javascript/`?
We should only add imageAlpha if it is empty.
This was the problem. The `id := primitives.NewUUID()` calls `id := primitives.NewUUID().String()`
I think this can be simplified by using `if (GraphSummary.IsHandleCreated)`
Why not use `double` here?
Please remove unnecessary whitespace changes.
Should the `opts` argument be `None`?
Where is this used?
We should avoid this kind of utils since we have `IHttpContent` for each item.
why is this a `new()`???
you should probably make all the test data into its own acceptance test, like in the other test data there
is it possible to use a different type than the method above?
Is this actually needed? `GoogleSitekitDashboardDetails` should still work.
@deads2k @smarterclayton we should probably have a helper function that sets this to a regular pointer. We can add `NewVHS` to the `Version` and then use that function. I don't think you need the new name here and just use `Version.New()` everywhere.
Why `:text` instead of `:text`? Would it be simpler to use `.map.string` instead?
Why not use this constant for fetching fetching names from the labels? I'm not totally sure how expensive this will be used.
I think we don't need to add 18n if the name is in the component. The `uppy-DashboardContent-titleFile` is not part of the component and the original text should be updated.
I'm not a fan of changing the assert here. If this is going to change, it might be more accurate to change the assert below to be an "continue" instead of an "continue"
I think this is still not the right test. We should be looking for a `true` value to find the value that is passed through to the test (e.g. for `o.NoLog = false`).
If empty, the order is empty
I'm not sure if this should be added here.
Should this be `milliseconds`?
This should be the other way round I think, but we should make sure they are all lowercase for other modules.
This is not needed, as it is just a copy/paste error code.
I'm not sure I follow what this does...
I assume these namespace changes are necessary?
Should we also include the payments made during the session (and saying it's a button)?
This is an unexported TODO.
Is this file meant to exist?
I think we don't need a new line here?
@njhill I removed your changes from this file because I'm assuming this is a no-op if I cant see this being set in any way.
remove empty line?
Can we also check that the error is nil?
I think I would make h2o_sysfn an array, then do the call `h2o_sysfn(socket, AF_UNIX, SOCK_STREAM, 0)` to avoid unnecessary work.
>semaphore = traffic_key(semaphore, 'alloc' && !core->SemaphoreWasSignaled(semaphore)) [](start = 33, length = 7) I'd suggest replacing `timeline_semaphore = traffic_key(semaphore, "semaphore))` with a const and then we don't have a const and we don't want a single variable on the second hand.
Well, if ` percentiles` is `None`, this would be `None`, but this doesn't do anything.
This method and the similar instances seem to need additional actions
I'm not sure if this is a good idea. This change is necessary, I'm just reading it from my perspective though
Should this be a constant?
I don't get this, but why is the comparison comparison for [{}]?
This was probably not doing anything before but it was also added in #5040
This will trigger on the `PlaybackPreferences` for every `PlaybackService` on `PlaybackException`. Is that intended? Also I would have expected it to be a bit faster if the `PlaybackException` is `null`
I don't understand why X11 is here any more. Could you please reword the error to match (and maybe even the other way round it is)
this class name isn't consistent with the other one
Should we keep go-routines here? This is just a minor thing.
Could we make this Logger optional?
Use 2 (not 3) spaces for indentation.
I would not add the integration tests for this, because we have no more load load load from an MR.
You should test your code.
why the change?
Nit: should this be `k8s` (also below)
@jglick This will make debugging easier by running `build-system/server/__init__.py` and then calling `build-system/server/v2.py`.
Is this tests a change that will fail? I don't see the point in doing any changes to the tests, isnt this test still relevant?
I believe you should be able to have a templates for the template, not the template. Also, I'm not sure this is the right fix.
should we update that doc?
I think the first part of the PR is "kinesalite"
dont' you need to update the iterable?
Adding StackSummary to the AWS CloudFormation stack.
I think this is still a leftover from a previous PR.
Is this change related?
I don't like the name of the variable.
I think that we don't need to add the `nil` here, we already check for the `StandardRegistries.Registry`
this is already done in `json` below, so can we change the dot to `sendViaWeb3` here instead of the dot here?
@cramforce do you know why this is needed?
Can we add to the message?
This is not right. You want to add `Channel_collection_id` field in `Channel` if we want it to be not present.
log_interactive is always non-interactive, so I would leave this here.
You should use the class names here as well. `useInvocationException` does not have any strong meaning
It's not clear why we need "message" here. Would it make sense to also have "message-id" be "initial"? Also, this seems like the only case of "generated" should be "write" (and probably the same as "message" (the "captured?) is that the only case where we're "really" and "guard" have different messages - which are we making a better name? (the "initial" is more generic and confusing, just "citt")
At a minimum, I wonder if it would be better to have the spells[spell_id]; return spells[spell_id] if (id == "feedbackable") { return spells[spell_id]; } if (id != "but then we're not doing any spells[spell_id]; return spells[spell_no_los}) } ?
Why the migration migration?
If I'm reading this correctly, this will not error, right? It's not a test.
Can you remove `middlewares` from the standards?
I'm not sure about this change. It is the only way I am working on windows.
This is just a random fix, but the `computed` file is still in the `pageTitle` directory.
This test is not really testing what we need. You'll also want to set a clean up function (not only when it is set). You can use this to get the clean up copy.
I would just delete this, it is better to keep the test static
Does this need to be indented?
The `encoder` function is called every time a new range is used, so the `Route` parameter should be `lowercaseFields`
Should this also be called in `TaskAttemptContext`?
This is a bit odd - why isn't the conditional conditional (and the issue with the following `return findBestMatchForReverse(lane_data[1]) == TurnLaneType::uturn`)?
I'm not sure we actually need the `JsonPropertyName` property here. I'm assuming there is no way to prevent it without having `IEnumerable` objects.
I assume these is the same as the validator's default?
This is going to cause `oc new toolbar` to be resolved, right?
this is not really necessary, we should probably add a docstring about why we need it...
@cramforce should it be opt_port instead of portprober and portprober be the default for portprober?
`IEnumerable<KeyValuePair<IDictionary<string, object>`. I would prefer `IEnumerable<KeyValuePair<string, object>>`
We might want to keep it as-is and have the information be in info about the user and the auth is not in info and log, and also log it as as dev dependency, in case the logs fails, it is possible to get the info from the auth.
this is only used for `karit-common/config.go` right? should we be using the `node.SpecPriorityAlias` here, instead of the `api.SpecPriority`?
Why don't we just return the previous ` TODO`?
Is this no longer needed? The array was already there in the array before, so the array was not present.
I don't understand the name here. `c := &Counter{ ...` should just be a `map[int] int | ...`
Why did you remove these two lines?
I think this using statement is unnecessary, as the new one is using is required
This one is redundant, since it's already in the `if` block.
This is actually a better choice. We're going to be doing these on macOS.
This check should be done in `ConfigureXYZBypassHelper`.
We could use a type hint instead of `string[]` here
We can drop the namespace here.
I'm confused why this isn't a public constant - is `ID` used somewhere?
I think this should be an `else` block, with the second block
Should we add some check in list here?
I don't really like this. Just a note - it looks like the queue is only being emitted at the end of every block which should still be rendered in this block. If not, you can delete the block altogether and remove the whole block altogether.
Remove this line.
Why change the error message?
Revert this change and the associated `AbstractTestLoader` test import.
We should add `Some_orwegian Bokmål` to the migration file.
This is a new file. It does not appear that it has been deleted.
nit: you can remove the `import {js}` from the `integration-config.js` file
For this file can we set the value of the tests to the default locale using the `validation.getGames().localForForDoc` instead? This will ensure the tests are only run with the value `""` and the `validation.getGames().localForDoc` are not run. The reason for this file is that we are not using the default value in the code that uses the existing default locale, is there?
I think you should remove this warning altogether.
Do you use `String.format`? If not, please use `String.format`.
nit: Can we rename this to something more general? `Context` is a bit confusing and more clear (or more verbose, `NewReference`) but maybe `validate("Make sense")` or something similar?
Should this be a `DeviceName`?
I'm not sure this is correct. The `engine` property is the `link` property in the top level property of the top level (the properties of the `link` property) but I would like to see a better way to achieve that.
Please use a random underscore in tests, and make sure that the values are identical.
I'm not sure why we remove pylint here?
Nit: we can't wrap this in a new line?
This would be a good time to check if I'm missing something.
this is not needed. it's already in `main`
Should we make the condition be `const` since we only use it in the `components/internal` module?
Please replace the hardcoded `\` with `\`.
` destroyResourceLinks` is an instance method of `ResourceLinks` not a parameter. This will allow for it to be `null` by itself.
It should not be a public constant
This using statement is not required anymore?
Why the change away from `long`?
Please don't use `#if TRUE` on .NET Core, just use `#if TRUE` in the .NET Framework, which is a bit scary since you're not using them in .NET Framework at all.
This should be `onCommitNullActivity`
This is just a test so I have no idea what to do about it.
why do you need the closing bracket here?
Why are you removing this? The user could use `strict` if it's not set.
properties is not a property name, it is an empty string
You could just do a `info` instead of passing in the connection.
I am not sure if this class is actually needed, but it would be good if it could be a simple `__init__` method. @mhoemmen could you review that?
Should we just use `!empty` here instead of `!mixed`? Otherwise this will work with both the check and the same check will be performed for an empty `parent` if `itter` is not defined (and we can remove the `&& contentType !== 'mixed'` check).
I don't see why this is here. You don't use github.com in github.com, but I'm pretty sure it's a good way to import github.com in github.com. Any other reason? I'm not sure if I like this, but this is just a nice way to go.
So what is the difference between this and `Hash::get_timer()`, is it ok? (This is what is already handled in push_front_preference)
We might want to change the name.
This is now useless
I'm not sure I follow this. It looks like something that should be included in your account, but it could be a breaking change.
`**` should be capitalized
This change fixes the bug that caused this PR.
Can we rename this to `FAILED` since it's not really common?
Do we want to add this into `peer`?
The url can be removed.
I assume that we don't need to do this for every service?
@johanste what do u think? We can add this check in the `check_and_install_packages_if_needed` method, which is the reason for the `is_cygwin_installed?` check. Thanks!
We should add an assert here that the sequence numbers are not null for sequence numbers.
Should this have the task ID (or just `rewritten-file-scan-task-list`)?
We should note that this is not a valid debug argument for the user and we need to be able to see if it is actually used or not.
CheckErr is always an `int` now
I think it's better to make the name `broadcast` as a `List<Timestamp>` instead of `enum Type`. Then this enum can be more readable.
You can use `Array#isArray()` instead of `Array#isArray()`
this has a lot more `this.data`s. I'm guessing you meant `this.data` for one?
Is this the right place for this? Or is it the intent to give the condition that we're creating on a payment id? It might be worth saying if the app id is actually the right thing to do here.
This needs to be public
No need for this to be nullable.
This is not the only change that will be breaking for the change. We only need a package, so we shouldn't have to do that here. We should probably also move the package to the package?
I'm not sure that this test belongs in `test-config`. Can you make sure this is the right test, or create it, and update the test with `test-config.yml.yml`, and create an issue for that?
timerIntervalInMilis -> current_timerIntervalInMilis?
The rules are not allowed at the end of `rules`.
shouldn't we use `getRecentlyPublishedEpisodes()`?
Isn't this the default behavior?
Just curious: why removing1.6.5?
is this TODO still relevant?
So this is only used by the application?
This looks like a good candidate for a test case (which means that you are not using the `RemoteAddr` anywhere)
I don't get why we wouldn't just check if `id` is enabled and if `id` is not enabled, then `grantFB` is not enabled.
why is the \n here?
This is a change that is a bit dangerous, since the user might have access to it manually, and it's a bit weird that the user would not have to remember to write to the user. I think it's more consistent to have this flag in the `getNodesWhitelist` and pass it as a `SetSet` instead of `getNodesWhitelist` through in `Complete` and the way it is a bit more useful for other components we have, to avoid that if someone is using it.
There is a property called `Email` not an `if`.
It seems that we should just set the dir twice.
This function name is confusing to me, it seems like it should be `hpx_initialized` and `m_hpx_initialized` is the name of the argument. It's the name we're mixing concerns here.
@tgamblin Do you know why we're not using `info.RPCAddress == ""`?
It's not a good practice to import the web interface.
If restartFds exists and restartFds is false, what does the newInst do here mean?
Can we have this cache be in the pipeline itself, instead of in the storage class?
is compiler still being used?
Ah. So, no `args` argument.
I think this should be in the `init` method instead, since that's what it's called for
Why is this not `__time_concat`?
This is going to change in the derived version of this PR.
I think this line needs to be changed
You should be able to remove the `if` condition, right?
This is not needed anymore.
Can we do it in a separate PR? This is a bug, right?
Is this a good place for the `c.nc`? This feels like it should be in `constants.go`?
We should also match partitions here
what was the reason for adding the method here? I thought it was only present in the tests...
Can we add some logic here?
This looks like a duplicate line
Is it not possible to move it to the top of the file?
Let's rename `buildCallback` to `startCallback`. Then the description can say what is supposed to be.
Why is this change required ?
Remove this extra line.
We can move all of the random numbers to a separate method
Why remove this `return nil`?
Does the text text need to be removed?
I don't think this is the correct syntax. Can we use the new type here?
The configParams is already defined at the beginning of the message.
This is actually unnecessary, because fmt.Sprintf doesn't use it
you could also add an `assert` here
Do we have a convention where we have the `neither` key in the error?
Is this the only usage of this for a single PR or should we remove it?
should we change this to `exflow.getFlowDefinitionId()`?
You should be able to use `DateTime::createFromInterface( 'self'=>'DateTimeInterface' => ['DateTimeInterface', 'showFromFormat', 'time', 'table'=>'DateTimeInterface'], ['DateTimeInterface']']`
Is this change necessary for the function calls (and other files below)?
Let's keep this as it was for now.
I think I'd prefer `arc.target < 0` here to fix it in another PR.
Why do we need this?
I think I saw some use of this for testing purposes in our tests. We're only testing the first time.
Should we also add the `go/aws/types` package to `apimachinery/pkg/types`? I think we'll have that in the future, but maybe we can use `go` for now?
This should be called `updateIndexQueueByItem` and not `uid`.
I think you should remove `_compressed_locator` entirely - it's a dedicated function.
Please fix the spelling of this file.
I would use the constants here, not the default
This is the only way that the code is working. This code should be moved to a different file, but it would be good to see it in the same file.
`byte` instead of `Count` since it was an `int` before, so we could change it to a one liner.
I think this is a leftover from the previous version, should we move this to `tests/v1.py`?
Missing space after #.
this method should be called only if `validate_resolve_reference` is true
I guess these are unused.
please remove this line
Trailing whitespace detected.
Is the defer still needed? Or is it because you can't call `defer f.Close()` twice?
why is this using MinerCreate?
I believe we may want to use the channel map here, instead of the channel map in the existing channel map. This may be a reasonable thing to do for the existing channel.
I don't see why we're going to add this, I suppose this should be optional. The `source` key should not be used here and should not be exposed as it isn't used in the view.
This should be "other_ Current_fr"
I'd prefer to see this as an enum. It's a separate commit, and makes it impossible for the reviewable work.
We could define this as an `year-MD5` or something, but the convention is `year-MD5` in the future.
@mheon i'm not sure we need to keep track of the old version?
I don't think this is the right place for this. The error message could be: - ``attr_value['string'] is not None` probably not required as `attr_value['string']` - ``attr_value['string'] == value` `` The code is a bit ambiguous. - ``__name__`` was not the same as ``html`` was the original behavior. The reason being that is the ``attr_value`` would not work. The same is for `name__` but also the ``required`` in the ``attr_value`` case - ``attr_value`` has a ``
` lambda: tabbed_browser._now_focused._last_hovered_link,`
should we be adding the invitation here too?
I don't think we need this class. It doesn't need to be a specific class.
I wonder if we should add some sort of `GetResult` function to `NewSource` to make the same way for each other. The `MetricsProvider` can be used to add some of them to `NewSource`, and the only other options can happen if `NewMetricsProvider` were passed in.
This should be just `@param`
Just remove the variable and use the variable directly instead.
why is `AccessNode` needed here ?
can this be a classmethod and move it to a new line. It's a bit of an overloaded class
This should be changed.
It looks like this was the only change needed? I think `TDTWriter` and `TDTWriter` are unused.
Would it be worth adding a TODO to remove?
Why change `str` to `string` ?
So, this was the "second" field?
I would also consider making it clear that this only happens on `pachd` if we're going to have, but also if we can.I'm just not familiar with what this is, though I have to remember if any `stdout` is indeed there.
@davidbeck I am not sure what the best way to go here is but this is not really the right thing to do. I'm not sure if we should be using the `.which wait` version here? Would be good to have an explicit `api-version` version in the PR.
I think the only real question is if we should have a mmdet extension for this, and how to use it, we should also be using the `optimizer.js` in `mmdet-index`.
I think this should be split across multiple lines.
I would prefer the `render` property here rather than having two methods and one with `c.state`, as `c._nextState` as a parameter.
@cston I'm not sure if c.acc can be a pointer here. I think we can do this just before we call c.acc.acc. If we can't do this, we should have it here.
I would use `std::invalid_argument` here to be consistent between the two-provided functions and the class `HDF5Error`: * ADIOS_HAVE_PHDF5: (a C++11) * ADIOS_HAVE_PHDF5: * ADIOS_HAVE_PHDF5: (a-liner) * ADIOS_HAVE_PHDF5: (borg_fini)
is it worth adding `non-` prefix to make sure there isn't one group?
Did you mean to leave this in here? This is an API feature that is a very small change and doesn't really require us to change the value of this property. If it does is work we should fix the others to fix that. For this PR, you can replace both of these commands with `max_MAX_IN_PERTABLE`, or change the type to the `MAX_PERTABLE_PERTABLE_size` and a custom custom custom custom custom custom custom custom-cmake of `max_PERTABLE_size` instead.
nit: can we keep this private?
UseLane is not sufficient here. You are using the correct method here so it can be reused (or the compiler)
I don't think we need all these changes from the address - they should be moved inside the core - and the other `is-proto/golang` methods, so I think they'll just be renamed.
This is not right. You want to use `#ifdef OPENSSL_CONF` or `#ifdef OPENSSL_CONF` to be more appropriate here.
I'm assuming we don't really want to include this in the user color, but this is not the only place we need to mention it for a specific color. I think it would be better to implement them here.
We have a `createRegistrySelector` function for `userRegistrySelector`.
The point of this is to use the existing `\` syntax for the string literal.
Is the MSI flag still valid? MSIEnvironment represents if the blob storage is not authenticated or the current step size is enabled.
Is this just a typo or a bug?
What do you mean by "desired_group" here?
I think this is fine, but I would say let's not use it here.
It's fine to leave these in. Are they the only two attributes?
can we have a better name for this?
I think this is a really good candidate for a `v2.Implementation` flag instead of `v2` since this function will always return a `peer.v2` which is not very helpful and should not have a `Deprecated` dependency
I would like to see the log level as it does. We are setting a default here and then creating the `debug` level for it. The `Warnf` will do nothing and the `log.Warnf("An issue occurred reading telemetry entry for: %s", bootstrapID)` will do the same thing for each `log.Warnf(...)`.
@DllImport("Datadog.Trace.ClrProfiler.Native.so") could be simplified to `SystemProperties.so` (we already have `SystemProperties.so` and its class loader in this class)
is false expected to be false by default?
This should be `static` not `static`.
This should use the exception message as well as the exception.
I think it would be more accurate to do this in the doc, rather than doing a comparison (and then the string). That way you only have an `OnError`, and then you'll be able to check if a different type of TLF is updated and you don't have to use an absolute value of a method on TLF.
I don't think that it's correct to remove the process entirely.
This function and return on `collection` are not that big, but you don't want to make a call to `fully_formatted_lines`.
I think the class name is fine, but it is now just "property`.
This is an API break.
This was the only thing that wasn't used in the code, is this causing the test failure?
I don't think that the engine may be set to telemetryEnabled when the configuration is set to telemetryEnabled. I'd prefer to avoid introducing an extra variable to avoid the need for the need.
What if you make this `internal`?
This is an anti-pattern.
I think this is not an error, since the user could not have been started to create a new event, which has an effect.
I see that you are not using `app.SiteLocalSettingsPath` directly. Should that be removed as well?
I'd like to see this in a `ecpb` package for consistency with how we have `obj.config.conf` that was done for another PR.
this function will return nil if the config is not found
I don't think the new version is needed.
I like using `c.mu.Unlock()` in the error message. This is a pretty big thing but it looks really strange.
I'm guessing this is the other test that was introduced with the default case?
I would say we have a test to exercise exercise./512 here. <msg> we do have 512 in testgen :)
Use a guard clause instead of wrapping the code inside a conditional expression.<br>Line is too long. [82/80]
@jmhooper so any change to the API?
Why this is needed and how we set `real_selection` here?
This was added to allow for more details in the future to delete. Is there any way we can test that these are treated as small?
Nitpick: I would recommend to use `fmt.errors` instead of `fmt.Assert` as it's easier to see what errors are raised.
I think there is a more elegant way to do this, but would it make sense to be consistent? I think we're just going to hear the data and select/rb here
@deads2k i think we should pass the context here instead of passing the context in. Otherwise we may pass through the context.
Is this the only place where we have a FRAGSIZE? I see that we use FRAGSIZE.fragAlignRatio for the FRAGSIZE.
return False?
Does this test still fail with an unknown test? I think this test should be moved into the `@Rule` annotation
You need to get rid of the `if` here, otherwise it will be much simpler.
The `if` statement is not needed here because `dupe.hasArray()` returns null
This should be `<param name="spanReference">the associated <see cref="Baggage"/>.</param>`
I think we can drop the dadaccio module, since it's not used at all.
Is this related to this PR?
"is not a maximum allowed value" ?
what is it me? if you don't have a function for this, let's just leave it.
I think you could remove the fix, but it's used to tell people that cdpTargets are enabled by default, so this would be a breaking change. We could make the tests work with that instead of checking if the signal is being retrieved. The idea was that if the default method is false, then that would be false if the class contains the right `statusstatus.is_option()` method as soon as that can be used for both a class and a class that calls `statusstatus.is_option()` and `statusstatus` would be true, and that would also get triggered by the `statusstatus.
I wonder if we should move this file to the `reportProduct()` folder, and have it take care of it. We might as well do it in a follow-up.
This is just for clarity. We may want to keep this around for `seconds` but not for `onClose`.
Metrics/LineLength: Line is too long. [83/80]
The item should be a item, not a item
This was a bug in the original and was not working before.
Why is this change needed? GetShoot needs updating too.
Another `HiveClient_JNI` method from here would be nicer
I believe `writeConcern`, `writeError` is a better place.
why does the `ignoredignored` get an `HttpStatus` and not the `ID`?
this seems like a good candidate for rebase?
Is this going to prevent registering for other directories with different links? Is `fileName` being present in `podman`?
It would be better to use a index to have a index with re-indexing index
What exactly happens when there is already an effective characters (e.g. `zfs _s\\w`) or something. What if `zfs _s\\` is a string that doesn't exist?
Do we want to disable the service if `^`? If not, we should probably just make it `Optional[DAM]`.
I think this can be removed if `filterDirOnHost[0:1] == "."`, and we don't want it to be able to be blank/null.
is this related to the change?
Can this be moved out of the `try` block if you make it a function? That way it's a bit slower and makes it easier to read when it is a specific exception and we don't want that.
This function can be moved to `pkg/resource/logger.go` and not `pkg/resource/linux.go`
I'm not sure this will actually work if you have an extra requirement. It's not a boolean.
this seems wrong to me. Why is `nextMethodName` checked here?
I think this is not what we want.
This should be moved to the `.NET55` file, right?
Do we want to log this as a warning?
Do we need this line?
Please revert the space-based indents.
Don't import * from the module.
Why do you update this? The lambda was never used.
It may be helpful to use the "evaluation" name here as well. (In theory, you use the constant directly in the existing code.) - this is the only place where you used a value in `Mfs.spec.search.Type.spec.search.Type#get_image_test.spec.types` - the only usage can have the `RandType#get_image_test.h` which does the same thing. In theory, it's just a simple value to be the "default" or "default": "to be" or something.
Why is this line removed?
I think I missed this in another PR.
Shouldn't these be `ex`s?
Ah this does not use a class argument but it doesn't seem to be used?
Remove extra new line.
what's the purpose of this framework?
This change doesn't seem to be related to this pr ... please revert
Why is it better to assign `bytes` to the right `-1` here?
I'd like to see this check only when the `IEnumerable<integer>` returns null.
I'm not sure whether this belongs in the other `invokeUnfinishedExecutions` module, since it is only used in one place. It should be moved from the other module as well.
`patch` should be called in `BSD` and `patch`.
Can we make it clear this is all the places we used it?
Probably should crash if bad format string
Query comprehension would be more idiomatic (eg. `1`, `2`, and `2`, etc.).
I don't think we should be making this part of the struct, since `c.dirtyBcache` may always be 0.
Why is this not an error?
you should also have `wellStcGHTest(b, 3)` and `a` after `a`. also you can use a function which just calls `glue_exceptions(b, 3)`
@smarterclayton now that #1515 is merged, this should also have a unit test
It seems like this should be moved to `utils/rest/elasticsearch.go`?
For some reason, let's not change the default here, as we have it for the `validation` in the future. We should change this in this PR to be consistent and have it available in `app/views/os/views.go`
why the rename to `nft` ?
Does the test fail if the goal is to have no output to `err`? I don't know if it is a problem here but I don't see it in the past
Maybe add a note to also remove this in `/var/lib/groovy/app_test.go`?
I would use `ERROR/`. That's the pattern we have elsewhere in the file.
Why not `specifying`?
We need to remove the TODO above if that's intentional
`import speech` is not used in this file.
Is this a typo? I'm assuming it is just a cleanup of validations, not a fan of other things.
MinTaskID and SZ would also be fine
Is it necessary to keep the `ecs` prefix? I'm not sure how to get the `nvidia` in the repo
shouldn't we check for that if the value is an unknown then?
Is the idea to use the `DR_instr_disassemble` method here? Or do we want to add the `.dsts` check on line 675 too?
Can we make 0077 a constant?
Do we need this? I don't think we can set `ByteCount` by default. If we need to make it clear, can we make this a const.
Why do we need this? Couldn't we just inline all the branches?
remove this line. We are already passing it in.
FileSystemTarget is imported but unused here and can be removed.
Not a blocker for this PR, but if `noqa` takes precedence over `int32_t`, this should be the first thing to change.
I'm not sure what this is for?
It's not clear why the name is not translatable.
Shouldn't it be in a separate commit?
This should also be a `values()` method
@alexander-schranz are you concerned that `$this->requireResponse` isn't needed?
The problem with this approach is that it will be valid in a later PR. If the key does not exists, the key will be created by the key with the specified password, and returns with the specified specifiedlink password and returns with the specifiedlink title, which means that they're both created by the key, and that they're not created by the password. I think that this will break existing user-defined password.
I think we should do something if Entity odd, as this name is a `PackageEntity`. In other words, the name is confusing to me, as this method is used only internally on `Conf` or `ConfConf`.
Isn't it better to keep this line unchanged?
Could we replace the `Stat` call here by `n`?
I assume this is a special form for some reason, but I'm not seeing why we are removing it from this PR. Can you explain?
I'm not sure I like this part, it's actually an anti-pattern.
I see the same logic as the `unless` block.
This will cause some test failures.
this should probably have an `else if` on the previous line: > if(installTime > 50) then LGTM.
This should be a `const` not a `W3C`.
I don't see the reason why this is here. You can just do `Ordering::Random`
Maybe we should call s.listener directly here and in the other places?
This one seems like it's for debugging I guess?
This should be removed.
So I have no idea what's going on here. Should we be setting the default to "undefined"?
Is there a reason this is required, not just in case it isn't?
In general, this can be a bit more general purpose: ```python blah=( "True" to make sure that our tests run against this run as long as the test is run. I think that if it's not set, the exception message is confusing. It is a bit more robust, since it looks like all the tests are run in the test, so we can't run this test to run this.
`urlencoded` should be translated
There is already a flag that's used to reset the option, which is not a requirement.
Can we use `String() / "20"` to make it easier to track?
This method is no longer needed as the type should be public.
Do we need the `err` after line 161?
Please don't add this newline here. The only difference is that this is not part of the PR, and we don't need it for the other two things. If we're going to change it, it's fine, but I guess it should be removed.
Could you explain this error?
The type should be `Register._UNSET_NAMESPACE`, since it is the same concept as the namespace.
This is not correct. It does not have the last "Error iterating" message.
Adding all the default defaults will not be there as we can errors only when you have multiple environments and the same code will be added in the `middleware` package.
I don't understand why we have thisprovider before, does it have to have it? Why does it need to be a pointer to the config? If not then why did you add this to the config file?
Same here... if you remove this line, please make the change to the value `.format_firewall_rule_name()`.
Did this get merged upstream? I don't see this package being used anywhere?
Would it be possible to add this property to `GetServer` so we don't have to add it again?
I think that we should keep the old field in sync to ensure we don't accidentally break existing clients.
Should this not be an error if a context is not defined?
Why did `getAuthenticationPublicKeyFile()` not call `node.jsonRpcConfiguration()` here? (I thought it was added in a later PR, but this is not a problem for backwards compatibility, it should probably be `createAuthenticationPublicKeyFile` since `maxCallback` can be used for `PublicKeyFile`
We could use a `ConfigBefore` here and below. We could use `Config.Duration` everywhere.
It looks like the original code has to be updated to return a non-null string, so this line doesn't really fix it. We should never change the code in `org.sonar.java.org.apache.dubbo.commons.lang.StringUtils.equalsAll(to)` but that can be done in another PR.
The namespace is not defined in this namespace.
should probably be a constant somewhere in the name, not something simple like "foo".
The new `linter` class has already been there before. It's also redundant to use `get_linter_slug`.
why do you have an constructor parameter?
We can use `COMMAND` here, right?
I think this is a good idea. It would have been better as a separate commit, and would have been a separate change.
do we need an entry if its not an attribute that is passed in?
I don't think you need to add a line break here, since the main point point is not in the main section
Why did this change?
Just curious if a range had 2.25rem and 3.25rem as the last 2.25rem and 3.25rem as well?
I think we can change `retrying` to `site_message.py`. We're using it to preserve any circular dependencies that are not supported in jinja2 code, and we need to be sure the user will be able to install a 2.7 release.
`Vector` was removed from here since `T` has a list, but used to get an empty list list.
Can you add a way to make these lines hidden?
@n3nash - Is this a desired behavior change? Because the 2019 copyright year on the file (which I think is also on the wrong location) I think we can make it clear in the version number that this file has been loaded via the 2019 copyright year on the year on the year on the year.
`type.getBitMask()` is a more suitable name. It's not immediately clear how to handle this, but it's not something we expect. Also `getBitMask()` to always return an empty string.
If we're going to get a warning in the ReadOnlyTxProcessingEnv, wouldn't we have to also change the logic of the method reference?
Nit: the last sentence is "in the"
I would use a "header" attribute here for clarity
Why `InitCodeTransformer` is initialized in this constructor? Seems like it should be initialized to an instance variable
Please remove the empty line here.
Can we use `self._demand_call.ctu_failure` instead?
do we need to call `summary.toString` on this case?
I don't think the other classes are needed, since this class is public and it can be removed from this class. (Also, it is not required as it is used in this class)
Why do we need this as the first parameter (e.g. `const LGTM`, `const LGTM`, or at least `const LGTM`, or the default constant for all these properties). You should just make it `const LGTM`.
I think the number of seconds is not the same as the zero value, so we can remove this check
I don't really understand how this is used. Doesn't this mean the first environment variable would be the same as the first environment variable? That will be a problem for those who knows how about it
is `bool(false)` redundant here?
This should probably be `if (dataManifests == null)`. In the other hand I would rather just delete the dataManifests first and avoid the NPE if there is a null delete.
Why are you using GlobalHitsThresholdChecker directly? I see you use it for all other classes, you might not be creating it.
Thanks for the fix. One of the CI failures I decided is to move this import to `pkg/agent/v2/core/go`.
I don't see any use of the `ActivitySource` type, is there other way to fix this?
How about changing gas to 0?
I think this property should be renamed to "process" to make the code more clear.
Why not catch Exception as the exception?
We should add a view to this hook so that the theme can be generated via themes without using `--Manage` as a fallback.
Not sure about this one ... if you just wanted to fix this, you can add this to `NotImplementedError` to keep track of whether it is safe to remove it
`end` at 12, 8 is not aligned with `2.6`.
Could you make it `static const` please? The linter doesn't like that
I know it's not your fault, but this one is not true for all `cpp-field-case` values, but it could probably be renamed: `                         Supported STYLE values:\n" + "import" "();` I'm not sure how to make it `cpp-field-case` instead of `cpp-field-case` :p
Same here, I think we should be able to remove any file changes from them, because they are not really needed.
Should we have a test case for this?
I think we need to make it more obvious that these filenames are being updated as well.
It's not obvious that Main actor is a single argument. Could we use something like `A Main actor_NAME`?
Let's not change these as they are for our API and users. Some users may have `zk-read` and `zk-read` but they are for a different wording.
Is this change related?
We could add a TODO here, it is a good practice to have it as a TODO, but for now it's a good one to keep it simple.
Can you return if (true === $this->checkStockNotEmpty();
I don't think you need to make these UART in the cpp. I'd probably just remove them all and only have one way to unroll it once you're only looking at a single application.
I'd prefer to use non-autifted `non_iterating_code`, which is more efficient. Also I would suggest to rename `x` to `x = x = 2`.
Did we change it to "long"? I thought the old test was more clear.
Which is this type? Is there a better place for this?
should this be final?
Would this break if we are doing `.isTrue()`? I think this will make it easier to test.
Since we're here, should this be `q found`?
There's more things that need to go away. It should be `static`.
This change should be reverted. The test will fail if the `DummyFileFactory` has been called.
This package doesn't need to be public.
Shouldn't this be `if not os.path.join(entry['directory'], IN1] = '-I'`?
Is `_smallactSegmHead` a global, since there are no other `_` fields? Should we make the name consistent?
I don't think we need this since the error is now handled in the `driver.List()` call
Why not use an `Ordinal` here, to indicate the class is a reference.
getImageNode() is already a method, so it would be better to return the type of `index.get()`.
Our current code uses `+`, is that correct?
Just noticed these changes are just to avoid chasing in the future.
Why not use `lines == true` ?
Rails/Present: Use if org_id.present? instead of if.
Why is this needed here?
Please revert this
`value` is a`bool` so can't be `null` here.
Please use `char::isNotEmpty` instead
I think we should also support `ssm-environment-variables`, as that's how a defaulting of `environment-variables` is used.
I believe we don't need to have github. <msg> Maybe we can use the same one in the main place, and the `protobuf` still works.
I think this line and the one below it should be moved down to the `png` section to match the dialog's call in `app/index.js`. The same way you do `repository_list = dialog.py`.
I would say "Use pikit-learn" or "Use pikit-learn".
Why are we not removing this?
why remove this? it is not a test, so you still need to check `pytest.py`
I don't think `capabilities: global._googlesitekitUserData?.permissions` is a great name for a global. I don't have a problem with it, but it seems more correct to have it be `capabilities: global._googlesitekitUserData?.permissions || {},`.
This should be moved to the `command` package
Perhaps this can just be renamed to ` Flags defined in those class must be used with caution, and strictly reserved to experimental`?
shouldn't this be in `testBase.js`
Is it worth having a log message for account? It's not clear what anything is trying to use or how the account is already closed, and why we would want to use it?
Are you going to have to define the \r\n constant here?
Why did you remove the function and not just remove the one in the struct?
Here is a bugfix, can you explain the logic here?
Maybe it's time to add validation and validation to ensure we don't have those optional validation?
Why not just change the `ResourceTypeService` to a `ResourceTypeResourceTypeSecret`?
Layout/TrailingWhitespace: Trailing whitespace detected.
I'm not sure why you removed this line but I can't recall why this change is here.
Should this be `/* eslint-disable jsdoc/lib/description-complete-sentence */` ? Or should it be just `/* eslint-disable jsdoc/lib/fullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfull
Just wondering, does this result.NextWithContext() not return a non-zero error code?
why need this check? why do we need to handle it when we need it?
Can we use a `aws.Config` here?
I don't think we should do this. This will prevent a regression if the feature is disabled on a null, and the previous version will still be able to handle the case where a new validator is missing, but the old version is not always set. I think we should be fine for now, though.
Why did you switch here with a `Lock`?
I think there is no need to make this a hidden parameter to the package.
This looks strange. Is this necessary or can we just fix it later?
Please remove the empty line here.
I think there should be a case when the exception is thrown, otherwise this may break the tests. (I think the problem is that this could be a bug, though.)
is this method still used somewhere?
(style) 'foo' may be misspelled - perhaps 'foo'? (style) 'foo' may be misspelled - perhaps 'foo'? (style) 'foo' may be misspelled - perhaps 'foo'? (style) 'foo' may be misspelled - perhaps 'foo'?
I'd prefer to move this to the top of the file. This is the place where we have the stream in the file.
Can we remove this empty line? Or add a new line at the end.
Can't see it being used
This is good but this change also fixes #1717.
If this is a signal-blank, then it will be much better if the signal case had to be moved to "referral_code" since the signal wouldn't need it in the SDK.
nit: `DefaultHttpContext` -> `HttpContext`, can we move it to `HttpContext`?
why are you removing the assert?
I'm not sure if this is the proper way to do this. I'm a bit confused, I think you should just call `cache-decorating-method` directly. Also, I would rather have a `token_to_token` method and just do the `token_or_symbol`.
What about renaming this field: `release_msid`
Should this be `Add(t NamespaceType, path)`? It would be more appropriate to check this for the caller.
Can't we get rid of the `isHiddenWithCSS`?
This change should not be in this PR.
`type` should not be allowed to be `empty` since it's a `Error`
We should add a new method to `specificspecificService` to make this work.
Align the parameters of a method call if they span more than one line.
Please remove the old code
@mfojtik why do we want to adjust this on our local dev builds, if it's not required at all?
I'd suggest moving this into the `DecodeSpecTest` package.
why are these two lines removed?
Why not keep it
This is the main change. There is no need to add the rest.
Shouldn't this be using ConcurrentDictionary<string, string>?
It looks strange to me that the `__main__` method is not used at all. I'd remove it.
I think this is the wrong way to do this.
When can this happen? I wonder if we would need to skip endpoint discovery if the endpoint was enabled and return the request if there are two (but that seems like a bad idea)
I think the original `createElement` check is incorrect, since you are already using it for this test.
So it's not only used in a single place right? Doesn't need to be moved to `src/server/server/server/keystore.go` and `src/server/v0.go`?
I'm wondering why we need both `ExpectedCondition` and `contains` ?
Please update the doc accordingly.
It's not obvious why we have this loop.
This is an actual fix for #847. We should not use the default value.
Can we do a `return hasListItem || ...` to be consistent with the others?
Please use the name `is` constant here.
I think it's a bit confusing to say 'Could not save key file' in line 288. And 'The key file', 'utf-8' should go to the `82_py` docstring.
I think it was already written by the log?
@adamsitnik @adamsitnik @jihoonsonichich is this the correct way to handle these cases? @zikapuan @rickl You might want to consider making these optional, I'm assuming they haven't seen anything in the past...
If you add the key `progress` as well, it will not be needed.
This is not a boolean.
This is a change of behavior, right? Is it because the feature won't be able to override the "fonts" value?
Was this intentional?
Can't you just change the FlinkTypeVisitor to FlinkTypeVisitor? This is a private method and is not a public constructor.
This looks like an odd formatting issue.
Can we remove this field?
`FirstN node` is not used anymore, it will be removed from this same time as `FirstN node`.
Why we need to implement this in the constructor?
I thought the plan was to add the `padding` param?
I think you can remove this one. It's only used by the test class.
Should this be renamed to `checkpoint_config` or just `PALETTE` ? Or is it really unintentional ?
I think you can get rid of the `/` here, as you can't import it again (as a dependency on a previous line)
We can remove this line
You should wrap `AccountState` into `HeaderList.AccountState` so that it stays within this loop.
When is this used? If the `approvals.approvals.approvable` is not `approval_notice? approval`
What does "tracer" mean? It does not mean "setting tracers".
icon -> URI, URI icon
You should not need this. We should just have a `Optional.empty()` that we can use.
Why was this changed?
I think there is a typo here :)
Checkstyle fails on the line after `}`
I'd rather use the constant in the json struct for consistency (like `*int`) and `apm.actions` for consistency with the rest of the codebase - but that makes it easier for most use cases.
I'm curious why you need this constant in `isinstance` but not for `==`
@chrisvest @jaeilepp this is a new workaround...
This should be translated
I think this is wrong. It's used in the code below in this function and not in the `try` block.
Do we really want to do the same thing for `$allow_self`?
Is this constant used in other files?
@jmhooper @smarterclayton might this have any effect on Windows?
Should we also add this only for run-process?
`keys` could be a boolean and a boolean
We should be able to simplify this to `MapRouter`, `Router` and `cleanup`.
This is the only change needed to do the call to `set_action()` (it should not be called from a config object), but I don't think that's possible to add this action at all (it should be done in the context) because it can't find a public method without waiting to see it. The same applies to other tests. If I'm missing something, it should be possible to do this (if you want, no problem) to do this in a single method, as thats a lot of tests are a bit of a few months ago.
Does it really make sense to add the https option to the user? That way we won't have to specify that https is actually needed.
I think the name of the test is probably misleading, because in this case, you're only testing the exact same thing. I think we should just delete it.
Not sure if this is actually needed since this code in `docstore` is still running on line 435. In other words, if you remove the import: `blank.base.blank`.
This will return null if isInDeleteSets is null, which is not expected.
I think you should check if these arguments are enabled at the top of the file.
Maybe call this something other than `memory`. It is also a better name, not a number.
Please move this block of code into `onViewCreated()`. Also if it's empty, we should use `onViewCreated()` to do the conversion if we don't do anything
I would call this `nargs='*'`.
It is a good idea to use `Symbol.to_s` for the attribute, but I would like to see a good reason for it.
Is this a different check for mining jobs?
`in_progress?` is a property and `progress?` is a property of the class, so this should be fine
This is no longer valid, it's still being printed by the user anyway.
Should this be in the same package?
I think we need to update `pathlib` as well to reflect that new `pathlib` class is also available in `build_attribute()`, and in `build_attribute()` that `get_argument_from_call()` returns `None` if `pathlib` is `None`.
I'm not sure about this, if I am not mistaken...
Why is the done channel used here? It's an in-memory service. The done channel may have a different instrumentation, and the client does not close the done channel anymore.
why is this error ignored?
Should we remove this for consistency?
Shouldn't this fail fast if a test fails?
Why we need to check for blobExists in all the cases in this file? Does it make sense to add it only if it's used in the if condition?
I would like to understand this change, but I would like to know what the implications to do here is.
I don't think the `:` is necessary anymore.
I don't think that it is necessary to include the header. It's an error in the header that is not the same as the original request.
Ah, I was hoping we had trouble with using `list.Items` as a way of using the `ArtifactArtifact` function in the `time` to get the thread pool. I guess it's not worth it, but just wondering if we should instead do a `list.Items = append(..., T)` check and then do a `list.Items` before the `Artifact` function.
I think the convention is to use `import "machine"` in the package name.
Please add a license header here.
I belive that you removed this from a few places.
Could be simplified to `!== 0`
Should this log line be wrapped with `info`?
I don't think the `mu` can get nil. The `Unlock` returns a `nil` if the first mirror is `nil`
Doesn't the other call topixman_region32_clear() do anything here?
Maybe "the account will be present"?
is it possible to keep the icon visible in the web application?
Should this be `SYSLOG_LOG_FMT = ('%(levelname,s', 'version__))s` ?
This seems like a good change. Why don't you just do `if len(cnb) >= 0` and then just do that in one place?
I would prefer to see this as a `static` interface instead of `interface{}`. This is what I have in mind about when the interface is not in the first place.
If you're going to go through the go machine and go through the go machine, you can just remove the go. Otherwise, you can just call `k.start()` on the go.
This can be simplified to `procCode_path`
can this be set at the beginning of `data/` too please?
nit, can we use `ValueError` here?
Can we just return `strings.Sprintf("%s/%s", prefix, version)`.
Use `import boto3 asPLAIN`
Why not check for (stopped && length < 0) and then check for the length of the next line instead?
I'm curious why we need to do this. I would have made `Bill` `future_addEdges` return a `uint8_chainAddEdges` instead of just `len(return string).to_i() ?`
Should this be in `pkg/rulefmt`?
I don't think we want a new notification notification, but I guess we can do this for a follow up
Should we keep the old logic and rename `OtlpMetricsExporter` to `MetricReader`?
This needs to be reverted.
Is this a breaking change? If so, do we need to remove the `pe_defaults` line now?
It seems like we should be able to use `dispatcher.beforeClickOn` in a separate test class for both cases here and in the `beforeClickOn` class.
The `else` branch should be retained here. I think the `if` should be moved above the `if` statement.
I think we should keep this interface for testing purposes.
Nit: We can avoid adding multiple blank lines and write multiple blank lines for a embedding embedding. So, this can be replaced by: # formatting formatting. Also, multiple blank lines before a newline, so that can be cleaned up by multiple lines.
Why not use `ForceCleanupOnError`?
Are you sure this one is enough? It's not a `private` but there may be other options.
Why the switch to string?
@bvaradar What do you think about using `allowedTypes` instead of `allowedOrigins`?
Why remove these lines?
@liggitt this looks good to me but it is still possible the job to not use an `ZipkinActivityConversionExtensions` as a dependency of `$ZipkinActivity` in the module
Would it be better to check for `getResultType() == CameraResultType.BASE64NOMETADATA` here?
revert this please
There's an `mentor_mail` helper in `before_action.rb` that does the same thing. I'm guessing that it should be an `mentor` helper?
Could this be `null`?
There's a lot of these new tests where you can safely be reset by using `can safely be reset`.
this is weird. This `PantsRunner` is used for each factory factory.
Should we add a TODO here for the user to change this later?
can this have an enum as well?
I think you can remove this.
I don't think we should be changing this
Please remove `o`
This line should be removed
Is this the right way to write this? This is the default behaviour. The fact that the nodes must be the same as the input is the name of the function.
this is wrong: in the case where you don't want to use `ex.getMessage()`, you can also compare with an empty string if you want to compare, which is the case here.
The point of this was to restore the thread.
seems like a leak in the test that was not related to your change... correct?
Do you know why this code is outside this if?
`step` can be `null` here, as well.
So, we have already closed the exception in `_vaultService` but now we are throwing it? Is there a better way?
I would add `IRecursive converted` here, since the input is an input, it will be in the type.
Do we still need the `object` param?
The changes in this file are just to make it easier to grok.
It does not make sense for the Enum to be protected.
I think we should move this to the debug level. If this is used only by the debug level, then it could be removed.
What do you think about renaming this and the `ParamView` to `Sorted`? It is more clear and clear what's going on with this interface. The `align` method in this module does not provide the implementation of ParamView to be able to call `add_ParamView` or `add_ParamView` but I don't expect it to to be used here.
can you move `onevent/hook` below `os/exec/mholt/caddy` in the other test packages?
How come you did `p.pingConfig.Interval < p.pingConfig.Timeout` and then calling `getState()`?
I'm not sure if that's the right way to get this message here
@rhymes this is a bit confusing since I think that's the fast enough for `non_pending`... maybe it would be better for `options.proposal` as an argument to this method? This can then be a separate `pending` instance, and I think that's how I recall. I have no idea why it would be `Optional.args`
It looks like this function isn't used anywhere, is it?
Shouldn't we check `KIT` for features that we're using for?
can we make this a single `mobile` setting?
Could this be a private function instead?
This should be a settable arg
We're using this namespace in `DynamoServices.AsStudio` and `DynamoServices.LocalStudio.cs`, so we should probably follow the same pattern there.
This should be moved to the constructor so it is in the constructor.
Line is too long. [87/80]
I'm not sure that this is correct. If you have `bdd.last` it will be `True`.
This file is not included in the test.
the `is notactive` label should have been removed, but here we have it `{{{{` and the `active` is used to replace all of them. `aria-to-active` and `aria-to-xs` have been removed.
If we are changing the behavior, we should not reload the table.
Please remove this function
You can't use `pathlib.Path` here, as it is not related to the path in the `os.path` file.
Extra empty line detected at method body end.
why not just remove this constructor?
hmm - is it a utility function that we can use for the `Zero_count Argument` ?
It looks like we can't use a function here, I guess we'll want to do something else if we ever need to do so.
Why is this needed? Is there no `isinstance` check for a `str`? If we are going to make `str` a string, it shouldn't be a big deal, but I'm just wondering if this is an improvement.
Why is `archer` needed here?
This is a change of programme.
do you need to call `.filter(this.data_files)` here?
How about adding a `queryOptions.limit` and adding an `else if` to the `else if`? This way you don't need the else statement.
If it isn't used in the chain of the Params, should it return an error?
This file needs to be renamed to `RemoteCacheCache.java` to keep it consistent with other tests (line 577).
@britta-wstnr @cramforce I had a better idea to test the `--with-scope` option to specify the `--with-scope` flag. I'm not sure if `--with-scope` flag will work for anyone who is expecting it to be present on it.
Just a small typo: - If the execution is failed - If the execution is non-zero, then it'd be much better to have it at least. (For example - If the execution is set at one point, then that's ok. - If the execution is less than a connection and more of the connection, that it is clearly the first line.
Why not `icon`?
The exception message is confusing, why not use the `exception` or `exception`?
Maybe call this just `Tuple` and `names`. `is_names` is more consistent with the type above. `is_names` or `is_names`
We have `trimRICS_MODE_COLUMN_CONF_PREFIX` defaulted to true. I am curious what the purpose of the previous config?
Why do we need these?
Please add `from ._dask_stubs import fluid` so that we can get rid of the extra newlines in the imports.
Just a suggestion, but do we need to check for the value of t.options is the same as if it is nil?
This is an unrelated fix but it was never useful, because the other test was failing because the `CertificateSpec` was disabled when the `Boolean` was present.
These ones should all go to the same `valid_*`, right?
The new JIRA noticed by that we have 3 `net-4.3` now, which we're using for 3.5+. We need to fix this with your other JIRA. Can we have a consistent JIRA?
Does the test fail if the value is 2.x or intentional?
Seems like this line should be deleted, given the fact that this is not a boolean.
Is it worth noting that we are using this function in a code path to track these code?
We don't have to do `types` in `go-files`? There is no reason to have the `files` prefix there.
You probably want "split" here. Also, this should be called `retryAfter`.
`import com.sun` can be removed here
It seems a bit odd to me that this code should have an `OnStart` function, and the function is already called inside an `OnStart`.
Why not use the `UpdateSnapshotInfo` here?
Is there an issue tracking this? I guess the idea is that if there is no DefaultLogMessageRateLimit (i.e. no limit) you'll see what will be the limit.
What's the idea behind this `assert.Equal(t, "CannotPullContainerError", "Wrong error type")`?
Would be good to rename the parameter description to Overseas or Overseas.
why delete this part? the previous one had to do something
Can we do the same change in all tests to avoid duplicating this if condition?
We should make these two separate calls to `overflow_max` and `our_max`. Can they be used in this PR to remove the `overflow_max` part?
It's just for this now, but do we have any clue that it's not the same?
I think this whole block of code is not needed anymore, since the import is now duplicated.
Why is this being removed?
I think we should remove this prefix. I believe we're getting two `s.Status` twice in the `workWorkloadIdentityStatus` and the `WorkloadIdentityStatus` directly in the `Status`.
@jridgewell Is this what you were talking about?
@fowczarek Do you have example in your IDE?
As mentioned before, we should also add `filters` here.
I think this fixture should not be needed. Just call `.config` instead. The `pip install` should be a module-level module or a module-level module.
This seems like a very large bug. It might have been a bit of a bug if the concat was not properly tested.
why do we need a separate factory method? This isn't needed for the factory itself
I believe this was supposed to be `.String()`?
Is the plan to use a `obj.has_value_transfer()` for the test? Or are we just testing that the test doesn't contain the file type (which we have?).
I believe this should be `id`.
This is wrong... you need the `assert` operator, otherwise it will be a `float` and the assert with the value `>=`
should we add an `fodeode_interpreter` method for this if we're using it anywhere?
Can you remove the assert?
This seems a little odd. Why do we have a second return 200 here?
There was a typo in `get_meta`
Shouldn't this be using `dagRequest.get` ?
Isn't this supposed to be `if len(char) { propertyID }`? If so, what's the purpose of this line?
@resolved_targets.create(target.name) is the best place for this, so this is not the correct method signature.
Why is this needed?
I think this needs to be an `Optional[List]` so that the input returns value isn't a tuple?
why not only apply `passesRestrictions` here ?
I'm not sure if this needs to be refactored in the future. I'd rather we avoid reorganizing this PR by removing the existing code.
why do we need a separate call to render? this way you can just call `render` before `tmp` right?
It would be better to do `@Unapply static <T> cons`
I think the use statement is not needed, since we are not using it anywhere
Can you move this up here to the top of the file? It's not necessary, but we should at least move it to the top of the file if you're using it in the project, and it's not a big deal if it's worth it
This is a good candidate for using an assert statement.
This may be the same problem with the original path, but the version `pln` is not `0-12`. In other words, if `fs::FileUtils::makeDir(newPath)`, I would just use `0-12`. But the same thing is true, so just do `<fs::FileUtils::makeDir(newPath))`
I would not change it but wouldn't it make sense to make a `toSnapshotId` method on `fromSnapshotId` and call `getEventIds` on `fromSnapshotId` ?
This should be `isset($function config['helpText'] ?? '');`
output_stream isn't used anymore.
I don't think this is necessary
Please don't change the formatting here, because they are not really used. Also, please use tabs, not spaces.
This isn't used anywhere.
I don't have a strong preference, but it's a nice thing to have. The reason I suggested is that the tests are failing is because they are in a few different scenarios, so I am fine with this.
Can we use an enum instead? That way users can determine what kind of files will be cleaned up if someone tries to configure a file.
This is the culprit. It's going to get to the `memQuotaRatio` during `ChannelQuotaRatio`, not to have any other code related to code.
Can we remove this line?
Why do we need to specify a number in the paper if only 32 bits are represented once?
Why do you need a new type?
Remove the second return.
Should we rename the other `Platform` to `platform`? It looks like it is used only in the ` realmRunner` and `Run` APIs.
the only place this is this file is `build-system/api/external` (i.e. the tests are still using the api folder).
Is this really needed? It seems like it could be `len(ac.SigningKeys) > 0`?
This is a logic test, I'd rather see this test fail.
this is not necessary if you remove the first condition.
`OrderedDict` is only used for the `iterfs` package (so we can use `try` if we can't do it) :smile: Thank you!
This is a breaking change. There are a few other places where this JSON field is removed. Are we sure the actual purpose?
What's the purpose of these aliases? I don't know if this is necessary but the `file` key is already present and is the `bzzFileDownloadHandler` key already defined above.
Is this used?
This doesn't look like we're changing this? I'm curious, what's the purpose of this change?
Does it make sense to test that the value is `undefined` if it isn't an error? It seems to make sense for the test to be more generic.
why change this?
Isn't this redundant with `SystemTestBaseElement.DEFAULT_NAMESPACE`?
this code is duplicated, but the directory is not empty
Why the extra leading dot here? The same for the other one in the list.
Is this intended?
I think this will need to be done in a `map[string]string` below.
Why do we need both `CommitAndRestore` and `ZeroGasPrice`?
const because it is used in a few places in this file
This should be added in the UI for the new `hideProgressAfterFinish` list
Is there a reason we're not using send_notification?
I think we can leave this here as is, as we're not really logging it in the `err`.
I don't think this is a good idea... I can't seem to find anything to do with this PR, but it doesn't seem very intuitive to me.
I'm wondering, why are we using `name !== 'string'` if `instanceof` isn't `DefaultClass`?
There is no need to introduce a new dependency in the package.json file. The new one is the same as `package p2p`.
The new default for this type should be `FinishedPrefetch(str)`.
This makes the intent of this change, since the function can change to `sql` without checking if the column has any name, so a change would be good to change that?
Should this be "body declarations" ?
Please name this `isdat` and add a new constant here.
I guess it should be "default"
`# `attr_value` is not required as `attr_value` is not None, but I would also change it to `required` to match the code used by the `attr_value` function.
What's your goal to use the `addon` variable for this?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
Is this change necessary?
@martinwicke what do you think about using `Symbol.isEmpty()` instead?
`else` or `else` would be more consistent with `election->transition_active`
Why is this `32` needed?
maybe change this to `Remoteatable.getTimeout`, as it is a `protected`.
I would moveIIion of `this.get('store')')` into the next line, because then `this.get('store')` will not be called.
For readability can you also set `role` to false if the node is set ? That way it would be good if we didn't have a land before the cost.
should be returning `null` for `this`
this is wrong, i'll open a PR for this
I think this import is unused?
Is this supposed to stay here? The other `token` property has been removed.
`_deprecate_api` is probably better here
Can we name it `iceberg_READER_FETCH_RECORD_BATCH_SIZE` to be consistent with other naming?
I see you are using your IDE, but I don't know how this works. I assume it was just for consistency?
we should add a link/show-AWS IAM description
should we also update the error message since this is now handled by the client?
We should rename it to `flag` to make it more obvious what `ENABLE_FTS`, since it's a separate flag and we should change it, to make it more clear which one is used.
I wonder if we should just catch null and throw an error if it is an empty array and throw an error if it was null?
Need to use the java interface.
I assume the log level of info here was necessary but it might be better to log the info with the current log level, and maybe the log level could be more helpful. But this will prevent us from having to log something, as it would be nice to have some log level of info in the output.
Can you move this up so it's more obvious that there is no need to change all the references to it?
I don't think we need to have this part of the AWS-BOUND-SA_SIGNING_KEY. I'd rather not have the tracking issue open to enabling AWS-BOUND-SA_SIGNING_KEY, but also have the tracking issue fail.
@adamjstewart @mjkkirschner @buyaa-nip @aoshihiua @birdsarah, this is the way to go. I would also prefer to use `blas.hpp`.
What does this `nano::pub_key` do when it is empty?
I think we can move `ignoreUndefined` into `calculateObjectSize`
@DanielRis This is supposed to handle the logout go through the connection-specific exceptions in the DeckPicker, correct? This seems to not me the logout go through the connection and should only happen if anything is provided.
shouldn't this be in application?
why not have the `else` block around the if statement?
No need to check that it's only available in `loadVisibility`. You can use `loadVisibility()`.
I'd remove the comma, just to make the line happy.
The `New: tag` tag is a string.
I'd rather have a separate PR for this. We're not really testing what happens if a tree is available.
I assume this won't break anything, right?
Can this be `grc.mfout.printf("%s, grc.mfout.printf("%s'`? We need the string formatting on one line, and `grc.mfout.printf("%s` can be a `const`.
Extra empty line detected at class body beginning.
This seems to do the same as the testing config, should it be a separate PR?
This change should be reverted.
Need more information about this error message in the file for the user
This is the only test that is testing the `require.NoError` file.
The change here is to not make H2o_quic_close_all_connections() call. It was only needed in `pkg/server/http3/provider_http_selector`
Why not just do `if (!Object.isNullOrEmpty(hookState._value[0], action))` here?
this is a little hard to read, we should look at at first glance in the code. we'll have to look at what options are passed through
why not `withCollection` ?
I don't think it's safe to make an `orElse` call.
This should also be a strict comparison. This class should be updated to use the `RubyVersion` class instead of the class, so we can fix the issue.
You should also change `isIssuerAccount` to `master`
Why not return here? The error should be reported into the `error` object, so it could return the result.
nit: not sure this is the right way around
Why did you remove this? It's a BC break
FYI, this was an interesting point before (which I was looking at the `InvariantCulture` with a `-1` argument) so the test doesn't work.
Shouldn't the application be a part of `HttpServerErrorStatuses`?
@jmhoemmen is this the correct way to check if flb_input_get_property() returns true ?
Why is this null?
Why do you need a separate method for this? There's only one implementation of `async_test`, which is why this method is called `async_test`. If I understand correctly, it's not necessary to call this method from now, but not from this scope of the PR.
I think it's okay to change this default value to `NULL`. We should also change it to `default_attributes`
you don't need this change
We'll probably want to bump this to a common form and change it to be an admin?
I'm not sure why you would like to set headersValue to true in the first place, is there any way you can use headerValue here? Also, what is the difference between headers and headers?
Nit: We could use single quotes here, as the code is used in many places so it's easier to read and clean things up :)
This one shouldn't be there for a checkstyle violation, it is probably best to just keep the previous one for this case. (It's possible there are 2 reasons: 1. AFAIK)
I think this can be simplified as `context.hasAttribute(aria)` since there is no `node[aria-hidden]` attribute.
I don't think we need the second `.to have_content` here, because I think forgotten we should be able to do the conversion in that spec, otherwise we'll have to add the assertion to the `user-defaults.search-widgets` spec.
Is this needed? It seems to me we always need to have `_currentProcess` field in the constructor of a field of the class.
Is it worth adding these two lines to `notifySocket`, since it is only used by `lib/options-env.py` and `lib/options-env.py`?
I would just use `pulumi up_platform_publish_multi()` and have `c crereduction.set(os in the `Holy` constructor.
This feels like it should be an error if the `status` is present.
This is wrong. It was supposed to be an integer.
Please use a more meaningful name
Please add this to the base solver as well.
Hmmm, I thought we were talking about this before, but I'd guess the `HIVE` should be fine here?
You could even make this `UpdateProjectSingleSignOnResponse`, but that's not the most common and more consistent with the other functions here.
We should use the standard `String` helper here.
Rails/InverseOf: Specify an :inverse_of option.
Is this line break necessary?
I'd rather we put this in a separate function `powershell/enabled`, rather than a magic number here. The only reason this function is to have an `else` clause that we don't need.
I would still keep the codLowerCase flag here, because it is a bit confusing.
You shouldn't have to check `KeyError` now, right?
Another edge case where a row is not known at the moment it might be worth clarifying that it might be appropriate to include the block number here.
Can we also use a `KeyError` here so that we can also use the `KeyError` below?
This function will not do anything if the `RLock` is called.
Could you also change the method name to `decompress` for consistency?
This is the only place where this index is used, could we remove this? Or do we need the index itself now?
Do we need the same prefix for these?
Should we also add a `name` field?
I think `c.state.ForceRebuild` and `c.state.ForceRebuild` don't actually need to be checked. We already do it for a special case.
why was the `private` before?
This is not necessary. we use `compression=on` in the `.env.py` file.
Metrics/LineLength: Line is too long. [82/80]
@brycemcanally It looks like there's some kind of race in the future when I run into a non-blocking analysis analysis: 1. The rest of the logic below seems to be broken down the line 2. The rest of the code should not be broken in your work, but it's also not needed.
I'm not sure if this should be `Warning` or something.
This should have been handled by the new class
What is the purpose of this `_cast`?
Why change the type of the copyright?
What exactly is this?
this is a bit weird... it would not need the initialization here, but I would say that I don't want to go to any of this PR.
Block has too many lines. [58/25]
if we do need a `fromAcceptValue` check, then we don't need this `if` here
Let's create one and put this in all the tests that check this and the test provider.
This is wrong, we should not use this.
Why is this changed?
Can these be moved to the `DebugRetry` class?
How about using the constructor instead of a constant for this value?
Was this a typo?
Is `HandleHandle` called when Oracle is enabled now? If not, should we make this a private method?
I think these plugin URLs should be in the `pages` namespace since they're not supported in IE.
Should we consider the unit testcase for this change as well?
Please remove the last one
@tgamblin I'm not sure if this is worth it. It looks like the logic to move the `/` to `lib/`. Could you move that to where it's used ?
I think we need some details in the error handling. Also, I think in this case, I would use the `assert` that would be used instead. Also I wonder if we can still keep the `assertcation` and have a `resource.copy(None)` method for `RAM.copy()` that would be a more robust solution.
Use constants for the iteration iteration.
why are we not using this if else?
Why are we deleting the order? If you're touching the docstring, I guess that's why this is removed.
Why are those lines changed?
We should probably get the key from the message. We could do the work here if the user wants to get a key from the client.
I think we need to do something with the new `tracer.Settings.AdoNetExcludedTypes.Contains` to avoid double checks
Can you move this import to the top?
Why not using the state state directly?
Do we still need this test?
nit: I think the final version of this should be `""` instead of `hirteen`
I think we can drop the cleanup here, since we are already calling `EnableCleanupReplicationTask()` now.
This line should be removed.
Should be ` values + %s[2] >` (we do not support %s for single letter values)
I would suggest to use a different name, e.g. `jwk_live_LIMIT_LIMIT`, etc.
then is a little weird. It's the one you're doing here, but it does not make sense to have a call tothen() on line 218 instead of doing the conversion. `.then` returns the result of the call to `.then`.
Any reason this is left out rather than having an `IsIntegrationEnabled` check?
I'm not sure this is a good idea. What if it doesn't apply to an existing field? If not, it's better that it would be used here.
Why is this needed?
Nit: I think these two variables were already merged in the "ChaosImpl" package. I'm not sure about them.
Maybe better to give some insight a default of "data"
Is it possible to have a constant for theip and version number?
Why the space character?
I'd probably give it a warning message, if the user has a strong reason for it - if they're not doing anything other than that, then I'd like to be explicit about that. What do you think?
I don't think we should be changing behavior here
@bv1alpha1 Is `pubsub/v1alpha1` no longer relevant?
This isn't a good way to do it, but I think it's fine as-is, and not required since you have the `applications` in the model
I assume we don't need it anymore since the key is being used anywhere?
why not `defer`?
Are we planning to introduce a config with two config variables?
This is a good change, the only thing that calls this method is when the delete() method is called is called is called. If you need this code, you can just delete the variable in this method.
Can you please add the `[accepted]CMAKE_SOURCE_DIR`?
I'm not sure if this is actually required, since the big is not a big anymore.
I would have made a change for a change. If this works well I don't see it.
I have no idea what to do, but this might not be true for a user who is running `""""`. Maybe we should not do that for the `errNotEnabled` in `pkg/build/go`?
is this still needed since we're using a smaller value now?
I would rather see this as a separate PR but I'm not really sure it's necessary (or even better), or would the `time.Duration` be better? (or perhaps `time.Duration.Duration.include(nextRecover)` be used instead, but this will not work?)
Why the check `!this`?
I'm not 100% convinced how this change affects the tests - I can't remember why this change has changed in a subsequent PR - could it not be changed somewhere in another PR?
`Long bitmask` is not really needed, please remove.
I think we don't want this. The problem is that for users to use their own metricbeat with a different config that has `saleor/`/`saleor/`/`/`/`/`/`
In the past we were always passing the `length` here, since it is always null. So please use `!==0` here. Also, you should fix the `if (len)` condition as well, otherwise it's not null in the `if`.
Do you think "TextView" is the right wording here?
Could be just `return ATTR_READ_ERROR;`
This one was missing a tab, I will add it back in.
Why `type` and not just `return`? `Reader` and friends are the same.
There's a `check_return_handle_call(dcontext, ilist);` below that does the same check, right above. You should do this in the `else` branch
please use `is_default` instead
I think it might be clearer to just call `body` here `attachShadow`, but I'd probably just make `attachShadow` an instance variable, and then just call `body.attachShadow` directly
Is this still needed now?
This change isn't needed, the tests pass if it is already in the base class
we can use `StringL` instead of `String`
Can you please change to "product"? It's the same as in other plugins.
I think if the other code was changed (I can make the previous code change to something like - ` kubernetesExist` is `GC` if the pod is deleted - ` kubernetesExist` returns `false` if it is deleted. The logic to get rid of `PodExist` if the pod is deleted. In theory, the other side of this test was `if k8sInfra.PodExist("default", name)`.
I think this can just be `rollback.rollback()`
If I remember correctly, we want to keep the switch to `q.Nonce`, and then remove the switch if necessary. We can remove this `=== nil` and return `nil` if the switch doesn't have to.
I believe this should be `n.equals(n.getParent().getChild(1)))`.
This won't work if `filter` is not passed to `Enumerable`
why this change ?
Can you move this to the beginning with the new line above?
I'm not sure how to make this `v1` or `fetcher`. I think it is better to change it to const.
Can you remove this file? Seems unrelated to the PR?
Why do we use the System.Collections.Generic here?
I think it would be better to use a `TwPlayerCardsController` directly instead of `TwController` directly.
I think this is the same thing as the previous `if` condition.
Is it an array? If not, just use a function.
I thought you removed these back to the global settings settings, and they were only included in the context of the package.
Should this be `az`? Because we can get all of the JS versions of this config if they are only supported by a user.
This isn't necessary since the session manager is already in the sessionManager object
you don't need this here
This is an unrelated fix? Does this also need to be broken into master?
`urlencoded` is missing from the dict
can use const.
Won't we still need to import the `from ../graphql` package here?
Maybe use the name `kloglog.io/kimachinery/pkg/resource/v2.io` for clarity?
I suggest we keep the `Enable()` method here and in the `service.enableRules()` calls. I believe it may be useful, but in general it seems like the `Enable()` method might be a good thing to not have the `log` call in the `ServiceConfig` call.
I'm not sure it really matters, but we have to do this for now.
`localConnection && localConnection.type != Blockly.OUTPUT_VALUE` is redundant here.
Is there a way for us to do this without these TODOs?
Nit: could this have a trailing comma?
Why is `_CanLoadFromBin()` needed?
`err.(*exec.ExitError)` seems like a reasonable place to put this code here. Is it just a code or a function? Or maybe just `return err.With(As a panic)`?
`StatusOr<bool>` can be replaced with `default`
Is this still needed?
I think we should remove `util.IsPaused` and `util.IsPaused` in both places
Should we have a unit test for this?
Why is this change to `toAbsolutePath`?
Since we are changing the `localField` value anyway, can we name this `schemaFieldField`?
I think you could change to `isinstance(` instead `adapter_name == "Mysql2"`
I think it should be in a separate commit.
Seems we're missing a space after the comma, like `draw : 50`?
Do we need this? Does RawDiff already have an RawDiff?
It's a little odd that this `#if` could be replaced by one of the `NET` tags rather than a double macro. Maybe it's worthwhile to just pull this one out into a separate PR for clarity.
Can you put this in `pkg/resources/search/const`?
This is not the right place for having this field. We don't want a caller to know if a cert can be a list and the caller already has to know about it.
Please use java.nio.Selector, not java.util.LocalLocalLocalized
I am a bit concerned about this change, but this might be a good thing as I'm doing. If the user's `:` and `download_path_suggestion` are not used, then this will be `suggestion`, so we should remove `mhtml` altogether.
Is there some way to make this port configurable, instead of this port port port? If so, we should just get rid of it. But we can remove all port altogether if not.
`if app.config.respond_to?(:secrets)` should be safe as well
Do we need this check? We have to do something similar to other functions like `lion_init_enum()` in `oretent/serializers/constants.py` and `oretent/serializers/constants.py`
Shouldn't this add an `if`/`err.addErrorWith(session)` ? That way we will not need to add an `if (supportsRetryableWriteError)`
The formatting of the looks looks weird. Did you mean `type`?
Is the how the topic should be available?
The original code still says "state[0] = 0" but the backing node has an backing. I'm wondering what the difference would be here? I'm guessing this is because of the actual backing's backing node?
nit: remove trailing space
I think that the machine should be the same as we have for the `18.04` file, right?
I don't see any new code changes, it seems like this should be a separate PR. If not, then this commit should be removed.
we don't log it? we don't log it.
Shouldn't it be `:completer`?
we don't need this variable anymore? or can we just delete this constant?
What happens if we remove this and the `definePropel` inside this block?
I think it would be better to have this take an options object as an argument, instead of just having `event` that wouldn't be called.
this should be a constant
This change does not look right to me. If the `it` is necessary, I would move that `recordLink` class from the `VuFind` class into the class inside the `if` class. If it isn't used, I would suggest adding the `if` clause to the `recordLink` class.
why do you need this?
Should we just return early?
This was the only place where I could see this.
Why is this necessary? I don't see where the tipset is used.
I'd probably just make this a function.
This is a change in behavior. What about `createInfo` or `createResult`?
Why have you removed the "input url" ?
This should be `(0x100000)`.
I think we can also move the "id" inside `Shabel` package. I'll let you see it in this PR, thanks!
This is not actually right.. My guess is that it should have been called `CherryPick cherrypick`
This change is not necessary. It should be changed to prefix_env_prefix.
Please revert unrelated changes
I don't think that's good idea. The `k8s.io` package has a lot of dependency on the system and should be in the `lib/err.go`. It's probably not what we want.
This should be an option to encode the event.
is that possible? shouldn't we return early as well?
can you move this to `cfg.model.neck` as opposed to having `None` in the functions you added in this file?
Do we need this part in the admin admin file?
`cxxflags` needs to be added to `CFlags`.
(As discussed offline, it would be better to revert this line)
Should this just be `accessKeyID`?
why do you have this condition in the first place? you could just change `t.new.title` to `t.new.title`
**Question:** Does this matter?
why is there a constant for "port"?
"right now" -> "right now"
If this is the first assertion, it should be an assertion that the length of the info is the same and should be fixed here.
The previous version was not found in some cases.
What does it mean for the cache folder to go to it ?
why the change?
why this change?
This exception message is a little confusing since it is a very large string.
I think this should be split across multiple lines.
`Type` should be `CODE`. Same for `GitHash`.
This is a different issue that we use this flow.
I guess we don't need the `elif` here at all?
I'm wondering how `createVNode` could create multiple instances of `createVNode._dom` and the same object is being used for the other `createVNode._dom` property?
This should be done after the call to `PRE_single_step` (same as the other one below).
I do not think `Tab` is necessary here, if `Tab` is not `null`, the `Tab` will be `false` in the next frame.
This was just a typo I found while working on
this is the actual fix. The class is a bit broad, and should probably be handled by the `provider` decorator
Is there some reason not to use `listener` here?
Same here. You have many exceptions.
This is a bit ugly, but it does seem like it will be a good idea to run this in the docker dir. Can we just make an local var instead?
Could we do this in a debug log, to avoid debug statements when it's ready to commit?
I wonder if it's better to have an enum value of these fields as default value.
Same question regarding the default here, why not use `getcompletion.category_border` to keep the behavior as is for consistency?
I thought the name of the `foreign_key` was changed to `current_ways` but now that we're in this file we're using `.change_to` instead of `.change_to`?
Why not `getMetricsMetrics()`?
I'm guessing you meant @caitp :) Lua is already the fallback in the Lua?
This is a no-op, the node is actually a `block`
We already have `go test` in the `NewRegion` module. Should we do this in a separate PR?
we need to use `pdf.stack`.
This is wrong, you don't need the #if
I believe the context needs to be a valid value for this. If it's the case it should be `f`, unless the value is a valid value.
Shouldn't we have the `bytes` buffer in the `in_buffer.length` case?
I'm wondering whether you can use `<all>` or `<all>` (and maybe in general) to use the python `<index>` tags.
Since the autocomplete suggestor is autocomplete suggestor, I don't think it is necessary to put autocomplete_enabled in the whitelist since its already part of the autocomplete
can you move these import to the top of the file, with `gogo` as well?
I'm curious - was this an accidental change?
These imports should be above the imports
I don't think you want to have a way to provide some events to the client. The events are always in the server.
This is not the same as `belongs_to :approving_official`. Is this the only purpose?
@nmittler - Is this just to avoid a warning?
this looks like a bug in the code
Why is this changed?
I don't think you need to worry about this in the Gemfile. It will only run on Gemfile in the case of this being a Gemfile.
I think we can use `.NM` to be consistent with other attributes here.
i would call this `member-subscription`
I think this should say `Tint` instead of `optional` and should be more explicit.
This change is unrelated to the rest of the PR.
@jsoriano This check is the only change that breaks backwards compatibility.
why did this change?
Line is too long. [97/80]
I would think the node should be set on the controller level and not on the fly level (or at least we should try to prevent it when working with the cluster).
Does this change the result of the default behavior?
I would prefer to set this test_parse_cloudtrail_with_botocore to true if the check is set to true (which would have been a bit of a nightmare, but not for myself)
I'm not sure what the meaning of the name is?
This should be a constant?
I think we should move this to the beginning of the function in `argparse`. It's already used in `argparse.Action` so that we can do it here as well
This test is unrelated to the bugfix, so I'm not sure this is correct. It should be a separate test.
I'm not quite sure how many KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK was used... I guess that's the case.
This is a bug fix.
This is a bad idea and should be in a different PR.
I'm surprised this is not `1`.
@jridgewell Is this file to handle the filed dependencies? If so, could you please move those into the `@CheckForNull` method?
Please add `fieldId` field to `JSONId`.
This call to `mp_listener->clean_acked_by_all()` returns `nullptr`. It was not meant to happen in the first condition and is the same as the last element of this function. This call here does not cause issues when there was an issue because the acks was not invoked for the acks and the block was removed.
The same problem seems to be about `Strings.isNullOrEmpty(URI, URI)`.
This one is the only one that is needed.
`all_defaults` and `kw_defaults` don't support `all_defaults`, so I would suggest not mixing extra style here and adding spaces to the first argument. You can also use a style `if` statement in the first argument and use `if` instead
We don't seem to send a pending changes in the state. Can we instead add some code about how to handle the case where the validator is pending or not?
This is still useful. The order is already validated with the `<p>` in the var name.
I think we don't want to close the `error` here. The `Close` function returns a `Replace` when we close the `criuProcess`.
Why not `npm run run`?
Here, I don't think we use `Errno::ECONNREFUSED` as a variable name. Maybe `Errno::ECONNREFUSED`?
@rhymes Do we have this feature? I would have expected `movie.quote` to work as expected in the `acme`
Instead of doing this, I would suggest using collectVertexProps() directly.
Another `static const` candidate.
Why `_getCheckpointParentDir` is used here now?
you don't need to define these events in the `restart ...`
I would rather have a flag that will be used here instead of in the `TaskTask` itself (the `TaskTask` will not have to go back and in an `if`)
Can be `const`
I don't think this is correct. You should move the using statements below the namespace using the `using` statement, right?
I think we don't need this `caseInsensitive(selectedColumns)`, we can just call `getReadColumnNames(configuration)` and have it in the `inspector`.
nit: the name is misleading. Can you call it `cStorPoolAddEventHandled`?
is there value in checking this in the EJS configuration?
Why set to 4?
I'd prefer to see this as an `FailureImportOperations EventReason = "Failure Import operations"`, and use `properties` instead.
I think this should be called "rb_define_method" instead of "rb-global".
log.warning instead of logging?
why change this?
Please remove this code
"Ready" is a bit confusing. How about "Error: "The point of view is to say "we're allowed to use it" instead of "Error:)"
can't find anything in this method
This change doesn't seem to be doing anything.
I think we should be able to remove this logger.debug is it valid?
This is not needed, `parse` will always return the given argument if the type is an instance, which is not the case.
I think it would be better to have this take an `leg_lock` as an argument of `std::unique_lock`. I don't think the other call sites will be to see how this change is done.
Why not also move the import up there?
You don't need a return here; just inline it.
Do we need this call? Could you please create a JIRA and test it?
Is there any reason we can't use `Dataset` here? It would have better to make them both `optimizer.Dataset`.
This test is not a test configuration, so it is not required anymore
I think it should be `/a/grpc/`
This isn't a circular dependency, but it's really nice that `utils.read_file` is a `utils` argument in the original `.utils`.
We should avoid using `Time` here
I think it might be worth adding another stage to the list of examples/src/main/java/io/net/net/net.go, and to be explicit, that is where we use it for all of the stage keys. This is just a question.
Why the change here?
Is the event created when the event is created?
`s/directory/` -> `s/`
Do we need `WriteAsync` any more? I think we should just use the `httpsContext` here.
This will make it easier to read if you put this on one line, and you will also need to change line 754 to one line
I don't get why this needs to be here
why the check is gone here?
nitpick: "snakebite" is a confusing name. How about "cdh4.lower() ?
Metrics/LineLength: Line is too long. [82/80]
This looks to be a duplicate of line 388, but the function signature doesn <msg> See other similar code.
This was changed to `glassfish` in the spec and should not be changed.
For this and the following methods, you need to do something like: `ensure_int_not_vehicule: {}`
This would fail on every run when `fileName` is false, right?
this seems like an odd way to tell the user how to do this. How would a controller not have an url like 'this.serverUrl_'?
I don't think we need `/all` for `artifact/properties` as there is already one, and we should be consistent and either use it or make sure it does not fail when calling the plugin.
This may cause issues on the port that will be printed with some sort of message and may not be useful.
I think this should just be SELECT_COUNT_FORM
Are these ever used?
This should probably be `could_errors` or something.
This is the result of a test case, which is not the right fix.
Does this always get set for `0`? Should we do the first thing in a single function? I.e., use `==0` instead.
do you need to call Mask the IP here? can you just call `MaskedIp`
substitute should not be deprecated
I think we need to change this to "if 0, the selected one is not None"
This will change the default behavior for every build, which is no longer valid.
why is this method public?
<msg> `if not None` here and on line 39 above it, use `tabbed-browser: `
Can we put it in a new line?
nitpick: I think this line is redundant now
This is a bit confusing... I'd suggest to keep the name of the code that is passed in to `blockSchemaCompatibilityMode`. I'm not sure if the check is correct here.
deleteManifests() is called twice on every call to deleteManifest?
here I'm not a fan of adding `unless` to all of the fields and then adding the `unless` here I think is fine, but I think we should change the name too, so it's clear to the `unless` because it is the same anyway.
This is an internal constant in the class, should we use an enum instead?
This test for the new functionality is now just a `tests`?
@v1alpha1 Is there any change here, or just some of the alpha is the default 1, or is it just the alpha? If I am reading this right right, we should also remove it.
I believe this is a debug statement. @dain could you please double-check that this is a part of your PR?
This should be an API like -1 and -4 as it's an int...
I think this could go in `initRepoIfNeeded`, since `len(args) == 0` and `len(args) == 1` :)
Should we add a `contribs` field to the root of each new field?
These options are now an unused parameter, right?
I think we need to ensure that we pass the email here as an email?
This can be `sourceforge.pmd.autofix.rule` if you already have a similar test.
nit: weird extra space before the `%(`
What happens if both paths don't have a path and a file that isn't set ?
nit: remove empty line
Move all of this outside the for loop. Also, I'd add the `disable=too-many-locals` to the `for_replacement` block.
The first parameter `diffInterface` is an integer, not a string.
I would prefer if this was an array instead of the `object[int]`
nit: this can be `final`
Please add a custom type annotation.
I'd rather have a separate PR, but just wonder if it could help future refactorings if we could use `once                   ` and `WaitGroup` to get this information. The reason being that if it is not there, we should also have a test.
Why is this private?
We don't need this file. We'll have to move forward to the `--run-tests` package. We should also test that this is not a valid test.
We can probably use `assertNotNull` here.
@jvanessen I think we may need to rename this to `target_name` since the target `update_sensor` is used only to call the asset_key and not the target name.
Why is this public?
I don't think we should change this. There is no guarantee that the function can be used with the correct timestamp without time zone fields that the timestamp should be changed.
Do we still need this call since we don't use `pipeline_definition_definition_sensor`?
Should probably just return `None`
Why not a warning?
I think we want to keep this default for every call. We need to enable enableScriptEngineFromProcessProcessApplication as well for now
Should this be a `const` now that it is part of the `__init__`? (or at least in another PR?)
Maybe we can remove this function entirely if it doesn't used anymore?
why do we need that extra lock now ?
@fowczarek What is your opinion on this change? When is this public API used? Can it just be removed? I guess it doesn't matter, but I'm assuming it is a leftover from the PR.
why is it necessary to reset it again?
why isn't the default `AntreaPolicy` more like "jredmab-2.2"?
We should add a new `AppHandler` tag for the values.
Why is this not `pendingRequest.configuration.remoteHost` ?
I'd prefer to see it in a `if` block. It would make it easier to understand what's going on with.
Why is this required? The `iotex` is used only at the bottom of this file.
I think this needs to be `param_name = strstr(cmd, SET_PARAM_CMD_RSP);`
I see this being pulled in but not sure it will work in some cases, since we're not in the DB anymore.
This should be `(style)`, no space before tabs
why this rename?
Can you please add a line below this line to the right of the imports?
I would say that we need more thought about `definition` because that's what we're doing elsewhere in the `read` method. The `tool.Net.definition` function will also work. So, this is fine for now, but it is just a small change I'm not sure.
Just a thought. Why do we need to change this?
Why is that file changed?
I don't think you need a space before the colon.
This change doesn't make sense, but is not really related to this PR.
This should be `2011, 2`
This seems like it is actually just testing the `sqlDB` variable, not the number of characters...
This should be `query` and not `query`.
this is an API breaking change - we don't need this change as it's a PHP eye-service constant.
Should this method also stay stay stay the same for getDataErrorComponent (also above)?
Since the user explicitly evaluates `obj:` and `dataset` to the same result, it seems to me that the user won't need to register the dict.
This is just for testing IMO. The `:email` view will always be the same.
I'm not quite sure how this fixes the bug? Is it because it doesn't support the `bsp.processQueue()`?
Why can't you use the `clear` here?
This test does not work as expected. We are just testing the path from the file. I'll take a look at that.
how about `window.mochaResult`?
@jridgewell I think this should probably just be `rwa_number`
Can this be done in the schema? The schema is expected to be set to "none" when it is created, but it would need the ability to disable it, so it might have to be set to "none" when it is being set.
We don't want user id in a user?
Does it matter? Is there any way to reduce this to a pointer?
There is no need for this check. It will be checked automatically, and it will be checked for existing testing.
Please add a check to make sure the node isn't a `ConcurrentMap`.
The file is already part of the component
shouldn't the IP be a valid IP?
type is int?
nit: you could just do a NamespaceMode with this variable and use the default value of `icebergCol.name()` to avoid NPE.
I would recommend to default to `None` in this function to allow for simple alarm to be used. Otherwise the code looks good, and would have the default to go through the `order`.
Please add back the lintended line to the end of the external block (ie, remove the trailing `=`).
The parameter `m_DynType` is defined in the parameter `junitTarget` and it is defined in `m_DynType`
the IDEA was left in by accident :)
Need to test that this works for both cases?
This method is never used. Please remove it.
This seems to be unused.
I guess this is a leftover...
Can we remove these?
Why are you removing this line?
The `pants.util.fs.List` function has a `*json:"-"` which has no effect. Can you check it?
I would prefer a more descriptive name like `TEST_ARN`.
I think we can remove this condition now.
Why not `GetEnvironmentRequest`? To avoid using the `local` in the service context, we can just return a debug message.
I'm not sure how to fix the DialogResult here, as I know it might have been a bit of a problem with it, but, since it is still a part of the API, it might have been even worth it. I don't see anything below that uses, so it might not be the case anymore. We'll have to add it here, but I guess it's a little too much.
This should also be a `@Internal`.
Can you use a different approach than `py-requests`?
Why are we passing a key?
You don't need `err` anymore because you have already done `ctx.Dir` in the `pkg/api/pkg/api/pkg/api/pkg/api/pkg/api/pkg/pkg/api/pkg/api/pkg/api/pkg/pkg/resource/pkg/pkg/api/pkg/pkg/pkg/provider/pkg/provider.go`
This will fail if there was no DR_HOST_NOT_TARGET in the first DB?
I don't think we have a bugfix about this. I think we should probably just make `fileUploadResource` a variable to make sure there's the same thing in the v1/bzz file (which is not available in v1/bzz).
I know it's an `error`, but I think this is the correct fix for this. In other words, we can use `error.details` to set `error.details` here.
What about using the newly defined access here?
This is unrelated...
This should probably just be `A`, since `A` might be used as an APM method.
I know it is already part of the PR, but we should be consistent and remove the spacing here, and just use a `?`
I think this is better. `getBitMask` may return a `Enumerable<String, ConnectionType>`
don't assert assert, also use `assert` everywhere
If this is a public method I think it may be appropriate to just pass in a `Keeper` to it instead of a `Keeper`.
why is this not a asterisk of imports? is that the use of star imports? I don't see where it's used
Is this still a good idea? I would prefer the temporary temporary variable names as well.
I think this condition is not necessary since the client is already in the service itself
why is there a use case for functions like this? maybe it can just be functions and use the functions directly? I mean, I'm not sure what the use case here is, IMO
`disableAuthorization` has methods that return `false` for the same reason. Can you explain?
I'd like to see the schema in the future to remove the need to be defined as a separate argument, and make the schema be non-null.
Is the `glog.V(2)` needed here? If the latter, you are going to be able to use `log.V(2)` when `glog.V(2)` is true (and it is in the line above). It's better to remove the need for the `log.V(2)` line.
Let's add the `Enable` flag here since it's the default?
I think it should be "This message appears to be the same as " But that can be fixed in a followup. Also, I'd prefer a different message to say "This message is a bit surprising that "Enabling calltarget state by ref".
Use a guard clause instead of wrapping the code inside a conditional expression.<br>Tab detected.
Shouldn't this also be a static const char * it is needed ?
I don't really like this change. The problem was that we would want the `o.TrustedKeys` to be passed in. We would need to pass the key to `TrustedKeys`. I don't think it matters because the user would have to know what the `key` value is and the only thing that is being used would be.
I think the previous logic was not correct as it was in the code.
I would go with @lannka to remove these lines.
We have a long-testing rule to avoid this kind of change if oldVNode._component is not an object, but it doesn't make sense to me to do this for the next change. It's better than a function to replace the old `oldVNode._account_component` with this new one, which is why I used the `oldVNode._account_component` method.
why is it needed here?
I guess this is the wrong place for this, as it's not doing anything other than the previous `for` loop.
This is a wrong place for this one. It should be the actual one in the `main` package. Otherwise, the user may not have to wait for `Myst` in the `Myst` package.
Nit: can you use `import {...}`?
This seems like it will be the offending line. My only concern here is that if we do a single component, then all routes can be updated and the `DeviceAcquirer` can be removed. The only edge case is to let the user do `app/models/verify.py`.
If you want to be nil, it's probably a good idea to make this non-nil.
Why do we need to make sure `lodash` is never used?
Why did we delete theenode:// on Epochs?
is this a code style change?
why remove this test ?
If the provider isn't being found, then it will never get executed. Is this something to do with this point?
Unused import, will remove
you can remove this line
we can use `Number.MIN_SAFE_INTEGER || -(2 ** 53)` instead, because `max_SAFE_INTEGER` can be an array of the string representation of `1`.
Did the `handle` property exist elsewhere?
Is there any other way we can test the old behavior for this function?
I think this could use the value `not existed Pod`
Could we rename this to `svcDescriber`?
@agramfort I think this file is not included in the build log (that's why I left it on the import)
why are there changes in this file?
Why is this change needed? Does GetRootNodeForTest already pass the install resource's default?
Should this be false only on 1st? (I assume this is just for the next 2nd case, right?)
I was going to suggest that this was an anti-pattern in the past, but it seems like it should actually be moved to the `integration-impl.json` file. This would require the `integration-impl.json` file to be used with the `reint.json` file in line with all the other tests.
This should be a test so we don't have to force the lock.
What if we called this `if host[:platform] =~ /cisco_nexus/ && host[:user] != 'root'` instead?
I don't think you meant `global.googlesitekit.setup.authenticated = response.authenticated;` here.
We should also have a `missing-element` for this, right?
I'd rather see `if not isinstance(kinesalite')`, then we will not need to change this line.
please remove this and the following lines.
I think this should be a maxRetryTimes?
The `signedUserName` should already be used here, right?
I wonder if we should add a note about why we do this.
There is also a "if you don't want to check that theual is not set here, this is actually the same as the default.
This is pretty important, but it makes a difference in the test case for this. It's better to use `which part -o` instead of `go -h`
This is a nice nice candidate for using `// PutHash`, as `// PutHashHash` isn't really the same.
You may want to rename this variable to `bytesRead`.
shouldn't that be a `SetIdentityManagerFake`?
Is this needed? This doesn't look like we have any ogs for it?
Hmm.... that's the case here. Why not just pass `CircuitBreakerManager.newPluginInfo()` to `PluginInfo.class.getName()`. This is the same thing, right?
I think we should make this change in the future. Otherwise there may be some logic here that uses `QMetaType.Type` instead of `value` here. Also, this change might make more sense to be changed as the `QMetaType` is already in place.
How about `passing the same value as done in `NewTypedWriter`?
Line is too long. [93/80]<br>Redundant `self` detected.
i'm going to make it work with string.ToString()
Can be moved to some place where it is not used?
This looks weird to me, why is this even a pointer?
I guess `ConfigProtoConfig` can be static, it would be nice if there were multiple options.
I believe we are not using the original listener anymore as this is a good place to keep it.
Why not just `LargeApproved`?
Why does it need to be `False`?
Why is this change required?
This is wrong.
shouldn't this be asynchronous?
Is there a reason for using the `priv_getTransactionCount`? We are not using the one from the names of the `EMAIL_UUID` any more
@jackfrancis or @bparees this is the root cause of this PR, right?
I'm not sure what the best way to do is to split these strings into their own strings. Perhaps you can just use `Strings.Strings.path(network, e.g.,.,network))` instead?
It would be better to update this to `_update_item_message_to_item`
This was the only use of the `cStringIO` in `.py`
This is the name we need to be replaying, I think. In fact, we just want to make this name more explicit.
Should be 4.1.
This is not necessary because ENABLE_JSON_SERIALIZATION is set above.
Line is too long. [87/80]
I think we have an equivalent `DISTINCT` here
do we need to change params in `params` method? If not, can we move it in another PR.
can we make the claim private and just call it `NodeFactory`?
Remove #ifdef here?
Is there any specific reason why this is configurable?
Why are you removing this test?
I believe this is only a single place now that we don't need `ioctlUtil`.
Remove unused code.
you are missing a `||` here
Would this work if you put in ` ::WinRM::Connection.new(options)` instead?
`request` can now be `request` (because `get_requests` can also be set once for each request).
This one also looks odd to me.
I wonder if we should be more specific here... Maybe `show_last_words`? We could also use it for the `show_last_words` method, so we don't have to repeat it in the future
I think you need to also add a `onPreExecute` method to the `onPreExecute` constructor.
Is there a reason why we're not using `RESTRICT_ACCESS` here? Seems like it would be more consistent with the naming
This is also a bug, right?
If we're going to make these `GetConnTrackInterInter Camel Camel` into the `config` interface (which we can't really do) the `config` interface is only used in the `GetConn` interface. I'm not sure we need to introduce a new `GetConn` interface.
Do we really need this? Can we just use the `JSON.com. throwing.Transaction` here rather than the full `SessionId`?
Well it is not really the right fix here, but we should not log it in the message.
Should be `package.package`
This is just a nit. Can you put an `isApplicationObject` at the end of this function? It might be a nice place for `Quitea` to handle this
I think the original code should be changed to `get_storage_item_free()` and the result result in the same thing (it isn't done in this PR, I think).
Why are we setting the Caffe::GPU here? If we set that under Caffe, why don't we just call Caffe::global_set_mode()?
why `computed` and not `t`?
I don't think this is needed since it is a chan, you are just accessing it in `index.json`
It's odd that you are changing this line to be `",` instead of `",` for consistency with the rest of the file. It should be ` /`. Same for the other file.
Can this function namecur differently? e.g. `github.com/openebs/maya/cmd/cstor-volume-grpc/app/command`?
@mjkkirschner @jridgewell can you check if this is correct for `daal::bad_alloc` to throw a bad bad bad bad bad bad?
typo here, "to be able to"?
The new code should be done for a new library (as well as for `./scripts/`), so the `./scripts/` files should be moved to a new file (it would be nice to be consistent with other files).
Do we have to worry about this? When `number` is used?
What's the use of this for?
Is this necessary?
We're using a lot of `buildBinary` for these methods and we need to build them.
InMemoryExporter is used to hold off the list of segments (even though this is a list of tasks), so I think we should add this as a separate JIRA for it.
This should be reverted
This is a nice cleanup I guess, so much cleaner!
Should the name of the getInstanceID be changed to the name of the public method as well?
Nitpick: I'd like to see the `.. versionadded:: 0.14` prefix.
Hm. You should replace it with `if op.product(index=0)` and reuse it to make it more verbose to the correct one. You can just replace the 2 params: `if op.product(TrimRows) ? 'deprecation') : : {`
This should be `strcmp(node->data.scalar, "default") != 0`
Is there some reason we're not using the `ImageID`?
I guess I should keep this in one place, because it's not used by any class. But I'm also worried that `getcsv` should be a nested class.
you probably should be able to use an underscore here
I don't think we need a separate separate separate logic for this. Can you use `unless` instead?
We should avoid code duplications like this.
This is a bit weird to me: `if not X_AC_DEFINE([DEEPBIND], [...]`, which is the case where I have no X_AC_ENABLE_SANITIZER) and so-forth`.
Could this have been renamed to `protoregistry.RegisterFiles` instead of the new one?
This class is only used in one place in this class, so it can be shared across all tests in this class.
no need to modify this file, if there are multiple ways to implement it already.
is it a public API? I think it's the same as in `config`
I don't really like having two different things, the dataverse is a part of `startsWith` and `Data` is a part of the message, so the code wouldn't end up with a single "exMessage.startsWith(...)
why is this needed?
Ah, I really feel like this could be in the same PR. I didn't see it done in the same PR as the others.
Is this TODO still relevant?
This is going to make a difference between `whenudging: nil` and `ChangeSet` because that is the default value (if it returns `false`).
Please remove the `//` on the next line.
I'm not sure if this is a good idea. It seems to me this should be a simple simple `json:"Positive<byte>`
no formatting change please
`val_BATCH_add`, `val_BATCH_clear` etc. Also, `define DECR_BATCH_BATCH` etc.
We should avoid `writer`s.
Is this needed?
It's a breaking change. If you look at the changes to our API, the change should be reverted.
if exp.Target.StressChaos.ContainerName is nil, can we check it?
why did you change this?
Doesn't this change the result of `getpvc-default` in the `Jetpack_` method? I think it would have been cleaner if we could just remove the `get` in the `default` method.
This is a bit unusual to read. I would have put the conditional before the if, but I'd also like to see it be also in the message in the message.
suggest renaming to `transformer.transformer` or `transformer.SliceSlice`.
I am not sure how to do the `startActivity` here, it will always be false if the `{offset}` in the `startActivity` method is called on the first `bindable`. Could you also make the code in the `if` and have the check `return false` in the `if`?
I guess it is safer to check `check-<something>` in the UI to avoid potential conflicts.
Please, fix typo in this file.
The other way is to use `str(1)` (and the test is `2c-2c-3.5-2c-2c-3.4`) instead of `2c-3.4` here.
Why not just add this to the `omitempty` field?
`if (timeZone)` instead of `if (timeZone)` for consistency
Should we do the same in `pvc.Spec.Resources.Requests` as well?
This should be `final` and not `final`.
Does this change the behavior when the version is changed?
I really doubt there are any tests using this?
I think this can be changed to `text` as it's never used. The type is not used when the field isn't found. The `text` field will return null when the field is empty in the array and it will be removed when it is null.
Shouldn't this be `endsWith(ClassOrInterfaceDeclaration)`?
why not just do `CommonExportProcessorOptions.get = ExporterType.IntExportProcessor(CommonExportProcessorOptions, default)`?
Can we remove this function entirely? The rename to `RecreatePipedKeyRequest` is a bit misleading to me, since there is no guarantee that the feature is in `RecreatePipedKey`.
I think you could change this to "For example, this line will be removed entirely (and others like this).
These seem to have the same meaning as in `ref`... why not just pass the `ref`?
This should be set as `datasetService.createcudatex(datasetVersion, fileMetadata)`. This is a test for `unknown`
This one also needs to be `cliquet[None]`
It might be better to make this more specific, like in DynamoCore, rather than making the DynamoCore as a field, that will allow you to just remove it from the FUL if needed.
This field has to be set with the field in `json:"serviceAccounts,omitempty"` so we don't need to copy here.
this is the name `hide caret` not `hide._hide caret events` right?
this is a BC break
I don't think this is the right approach to get the bound bit from `acc` to `REQ`. The `ver` prefix is used, so I don't think it makes sense to keep it that way. The code that calls `REQ.ACCOUNT.*` to `CONThread`, `CONThread`, `props`, and `props` are used in other places. This seems like a very odd place to use it. In fact, I wanted to check whether it would be useful, but that'd be a more appropriate place for this. I would also rename the `acc` parameter to `REQ.ACCOUNT.
Can it be moved to the main go file if it fails?
why the remove config for this test?
I think it would be cleaner to also explicitly mention here that `cancel` must be `null`. The current behavior is that `cancel` is `null`.
Maybe it's worth to test that `first_quiz` is not nil? It would be a nice order of times but we don't need that check.
Isn't the precompressed used anywhere? Can't we be doing that?
Nit: I think it's better to put the class name `_NumCatgoriesNotSpecified` as it's not the type.
This can be just a one-liner.
This should be `@Deprecated`
Is this include needed?
I don't think we will need to update the `childNodes` param here as we will always update the `spec` field if the object itself is changed.
This could just be `"50*1024"` and `// +0 | 50 | 50 | 50 | 50 | 50 | 5 | 10 | 8 | 8 | 10`
why not move `master` and `mergeResponseFromShard` below to the `atively`?
@zombie I think you forgot about this one.
Maybe `mock_apigateway()` is a better name? Just like `bot_runtime`
It seems that `first_metric_only` is not an error. Maybe `feval` instead?
Could you move this to a new `QueryHandler` class? This is only used in one place, but it's easier to understand than a function. I think we have it here and in other places in this PR as well.
`float` is not necessary here since `scale_fixed_to_double` is always defined in `double`.
should we remove the const here?
I'm not sure about this one. Are you sure `step.values["name"] = std::move(step.name)` works? It should be always an std::move
I don't think we can assume that it's empty, but not sure if it's intentional.
I think that this could be a "error" error if this error message happens to the approver but not in the approver list.
This one was a bad copy-paste of the actual json from `stats["listen_count"]` but now it's no longer used in the list by a few weeks ago.
Maybe we should just remove this line
I am not sure if this should be `executiongenproto` instead of `executiongenproto`. The only reason for this is to be a `ecase` package (which we want). The current `jq` library would need to use to use `ecs` to use `ecs.executiongenproto` instead, but not to add `ecs.execution` for the other.
Why do you need to copyqr here?
Why this change?
This will only fix the missing `else` if the conditional above is true, which means we'll be able to remove this check in favor of the if statement.
I'm not 100% sure if it is intentional for the `if` statements to happen after an exception occurs.
Why are we using the constants for the types?
why would v4IPNet be nil?
Is this line what we want? It seems like in the current code it's not a detail, but we should consider having this pass a `details` object for backwards compatibility, and then we can change the current code for the `_set_cache_body` in the way we have the detail `get_cache_body` method.
The following two lines should be indented one space before the comma.
why is this removed? doesn't Settings.versions ever have a default property?
This is wrong. You are returning a string for `OrderedDict` if you want, you should not do that.
Is this really the most user facing thing? Or wouldn't it be enough to log the job?
I think this is not required.
Does this trigger if the output of the `if` branch has been deleted?
Does it make sense to use a `var row = null`?
I'm not sure how this is supposed to work - it seems like we are making it a public key? I'd prefer if we just need `[UnsupportedOSPlatform("browser")]` instead of passing the token in.
What is the purpose of this change? I don't see it being used anywhere.
This is a bit confusing, as you can't use ``reset``. If it's not not a correct, please add a ``isinstance(...)`` call that is more efficient.
I'd be tempted to set the default to GrpcHandler.Request, but I would think this is more efficient to do.
This is fine, but I think we should keep it as it was when the commit is determined.
What do you think about using an else here to be consistent with the else clause? This would allow us to return an `HDF5Error` even if `ADIOS_HAVE_ADPI` can be true.
nit: I think the name is misleading. It's a little confusing for the stack name. I think `id.id_part` is a bit confusing for this one.
I believe this is a typo
nit: maybe `androidKeystore_*` to make it clear what is already passed in this constructor.
Metrics/LineLength: Line is too long. [82/80]
this is unrelated?
this was a bug. The change from testing tests to `util.IsPromRemoteWriteWriteConfig` below already handles tests, and this is the test that was introduced.
This is a breaking change, please revert.
Would be good to have this as an `ICollectionCollection` instead of `UnHeaders` to avoid a double negation.
I think we can remove the prefix and use that constant from the other services.
"may not specify more than one provider type" -> "may not specify more than one provider type"
This is probably not needed anymore.
I don't think these are necessary. The same is for each row, but we should be able to do that in this PR
`user` seems more natural. How about creating a `log.error` method in this file? Or `user.error`?
I think this is the wrong place for this. You should change the 'Authentification' to 'Authentification' if you want to change the Authentication.
I think we should move this print to before the "absolute" block. I think it may be worth printing printing in the "absolute way" code.
why do we need the import here?
why do you set the default `ipsets` here?
This param is not used and should only be added in the `if` block
Since we are changing this to `position_MAX_RESULTS`, I suggest to make this constant a constant.
I think you can move this in the `spec/models/test_mode_spec.rb` file, and put the code in there there too (line 355). That way the tests can be updated too (as the testing will be a bit harder to read).
@dantleech Does this break compatibility with the `Rtpsve-config` file? The `cobuild` env var is used to be able to run the integration tests on this.
This is the `CRiOS` bit unrelated to the PR, but I don't feel like it should be a separate PR?
Why does this need to be public ?
I think this should be `if` and then the `dump_puppet_log` after the `if` below, otherwise the log message will be printed at the end of the line where `unsafe` is called.
I'm wondering if it makes sense to move the line to the `diffProps` below, instead of having the diff if we do not want it to be a diff. It's not obvious that we want it here but it seems this is the line that we are doing, and we may need to make sure the diff will be the same.
I would suggest to move this up as a check in line 226 above the check for the Reward case above (or the change in `foundationBonusP2StartEpoch`) to avoid the duplication.
Move `DropStore` to the top of the file.
You can do the `vcr` and not use `m.GetPaths()` directly since it's in the `if`. You will need to check the error, and the user may not want to call `return os.GetPaths()` after the `return err`
I don't understand what this is used for, are we sure the system config will not be ready for the bundle?
We should probably add the `format` prefix as well.
Why are we usinggo here?
this.prevFolderId_ can be null, right?
This seems like a better name. I'd suggest rename `clock`.
Could we use `finalize` instead of `lbann::finalize` here?
should this be m_ike(resuty)?
Nit: the type annotation should reflect this as its own param.
This seems to be overly complex. You can probably just use `capitalize.getCmd(upper[i])`, which is a bit misleading.
You can set this only if `equals()` is true.
I'm not sure this is the correct change. We have already added this.
There's no need to declare `StrIT.learnedColumns`, and it shouldn't be here.
It's probably fine to use `base.GetStatus` here instead.
Should we be checking for the `lockal` here? I think that it might cause problems in the future when we have two `lockal` and `LockLock`. If we're not actually deleting that we might as well fix this in one place: `LockLock` doesn't work, because `LockLock` is already present in `useNext` or `call` but that's not, we need to do something about `lockal` and `getLocking` because `Locking` does nothing if the lock is not already happening`
Is this just to remove the `extern "C"`?
Should the `err` here be a global parameter?
Shouldn't we throw a error here?
Please change all the public APIs to use the new method.
I thought the plan was to make the `Copyright` not to support it. But it's not that important.
I'm not sure if the "client" option should be in the name, because the "client" command should just not call the new `--upgrade-client` option, but if it is not then we should not rely on a "client" command that does the right thing here. The current implementation might be to make the "client" a general type, to avoid that, but I'll take a look.
Should this be moved to config?
We are returning an error here, so I guess it should never happen.
Can we add a TODO to remove the `NODE-3405` character?
can we put this in a `class="row"` ? I think this will not work for other backends, right?
Seems like you can just make `computed` the default `i18n`
I would return it here, just so we return the job_id
I think it's safe to remove the `.find("id, 1 << 32)`.
this is for testing only, right? should we be consistent in the docs?
Maybe `stream_data` can be used instead, since we don't need it in this module?
Can this be a separate PR? This method is supposed to be called directly in the main `tasksToEvents` function.
What's the impact of this change?
Add `@since TODO`.
I think `Interop.Base.Trace.MySqlCommand` is not defined here, but I can't see what the `IntegrationIds` does.
We don't normally have all the `server` imports and package, so this should be `void`.
I'm not sure if there's a good reason for this? I'd rather be more precise in this case and check if it is really needed if the feature flag is a different thing and the feature itself is a different for each one.
this should be a separate PR
Shouldn't this be better `if (Y) DEBUG`? Also, you are trying to move the `R` part of the `create_ibl_xfer` function into the `create_unsafe()` function.
Is the indentation level correct? The new line is wrong (see the other files).
Line is too long. [82/80]
Can we also include these variables ?
What's the reason for this change?
Shouldn't this be updated to use the same condition above?
Can it be removed?
The color should be an integer and the color should be an integer.
I believe that the following two lines are the same, and that you're modifying the cancel function. The issue is just for the refreshers. Is there an issue with that?
Can we remove the file entirely? I'm not sure that it is worth it since we're already using `Exported Types: !local`
This is an API break; it is no longer used.
This is probably the only way it's used is to add more info. Can we add some type information?
This can be removed.
This is a private function and should be removed if not needed - just use `literals`
`std::strtok` can be const and should be const. Also, this should use a function. You can use a function instead.
This is still not used. It should be removed.
please add another docstring
Why is this being removed?
I think this is the only change that affects this change. The only time I've started the command before I've used the `err` argument, we need to use `err` as an argument.
`self.force_empty_list = True` is probably okay for me
Instead of calling `WithInstalledTimestamp`, we don't need to know if it exists.
I think the wording should mention here that the new logic is not compatible with the current code and it doesn't really tell me what the purpose of this check was. If we change the method name to `updateProductNutritionFactsFragment` or something like that, let's try to figure out how to fix it. I suggest `addProductNutritionFactsFragment.containsInvalidValue` instead
I think it would be cleaner if this was called `users`. Also, it wouldn't be better if this is called in a list of `.list`
Line is too long. [92/90]
This is a bit unusual, I'd probably just inline the name.
I'm surprised you didn't write this at all, but I wonder if it's worth it to just check if the template exists and not actually constructing a custom template? (same question for the other one)
this should be `README.md` instead of `Intervalscribe`
This change is needed because of the `addLink` being called multiple times in the same process.
If I remember correctly, this is the only caller in `http2 streaming` that has been deleted by `flushInterval`. Is that a "bug" or something? I'm not seeing a potential `ok` somewhere that should be added to `http2` but it doesn't have an impact on `flushInterval`, right?
This method can return the `@return` and the `task` can be removed since we don't change it.
This is the fix. `RepoDoesntExistError` should be a function and not a class, but you have to call `RepoRepoRepoRepoRepoRepoRepoRepoRepoRepoRepoRepoRepoSpecError`
do we even send a bit to the default value in the API? if yes, we should just add it to our public API as well.
The new Config::get('app.debug', true) doesn't work here because it is the same config file that the new one is set by the Config::get. Can you move it into the Config-get.php?
Please avoid unrelated changes.
I think this is fine for now, but maybe I'm missing something or this is not an issue for some reason.
We have already have a check to prevent nil checks from being done in this function.
Redundant `)` detected.
Is this a change of behavior that we want here is a breaking change? If not, we could remove it and just use a different one instead of using the one for the dictionary.
We need to keep the `request.getTitle()` method. I believe the `request.isInitiated` method has the same effect.
why not log this?
@tgamblin This is fine, but it looks like it will still be an interceptor if it's not an object.
What happens if this option is not set, right?
Can we remove this? I assume that we now support `P.shard.GetShardID()` in `Token.go`?
`tree` is not a `contains` method. I would remove this line.
Can we move this import to the top?
The DApp `JSONJSONError` is used for `JSON_extract_path_text` only when `json_extract_path_text` is `JSON_extract_path_text`, and in the `new_heap` function there's a `JSON_extract_path_text` method. I'd probably just use `json_extract_path_text` here to be able to be able to use `JSON_extract_path_text`, as in `JSON_malloc_type()`
Shouldn't we have a `optimize` argument that does this automatically?
You may want to use `.size()` for the `size()` loop as well.
How does the `values` compensate here? I think it should be a separate function since `AppendBool` might be an instance of `Append`?
This seems unrelated to the current change, and I'm pretty sure it works locally without this change.
Should we add a link here? Or is that the exact link we had in the SDK
This has nothing to do with the other changes in this PR, and we don't need a separate config file for it. The reason being that we don't have a `config` key, but not for the config file, we are not using the `config` struct anymore.
Should be available only if target_types is true or false, in other words, it will crash with cf values
Should we move this to a dedicated util function?
Is it OK to change this? It would break someone's code.
This one doesn't appear to be testing anything... it would be good to remove the `.to be_true` check here.
I believe you can just do `_socket.IsClosed` in line 616
Please revert these two lines
This was the main code and I wanted this to be `f(err)`.
I wouldn't do this here. You should be able to import all of the imports from their own, which would then be imported once, then you can do so with the other modules inside the `try...except` block (which would be a nice way to avoid imports), and then you should just import it in the `__init__` block (which will cause problems).
I think it might also be good to add `@SuppressWarnings("unused")` for the description, since it's a bit confusing to have it there, and it would make sense to add this in here.
I don't think it's necessary to specify this (since it's a plot) and not a function, but it's not. I would say you need to specify the default, and then you can use that.
I think this may actually be correct. The child operation could be extracted to a new enum. The child operation is still incorrect.
I don't understand this line ...
This is not needed
Do we actually need this parameter? It seems `number` is used only at the number of retries.
We can keep the test case as well, because it can be used as "org.sonar.server.docs.orgname.artifact_name"
How about "competitive documents" ?
This is not the fix, it just stands for master.
This is not correct. It is the `filecoin/proofs` file.
I guess `MessageId` might be a better name.
I think this is an unused propertyID.
Thanks for removing all these!
NIT: should we throw an exception if `eHolder == nullptr` here?
I like this change, but this is actually not a valid solution
Could you explain this change? Also, why not `lt;'`?
This is the key of the form's `chan retrieval` but the value is `-1`.
Block has too many lines. [32/25]
You can just use the existing `TenentMaxLength` variable here instead of the old one (and I think its a little easier to read if they can handle this)
I'm not sure what this has to do, but why is it being marked as public?
It may be good to create some kind of race here, I think we might as well make it an `Newreplica` and return the right number of times instead of a trivial number of bytes. I'm not quite sure what this func is and what's the point of this function.
I think you could do a bit more descriptive here, e.g. `level::TYPE_DIR` or something similar to me so it does not have to be there
I think it would be better to just have a method `nonce <= nonce` and have a local variable `watches` that calls `nonce` at this point
I don't think you need to check for `data` here, either you can use `atcluding.ShareExtension` directly or you don't need to check for the value
Is this field available on all the formats?
This is the only place this is used, we can remove the `PublicHeader: GetLength` part.
`Character` can be omitted from `Character` and `Character` as well.
`isRegularInterface` is not necessary, as in the constructor.
Shouldn't this be removed as well?
this is unrelated to the PR.
So, it is possible that if the Status has a `Status` as first parameter, we will end up with multiple listeners that are used. This might be a good place to change it.
Can we add a `worker_keystore` entry in the `cleanup` block as well?
`raw` is now an unused variable name, can it be removed?
This should be a function, not a boolean parameter right? If so, this should probably be done in a different PR.
All of the other `newBuilder` methods have `CustomerCustomerTask` which is more readable, is there a reason why this was moved?
This is not needed, we can use the class name directly
Would it be worth to put this as an `break` at the very end?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is fine to add, but I think that the type should be `Optional[bool]`, which IMO is useful to be able to determine if the type would be `Optional[int]`.
The `all` folder should be moved to a `mongo_tests` namespace instead.
Since you changed it to `goog` you can also change it here and below
I think this is not a good idea, because the host/tag link is used to send the host to the host (which is why the host is processed?) and the link is in the install() method?
remove unused imports
error strings should not be capitalized or end with punctuation or a newline
i don't think we need to change this, as we are not using it
I don't understand what `agent_weight` is for, but is this here for you? Does this have to be removed at line 167? And in this case it looks like you've added `sys.binary_cross_entropy_with_logits` to pass the `Order` class to `sys.binary_cross_entropy_with_logits`, does the same `sys.binary_cross_entropy_with_logits`, then. `sys.binary_cross_entropy_with_logits` is the only place where `sys.binary_cross_entropy_with_logits` is used
What does this test do exactly? It looks like it does, but the new test does not (with an empty string) which seems to be the wrong thing.
@larsoner I'm not sure this was the right fix. But maybe you have an opinion?
This should probably return a list, otherwise we'll have multiple instances of type `convert`s.
We can probably change this to `bluebird` to make sure the file name matches what's in `.spec.toDynamic(...)`.
Can you use `final` in this `if` statement instead?
I think `h2o_linklist_t target_link` is enough here to be consistent.
Please, add a similar description as well to what you mean, like I did below.
Trailing whitespace detected.
This will be much more readable than helpful.
The `apple-api` syntax is a little misleading. I think we'd want to have it at this point and remove this warning altogether in the future (as we're already on the fact that we can't have it at this point).
Do we really need to keep the `ReadToEnd`? Why can't we rely on the implementation that is passed to `Outputs`?
Looks like this logic can be removed as well
I don't understand the purpose of the function. What is the reason for changing it?
Is this field visible in the web host?
do we need `t` here? can we use `stage.WaitWait`?
Please don't change this
This is not related with the other changes in this PR, but it is a separate thing that's not related to this pr ...
This looks to be a constant.
I think this can be left outside of `on_external_failure`. The reason that it's passed in is that the `expl` argument is not in the task's `external` constructor.
Please add a space after `:`
`pygment` will be set to false in Python 3.0.x but that is not needed, because it will be false by default.
I'd like to see a better name after this variable, like `MaxSubs`
This is not needed anymore
Redundant `self` detected.
Can we just make this retry configurable? It seems it is used in the schema and it seems that we don't need to connect to it.
I would rename it to `VERSION` now that #1983 has been merged.
For these two properties should have the nameKey property passed to the constructor as well.
we should not need `@configuration.fail_if_no_examples` here
I believe this is still not correct and can be just `Blockly.FieldVariable.prototype.referencesVariables`.
I think a `TryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTryTry
I don't think there should be any uses of this for people who have seen seen that.
I'd prefer not making `platform` the same as `rule`.
Exit cannot be removed from this pull request.
This was changed by 2. It's a bad practice
@pgavlin, any concerns with the volume name? I'd be in favor of the special case, if so, I'd prefer a more specific name for this.
nitpick: I think that it might be better to throw an IllegalArgumentException here like the one in `Function[]` and avoid this NPE. I think we should add a `Debug.Assert(!..)` check to see if the class has to be nullable.
nit: you can merge both lines above as the last line of the two
This is a breaking change, because a pass has a reference to the `getPasscode()` method. Is this correct?
Line is too long. [83/80]
`shouldRepeat` is a global parameter but it should have the same effect as `@should` (which is why I was originally talking about this, so I could not see this being used outside the scope of this PR)
This import can be removed completely, it's only used in `mholt`
You don't need the `if` here, just do the `if` here.
This doesn't look right. We are using a global namespace to test a file. This is why the file name is a directory
Should the name of the member variable be called `Http2ExperimentSwitch`?
I think these changes are also related to the bugfix.
I don <msg> @jcotela @nvazquez are we OK with the `errors` import?
Nit: we have this as a bool and make this a local variable.
This is not the same as the previous version (which is now the same as the previous version). Why not simply remove `Flag.Equals(0)` from the old version?
Hmm, this doesn't look like it is used anywhere?
This is the only test that will be changed in the testing testing.
I would suggest using the `VUID-ASPECT_PLANE_1_BIT` helper here.
`add_to_sum` handles the same thing.
This means that the new default value for `systemdsystemgeneratordir` will be set to `gamegame.use_package(&: systemdsystemgeneratordir systemd)` which should probably be set to `game.use_package(&: systemdsystemgeneratordir),`
I would have put `self._classificationCompute()` in the same place where it's used (and then it's a no-op)
I wouldn't call this method `methodInitCode`.
So `startTs` is already initialized somewhere else?
Could we put `rect` under `tabindex` as well?
Do you need this here?
I think it's better to remove this line. You can just pass the parent object.
Please, make it a `Broadcast` with `Ember::TYPE_MAX`.
These two functions don't seem to be used to pass the callback into `app/workers/search.html.erb`.
`self.NaN` is not a correct name. It's `0.5` but the compiler is going to be able to see it as a number or something.
Why was that changed?
Please use `dev_tricks` instead here. You can define your own rules: `run_tricks`
Is this line dead code?
This is the most common Delay solution.
This should probably be set to `""`.
why is this a pointer? shouldn't this be a pointer?
Please use `__DIR__` with an file for `file_exists` as well.
Could write settings file be nil? It is a very general place where we are not saving every single file. Maybe having a hard-coded `app.moneroCompleted()` which is more appropriate here.
Is the docstring going to fit on the one line? If not, can you please add a new line before the docstring?
Maybe we should just remove this now that we don't have Dockerfile in the `__file__.py`?
I don't think this function is used anywhere, or it should be removed.
I have no idea what this is and for @group_level to always be 0, but if @group_level != 0, then the level is not needed.
`SparkServiceServiceUtils#package`?
This function has a couple of lines above (line 148-5) `get_notebook_data()` and `notebook_path`. Can you please extract this function to a function?
Layout/EmptyLines: Extra blank line detected.
This is a test function that will run all tests on master. It will be hard to debug.
I'd remove this.
@bvanessen I'm curious: What's the difference between `--build` and `--build` in the exception, does this help?
In the case where we set the treatment we're not setting, I don't see how we can proceed with the app.load() - as we do with the transaction we have, we'll have to wait for the "max" bucket to be in, and we don't want to have to wait. In this case, I think we need to ensure that the owner is not set.
This is not the case. This is not correct. The problem is that there is no `from string import ascii_lowercase` check which can be removed from the `if '+tercling'`. Can you please change the import from `from raiden.externals.ascii_lowercase` to `from raiden.externals.externals.externals.externals.externals.externals.externals.externals.extern.externals.extern.extern.js`?
The console.dir was never never used and it seems to be no longer used.
I would prefer to keep this in mind, but I think it's worth having a look at this code to see where it might have been used...
I don't understand why you need to change this to `traceLog`? I'm not sure it's the same as `MediaLibrary`.
Should it be `EnableAdminApi`? It's a struct and not a string.
remove it from line 188
It's not possible to return a connection that is being reused here, but rather then never use `KeyILILIndex` in the map itself. This code is used in a `KeyILIndex` class and it seems like you should just be using it in `Helper` to determine if the object is not a primitive.
Why do these need to be added in this PR?
It looks like all of these tests are also using 2, so I would use `valid_tile_urls` here.
As a general rule, we could make this part of a separate method. Since we have a number of places we have to change this to just 1.
why is this changed?
this is a test, not a f-strings.
Please don't change that.
This file is unused.
do we need to keep the reconcile if we have the reconcile config?
Could be made a better name than `getClientConfigImportModule` for clarity (in general, let's be consistent with the name of the config).
just to double-check, this is necessary for other versions already.
@bparees @jridgewell Is this the right place to update all of the methods here to use `_agreedCapabilities`?
Does this mean we can remove the nil check?
This doesn't end up in the DOM (see the View View View View).
This looks like something that should be fixed, or is there a way to do this without introducing a new dependency? Or is this a breaking change in the code?
I would prefer to do something like a `InvalidUpdateable_actionable` or something, since `PostUpdateable` is an `InvalidUpdateable_actionable` property. We can use `save` instead of `actionable` when in this case.
We can probably just delete the `assert` now.
nit: remove empty line
Do we ever want to do this? I thought the risk of this was a missing version of `CATALOG_HOST`
This is the "update state" part. The previous code already sets the "state" as a "state" and not "state".
Why change this line?
nit: should this be a `**kwargs`** of to the `sequence` in line with the rest of the function?
How do you catch this kind of utils? Should it be `InvalidFunctional.supported_data_formats`?
nit: `final` should be on previous line. Also please use `Expression.final`
Do we still need it? This should allow for everyone to set an empty string.
why did this go up?
I think `from kinto import __version__` might be a good place for this, too.
why change this?
Do we need this? This will cause the message to be logged on the `properties` interface but not on the `@QueryForm`.
This is a bit unrelated to the main bug here.
Debug field shouldn't be changed. You should be replacing it with `DebugSimulateCalcConfigHangAfter` as the other stuff in this file.
What about a different `verbose` here? We should say something about how to do that (as we can think)
Please remove the method
I'm a bit confused, is there a more general `import` here? It looks like it is just for the `storiesOf` case.
@wachterjohannes Is this still relevant ?
In other commands, we use `key` for array `key` but not `key`. Should we have `key[0]` as well?
should this be `hooks = param.HookList(default=[], doc='=''` to avoid code duplication?
I don't know if this is the right fix. I'm going to try to avoid if possible
this is needed for all controllers that provide the `teachers` table
This can be removed.
Maybe this should use `isSymbolUsed` to return an array of the class (in `SymbolUsed`, not a string).
Is there a specific reason why this check is needed ?
Should we do something similar for `ec2_client.py`?
I think you should be able to get the `undefined` value here
This should be removed
Doesn't have to change this line, it's unrelated to the change?
I think this is not correct, the issue is that `opt_port` is not set when `port` is `opt_port`.
The "Register" type has been changed to "codec:"spend"? It was only used for the "re-key" section, and not used for the "re-key" section
I'd use `time_float` here, not `float`.
Nit: Can you use `isinstance` instead of `isinstance`? It looks like you can use `zdb.is_stack()` when you use `KOALAS_USAGE_LOGGER` instead of `park.sql`
Where this one is used?
Can we remove the link from the filename? It would have been easier to see that there are no other components that are mutually exclusive to the user.
@becker33 this may cause Travis failure if a subject_table fails or even without a unique command. I'd prefer a different function: "return functools.partial(self._filter_signals, signal, *args): ...".
nit: you could just use `(warn, box)` and then just `warn`
I don't understand the logic here. Maybe it's possible that _like_ the field _after_ the index is not initialized, but _like_ the field_, this field should be a property of that field?
please make `m_device_extension_names` an example of how to handle this
Please use `String#Equals(String, StringComparison)`
Since we've already done `<br>` there should be several `<>`s for this line. Also why not use `<div>` like you use in the other `text`s?
This was the reason why `Series` was left as is for a reason and we can't use it here
`Uri = PhysicalLocationComponent` should be removed.
this is not used, it may be better to make it an optional
@mrunalinikankariya can you please replace this line by `t.expFeeFactor` since it is the only line that was previously included?
Put this in the controller for consistency?
I think this file will cause issues with the domain name. I'm not sure how to solve this. It should also be a separate package for this PR.
This should be `new Email(['message', 'used', 'E-mail'"`
I think it's safe to not do an `map` call here, because `DynamoModel` has a `listNodes` that does not have a `listNodes` type (i.e. have a `MapName` with a default value)?
`constructor` is the default method that can be called without a `getRegion`, so the `null` value here can be returned.
How do I know why this change? This was a gofmt thing.
I'm not sure if it's worth it. My understanding is that the `post` table does not exist, but the `use` statement is unnecessary.
The error message needs to be added
I assume this field is not present in the NodeStorage class?
Nope, it would be nice if this could have a type annotation in the type itself.
please also add copyright header to this file and spaces around '/'
What is `<%= i.e. trace.inserted?, t('re', :mlat => "#{trace.latitude}/#{trace.name},`?
I am a bit surprised this didn't get tested.
`this.exporter` is not necessary here.
I think it would be better to just use `assertIn('id', None)`, which is the expected behavior here.
I think you're already using the `ar ugugments` type you don't want to have it here
maxWidth: width * 2, maxWidth: width
What about the `orElse(true)` that we never call `toSource`?
There are a lot of different concerns here: 1. The user should be able to use a `force` field, so I'm not sure if it should be a `*`. 3. We want that to be a `*` in all the places we have it.
@jona-sassenhagen this was the bug. Please don't review the PR
Can we use `string.prototype` instead of `string.prototype`?
I think `set` is not necessarily a correct name. We can use a consistent description for what it is.
The test case below does not pass because of the `inMemory` above, so it's not obvious why this test would fail.
Missing period at the end of sentence.
@mramato do you remember why is this change necessary now? I didn't want to fix it in a separate pull request.
Duct'd break this line, if it's already the next line
This changes the behaviour of the converter, but the `s.Equal(2, d.NumOfCallToPayloads)` call below doesn't seem useful.
remove the import
I think we should update the doc string to mention that 'attach' is not present.
Why was this removed?
Please update line 549 to include the extra space after the open brace.
I think this was probably the way it was, we had to remove the `list()` function from here and it's used for more than one call to a variable.
I don't think it's necessary to make the info info info info in the logs so that it can be accessed from the logs rather than on every request (or at least on every info info info info).
You can use `sql` here directly.
I'm a bit confused about the variable names here... What about `STRING_var` or `filesystem_variable`?
Please don't make changes like this in the diff - it's not related to the changes below.
we need to move this to `tests_test.py` right?
This is the wrong value.
Why include `.h` and not `.h`?
I guess it's not related to authentication. In fact it should be `OptionalOrElseMethodInvocation`.
is this being added by mistake? can it be removed?
This won't work. I think you can do `if sys.version_info < (3, 3)` here and below.
This looks like a bad idea, but I think it's not necessary to merge this PR anyway. We could move that in a separate PR.
MakeMdID is already a part of the previous `rmds.MD` struct. Is this intentional?
Why not just move this to the `Word dependencies` package?
I think you forgot to add this #ifdef here
We should not do any change in `Dispose` as this is a public API and could not be used outside of the `Dispose` interface.
I would put the TODO in this line, it's not used.
I wonder if this is an error in the console. The `snapshotrevertHelpText` is already there in the URL.
I think we have to also print the `nil` case, otherwise we have to check the error.
maybe it's worth adding an exception if the batch size isn't an instance of querying multiple times?
why is this condition necessary? if `param_visibilities` is set in task and `after_task` is a value it should be set to true
nit: `Positional arguments are out of order,`
@LefterisJP here as `C` doesn't have `using` functions. I would suggest `SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in));` or `SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in));`
Why not use `host.size()` instead? Also, since you are here already, why don't you use `float` instead of `float`?
Should this be `ographicBytes`? If I read correctly, it doesn't make sense to be in the test. What if the test is empty and we want to test that the test has a bunch of empty string in some cases?
This is not needed, we should set the filename to `true` in the log message, right?
No need for a separate import of this line.
It looks like `source_vv` isn't an `data_store`. Is this going to cause an issue?
this is needed because otherwise the return type is different than the one below
TheseThese need to be wrapped with `chunk.h`, but I think you can use the same value for `chunk.h`.
This seems to be a wrong fix. When I read the code it should be: "Delete mark denotes whether it are deleted or not..."
is it OK? we are not using this in this PR
This is a little weird. I think you could just define a `bytes` instead of using a `escape` here.
Same here. If we're going to do it for the application, would it make sense to put the `always` attribute into the `Accountable` class?
Could this be `log<size, "unsafe"`?
Is this not needed anymore? If it is, please remove it.
I don't get this. It seems to be used anywhere, should it be removed?
rewritten. please, fix indentation.
I wonder if we should make this `try/except` now.
Was this just a mistake, or just badly?
Shouldn't these be public?
@mfojtik this is where the `Metric` class is called.
is that intentional?
I don't think we can get here, but the `tenacity` version was being added to the newer version. This is the default for RDN
Would not it be better to add a new parameter to the constructor?
I think `ClientSecret` can be null here.
Hmm I was wondering if it would be better to use `setProfileID( '')` here.
why is this removed?
Let's add a TODO here to remove the link.
Is it possible that metadata is nil?
If we're going to send the email here, why not just add the email to the `cart_notification_email`?
We don't use wildcard imports, please revert, because they are not used.
It would be great if this was done in one of the other tests, if we wanted to start getting a test in case anyone wants to test the data source that the test fails. I don't think this should have any impact, but just not sure what it actually does.
These are a bit of a weird word, I'm confused.
@jridgewell If I understand this correctly, this would be better as a check for `Menv.validate(throw)`. But I'm also not sure what that should be doing here (which is what it does)
can we avoid adding an extra argument to the `span_write`?
The `KafkaStreamRunner` has a lot of empty `KafkaOptionRunner`s, and I think that we should just have it return a `KafkaStreamRunner` here instead.
This is not the same type as the SszLimit
I think I told you wrong in which case the code should be using %w instead of "views", but if not the code will be executed automatically in the FULFILLABLE_FEATURES.
pytest should be pytest, not pytest
Could we merge this with `name.replace(k,v)`?
do we want this in the config setting now? I'd like to see the user-facing part of `-server` to determine that it's going to be an optional part of this setting.
I would just delete `await Task.Yield()` and call `Yield()` instead to save the task.
Nit: I would move this method to `FieldConfig` since it's only called from within `FieldConfigs`.
I think `auto space` will need to be changed to `autopro` now that you're using it here.
why did you add it?
Should probably update the function name to reflect the fact that this was a plain variable. Another thing to consider is that it could change the function that calls the function in the accConnsEventSubjNew.
As above please remove the extra line. Thanks :)
It seems like `\recBundle\Component\Routing\Router` should have been removed. Why do we have to make this change?
The test is already asserted when this happens to be true. Can you change that to say that's the case? The test is only needed if `is_merge_or_booted` isn't true.
isn't this going to break the loop?
Do you have the same mistake somewhere in the PR description?
it is <msg> if agent_is_crawler? is a little hard to read with a if.is?
If we can remove this line, it's the same as the one below.
I thought I had actually misread the old code for not using the new code. I've tried adding new files to your `Copyright` and I think it was fine.
> size * 2 / 3 : validators.Count / 2 [](start = 16, length = 4) `(>= 3) / 0` is unnecessary here, I will fix it and merge.
nit: unused import
Shouldn't we throw if `fields.add` returns null?
This should go back to the controlled controlled implementation, otherwise the Scorer field is not initialized.
why change this?
Use the new Ruby 1.9 hash syntax.
Why not just use `HTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTPHTTP
I think it makes sense to have a test for it.
Can this have just done a `true`?
Note: I'm sure it makes sense to also change the `block` and `sys.uint16` to `sys.uint32`.
No need to specify the effect of the Python 3 version.
This should be done after the `tm_cpp` call.
Why not using `executor.MAX_DIR` directly here?
only one of these should be wrapped in single quotes
We could add a `TODO` here. We can add the protected argument to the `Command` package.
Can we move to a new file in `mongodb-extjson` as well ?
`param_=""""` seems to be missing?
This was a bug, right? The HAVE_RSEQ was only used to run on Linux.
How did you generate this?
this seems unnecessary
Please don't change the name
I am not sure if this is correct, the only thing that may be used is in case it is an `wait_for_event`, which is now indeed not a thread pool. I think we should not call `dynamo_thread_get_clone_dstack`.
what if we added the `lambda_name` field in the list of the `result`?
Why do we need to import applicationVersion?
We should probably be using `&workflowservice.PollWorkflowTaskQueueResponse{}`
I am wondering if this is the proper way to get this behavior, and if we don't want `client_options[:read].read` here then we could get some error.
I'm not sure if `preferredMimeType` is the right choice here
This is a bit dangerous, I think it would be better if the `LayoutMap` could have a static variable `const` and use an `rmrmrmrm` instead of a local variable.
Let's use Svc.Svc.Svc.Svc.Svc.Svc.Svc.Svc.Svc.Svc.Svc.Svcvc.Svc.Svc.Svc.Svc.Svc
hmm. This is a change of behavior, right? so should we change this test to something else?
Is there a reason why we don't just always use the repository here?
This isn't necessary.
Could this be an optional field instead of a pointer?
This will need a Interop\ContainerInterface too.
I think I also had a `_html/docroot` before this change. I think we had a `DynamoSelection` that got `__dirname__"` that didn't work.
@RiccardoRossi this is public API
@pgavlin Do you understand why we remove the `node`?
I'm not sure that this is correct. Can we make it package-private and return the same value in the API?
This is a change in behavior that should be made backported as the default value.
Maybe we should move `log.action` to the top so it is not used in this file
Why is this necessary?
I'd like us to remove this flag, it's used by `set`/`set`/`set` because it's not a flag for anything else.
Shouldn't the tab icons be `$icons->secondary->icons`?
Why we need this?
This needs to be in `System.NET`.
>GetMethod [](start = 16, length = 7) Should we keep the check here for the `?.`?
Are these `<i` changes required for the C++11-XXXX?
This is just checking, but I don't see why we use `errno` for the return value.
It looks like the logic in `_package.get_path()` is a pretty big method, but it is very minor but it doesn't really matter, and it's not an improvement either.
`except ValueError, e: strftime("%a %l%p"`?
Would it make sense to set this to `true` in case the port is changed?
Is this an internal package? Should it be `pkg/internal/internal`?
I'm a bit confused by the type hint that the field will be not `null` if it is not? Or what's the difference between this and the two?
It's not clear to me that these two lines are actually solving what the issue is about. I would say the `_sdf` is not actually being used at all?
This should be defined in the environment variable, it's not required.
why not replace with `override_type(module_class)`?
This seems to be a different PR
this can just be `real_int`
I think we also need to add `view_view` field here as well.
This file doesn't seem to be used anymore
This is a change of behavior. I'd recommend a different approach for us to use `ex.getMessage()` directly.
@fowczarek why is this line removed?
I think this should be `:paste-primary` and not `:optional` - I think this is an internal function that requires the `clipboard "{}"`
Maybe we should create an issue to track investigating this?
@farrufat-cimne do we still need to make sure the metadata table is still included?
This is the wrong place for this. You could do the same for ` PlayerOnTradeAccept` and `tradeItem` below
Could you move this line up so it's grouped with the other imports?
Standards: Please add braces to this condition.
Just to confirm - Is there a good reason you are not using the `backend::lang` module?
I believe this will not work since `api.SpecNodes` is a `ICRegex` folder.
This will cause issues if the controller didn't specify a database (and it will be executed in a subsequent iteration, in order to load the account), but in the future we wouldn't want to have a validation that contains its own record, so we don't need to know for sure that the controller actually doesn't have a record. We could make this change, and if it works, we'd have to do something like `load_validation(account)`.
Is there a reason why you wouldn't just assign a globalRate to a 1f?
@martinhne just wanted to point out that this has no effect, but I don't want to know what the problem looks for.
Just an idea, we need this to be an array of async attributes?
What's the difference between this and Java? Can you post a fix? Why not just have `var username = MetricReaderOptions.finderOptions(exporterOptions, metricReaderOptions)` and use `var username = MetricReaderOptions.finderOptions(exporterOptions ) = metric.finderOptions.finderOptions( metric.finderOptions.finderOptions(configure(), metric. Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was Was
@danrot @danrot @danrot @danrot @danrot what are your thoughts on this
Why do we have a second PrivateUrlUser class for the same logic? If we are creating a new one, this will be the one that wouldn't work.
we should not have any unit tests for this anymore
Note to self: I think this should be a `log.infoinfo()`
Is this the only one that is using? If not, maybe we should just remove?
Why not use `google.golang.*`?
would it be better to use a `Set` here?
Please wrap the exception with the new message: `db.capacity.Info("setting db capacity to :", db.capacity)`
There's another lock on line 41.
Is this change necessary?
`Date#getBoolean()` returns a value to store the DBOpenHelper and never the max value for dbName in bundle
Is it really necessary that this returns the same value twice?
Can we use `typeTable.saveNicknameFor` instead of `typeTable.saveGenerate`?
I guess we need to keep the f strings in the same places.
This is causing the build failure.
I'll fix this in a follow-up.
This function is no longer used in the `nn.Module`.
`--eval` is the preferred form for both --nix-SubAS> and --nixpkgsVersion
Why is it not removed?
Nitpicking: it's not a IP, but a variable, IP, maybe a bit cleaner, maybe just `s/`?
If you look at this, I think the `enum` can be deleted as well.
I am not sure if it's the right place to do this. The `secondaryConfig` is not a general `ExecuteConfig`, so this would be `replicationConfig`?
Line is too long. [87/80]
This is not a bug, it is only for re-assignment of "empty" above, so it would be better to keep it, and change the condition to "write-missing" (and maybe the same for the above call sites) and check that its a "write-many"
`` with `black`
This would not return null if the user provides a null value, since this will never return false.
Did you mean to include this in this PR?
This is missing a test
Why not the `String` attribute and not the String name?
`} else {` or `} else {`
The zk method catchs zk is no longer required and can just catch zk without an zk exception.
I'm curious, why is this not just a video element?
you would want to have the body be the same as the block above as we have for the other cases (we have not many body body in this case)
Maybe I missed something, but this could be a breaking change. It's not related to this pr, but it feels like the other options are used for any other options.
@mattpap AFAIK you don't have a need to change this line.
you can't do this. This is a loop anyway...
Is there really really a case where this was `null`? Or is it just for testing purposes?
I think we can keep both lines for readability.
"Attachment is used simultaneously as two color attachments"
What if we put a `HeadLess` column in the `GoogleResponseContext`? Would it make sense to move these strings to the same constant somewhere in the `GoogleResponse` namespace?
No meaningful default value? Also I think if you want to use it then I think you can use "default to be empty"
I would like to see some unit tests for this, but I'm not sure we can import the whole `id` part at the top, I think.
This will make sure that `keyole` is correct, even if the user explicitly sets `keyole` with the default key.
Please change this test to use `.keys()`
Can we do this before creating your own reference?
Use %w or %W for an array of words.
Would it make sense to call them `Xxx_CLI_par` for better metrics? It's confusing in the code to use `metrics` for one metrics.
This will set the controller to only set when the app runs, even though it does not support existing app outside outside (which is what most of the time the app is running)
I'm curious how this logic would work in the case of the different types that are not `return new Date(json)` (the first line will throw an Exception)
Why not do `alignmentPlain32` directly in the `native` function?
`TaskCPUMemLimit:                     BooleanDefaultDefaultDefaultDefault` or `TaskCPUMemLimit:                     DefaultEnabled`? The latter is more consistent with the description for the variable name and is used in both branches of the class and the value.
Could you please create a `set` method?
Should not be needed
I don't think we need a separate class from our new `mysqld` gem. Can we just inline this?
to save some confusion, we use `destroy` instead of `TO`.
The tunnel will be NULL after this line, but it's not really a problem if tunnel is in the next line (e.g. on line 337).
missing a description
@larsoner I changed the order of the lines because they were changed from the `newLen <= 0` to `newLen`.
Why is this not required?
I think this should be `subprocess` instead of `mmffArom` as the other branch would be `a`
I think this needs to be inside the `if (data._attachments[filename])) {` if statement as well as the `if (...)` statement above, right? Otherwise, I think it will make the code a little cleaner.
I think if you use explicit version, will it be safer to use 'parser.validate' instead of 'parser.validate.'?
What is the point of GapicProductConfig?
I think we can skip the old logic if we're using the old one
Please use nodeConfig.AgentConfig instead.
Why are we changing this to a double. It is used in a lot of places.
Why is this a class field?
It should not be used anymore.
remove empty line
You can just inline this private, as it's private.
I don't think this line breaks the compatibility. It is still needed if `masked_heatmap = heatmap[y - left:x + right]`
Just curious: What does it mean for `string` to be `None` in the `.LastIndex`?
This was removed from the server, the only place this was used.
Why was this removed?
Does the test really need to be a valid path? If yes I'd like to test for this too, but not a hard requirement.
It's not necessary to add this into the `uppy-` prefix.
this is still not correct because it is `true`.
Is it worth noting that in a `function()` function, and in the `setTimeout` function we use a `setTimeout` function that has to be passed to the `on('click', function() {`?
Should this be `default` instead of `GatewaySolverEnabled`? The value is only being used for the gateway, so maybe that's not an issue here.
This is a bit of an odd name, but maybe it's just a bit weird. Maybe it would be better to keep it in the configure function in the method `configure` and call `getDefaultMessage()` instead?
This should be removed.
can you use the constants here?
Why is this needed? From the chat's perspective this looks like it is only needed to get the current node state. Can you make that change?
Should we also move this to the "apiutil" package?
This import should be removed.
IsolationLevel added here, or do we have it on Tuning Options, or do we have the same naming? Or was it not being used in Tuning Options (like in this file)?
Should we remove the interface from `SanityCheck`?
Isn't this a BC break?
Line is too long. [84/80]
This shouldn't check for `gather` but we may be able to check for `err` in the `else` case. If the user specifies `gather` and `err` and `read all` but they're in the same namespace, they can just read the snapshot and read them again if they want.
Please add a `LibraryList#test` method with this one to add the other Manager
Why are these tests not required?
What is this? Why not `entry.get()`?
I'm not a fan of adding an `--allow-add` flag, since the `--allow-allow-allow` flag is already in the `--allow-allow-printing` option.
Please revert this file, and the next commit.
I think it's better to just pass in a `config` object instead of a new one.
This is probably not the right way to do this so the CDN below should also include the stacktrace.
I think we'd better to use `WelchWindowFunction` here, because its no good practice to have to go through API review.
This function is used internally. It's not used anywhere else at all. You might get an error when using it and the func will fail.
Should we also set `this_col` and `this_col` to `undefined` here and then use `DateTime` in all of them? This will help in the future, but will be a follow up if you want.
Nit: This line is really long and is hard to read. The `typeof(int)` is a no-op.
Should be able to use `print(formula)`
I know that the <msg> I did do this, but I think it would be better to make this `!`
Did you mean to commit this?
We could just use `primary.pd` here, and below we
Why remove this?
Is `default` guaranteed to be default?
This is not needed anymore.
I don't think this is the right approach, because the `required` value is the required attribute, and the results in both `attr_value` and `attr_value` are not required as `attr_value['string']` are not required. We should either remove the `#` attribute entirely or make a `required_value` attribute `attr_value` attribute `None` and then do `required_value['string']` in the `attr_value` attribute. Then, we would not even need to add `required_value` as that would be the same.
If `+=` will run on each startup startup, we will also need to use `reader` as the last parameter.
I think it makes sense to put this in the `if (process.HasExited)` block?
This should say "the factory function called to create the <see"
Don't you actually need to make a new enum? I would think this is a valid option to use.
Why do we need this change?
why did you remove these tests?
I think you can remove this change.
This seems to be a mistake in the dev log.
I'm confused by this change. If you look at `attribute_change` it's not a attribute, you should probably add it in the docstring
Should we change it to `GetItemLayoutId` for consistency with the rest of the code base?
Add a docstring for this new parameter to avoid code duplication.
I think it will make more sense to use `getByWorkloads()` here
I don't know if it matters, but if we do change the docstrings, should we keep it?
nit: this call was to ensure the EGL image has been made to support a EGL image in some cases.
The other text here is `The name of the dictionary`. I would use `The message of the `deploy.`.`
Can you use type hints for `code` directly instead of `code` ?
Maybe we should use the same name for the `permission_KEY` ?
i think this should be called `ECS_SPOT_INSTANCE_DRAINING_ENABLED_for_in_user`
Add new line after this one.
I think you forgot the `else if`
Line is too long. [98/80]
would be better to use a `dict` type here
The default should already be `json:"type"` (which should be able to be set in the config file)
Why is this change necessary?
This is actually a typo
i'd prefer `signer` as var names instead of `signer`
Wow, I think this could be `!localize == false` and then the next line can be simplified this way.
Whenever we add this, we should probably add it to our own file, so that we don't need this dependency here
We have to change this function to accept an int for a reason. This function is only used in test_open_info.h, and it is also used for other functions with a parameter that would be a good place to change it, so it is safe to change in the future.
This should be `_migrate_bool(settings, 'scrolling.bar', 'when_searching', 'never')`.
This change won't make much sense. You're calling `sys.getfilesystemencoding()` before the encoding. The purpose of this PR is to remove encoding from this process. We should just make the default the first argument in `decode`.
This interface is used in multiple places and is used by the implementation. Could we move it to a separate file?
It would be nice to make the method public. But I cant make it so that it's unconditional.
`CryptoSm2` is not a pointer so it is more accurate to use `3D` as a default, and to more clearly indicate which decision to use. The default should probably be `client` and not `client` - that will make it easier to change and we can also use `client.Set("CryptoSm2")`
should this be called KeyChain ?
No need to do this here, just add `Warnf` and `Warn`.
See above; use `stepfunctions-` instead.
Please don't remove brackets :)
I'm confused as to why this is here.
Is the `if` here still needed?
I don't think we need this, we should be calling `.first()` otherwise we will not be calling `.write()` on the next step.
I think there is no need to specify a fake fake flag.
missing semicolon at the end
@bartonjs - Is this right or did you missed some kind of issue?
@DaanHoogland do you think we should use `output.append((Date) v).toInstant()` instead?
Nope, this should be in alphabetical order
shouldnt this be the same as the solicited?
Instead of a magic value, we can use a `io.prestosql.spi.Port.StringUtils#isIntrinsicPort()`
This should be a different check, since the latest version is a newer version, not version compatible.
This should be done with a call to `BaseMessageField`.
Why are you returning the struct here? I mean we don't want `map[string]bool` here.
Can we rename this file to `Server` or `ServerServer`?
How come the other error types are coming from?
Can this be removed from this PR?
This is an interesting thing to track. You could just use `List[go]` instead?
This will break any immediate test.
Don't know if this is a good idea. Maybe we should have a method that returns something that gets deleted if the user didn't specify it?
What about just using `.map { tag.rstrip.join(" ")`?
Is this related to the rest of the PR, or is it an enum type?
why removecorr?
Why the remove it ?
Is it possible to add a property to the `IComparable` type?
remove this blank line
Why don't you just add the `=` to the function in the function, and then call the function in the function from it in the call site?
This is a no-op, as the local variable is never a const.
This can be null
why is this here (and the others below) necessary at all? can we just have both of them return an error?
Why not just pass the registry here? It will allow the dedicate config to be set to the same value as the dedicate one.
This change is also useless.
I think this header is not used anymore
is this a change in behavior?
why did you remove this?
Nitpicking, but this could use a `_test.t` helper
This looks wrong and is not correct. I would expect that we always want to get a RFC2136. We should be doing this in a separate PR.
This would probably be better as a warning if the error is not handled, but we are trying to eliminate the "error_already_set" exception.
Can we remove this line now, since it's no longer needed?
Could we also use `LinkedCommentContainer` here?
we should also be careful on this.
Can you rename this to `metricNamespace`?
I'm wondering why this is not a global setting?
Please update the changelog for the new schema
I'm curious: Why do we need to special_ibl_xfer_tgt() here?
We could probably remove these `pthread_cancel` calls as well?
I know this is just testing the `USER_DOMAIN` property, but I guess that's the point of all of these changes?
I wonder if we should be doing that with the `disabled` parameter of `submit[disabled]` in case it gets empty? If the button is empty then this wouldn't cause an error because we're getting a `disabled` from the "submit" button. This would be a bug, but it will be cleaner when it is a `submit[disabled]`.
Would it make sense `sizeof(5)` to be consistent with the others? Not sure how I feel about this
Does it make sense to only do this if condition = true? This is essentially the condition will be like `typeof dereferencing an "correct" or "not" or "number" (or whatever you are seeing), but I believe this is what I meant.
What about using `:with_approver` instead?
I'm not sure if this is a good solution for this. The user could get a `enum` value from the XHR and use that in the XHR. I think we should just have it in the XHR file.
It looks like the `span` is never used, so can we remove it?
Seems this should just always be `true`
Nit: I'd prefer to keep this comma-separated altogether. And this is probably not necessary for now
Let's use the same variable names here as well. It's not used outside of tests.
This is unrelated to the rest of the PR, but it's a bit odd.
It seems this change could cause issues for other gas protections...
This is interesting. Isn't it good to have a uint8 warning here?
In this case this may change the result of `WithStamp` that we currently do with `swarm.NewChunk`, but I think it would be more readable and consistent with how we handle the `WithTagID` case.
This change makes no sense.
`Private` was added in both cases, but now `Mfs` was used in several places in this file, so now I've used `Mfs -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
The `new Type\Atomic\TInt` was removed in #2896
As far as I can tell, this field is called `vscode`. If it is, then we can remove that parameter from the `inline` list as well?
I think this is fine, but can you check if the config exists ?
I'm not sure if this will work with any go-go package.
Is it worth having `where T : struct`?
This is a bit weird, since 0 is a subset of an existing one, and it doesn't mean an existing one is a subset of a subset of a specific one (so that is what they want). Is there a reason why this is an invalid one?
1.0 and here should be 4.0
This is a bad idea. We should change it to `pin}"` in `kfs` if you want.
I'd suggest making `EncryptedHDataSize` static.
It's not the same as `blobblob`?
why are these removed?
See other note below. Would it be possible to make this change as well?
why not just call `rollback()` instead of `rollback`?
Why do we need to change the test here?
this makes me waffling. I'm not sure what a best practice is here.
Why not put the `hsh['verified']` into a constant? `hsh['verified']` can be done later, and be a bit more generic.
Why is this needed?
Can it be passed as keyword argument to this function?
I think we have to do this validation in the past, but the `can_cancel_form` logic is a bit confusing. Can just do `can_purchaser?` in the model and then use the validation method in the code below?
The config imates config estimates is already present in `tx.estimated_size()`. The `has_fee_estimates` check can be removed.
Can you please explain the reasoning behind the `s` check of the condition? It looks like there is a typo here.
Can we add a TODO for this? It will avoid duplication with the previous version.
Should we do similar changes elsewhere?
Line is too long. [86/80]
Use empty? instead of checking if the expression is in the array.
I think there is also a constant in `pkg/api/server/register_spec.rb` that will let us fail. Maybe we should not run it on this controller
I am not sure if the `password_reset` and `create` are necessary, as there are multiple instances of them.
can we move this to `require` package?
I think it should be an exception instead of catching the error that it's not called
If we are relying on the shutdown on the server it should probably be replaced with a new line.
Can we make the policy name something like 'Get(policyName, metav1.Get(2))
This is a bit disturbing. What if the `render` function returns a `List`, that is called `Start()`? In this case, the `o outbound` already has a `List`, and that's where the `Start()` method is called. I think it should be a little more readable.
nit: this should be `with...` not `with...`
This is a test case.
I think there is another place where the `=` is actually a `*` in the function, so you can't do this. <msg> I don't see a reason to do a `*-` before calling it here.
Why is this needed?
What if you make this `if`?
It looks like the `getLong` method is also deprecated. Can this method just return `""` here?
We should only add the pleasings repo to your project.
I think it is fine to add this to `user_client.examples`.
I think we should add a `NullPointerException()` to this one, as it is not really important when the mapper is empty.
I would have used version 0.1.avro here, but this one is not really fixing a bug...
Should we be using the int32() here?
Do we need to check that JavaTokenKinds.DECIMAL_LITERAL is not a part of JavaTokenKinds. This change is not actually true. Can you check?
Nit : you can merge this with the other stdlib imports
Do we need to test whether the `TaskUtil.SingleSingleFileOption` is enabled or not ?
It would be nice to have the `Itoa` command that calls it in a couple of places that use this command. I know it's used in all cases in `pants.go`. This will allow you to update these to use the `os.path.go` module. It will avoid adding a new command in `pants.path.go` that use it in other places.
I don't think we can remove this? The only thing I'm saying is it's not used in any context of other changes. The only purpose of this is to only do anything on the openvpn side, so this is not a problem anymore, it was just that I'm doing this now. I don't see any other changes to this PR, so I'd be inclined to remove it.
It's just a style thing, but we should be able to remove the line break here.
What is the rationale behind the old logic?
You need to remove `s.Noticef` here as `s.Shutdown()` does the same as `Debug.Assert` in `s.Noticef` and `s.Shutdown()` in `Debug.Assert`.
should be `timeLeftToClaimRefund`
We should probably add a TODO here to do this in a separate PR, but I guess it's possible it's worth it for now :)
How about we make it configurable? I guess that's not a big deal either way, but if it is, we could easily easily have it here.
I would rather do this in a separate PR, but rather a refactor refactor, I would have thought we had a separate PR in a separate PR, for this PR and one for now :)
Why not keep `libkb.py`? We don't seem to have to do it for both `libkb.py` and `pythonConfigToVect` in `libkb.py` but that doesn't really make sense here.
I wonder if the cleanup from #1085 has to be removed from this PR?
You can use `Long bitmask` here.
Is there a reason for not having `expect` in an assertion statement?
Is there a reason to keep the zoneID set to true when the zoneID is empty?
I would use `self.prob = prob.randint(0, 1)` for consistency.
what is the reason behind this change?
I'm not sure this test belongs here, I can't see it in the PR.
Please rename variable to be `final`.
Is there a reason `spaceId` is required here?
is this file still used?
For consistency, should we rename this to `coupon_id` or something similar, to avoid any confusion?
This should not be a breaking change, since this will be a breaking change for a breaking change and will change the behavior when it's not a breaking change. I guess in the context of this PR, it would make sense to keep that as `AbstractMessageHandler` instead? We might have the same suggestion for the API `DBPDataSource()`.
this one is the one you wanted. I think if you want to remove the log line, you should be able to remove it in the next PR.
nit: missing space before `,`
@Scottmitch why not move these lines into here as the `role` declaration above?
This should be the default setting. It is the default, and `seelog.xml` can be different in all the others, but the setting is a little confusing.
I am not a big fan of this. If I understand correctly, in this case it will always be zero (as it will fail to reach here), but if it's not, then the code will just be logged and this line will fail. So I think in which case we may want to move this code to `total_resources->time_left`. I'm curious because I see that we will not see `worker_start_time` in the `new_new_new_model` before it.
nit: `Unwrap` can be replaced by the `Unwrap` function since this is the only thing that calls this function.
this was added automatically to allow imports?
I would call it `houseOwnedByAccount`.
Did you look at how these use statements are being used?
can we just pass the param name in and then pass it in the constructor?
I guess this is still useful.
Can we avoid using an API change? I can see it's not a type safety, but I don't see an example of something that would be good.
I think you want a package for each main package? You'll need to make some changes to the package in the future. Also in general I think you can get a `bincover` package from a `Config` package instead of a subclass.
this file is also used in test-test-service.h
This line should be removed.
I think the intent here is to make client having `Client` `client` a `@private`. But it is easier to reason about.
`ref` and `IS_key_*` should be fine. You can simply `return null` and `ref` in the boolean variable.
Had to change to an `Detected-Locale`?
Hm.. I wonder if it would make sense for a `break` statement here, too.
can't we just use `w.StatusContinue = 0` in the call to `Sprint(string)` here?
Is there any reason to drop the `scripts/copy-groth-params.sh` param?
nit: I'm a bit concerned about having an option for this as well. Maybe worth adding a note that this is very specific to a command to track what people might expect.
Do you want this to be configurable? Does it need to be configurable?
This is not something we need to handle in this case. The original error is probably just an idea, but not an issue. In any case, we just use `clang-diagnostic-TLS` to let user know if we need to use `clang-diagnostic-'` for this case.
Line is too long. [86/80]
Why is this necessary?
This is the only change required to make this change more maintainable.
I guess this is fine, but I don't quite think we need to do anything with the new name.
This doesn't look correct.
you should not introduce a `ConfigHandler` param, since you can just do `journalPausedFromConflictForceForcePausedFromConflict`
This is a bug, we don't actually return anything here.
Why are all of these changes required?
Why the change?
Why is `safe-in` being removed here?
This is really nulled, and is confusing to me, and there are actually no places where this patch might have read from a different thread (or a few other places) and a few places below could use this code. So I've added the same code to the one that takes an extra set of lines of read/write a block.
this should be test-token-value. Should not we at least make it a little longer? Or is it not too much for tests?
Is this true only for non-null values? I don't recall if `op_data` would have null values :)
@nickytonline i think we should just not append this to the 'narel-typed' field and use that instead as in the case of an invalid `list`
I'm not a fan of deciding whether or not the value is a required parameter but rather a full()); name. I'm wondering if we should make it `raw` instead of `raw`
We're using the same file for authorization.
@zjffdu I am not sure this is the right answer. I have a PR going on, but I am not sure how to test it, I can't find where this is actually used, it should be.
Does this work? I assume you'd have to check for the existence of this
This file is not in the core right?
`current` should be `final` (and thus the rest of the function), no need to pass it into the method, because it doesn't matter if ref is null or not
I think this can be improved by using `<%=name %>` rather than hard coding it. Do you think we should use `%>` for consistency?
this doesn't make sense to me, is the expectation that we're doing this now in the test?
I'd use temp files and use them here to be consistent.
this looks like an odd way of creating new API.
Please also rename to `MoreObjects`, otherwise it'll be more readable.
Why mock it again?
Is this the right way to manage the ID from ID as a constant?
shouldn't this be on a separate line?
I would move this check outside the `if` block and use `joplin: false` at the very beginning as the method's name. This will make the code more readable when you call `process.argv.indexOf('--debug')` as the first part of the method.
id is not used any more? I assume it is a pointer?
I think you forgot to rename the function.
you can drop the extraneous `construct BucketBucket` here, it was already in the array
Why are we deleting this?
why does this need to be added?
@deads2k @kennknowles could you please check the difference between `t` and `models`?
What's the benefit of this change? `iframe.onload` is not used at all if `configure` is a `string` attribute.
Is this really the only rule? Should we make it an API to change it to have this rule as well?
why this use `Source.GetCondition` and the method name? is that really the name we're using?
The fact that we are not doing this is a bit of a bug in the test code. Can it be extracted to a method?
Use the new Ruby 1.9 hash syntax.
This seems to have no effect? Should be `if err != nil && err == nil {`
nit: `Boolean` rather than `boolean`
shouldn't this be in the `__init__()`?
I believe it is the place where theTask doesn't exist, I think.
why not create `finally` for the new function
I think this might be too much of a spec spec, since it's only being used in the `app/services` block.
why are we using json directly?
Do I understand correctly that there is an error in `ValidateFunc`? Isn't `ValidateFunc` enough to handle the errors we're doing here? I guess we can live with this, so we can use that instead?
@adamjstewart do you think you can add this to `typing.final` and then we don't need to do it for `typing.final`
I think this is missing the license header
It seems like the tool should only include the http server since we don't need to do a re-renders for the tool that we are now doing?
You can move this into the `spec` package with `list`
I think we should keep this list.
I would not call this WebDriverException, since this is a static class.
Is this new instance needed? I think it is already there.
I think this is the `src/com/hide/__init__.py` file for the `src/com/hide/theme/theme/runs/_module/runs/_module/bundle/gitea/Kratos/polypolyos/polyc/polylib/Udaos/polylib/polylib.h`
This should use `writeWindows` and the event should be set on the coordinator
This is a weird thing, the first half of the select `selectColumns` should be used to determine if `columns` should be passed to `fetch`.
I don't know if this is the place for this flag. I think we need to make sure it is implemented only when it is called on the client side (which should be the `Boost`).
Since this is `/Cisco-5`, this will probably be changed to `/Cisco-5`.
The `Secret` tag should be kept as well as the new version of the `make check`.
it looks like the 'slaveOk' is a param, why not just call it 'slaveOk' ?
This should be in separate PR, and also move these `*` statements to a new module.
Nit: You can add spaces at the end.
This is not really needed. The `stage` package will already have the `Table` package.
So now I see no bufferSize_as_ulong, but the buffer size and its size is not the same as the buffer size? Why is this change needed now?
I think there should be a call to `.map()` here instead of `.map()`?
Why is this necessary?
Should we just make this test test for this?
Why is this a special case?
this is not a problem. It doesn't look like anything should be fixed. Also, please revert the changes here.
This test case doesn't test anything, but I don't think is the right approach
I don't think this will ever get called when `IAMRoleCredentials` is called. Instead, please remove this extra arg and replace its usage by `IAMRoleCredentials` and call `IAMRoleCredentials.lock.RLock()` by called `IAMRoleCredentials.lock`.
why not use a `boolean`?
I'm not sure this is the right thing to do here. It seems to me this validation would always contain different elements? Maybe we should have one for `#create(:topic, topic)` and `#create(:topic, topic)` ?
I'd be tempted to have this as a `install` method so that it gets confusing in future.
What is this file about?
this should be `ExpectedCondition.getText()` instead.
The convention is to move these `go-cmp/cmp` imports to the new `keybase.go` package. The reason is that these import changes are because of the others are only removing the old ones. The other `keybase.go` is `go-cmp/cmp` because this file isn't doing anything. It's already in the `keybase.go` (and `keybase.go`). This would be a little more explicit.
Is there a reason we don't want to do this check for either `quoted-printable`?
Is this #ifdef necessary?
Why is this not a `diagnosticType`?
This field should be set to something like `private " requestReadReceipt = false;` so it doesn't matter. You'll need to add this field to all field formats.
E128 continuation line under-indented for line 75-29
Isn't this the same as above? I think we have a helper in errno_val, for the same reason as for for the case where errno_val is 0.
This change makes sure that all the new methods are being introduced without this change in `inputFileFile`
I wonder how much of the assumptions about the restic names we might want to use? What about using the `isic.TagList`?
This is a pretty big change. It will probably be a problem, but I don't think I understand why it's necessary to re-use it for a while. What do you think?
Why we need this function? If `BINClientConfig` is not defined and `objConfig` is always `false`, why don't we just change it to `Topics(hostName, tlsClientConfig, false)`? If we're going to change this function, we can use `dial` with `ConfigConfig` and `dial(hostName, `ClientConfig, true)`.
I thought that we'd better inject this into the parent class?
This test is also running on the `Condition` policy
Nitpick: please fix double whitespace
should be `confirm` or `confirm` since there is a convention of other things to use here
remove empty line
Is this used?
Can't you go with the other standard library imports?
does it make sense to move this up into the package-level `sonm-io` package?
This should use `errors.getProp()`
I don't think this is the right solution but I don't think this is going to work. If `left` is in the `HTTPSampler.port` it'll always use `HTTPSampler.port`. I'm wondering if it would make sense to add `from built-in import netloc` in this file? WDYT?
I believe this was missing a `.` at all.
Why is this a `log` rather than a `warn`?
If we don't have `FilterFilter` here, it could cause `squeeze` to fail.
nit: `err` should never be nil. I know it's already in `*Status` but it's probably better to call it out.
Should we set this to null for some reason?
This should probably be `getChromePath()`.
I think we could leave this as the default in case we want to keep the name.
`caddy.LogDestination` => `caddy.LogDestination`
Can you move this to the bottom of the file? It seems like this file is only relevant with `src/server` namespace.
Is this needed? `functWidth(452)` doesn't do anything?
SR isn't supported in CI yet?
Why was this change made to 3kb?
nit-pick: We could also add a method like this: a counter like "_second" or "second" to be more clear.
I think this should be `staging_tool_v1_grab_interface` I think
I'd rather have a `open_aire` prefix, e.g. `open_aire` and `open_aire` defined, to avoid confussion.
Is this a deliberate change to the test?
why is this dict needed?
should this be called `status_STOPPED(80)` instead?
@cra0zy - How does it work without the ` Provisioners`?
I think this is a leftover?
`STORE` should be alphabetized in the base class (see `render` class below).
Why do you need `#getKind()`? I would prefer to not add `# type using #getKind()` here.
this is missing the spec
Do we need to call this? What about `usb_VID`?
As discussed, the variable name is a bit weird. `vStringTruncate` is the `vString` and not a `old_len` but the argument name is kind of redundant. It seems like it should just always be a `old_len` (or something like `scope`.)
could we do this on the watch list of report report?
This was not needed?
This will never happen, since `MarshalECPrivateKey` returns a nil check on the test.
This is the change I just meant to make.
I think there should be a newline above this line
We need to use `log.is_open()` here, as for the rest of the code we use `log.error`
This is the only change.
Would it be better to call it `generate_special_` here?
Line is too long. [83/80]
We can remove this log line now that it's in a logs, since it's not really needed. The idea is this is to log a info log.
Why is this change required?
This is unused import
I think that the previous code had this before, but we should probably add a warning about why it was before the change.
This is not the correct fix for the bug. It's not the same as `playbackManager.currentTime`
I would make the condition a bit more compact (maybe even something like `'<something>"`).
why remove this?
How about adding a new method that does this method and calling `SyncFromEntityToDisplayDate` to set the default value for `!Array.get(this->dateConverter->convertToDisplayDate)`? We could also check if `!Array.get(this->dateConverter->convertToDisplayDate(null));`
Please use Vue.vue instead of Vue.vue
I think this should be just `float`.
I don't understand this change.
Why do we need to catch it in the exception?
@bvaradar I'm not sure if that's the right thing to do, since the `flb_debug` is a debug-only debug-host, right? I think it's probably fine.
nit: `rdl.Timestamp`, should follow the convention used below `store.DataStore`
What's the purpose of `BrokerTimeout`?
What's the reason of this change?
I would expect this to return zero. I don't know how to test.
nit: remove `arg_logical_size` from the function signature?
Why is this removed?
Is the log message here more accurate?
I don't think we should return 0 here, we should set maxBoundDescriptorSets > 0 only on line 146 as it can be a maxBoundDescriptorSets.
We might want to move this before line 377 so that we can get rid of the null-check if it does not exist.
This line does not belong here, because it is already the tables.
Not related to this PR, but I think we can delete this line.
What do you think about adding pylint disable lines above to make it easier?
Do we need to check that all the fields are set as input?
Line is too long. [86/80]
Why import twice?
Is this needed now?
This doesn't appear to be doing anything here. Do we need to do something about it?
Is this really needed?
@lmazuel I guess this is the right fix to the code here.
Should we include `s:` in the `CIDR` and say `s`. Also, I don't think it's the proper name.
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Why not use `srand ?? reset`?
Rather than just changing the condition, why do you add `&` to the `&` here? We should be able to just do the latter in the model and remove the `&`.
We need to make sure that we are not modifying the API.
Why are we changing the return name?
I don't see any references to this.
We can use an enum directly, not a const.
I know it's not your change, but it might be worth noting that it wouldn't be more efficient to use `var tracer = new ...`
Should probably be `toySchema.pre(['save'])`
Can you please add this back in, as well?
This is an unrelated change.
This is the only line changed in this PR
why do we need to do this if `tm` is not set to zero?
Is there a reason for the newline here instead of just the last line?
Can we move this to the beginning of the controller and move the whole index code?
This is the only change that affects TF providers. Can we leave it for now and make sure we don't break compatibility?
This change does not seem to change anything. It is not necessary to get rid of the "error" and is not a "fatal" error.
nit: `should record roundTripTime` can be removed
Is this the right place for this change?
This should be `errors.common`
I assume this is the only change that's causing the error to happen. Do we need this?
Should this also be a `const`?
I assume 10 ms is just 10 seconds?
Please update the import order
Why does _writeLock not exist anymore?
Should we also be setting it to `config`?
Why are we no longer creating the "schedule" event? The "send" event is also in the "send" case.
If `checkExprDepth`, maybe we want the return type to be handled. Otherwise, we will have to use that type as well.
Why did you change the assert to `message`?
I don't know why this was removed, can we revert it? @pgavlin, thanks!
This needs a migration too, since we don't load the icon anymore
I guess there is some indentation issues here.
Was noticing by the name of the print statement above but now it's not used anymore...
why is this not `wallet`?
The same goes for stopInfo.
is this change necessary? ` bodyParamName` will never be null, so we should be able to remove it later.
Can you make it dynamic?
Why is this necessary?
As with the above PR, we should probably have a "index" or a "index", and some of such things are just a few of the lines above
I would prefer to pass the `unsigned CountryField` as a class parameter to the `libkb::maxConfig`
This is an oversight and not a big problem, but I'm a little confused by the logic for this line (and I don't think this is what is causing the tests to fail). I'm not sure what the best way to achieve it is, but it's not so important to have to do it this way. @johanste what do you think?
`time_range` sounds like a search argument. Should we prefix the type to be consistent?
This is only used during a test right? Should we remove the if statement here?
I guess it should be "conn retries", since the retries is not exported.
I think this should also use a `cls`?
I thought we wanted to have some kind of issues with how the `ZMS ` is created here. Would it be better to add this to the constructor?
I'd expect this to set a flag, not a set.
Do we have a test where the test class is actually notImmutableEthProtocolConfiguration?
Could this just be `ImmutableList.DiscoveryField` since the name of the field is not a method.
This function is only used in `util.go` so you could just make this one `containerMetadataEnabled = dependency dependency := os.Getenv("ECS_ENABLE_CONTAINER_METADATA")`
Will this work on windows? I don't quite get why the compiler uses this.
I'd rather not call this `make update`
I think I would just say 'graphd.pid' or 'pids_from_path'
I prefer to use `4` since it's a very small number (and I don't know whether it's a number or not)
Why we need a different name for this information? We should use the same information in the UI. I would also suggest that we make the change in the file `models/log.js`
This is also a good idea, since the key is in the field for the key not having the key for the key.
No longer needed in `mock.py`
In this case, the code was working before because `_model` was created. In case this was true, we are able to call `.IF()` on the first element that is `cursor`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Nit: I would prefer `Debug.Assert(!_pinHandle.IsAllocated, "Ad-hoc memory block wasn't unpinned");`
Why are we changing the defaultValue to 0 here? Shouldn't that be handled by any other user?
Why is the `lodash` in `Wordorequires` still relevant? It's used by both the `lodash.js` and `Wordorequires` in this file
If this is a specific change we can move to an API call
There is no reason to change this line. I think the new behavior of the line was wrong with this.
Why do you want to return here? You mean to use `1`?
@nvazquez What's the reasoning behind this?
This is not the only place where we're using the `Query` - I think it's worth making it `Config["dq.Query"]`, which is more likely to be called with a non-static and a `Query` object.
I think we should add `auth` to `github.com/libopenstorage/pkg/correlation` as well, to avoid any risk of being able to pkg.
Why did you change `Message` to `null`? I think `Message` doesn't seem to be used anywhere.
Why is this being changed?
@bparees this was a bug - it should be a separate patch.
I would prefer to keep the old version, and add a new version.
Shouldn't this also check `cd.Status == corev1.ConditionUnknown`?
Is this include needed?
`assertThrows` or `assertThrows` would be more consistent.
Is there a specific reason for removing this?
nit: maybe use the `string` here, so that it is obvious what the string is.
we don't use the new defaults for this, I don't think we have any other defaults
Align the elements of a hash literal if they span more than one line.
I think we could use some constant for this, maybe `cluster.noop.importer_modules` (and similar below)
This should be a separate commit
Nit: Perhaps we could move this block somewhere to line 262?
nit: `prop` is ambiguous here, maybe it should be `change[1]`?
Is there a specific reason for keeping the extra flags as constants?
@deads2k @smarterclayton do you think this was added in?
nit: you could have a method that does the same thing
There should be a comma at the end of this line
If it is only used in the test, please remove it.
Why is this set on the previous iteration?
Please add `// TODO: Should we also remove the `// TODO: ignore` branch?
It'd be nice to have two more tests here to ensure the code doesn't change
@matt-gardner @mramato @joeduffy - is this an issue?
Why are you setting this to ` io` rather than `pkgs` to match the `Article`?
I don't understand the naming. Are you sure this is safe?
I don't think you need to set a `CommonParams.set()` if `getSearcher().enableFieldLoading` is false, because then you can call `!sreq.params()`
Could you please remove this empty line?
Do you have a test that tries to validate the file name is not null? I mean, why do you need to check if the file is null here?
We need to avoid using `.*`, we can move it to `.*`.
this doesn't work
I'd like to remove this function and just make `GetParserWithBuiltins` public in this file as it isn't actually being used in this file.
shouldn't this be `usingusingusingusingusingusingusing RHEL as true` and we can remove both `isMemoryCircuitBreakerEnabled` and `isMemoryCircuitBreakerEnabled` ?
This isn't going to work correctly, because deletes deletes is not already loaded with Java rows. We need to have some deletes stuff that is created to the rows.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Could this cause an issue if the category is a new field?
we should only do this if the user wants to save a snapshot for a user to specify a snapshot. I'm wondering why we would not do that in the service and letting user specify a snapshot in a snapshot, but not in the service itself?
why do we need the check for `HttpHeaders.CONTENT_LENGTH` here? why not just `valueOf(value)`?
The length could be null if the first element exists.
Please extract `#rules: ONLY` to a variable so that it can be accessed from both directions.
Why do you set the `eniAttachHandler` here?
can you make the change? this method is used to ensure this method is called every time we call the method. (we have a `cancelcancelable` method in the same way.)
I would use `req.Styled(universe)` here.
Is this needed? It seems to be missing a `double EPS`.
Nit: import sorting
If you change `std::string *error_code` to `const std::string(error_code, std::string(error_code, std::string *error_code)` then you don't need to `const std::string *error_code`.
You can just use a local variable for all `kPartsTable`.
why is this change required?
We already have `sdktrace` that is used for a different PR, so we don't need to make a `tracesdk` change that's fine.
`return [];` isn't needed here.
This wouldn't be a problem, but the next step of the new one would just not be able to compile the time.
nit: I like to have this inline at the top of the file, so you can just do `strings.loggable()`.
Use the new Ruby 1.9 hash syntax.
this is a change in behavior so it might cause other tests to fail.
why is this change needed?
I'd rather have this be `this.element.IsAsyncLocalScopeManager`, rather than making it an instance variable.
`ThreadPrefix` has already been released. Is this correct?
you need to change this : pushsync:
@tannergooding - I have noticed that I've changed the logic of `VUID-VkGraphicsPipelineCreateInfo-` in the past. Is there any reason you left it?
This is not correct, you should use `.TRAFFIC`
This is a breaking change for a couple of places. It would probably be better to do the same for `mount_volumes` because the `mount` is a different name than the `_volumes` (which is what we would expect) to work with, without the need to do this.
Shouldn't this be called `backgroundCtx`?
Nit: Add trailing commas on this line
Why this change?
why do we need it here?
Do we need this anymore?
This is not ideal. A better name is `-E-matches STRING` (or `--local-matches STRING`). What do you mean by `--local-matches`?
why not `// 10Mb + extra byte` ?
This <msg> This is an odd fix. The `isset` function is called when `is_active` is called. The `isset` function should only be called if there are no association in the `if`, but I'm not sure it shouldn't be the best way to do that.
Careful with the whitespace changes.
I'd rename this to `allUsers` because that's the reason the naming is changed.
We could move `options.verbose` inside the `if` block, since it'll always trigger a few lines of code, so we will always have a single `verbose`.
Use the new Ruby 1.9 hash syntax.
this needs to be `&& funder_id == org_id`
I'm not sure why this is being split across 2 lines - should it be an inner one?
this should also be `issue_args` and `issue_that`
These tests don't seem directly related to the ticket, so I left it.
This is also called from within fakeStorage itself.
Could we use `before_action` or `path_id` instead of `redirect_if_disabled` to indicate that it is empty?
@mfojtik this is a different bug that we use `Simple_channels` on the bucket.
You can remove this now.
Use 2 (not 1) spaces for indentation.
This should go inside the `if` block, right?
I'm not sure why we don't need this import now.
I think we should use the `if` here, otherwise the `0.12.6` will raise an exception.
why remove this?
`Logger` is not a `Logger` - is it the same as a `logrus.info()`? The same below
Standards: Please add a space after commas.
We can drop `setup_profiler` here since `setup.raises` is already `@setup`.
I don't see how it can happen.
@tnozicka this is where the package was removed from the build and we are now getting the package from the build.
Why not keep the `NULL` around?
Could this be `final`?
I would prefer statically to have all the more generic variables
What happens if the attemptsCount is not nil? Can we make that check against nil?
I don't think this import is needed.
The name of this file is `HttpHeaders`.
I think that it will break things, but the others are `<%= render_search_bar>` and `ort= render_search_bar`. I don't see where this is used, are you sure that this is needed ?
Maybe we could add `if originConnections.config.ConnectionsRateLimitingCount && remoteHostIsNonLocal {`
Is this a check for the non-null check?
why did you change this line?
I'm not sure about this. I'm not really familiar with this. I think it makes more sense to just put the auto_indexable_MAX (and check whether it is a list of variables), and also then use it in the `is_auto()` function.
I think we are missing some spaces here
I think this is a leftover from the debugging session. You should use `--with-index` or even `--with-index` if it's not.
This would be great!
What is the benefit of making this change to avoid the mws check? I was expecting a nil pointer to be used to set the correct version as an uninitialized version?
I'm a little confused by the word "reject" here. Do we have an "if" here?
I believe this was the actual fix to have all the diff here as well.
It looks like this should go in an `afterEach` loop and then include only the `getQuery` on the `getQuery` loop.
Do we really want to allow the default? I mean we can't use this because we are currently trying to get into the API's point in the context of a change in `gulp help`, which I think we should be consistent here.
I'm not sure if this property isn't really nullable and will be shared between different threads.
I think the problem is that if you change the logic in the client, it should be in the client, because `go fmt.go` can be modified to use `recepenpen storage storage storagepool.go` instead of `recepen storagepool.go`.
I think this is a breaking change. There are still some other config files which will need to use this value for the config for the `spack config` module. I think we should have a different name for the config for the config
I wonder why we have to pass these configs. We have a `default` method that is used for the corresponding `AuthXYZClient` controller. We can use the `AuthXYZClient` to get the actual policies from the actual policies instead.
This seems like a wrong name.
I'm not a huge fan of this, but it seems like we don't want to do this. I'm not sure what the right answer is.
Why not use `BaseDenseHead`?
Why does it have to be valid?
Why is this change necessary?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
It looks like this import is unused?
Is it necessary to set this to zero?
How about using `isDebugEnabled`?
I think this line is too long.
You can use a shorter version
Can be removed now
Should this use `responseWriter` instead?
Where is this being used?
why is mining successive appropriately?
why are you importing this here and the one in the next line?
It's a good idea to add `padding: 1` to the `get` method. Otherwise there's no way we could add `padding:` without the `get` method.
I think it might be a good idea to change the name of the option to something that's a bit more robust to say "use-starting-sequence-number" or something to indicate the purpose of the sequence number.
Should the check on `LockUtils::tag` be removed from this method now?
Why is this removed?
Please use the same imports as the imports in the CLI
We really don't want this file to include other plugins from the `../WebServer` FWIW I believe.
This doesn't seem to be used?
<!--new_thread; commit:3a4e9c6b4f4a7a5d8e46b3bc; resolved:0--> Which of these is intended? Do we need to pass translator to translator?
This is a little weird - why not `Field`?
This should probably be `rescue` instead of `rescue` to be consistent with the other error messages below.
I think we should move this into the `else` branch, to make it easier to maintain in the future if we want to.
Can we use `https` here?
shouldn't these just be `module.exports = siteStories;`?
Why is this removed?
This should be removed from `six.py`
We should not need to use `CompletedUtils` here, it would be better to use a `CompletedUtils` to get the `pathExpressions`
Is this `Batch` meant to be a `Batch`?
This is a breaking change. This is going to cause the server to crash if it fails.
Could you use a logger here?
We don't need this change? We don't seem to add `DateUtil.get("now")` on `DateUtil.get("date", this.releaseOrCreateDate)`.
is this not used anymore?
Can you add a space between `if` and `{` please. It's better to have the opening brace in a separate line.
As per the PR please make this `timeDst` since the field is not defined on the `Outputs` package
Does this need to be restored?
nit: this parameter name is misleading now, since it is an API break.
Is this the right place to change to take a double take in the current coder? Is there a way to avoid the possibility that keyboard is not available at all?
This is already checked in the previous if condition, I believe we should be doing this check everywhere.
I don't understand the cascade={... is it intended ?
You could just make these constants in `SystemProperties`.
We could edit the edit directly, and move this to the `tlsACMEAnnotation` package.
This should still return this array if the array changes in the method are not taken.
I think this can be removed now since there is a constant in `mne/utils/docs/webwebdb.md`.
If you add another type in the string, this may not be necessary.
I'm not sure I see why this change is needed, can you explain?
Why did you remove the #ifdef?
Is there a specific reason for not skipping the length check?
I don't think this `.Namespace` will work.
This isn't used
Is this `aria-query` needed?
There is no need of `internal` because they're being checked in line 288 (which is likely a big deal).
What does this have? Why don't we simply simply pass the trigger object as an argument to `slaTrigger`? If that is the case, we could remove it and `slaTrigger` directly.
I think this should be `gowire. DO NOT EDIT` and not `gowire.howv` right?
Isn't `false` the same as `QueryDeal`?
This is not right. I think we will need a timeout timeout if timeout timeout is 1, and timeout timeout will be 2 and timeout timeout if timeout is 20.
I think I'd prefer if the enum value was something internal.
This import is unused and can be removed now
I guess we can remove this since we do not support windows specific code
I think we should put this on the top of the file, so that we could get rid of this and just have it in the same file that we don't have to worry about about JSON being a module.
For the record: this is the only caller that we want to support? We're just taking advantage of the entire path. Isn't that what we want?
I wonder if we should return an error instead of returning a `ArticleableField` object.
Is there a way to make it clear in the `default` package, so we only add to it when the module is being used?
It's nice that this is a `onStartSend` in the context of the `onStart` API, not the `s2.4` implementation. The API is used for `RestClientSender`.
If the value is act, then it should be act.GasPrice().String()
I'm not sure this is actually an issue.
Is it possible to keep this simple code with `vk::RecbcrConversion` and just `vk::RecbcrConversion`? I think the code for this test is better than the `vk::externalFormat.IsFormat()` check.
I'm not sure if this is a bug, it seems that locally is still running against locally. Try. Not that we should make it more readable.
nit: test should be a static variable `assert` (or whatever you call it).
We can remove this line. This is the only thing I've been using is that if this is a package then this should be set to the empty string.
@deads2k this was not working before?
Should this be `// operations on locally mounted volumes` ?
hmm, I'm not totally sure how it would be. First we have a `/agent/bin:/opt/puppetlabs/agent/bin` but then it doesn't have the option to be changed from the command line to the help text (which I think we should do in another PR)
Is this change required by the new functionality?
can we move the logic to the beginning of function to avoid duplication?
This can be removed. The reason for this include was that this OSRM_EXTERNAL_MEMORY is now in the VS SDK, which isn't in the core SDK
This might be removed from the original version, since it is not in the database.
Nit: This line is repeated everywhere else in this file.
We could probably just have an `scale` field in the `destroy` namespace here, right?
Should this be an `else` clause?
Why are we passing this value to `Config`? Isn't that too general to use? We should add a note to that here.
@bflad can you add this to the doc block below to ensure this change is only for auth?
This constant should be a little bit bit specific to the normal lib/jinja-Occurred.
@jcotela is it possible to have `self.underlayer` as a string instead of `self.seq`?
This just seems to be an unrelated change?
I'm confused by this. Why do you have `using_mysql?`?
Is it possible to avoid calling this every time? Just because I don't get the idea of our partition adjustment, and can't be done in place.
Can we remove `activeFlows` and `activeFlows` ?
why do we need to handle this here?
I believe these changes were intentional...
This was just a typo (I was just thinking, but the `torch.Tensor` was still correct before.)
This is the same change right?
Why is this needed?
There should be a trailing period here.
I don't see any benefit to this being an array of `FactoryBot` in our test code which allows an array of symbols to have `let` without a `FactoryBot`. Can you please simplify all the test code to use `let` and `FactoryBot` everywhere instead?
I would suggest moving the URL to a separate method (e.g. `asset`) to the URL and having a single one called the `url_for_url()` method.
Why not use the default of `builtins`?
It's weird to have this for the target-specific code, but is there a reason you need to put them before the target-specific folder? I'm fine with that.
I'm not sure this is the right fix, because it's more of a problem in the rest of `timeout` (as we have a couple of other places in S3 and `timeout` isn't yet included in the tests). In fact, `10` is a `120` which means that it may not be an intuitive decision. I'm not sure how to make these tests pass here. I'm wondering what's the correct usage for `timeout == 10`. If we do, then this change can be removed.
I think the default should be `/var/utils/types.go`?
This can be removed now.
I was going to suggest to create an issue to track fixing this.
I don't think we should be passing the `indexed` argument to the `ServiceConfig` model. I think we need to remove this and pass it directly to the `Filename` constructor.
Why not do `if currentTime in currentTime == lastTime.CheckTimestamp || currentTime == lastTime.Timestamp`
This line shouldn't be here, the `short_version` variable should only be used for version 1.
don't think we should remove this
There's a few small issues here: 1. Add `screenConfigLike` annotation to `screenConfigLike`, 2. Add `screenConfigLike` at the beginning of it. 3. Add `screenConfigLike` to `SparkDelegateDelegate` and use that at the beginning to maintain duplicated code. 3. Add a TODO in this interface to do a similar thing.
Why is this no longer needed?
What was the reason of this change? You added a lot of the code that uses `2015` to begin with?
We should be setting initial head again, not set it again
Add docstring to show that it won't be used for breaking the code.
Should this be `int` or `json.RawMessage`?
It might be good to add a `cni_version.All`, similar to the one above and below
It's not clear what this is about. Maybe the import should be in the docstring. Or maybe even the `install` method can be removed?
Can we also add `NetworkService.create_graceful` in `src/vcr/vcr/vcr`?
Should we call this `Task`?
I would prefer to return an error here if HIPInternal is null.
@bryevdv to make sure you didn't specify it in the context. There is a way you can specify it in the context. This is also part of the context manager and it is more efficient to have it in the context of a specific configuration. I'm not sure about the best way to do it, though.
We should move `NoError` to `Stop`
Could this be `final`?
Nit: we could return a struct, like `defer` and make it a `defer`
>value [](start = 12, length = 4) nit: can you please use `?.Length`? #Closed
Is it possible to have this in a separate commit?
same as above, if theStreaming is empty, should we use theStreaming?
This probably should say something about the user. It should be possible to not remove anything, but it's not a hard requirement.
I think you can remove these if it's never necessary since they're both internal members.
nit: move to line ~96
Should we do a similar change in the `ConfigurationConfiguration`?
Should there be a call to `skip`? In the `build-system/skip` case, this could be merged as well, right?
Is this going to be a required field? It seems like we're missing a version?
Does this file actually need `pip`?
I'm not sure I like this change. It's the only way I was saying we have to do this, but it is not a bad thing to do so.
this TODO can be removed now, right ?
Just a style thing, I wonder why this didn't work. I think you're right, I'll be looking at the wrong string.
@danrot @danrot @dain is it possible to get your plugin via `normalizeIdentifier` from the `foreach`?
If we're going to go away from this model, can we just move the model model inside the function so all the time it's done in the model block?
Is this a debug statement?
This is a no-op, please leave as is.
Please add a newline before the `if` and the following `} if`
I think this should be `github.com/gocoverutil`
`(listlist, String, String)` should be used instead of a full list (see the other files too).
please explain the logic of this statement and why there is no parent argument there
What if we called this `user_hash_count` instead?
You are missing the `@out_variant` tag in your doc.
The TLSConfig will always include SDK client if `len(c) > 0` so we have the check in the log before it.
Nitpick: It would be cleaner if you just changed the variable name to lowercase.
This should be `make check`
If this is the same thing, should we use the constant from `block_processor_full_size`?
Please add a space after `,`
Can you check that this has been removed?
I think we should do this in a follow-up PR. We should make sure that it is only ever used by the one you need to fix.
We should not be returning FPGA_INVALID_PARAM here. <msg> It would be better to return FPGA_INVALID_PARAM within FPGA_INVALID_PARAM if we are doing a long.
This include looks like a typo.
need_unmap opcodes?
I think it's better to use `cm` for all models of Aval.
How many profile fields can we add more types?
Is there a reason to introduce this new exception? If not we should probably make it a function, since the existing logic would be to just have it there.
casting strings in quotes would be nice. How do you ensure this doesn't actually work?
Should we remove this file as well?
This doesn't seem right. I assume that the `v != null` is necessary?
No need for the `:m` since there are only single-line URLs.
The SVG is LTR, force text to be RTL or the text to be LTR. This should be fine.
This looks very generic, how about `AWS`?
This will not work. `make_command_info` is only available to the next query, so this will need to change to `store_handler.metadata_info`.
I don't think this is necessary because `exclusion_patterns` is not a boolean, and the class is not `full_backtrace`.
nit: unused
Why not `mproxy.project.mit()`?
I'm confused by this is why the `<remarks>` has been initialized. What if you are doing `<remarks>`? The return type isn't very descriptive about what is needed here.
why not import `PY310_PY_function` ?
why err here?
I don't think this needs to default to te. I think the best approach is still to get the last token from the source code.
Is the `assert` not needed anymore?
Is this still relevant now?
This test doesn't use single quotes.
This needs to be split into multiple lines.
This should use a virtual method instead of a parameter to call a method on `virtual`.
We should be able to run a validation validation on this. I wonder if this can be a problem in the `inverse-my-utils` package.
You can remove this function entirely since you're using it below.
We should probably make an overload of `AnnotatedCodeLocation` that will be used for this use case instead of being passed in.
I think it's not required, since it's only used to import the module.
The function does not return anything
We should probably have a better default value for this than `false`.
@fmassa Shouldn't this be inside the `if` below?
@Pearl1594 could you explain why this change is required? I don't see why it's necessary to ignore if you don't want to have a null value.
This line needs to be added for line 265.
This looks weird: If there were no date constants I'd rather not add the explicit type to the tuple.
This file should be named `KUBER`.
It looks like this `appErr` is the only caller of this object. Is that intentional?
This is a different test file that will be moved to the `Token` module
@smarterclayton are these two functions or just just dead code?
I think this should be just `default_Encoded`, `False`
The only thing I noticed is the `pos` here here - is that the default? I think we don't need that?
This is a breaking change, I don't think we need it any more.
Do we need to keep the old one?
This is unrelated but I think it's okay to remove this if clause since we have now resort to a different set of paths.
Does this mean the `REG_##reg` value can't be set?
The `mailer.feedback_footer_html` class is missing from the schema. Should we use the new `app/index.yml`, like we did for the `app/index.yml`?
Thank you for removing the space between the two lines and the closing brace now!
If this is only ever used in the `SecurityGroup`, we should probably be introducing a new field in the `Meta` package instead.
@jridgewell Could we have some tests that covering this? I think the `rometools` and `rometools` are unused in this file
We should add the info information.
Is a copy of `github.com/testing` out of the box box or is it trying to switch back to `logrus` when this package is run?
I would make the value_env an attribute, and do the same check for both (1) -1 and 1.1 in the case where value_type is not defined. This should be safe, as you did in the case where value_task is not set. I would suggest to just use `default_category->mf_variables`.
Are there any other types of flags we need to consider consider to use for more descriptive names? If not, I don't think we need to add `SubscriberSubscriber` here.
Could you use `f.close()` instead of `f.close()`?
I would just remove this line. Otherwise it's not really part of the PR.
Do we need a separate `MDServer` call for this?
Can use a `List<T>` type?
Should probably be goimports
If I understand correctly, it should be returning an error. Is this because of the error?
I think there should be a docstring that this is the one we wanted to know?
I don't think this will work for any existing status.
Why do we have to change this?
Do we need to make this change to avoid a "last mile" tab in the spec?
is this not needed anymore?
This is already done in `app/index.go` right?
I think this should be the key in a config key, right after we do the changes I have forgot to make in place?
We have to remove some of this and keep the same behavior as the default default in the system layer for the default.
Is there a reason for this field name vs just the system one?
Instead of "helper function" can we just say "By Banned" here and below?
@eerhardt I removed the check for Host.version_ here, since this PR is already merged upstream, we can't remove it
Please reuse the old code.
What if the `'' === $url` is present?
The `appRouter` should have been added to the common case below, and the corresponding corresponding case in `appRouter.js`.
Same here, I think.
@Pearl1594 I'm not sure that it is the best idea. I'd expect a `localVisitor` somewhere to ever get the buffer, but it's not a huge deal either way.
I don't have any context on this change, but it seems that the purpose of this is to make this internal and have the one from the host which is the one between the host object itself (and the existing one from the type definition).
is there an explicit `http`?
For a future PR, I'd prefer to use a name that has the `2018` name instead of a `name`.
Is this change intended ?
why not `Plugin`?
Hey, why did we have to change test?
Should the name be should_component_be_active?
This is not right. The code below is only written inside an `if (ret)` if the `options` attribute has been allocated.
sign_in_as azquez
Oof nice find! It's more consistent with the rest of the codebase than I guess.
I don't think it's good to have a separate `.toKeyCombinations()` for this property. It would probably also be good to go ahead and rename the `map[],map[], str]` method. The `.toKeyCombinations()` method to `map[],int]` on the `map[], str]`.
This should be in separate `if` block.
I don't really understand if we need `listen_count` here. It looks like this will result in different results in different behavior, but it should be confusing.
`transfer` should be `None`
nit: can remove empty line.
The subsystem option is ignored when server_command is defined. The sftp option option is ignored when server_command is defined. The option option is ignored when server_command is defined.
Please remove the empty line.
Should this return a `err` so it returns a `*`?
Can we use the pytest here?
This is the only change we have here to ensure that a %. is in a different directory. So I think this should be a separate PR?
We should add this to line 339 and line 296.
Please, and remove the empty line :-).
I am not convinced that `Spec.NetworkSpec.SecurityGroupOverrides` is a good idea but I think this should happen in the future. In fact, it's a good practice for a good use case.
`in_channels` and `out_channels` should take care of all of these options.
I'm not sure why this tabindex were removed. Else. Else can be removed. Not sure if that was intentional.
Thanks for the PR ! It was also a bug, I think it was just the last thing that was causing the build to have the selected name in the past. The only reason we need to have this package was to have `identity` as a package, so we should still have to change this file from `gofmt` to `gofmt`?
I'd prefer if you could remove this, since we don't need to make changes to the API's implementation.
This will cause problems if the user has `encode('a')`, but then the `b` list will not be present on that line. The original code did not do this.
It'd probably be better if we kept the logic as `if (eclipseFormattingEnabled(project)) {` then we don't have to change that if necessary.
Extra empty line detected at class body end.
Why the 2014?
I don't think this should be changed.
Should we do the same for all components?
If we're only setting this to true then we could probably make these methods configurable via `SetKeepAlivePeriod()` and `SetKeepAlivePeriod()` directly. We should make `getProfile()` be the only version of a method. The way we have a `createResponse` method is to set this, in that case, we should only be able to call it from there.
Can we have a test for the new utility function instead?
The transaction is always the same as the one with the `func()`.
The `blockIdentifier` is only used to set the block size, so we should just check if the view exists in the header.
public variables should be prefixed with `@VisibleForTesting`
We should be logging the error.
why not use `com/video/%s` ?
Should we also check if the `s/` is in there?
Should this stay?
Can you make this `const` for consistency?
How about just adding `msg` to the docstring?
Can we get rid of the annotation? Or just make it `checkstyle:VisibilityModifier`
I'm wondering if we need this block at all? I would suggest using `erase.hpp`, as the user provided `.hpp` before it (i.e. that it's a header) and then just use `.utility` in the extension.
This should be `fetchMock`.
Why can't this be `mFolder != null` ?
If we're going to do something with the `text_only multipart` syntax, does that make sense?
Would it be better to use `lower()` instead of `Commons`?
I think we can move this logic into `pkg/api/byte/processors/dummy_response`
why not the archiver as well?
why not do this as the `rootNode` as before?
How does this interact with the other plugins?
This is a breaking change. Can we instead have a default value of `.toInputFile()` and remove that method?
nit, remove brackets. If you prefer, use braces to remove braces.
I'm not sure we should do this in the changelog.
@jeherve - This needs a migration to remove the default option.
Wondering if this will break some code, but I don't think we need this, as we already do for future container creation.
I wonder if we should use the `alias` kwarg here and add the `windows` parameter to this flag? `lib/recurse` and `lib/recurse` should already have them, so we don't have to pass `recurse` in.
I would prefer to keep this as `clone`, if you want to keep the original behavior as possible, but that's something to think about. The problem is that, in this case we are going to do `clone(new_data, _kwargs)`. Then we don't make a change in behavior, and we can change the code. `clone` to just say `clone`, `xdensity` should work, but that should be a follow up.I feel like the same thing to me.
It's better to make the exception message a little more general.
Why not `The unit is KHz.`?
It seems this isn't used and can be removed
@jeherve do you have an example of how this would occur?
do you want to put this in the mock package instead of having it return `warn`?
why do you need 100312 here? should be 1000 + 10012
I think you can just remove the local variable here and pass `_sorted` as an argument to `_order`. You should just remove the call to `localServices`
Can you explain this change?
This should only be logged if the `cls.debug_port` attribute is set, and the `cls.is_same_or_empty()` check should be added to the `else` block below.
I was slightly surprised to see this `abspath` check. I think we already know we can use this value here, so the `intercept` is more natural.
Do we need this `EnablePipedResponse`?
Can we use `compact.now` here (and elsewhere) to make things clearer?
why not `flushcount` as we already flush it?
I think this could go into the `@Nullable` annotation on `@Nullable` (line 249). It seems that you can change the annotation on `@Nullable` to `@Nullable` and change all the tests to use it.
This looks like something that should be added to the setup...
Why not keep the original name?
I know we already have a call to addMapping, but can we add a TODO to add addMapping here too?
Is this a problem?
The conditional can be removed, because the variable is no longer set to `cgroups[subs]`.
Shouldn't the package be in core?
The default is to always be the same as the ` limit` attribute above, so you can remove this variable now.
I would rename this to `Tag Groups Tagging API`
Nit: No need to change this line.
I don't know if we can get rid of the existing code in this PR, but I feel a bit awkward to do this.
This can be removed.
this change looks ok, but I would have expected the same behavior as the `configs/include_bad_conf_check_b.conf` but I don't think there's a better solution
we can remove this
I'm assuming the "summary" and "summary" were in a few other places in the file. Is that intended here?
This is a temporary workaround for me - can you update the condition to use the first parameter instead of the first parameter?
@andrewkroh this is a change to the existing code, but shouldn't this be a change to the existing code? I think this is not right.
Does this need to be `IsDone()`?
I don't get how this function returns the right thing.
@jridgewell I don't know how to get the performance impact we should be setting these on the `nextSibling` fields. @alalazo: what is the difference? Is the goal to not remove the `nextSibling` fields entirely?
is this not needed anymore? it has been fixed by the version
It seems this method is called for other kinds of non-Create nodes. Should it be updated to be `CreateCounter`?
This is an interesting case where a ptr is nullptr.
Why does this need to be mp_writer?
Nit: This line needs to be added, I'll have a look at the PR.
`String#Equals(title)` is not supported in IE.
> If not specified: this is the best part to support a static method on the angular test suite, so we should add a TODO here to fix this: `ParentChildrenSyncTargetHelper`
I think this should be `self.available_slots = self.get("capacity", False)`?
This will probably fail in some cases, but I think it will break our `tf.T` package. You should use the `tf.Test` package instead.
I think the new version is already in `src/server/version.go`?
is this used?
This does not make sense since we're ignoring the entire `switch`.
I think we need to make this retry a number in the `retry` table. I think it's more common that it's going to do that.
Should we also use `runBpfUnitTest` in all tests?
We could make this a `type` statement for clarity.
This change is not needed as `file` is already included in `pkg/util`.
I'm not sure this is the right place to do this. I think this method should have the same pattern for the reviseRootDir (e.g. `context.getNewRequestRequest()`).
nit: update copyright year in header
Please add a space after `if` here to make it mandatory.
Can you also add this to the `Config` below, and the logic above?
is not the right type to be able to get it back? if so, should we remove the const?
If we're not going to be getting a `ReadPasswordTwice` password, does this mean we're just passing in an `Optional`? If so, how does that relate to a `ReadPasswordTwice`?
I think these changes are not related to the PR
This looks like a typo.
This doesn't have to be `GraphType`
should be `<= @var\narperimentsst - @confirmelrozenbach thoughts?` should be `EntityManagerInterface`.
Can you also add the `MolChemicalFeature::getPos` to the feature feature? There is no difference between a feature, but the feature should not be there.
is this necessary?
I would prefer to keep this private and have the default public statics. It is private and not internal by default.
The issue we're doing is just to fix the `v` issue, but I don't see why we need the `TODO` here.
How about adding a `Optional[]` to `metrics` here?
Should this be `dt.SetSetScale` rather than `dt.SetScale`?
Isn't this supposed to be modified for all verbosity reasons? Or is the name of the component in the middle of the component being performed in the constructor?
This doesn't have the `nameof(span)` call anymore?
I'm not sure if the time is right, but this looks like a bug. The requery runner is sending the content before sending it was cancelled.
this is getting getting brittle, the panel must be moved down to `connect`
I think this is a bug fix. We do not want people to pass this to `__del__`.
We should be able to use `r.Body` here and in all the other places where this function is called.
Should be `@param`.
I have no idea what is the purpose of this line, but why not just store the first one in `$before_args` or similar (or something similar) `$before_args` and then just have `$ `$` and use it to call `options.get()`?
Why do we need to change the `stpb`?
Do we need this extra arg?
Shouldn't we do the same for all the `main` implementations?
Can we just use `CanEnablePulls` instead?
Should not it be "project" ?
Metrics/CyclomaticComplexity: Cyclomatic complexity for flash.now is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for multiline lambdas.
This is wrong because `onResponse()` returns the `JsonElement` class, and the constructor will only be executed if it is not a `JsonElement`.
I don't believe you are supposed to check this, it is not possible to check it in tests. This is not related to this issue, because you are testing the value of `<%d>` in the tests. This is a test where you can't check it without using the value of `<%d>`
This is a typo.
Do you think it is worth to update the `updateOrderStatus` function to update the error code so that if the error does not exist, that will result in an error being printed?
What happens when `Errno::ECONNREFUSED` is `true`?
Do you really need <msg> I think this should be `project_cache_throttle_percentage` ? The project is not used and should be used as an option.
Shouldn't we call this `ListPowerSelectorEntries` or something similar so the caller can call the `request` method?
Is this a "default" type? I'd expect this to fail in 32-bit number in some ways, but in that case you would not need to specify a 32-bit number as the default, and it wouldn't be the same as the other types.
We don't need this in the view. Can we only add this one if we don't add in the dashboard?
**nitpick (non-blocking):** I know I'm going to update this string as well, but I guess it's a good use case for it.
shouldn't this be here?
Should the default be `true` for Windows Sysprep.
Why is this in `testing`?
Can you revert the changes to this file as the extra space between the type and the `=`?
Why is this constant being public?
Should we also check for `s.Txn.Src` if it exists?
I think the `padding` should be `->padding` since we're just closing the values.
This is a change of behavior. `random.nextBoolean()` does not return the `random` object. Is it the case? Is it possible to throw an `Entry` that is a `EntryEntry` type? If so this could just be `random.nextBoolean(name + " in dir=")`
I think this is still wrong. It's a case where `current_collection_id == NULL && g_strcmp0 (match_collection_id) == 0` and the check should probably be in the else branch.
This is an example of why the change was made to followings items. The reason why you removed the variables are not being used.
why are you passing the MS object to the compiler instead of using the default timeout? can you just make it optional and remove the constant?
this function is not needed since we are already in lambda_handler
This is going to be very hard to parse, why do you change the type from `Trace` to `Trap`? Can you change some of the other variables to `Trap`?
This has to be moved to `#lock` and `#lock` to be called from multiple threads. It looks like it was in a `cross` and it was moved to a `cross` method.
I don't understand why the "set" part is the only thing that is written to the user, so this has to be a placeholder.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Same as in the class.
Should the whole `ValuesEx` instance be marked with `[UnsupportedOSPlatform("Microsoft.Naming", " =>")]`? If so, I would recommend moving the whole thing to its own function and just delete the whole `ValuesEx` member.
This line can be removed.
You're using `crypto/rand` instead of `math/rand`.
I think all the changes in this file are not needed, you might just remove the `logxi` import entirely.
Could you use a named named `UNFF_common` here?
the indent of this whole section can be removed
This is a lot of logic that will require more than one config to be set, so I suggest to put it in a constant.
Since this is a `allowOptionalMappings`, it's a `ConcurrentDictionary` that's used below to refer to `allow-separated` and this is just that it is being used to the same entries for every single key, can we remove `allow-separated`?
`keep_object_channels`? Why do you need extra flags?
@Export() is deprecated. Could you please update the doc string?
You're missing a `createUDSServer` now that `tcpServer` is `null`.
This is a change in behavior that was just a fix for the `if` below - I think it may be better to return `null` here, but not for this PR of course it could be a bug in `if`.
Does this mean that the only thing you did is the `map` of the `this` state? Isn't this always going to be `null`? If so, why would it need a `map` property?
I don't think there is any need to have this here, if we're not going to send anything in the future, but we might want to add this to the base class so you don't have to make sure we don't accidentally enter the `.strip` file
I'd suggest renaming it `filecoincoin`.
Shouldn't this be checked in the constructor?
This looks like a bad merge error?
This is actually the correct thing to do. In a different PR, the `elihood` message was actually being overwritten, where the metric type was created, and then the `negLL` message was created.
I'm not sure if this is good or reasonable to do. If the token has a repr, the token should be a constant. It's hard to think it's worth it to just do it for any of those cases.
I wonder if we can simply ignore the `_context.Input.finally` call and just call `_context.Input.ReadAsync`, but I'm not sure how the `_context.Input.finally` could be used here.
Why is this change needed?
Let's sort these constants in the constants module.
It should be `PodRequestModifier` as it is used in more places than `CertificateRequest`.
This is not good, as if we will have to do this, we can fix the call to `IdentifierScheme`
I would use `break;` for the sake of readability.
is this related to this PR?
I would check for `!` for key !id, otherwise it's unlikely.
I would put it in alphabetical order.
This looks very unrelated to the platform checks and can be deleted.
This line is not necessary. You're using an "mCK" function in the code and it's already in place, so you should not need to add that line.
I am wondering if we should make this a private method or something. Maybe something like `layoutHelper.prototype.layoutHelper` or `layoutHelper.prototype.layoutHelper`
This is not a boolean, and so the value is false.
This should not be necessary to configure the deployment model, but only for deployment.
I think <msg> `Custom <msg> Auth Auth` is better but `CustomRouterAuth Auth` is a bit confusing. I think that `*Auth Auth` is better, but I think that it would be clearer to just `*Auth` and `*Auth` and `*Auth` methods.
If there is any view view view view, then why do we need the permission here? It might also be better to have a property that has the permission to set, and set this flag in the view?
this doesn't change behavior, we should change the type of typeof though.
Could this be `||` too?
The `InitAddress` parameter is already in the `InitAddress`. Is it something you've tried to do here?
Should the type annotation be removed?
Why do we set `self._zoom.fuzzyval` instead?
@kennknowles could you please add `Srm.Settings()` back in?
This is one of those cases where we want to be able to compute `chan map[string]Result` for `string`. I think if we do have both `chan map[string]Result`, that could be done in both `ResultResult` and `ResultResult` and it may be the same as `chan map[string]Result`, then we need to call `chan map[string]Result`
Can we change the signature of a `should avoid potential conflicts with the change? I'm a fan of a ticket with a `should not be immutable` methods in these methods.
Please rename function to `CreateConsensusModule` for consistency with other methods that return `Node.Blockive` if there are multiple.
@deads2k i'm not sure that this should be done here as the Unmarshal() function has its own `NewRequestFailure()` method. (And similarly, the other one could be removed.)
Why was this made static? The value is not null, why was it changed?
Is this change needed ?
I think you can just do `strings.Trim(firstLine, "\r")`
This method is only used in a test class and is not needed. You can replace it by removing it in a test class as that is the case.
This will still work if you remove the `info` call in the `configureLogging` block.
The `.spec.satisfied()` is a lot more expensive and I think we should change it in a follow up PR.
It may be better to return `null` in this case instead of a `null` check.
Looks like `value` and `value` are unused. Should be removed.
I am confused. Maybe `get_holdingpen_objects` suffice?
What happened to the pylint disable line here?
This could be `DEFAULT_shared` if it's not explicitly set.
return void?
Doing this is a very specific error code as it is used in a few places. I don't think we want to be adding this message to the user's log.
do we need to have this as a separate file?
All or most of this line go at the top of the file.
`\w+` would be more consistent with the other commands.
I think `s.getTimeoutError()` can return an empty status here instead of relying on a `Error` error being returned, right? It's a lot of logic that is possible but might also be worth noting that it should be the first condition.
In general, I would prefer the nc dependency to be used instead of the second.
I don't think this import is required.
I assume this is the only new `Iptables`, `Iptables`, `Iptables` is used for `tables`. I think that is the correct thing to do here.
I'm not sure this is a good idea as the package version is not in the package. The version must be changed to only show the new version.
Not really sure if this should be `final`.
This will fail on `colVID` when the value isn't set.
I'd say it's not clear that the importer is used as importer. In particular we should compute this on the UI instead of the importer. In the `computecompute` we should have the same naming convention for each one. For now, the `compute_service_account` option is used by both existing and new data structure and existing to all existing formats.
If this is a `<element>` element, should we rename it to `<element>`?
The tabindex will be removed. The tabindex will never be `-1` and will be ` -a href="-1" href="https" for <a href="https" part=1} ` -a href="https""For consistency with the word "in".
It looks like you're using the same function below, but you should put it in a conditional expression. Also the `is_vector` should be used instead of `numpyImage.CastImageFilter`
`NewSubWorkflowFromFile` is not the correct name.
Use `%(__time` for conditional statements.
It looks like `dataframe_input` is not used anywhere.
I'd prefer `*Block*` as `[typeof(BlockCache(typeof(this)` since I don't know if there is any way that we don't have to create any block in the future. @stephentoub
I think we can just remove the `st` here. I think it makes more sense to me
What is this not invoked in the middle of the function?
This is the only place where I could've made this change. I'm afraid this could be a performance killer, but I am not sure what the right answer is.
can we call this `OpenOpenog` since that is how the `OpenOpen*` annotation is coming from?
What's the difference between `when` and `get_subscribers_exists` ?
Line is too long. [83/80]
if (curSchemaSumary != null) then we should throw out the exception message here
Why is this removed?
This import should be above the group below
This is a no-op.
Shouldn't this be something like `callable-something`?
This change seems unrelated to your PR?
I think you can just remove this `explain`. It makes no sense to always call .get() and only call it once in `load()` if it's not needed.
Please don't add trailing whitespaces.
Why do I need this change? I think this method is not used outside this package.
what about `noqaqa=True` as I see the condition above on line 288 below?
Please don't update the doc.
why are we adding this to the base serializer? I thought we agreed to use the array with the explicit values
I'd probably go with "real" andI'm not sure if this is the right thing to do
why can't the `Identity registered` just handle the error message?
The `setPropertyID` property is always set here. Should we remove the ` propertyID` property and set it to `0`?
I wonder if you can simplify this to be a bit more `getNumAtoms()` method. That way we don <msg> naming it's a bit more readable for the next sprint.
why not use a logger with a message to filter out the id?
Block has too many lines. [32/25]
Make this a list, not a list.
Should we log this?
we can use `log.Close()` for this
this was probably an oversight from an earlier commit
Why remove this?
I'd probably just use `return x := ...` because this is the same behavior as `""`. `s` is the default and `t` is the same. `p` is the same for `byte` and we can't just use `for i` here.
I don't think the `__DbType` is actually declared, so it is unused now.
This seems wrong
This is a leftover from previous PR
could you please add some info about the other options?
The `c.debug` is used to create a `Infinity` function, and the `debug` is used to set `logging.debug` to `debug`, but I think it's ok to just have `debug` set to `0`. The `debug` is only used for debug logs.
@chrisvest do u agree with this change? I can't find it in the PR. Just curious why you deleted it. I have the PR description here. I am not sure how we would be interested in setting it to `""`. The `GetRepositories` is going to be a problem because it was just doing nothing wrong with the `AppRoot` and I think it should be removed in a different way.
Can we remove this and just delete the BuildBasePathBinTool method?
Nit: Imports sorting are wrong
This looks wrong?
I'm not sure that this change should be in here. IMO it's better for the sake of readability to not run into this code at all.
There is some number of merge conflicts that might be useful in the future. You might want these two functions in this module as well.
Make this `Long bitmask`
Does this need a `!closed` check on line 933?
is it needed?
Should this be an `client.Client` instead?
this is fine as soon as you use the FBossy of BLAS to have this as an FBossy of Aash
This if statement is not necessary because otherwise the function will always return true if the commit is called after the if statement and the first line is missing.
Could you please also change the type of proposal to be a `dict()` here? IMO, if that's possible we should be using the `self.with_semantic` as we have it in the function so the `placeholder` can also be reconfigured to the user.
Is this related to this PR?
Nit: `format.h` is unnecessary here. Also, you can use `.h`, `.format` instead of `.h` and `.h` below.
Do we have to do the same thing when we create a different hash?
I would be happier if we ever use `if`/`==` with a `==` condition. It's a little easier to read and to read.
Would it make sense for a new enum type instead of a `auto` ? It's not super important, but you could also make a call to `BaseTree`
Why did this change?
Is it possible to get a cached index from the performance cost of "atom->getDegree()"? If yes I'd prefer "if a request has not found" as a "no not found".
i think you're missing a space before `Sleep`
can you add a TODO here to remove the pointers?
Shouldn't we use `SpeedLink` here (or `SpeedLabel` above)?
nit: you probably want to remove this.
why is this necessary?
If this function is used only once for each call, we should also remove it from the call stack.
`sess_manager` could also be a `save` method. You're calling it `session_save` directly here.
There are two classes `identitySourceIds` and `identitySourceIds` now. I think I need to update the PR to fix the problem.
for my own education, do we not want to use an API path here?
This import is now unused. The `ast.signals` import should now be removed.
remove this line
why not add this getter?
Not really related to the name change, but it seems like we're trying to move away from that code, not just the function.
The other `ServerMaxSendMsgSize` and `ClientMaxSendMsgSize` do not need them?
Don't forget to remove this
The original code should be changed to `records. The file has 3 header lines that are sequence id field and timestamp field.` The `metric.`.` The `metric.`.`
was this related to the PR?
@Michaelkuhn I'm a little worried about this test. Why not just remove it?
Why is this variable needed? The variable should already be used and used in `pkg/api/operation/__init__.py`
Can you please use a higher number than 16?
@adamjstewart Is this file still necessary?
Why did you need to make it public?
Nit... should be next to the other import statements
I'm not sure it is actually required.
I'm not seeing how `stdout` and `stderr` are used but in this case `newBaseBase.stdout` would be `nil` in the `rm` case and in a few other places in this file we use `filename` (which is more efficient). I would recommend adding one or the other to handle it (or at least in our `rmBase` class) and add `is_stdout`?
I'm curious why `PythonSdkType` wasn't used here.
This is not needed. This is the only change that will have this value.
let's change the name to `attachment`
This is a bit weird, but the method is used in a similar way that is used in other places. Why?
Is the name of this option still useful?
We should probably make these call sites `super.elementCount()` instead of `super.List().stream()` as well to avoid potential conflicts.
This is an unrelated change. I'd rather get rid of the `stamp` call, and pass it in as an argument and pass it in in.
remove extra newline here
this is just an idea.
I am not sure why this is needed here, it does not look good. Can you explain this please ? I can't find any references to the interface in the PR.
@joshblum I just changed this to use the new method.
I am not sure I get what is the intention for that
Are we sure this is fine?
This is the main way to get the best way to specify this is the new NormalizerConfigPass.
Is this really necessary?
Why the cast?
Can we call this ` AddPeerPeers(ctx context.Context, addr.Address)` ?
please revert this, I believe there are a bunch more changes in this file
Why do we need to pass the `iptRule` here?
This is now unused...
why did you change the type?
Maybe we should create a `class Partition` to make it clear that this is the default?
Shouldn't this be something like `yaml:"name"`? `yaml:"Required-resource"`?
Why do these have to be public?
This will never be true, since blocks will be the same size as the current block size.
This should go to the other lines too.
Can we use `log.run` here? This is a test for testing, right?
I know that this will require a long entry, but the fact that the `gitCommit` is still called is not the "version" option, but it should probably be "build date" (and the "version" prefix is not necessarily the case anymore)
I'm not sure we should be doing this now, do we really need it?
It's a little strange to use `path.Split` when loading the dir.
I'd prefer to move this outside of the `process` loop to a separate line from `process.argv.push`.
what was the reason behind the line length limit?
This is also dead code now
I don't think we should import selenium.types here.
This import should be moved up with other "configure" imports
I believe the idea is to show the lock twice?
I'm confused by this, is "stuff that this has the same effect when using the `dagsterInvalidPropertyError` as a resources? That might be not the case in the old `dagsterInvalidPropertyError` flow, right? If so, how would you feel about "stuff, are you using the `Types` class to set `solids` as a resources?
Style/RedundantReturn: Redundant use of contract.
@deads2k do you want me to change this to something like "./pv-tests"?
Should not this be true only if the first half of the array is zero?
This will fail on JetStream for every invocation of the `EnableJetStream` instance.
The session can be close.
remove this line
We need to make sure that the `Bolt::PAL.load_puppet` is available to all bolt-PAL.load_puppet.
I think we should add an explanation here to say that we need to ensure that the length is a length. It's not an array of the length (which is an array of the length).
I guess you don't need to pass `custom_imports` here.
I think this should be `<7, 5` instead of ` present.text` I suppose.
preload is already in the interface
Is it possible to have it in the `JobConfig` field?
These includes don't really come from a version include. Could you please add that?
I don't think you want to change this to `pStart->calcImplicitValence()`
window.self.location is an object, and self.location is a collection
We could just pass the WorkspaceNotFound into the file and remove the `ErrWorkspaceNotFound` here.
Does it make sense to also call it `ShutdownAsync`?
This will never be true. The progress bar is for another input in an output with it being the number of parameters. You can't remove all the parameter groups, because you can't keep the var and the progress bar, as the first argument.
Nitpick: For readability, we should change it to reflect the new name "SessionDto"
I think you can drop the `uidsCtlClient` from this file
shouldn't this be false?
Was this intentional?
We should remove empty line here (and above).
Could this be called `App*net.IPNet`? This will help with the user's code and will get a nicer error, but I think the `App*net.IPNet` function can't find it.
Isn't `//nolint:unparam` redundant here?
I'm assuming this isn't used?
Nit: Can't we remove these? They are only used once in the file
Since `exc_type.__name__`, does it need an additional check?
This doesn't feel right to me. Shouldn't we be modifying `Number.MAX_SAFE_INTEGER || (2 ** 53) - 1` at the top of the file? Shouldn't we replace it with a constant for "const byte[]`?
The second `diff.WithEquateEmpty()` calls are also useless as the second arg is removed.
I would suggest `from docker.utils import kwargs_from_env` to be `torchvision`
I would have passed a pointer to a method in `actions()` instead of a hard-coded pointer
@franckc I think we should not have a separate option for how to integrate hooks.
Why is `1` checked here? Isn't `sec` a `1`, but `sec` a `1` thread? And if so, we may not want to change it, and if `sec` is just one of the `1` cases, that would allow us to change the number of `1`s.
@QilongTang is this the `OPENSSL_reuseport` *should* be used to check for `H2O_VECTOR` in the caller? We're already doing this in the other place, which may not be relevant for this patch.
Can you please add a TODO here about why you need this?
Should be a paramhelper, not a bool. The idea is that if we're not to switch to a parameter, then a parameter is not a valid zone.
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
You're using the standard output here. Why is that?
Is it possible to have a list comprehension for that ?
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Why this change ? Why not just put the function-finally on the next line ?
type needs to be type here
Why is this being removed?
These are the only parts of the PR that should be merged.
Can you remove this blank line? Thanks! (The copyright year in this file and the ones below.)
I am wondering about why we are not using the `allowedIssue` class here as a general rule, not a `Issue` instance.
I would add "Preconditions" to "FlowFlowableable"
Shouldn't the `attr` be in the first place in the first place?
UoE isn't actually the best name.
This seems like a bug, but is there a reason why you're moving this check to the previous line? It seems like the only place where we don't want it's going to have is it? If we are throwing an error here, we might as well do `exception.MustBeRethrown()`.
Why are there changes in this file?
I wonder if we should move `isAuthenticated` to an `isAuthenticated` and make the test more realistic?
Shouldn't `$this->mainConfig->Record->preferredMarcField` be renamed `$this->fields['fullrecord']`? And similarly for `trim`? Also, is this the `preferredMarcField` case?
This doesn't appear to be used, and it's in a subtle work. I guess you can just delete it, and remove it.
does this make the default to "apiv$1;" instead of the Windows version ?
Why is this necessary? Is this because `GetIsPathRooted` is only used in this method?
This was the bug I found. The problem was that we didn't see it in the code that used it, but not in the tests because it was still failing. I think we should either make it a string, or change it to `Config::getInit()`
Is this just removing the private function? I think you're not testing the exact same thing?
Why is this necessary?
@bastianv650 Is this related to the rest of this PR?
~~Isn't `*uint32` redundant here?~~ I see it is used in `*uint32` but it seems like the same is used in `*uint32`. I'm assuming this is something the only place this would be used in the code.
I think we need to add a new column column here to ensure that we have a custom table change, so that we don't need to pass a new column to the table change.
I think this should also be moved to `refreshPanel` rather than `thingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthingthing
I think it is better to check if these two env vars are actually set. <msg> We'll have to check if we are running the env check on the server side.
Is this a deliberate change?
why the `get_package_registry` import is changed? should the `primitive` import be removed from the package?
The `default: true` prop is now being handled by the `*_connection` which does nothing now.
is this no longer correct?
I think it's a good idea to log a warning if it doesn't actually change. We should log this somewhere in the past, and instead add it to the `Process` class, to prevent us from accidentally using it, but we should log it.
I would say that it doesn't break anything, but it's actually not worth it either.
what exactly is the difference between exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange exchange
Please add a logging message here.
it's not obvious to me why we need to import this at the top of the file, this file should be moved to the top (or at least in the `__init__` file) instead of the `_Module` import.
maybe `from subscriber import subscriber`
Should we have some sort of interface for these to return? (if it is a default then you can't do this)
This seems wrong.
Why not just throw away the error here ?
I would move this to the beginning of `proposalID`
This is not true, it should be fixed in RequestParsingData.PlaintextAbsoluteUriRequest
Nit: the `init` is unnecessary for `client`
So, this is only being used for configuration files? Does `--file-name` also have a default value?
Do we want this to be part of the `UpdateSourcesSources`? Is it a reasonable value for all of the other tests?
@bflad i'm not sure why we're adding these to 'x64' are the thing we're doing, but i don't see why we are going to add them when using `spack info`
I guess we should have `mpl_renderer.comms['default'] = self.default_comm` here and `bokeh_renderer.comms['default'] = self.default_comm` for `bokeh_renderer` in both cases?
Can we just check for `node.modname` here instead?
previous log? isn't it better to say "write.metadata.previous-log-max-chunks"?
this is needed in the past, right? should it be in the same namespace as the others?
I guess we need a new version to cover all the old versions?
Should we make it `if not input:` instead?
Why not using a mock in the implementation?
These log messages were probably safer and could be done in `|` itself (like `|`), but I don't see that `CB_level` were being passed in.
`address_string` could be either a `const` or a `to_string`
Why is proxy not a property?
This type annotation isn't needed for `validates_attachment_content_type`.
This is going to cause a bunch of other issues with the Load login page being created.
Please also add this to the doc block above.
Why not just pass the URL?
Does this need to be a variant of the `.map(...)`?
Is this an error or does it get lost somewhere?
Can you remove the explicit `error` field from the struct?
We should add a `mapTo` property to the `Array.BaseElement` file.
Should it be `go-sqlite3`, too?
This is not necessary, `$this->relationModel->getKeyName()` will return a `null` value.
Should we change this to 'zip' or 'x-tar' for consistency with how we're in the list below?
Can we pass this in a list of `ListDeploymentConfigTemplates`? This is just a `ListDeploymentConfigTemplates` that we can call in the `init()` function that is called from within the `init` object.
Why not `path` as the last parameter? (ie. what happens if we don't have a file called the script name?)
Why do you need long? I mean, you can't use long, and it's always the same thing.
why this is no longer being converted?
Does the same `node_l->receive_confirmed` call get a significant significant performance hit?
Do we need this extra `Utils`?
@adamjstewart Isn't this an API break?
I'm not sure this gets reset in the first place. It seems there is a chance we could just get this from the list if it's not being used. I would prefer that we don't need it.
I would rename this to `WebDriverException` or similar, since that's where it's used for an array of static methods in this class.
Do we need to set the endpoint name to a new one? Shouldn't we use a proper default name? Like, if this is, it's not a user, or if it's a specific one, or if it should be a separate endpoint for a user.
What was the motivation for this change? Was the expectation that `scss` and `scss` are being loaded?
Why not just call `host`?
Unnecessary spacing detected.
Is this method in the `@package` tag?
I guess you mean `redhat_fips`, but I don't want to get `redhat_fips` here
The `e` was moved here to avoid an extra copy and paste of the previous `second` was moved up one line, and it was moved to the `else` branch.
`UserList` is no longer needed
I think there is an unnecessary space in this string.
I think this change is not correct, since the type hints are the same, so you could just add a `toListAndThen` to the list directly.
Should be `RetrySettings.getTable()` as the default value for `RetrySettings.getTable`?
The type is `Optional`?
why do we need a global argument?
@cston I think we also need the `is` check
I believe this can be just `CreateDispatcherForGRPCOutbound(.., ...) *yarpc.Dispatcher` since `Dispatcher` is not really used anywhere else in the `CreateTChannelDispatcher` below...
Why are we logging on with no warning here?
This is probably a good idea. But I don't see why we need the `str` for "\\x" here. We do this in the tests as well.
It is not the right place to check for this. If you do `Visibilityd` and then `Visibilityd` the `taskInfo` will be created. We need to check if a record is in a transaction, or if the record is in the UI or not.
Nice catch, this should have been in a separate PR.
The `Flush` method already does a call to `Flush()` in order to call it from the function, so it would be simpler to move the `log` call into its `Flush` method.
I think `float` here will cause a new exception in complex mode?
why is it an str? it should be a list, right?
Shouldn't this be `RemoveAll(dir)`
What is the difference between 'casted' and 'casted'?
Should we log the whole stack as well? It doesn't look like there is a race condition here.
`toMap` should have a constructor or implementation of `toMap`.
Nitpick: For clarity, move `localProjectAppNames` to line 158.
why not use `getvg` here and in below?
Why are we making a little more sense to me here for `tx` and `curRound`?
Is this really needed? It seems like a debugging remnant of the previous if.
I'm not sure what is the best way to do this. If we are going to add an explicit explicit flag, maybe we could set `resume` in the state state instead of `resume`?
I believe this import is needed since `affine_grid_generator` is now `from .grid_sampler import grid_sample`
I think we should make this default to 0, defaulting to `false` will be more likely to be changed later.
Why is this file being removed?
I wonder, should we be more explicit about what this is for? This would be a nice change, and also not a huge deal, so I'd prefer to be more specific.I'm not really seeing any harm, as it would be nice if we could support this as a general thing for a while we're not.
Does this mean that if this is called for every provider, the user will get a good job for that host?
@smarterclayton do we have any issue with these changes?
We should add a check to make sure it's not possible to avoid this kind of bug.
Does this mean `mmcv.ops` can't be `.`, right?
Why not have `opus` be a string? I would prefer `opus` to match other API names
nit: this is a bit too broad... but this is a bit odd to me, if I am wrong, we might want to keep the `Stats` in the `pkg/api/pkg/api/pkg/api/pkg/api/pkg/api/pkg/api/pkg/pkg/pkg/api/pkg/api/pkg/types`, right?
I think we may want to use a constant here, for better maintainability :)
I assume this is a typo?
This is what I was thinking about.
I am a little surprised that the topology could be null. I don't think it is.
Why is this line moved?
I'm not sure if the code in `<dl role="menubar"...` should mention that a role is changed. I'd rather have something like: `if the role is removed: { if 'dl role="menubar: true})`
This should be removed. It is a special situation that this is the only place this was implemented.
This removed as well.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
We could also pull this out into a function of `user_idv1.Instance` since this function is only used in a single `transform_object()` function.
Should this be `Tuple.of()`?
Why do we need to remove the last action in this case?
I'm thinking we should just keep this variable name for clarity. `_runtimeDescription` doesn't really matter if the value of `XUnitIntegration`, and we should be consistent in all places where we call this function `public`.
shouldn't it be "slight"? (Or maybe even `strconv`?)
Metrics/LineLength: Line is too long. [83/80]
Just curious: what's the difference between `i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT)` and `i.addFlags`? Why the change between them?
Do we need to return here?
this should be `trait JsonResponseTrait`
This should be done in another PR.
I'm surprised the `user` is not necessarily a `nil` and so not sure I've made this the same way
@lilleyse I think that you meant to add a helper fields to `CopyActions`
Do we still want to allow config.XDPEnabled when `x` and `x.XDPEnabled` are not nil? Can the previous previous condition be changed to remove the `if`?
This is wrong. I don't know what value this is doing.
I would use a different version of the `HTTP` module, to align with the `https` property.
So this is the actual fix. I don't see this change in master.
I would prefer to get a new config object instead of a new config object.
should we keep these `new-languages` URLs since they're being referenced in production?
The way this is called `isSEAROnDocker` would be better (because this was a test that it was already called on Travis).
this is a breaking change
`MutableUserDetails mutableUser` seems unused. Why not `newPassword(newPassword)` ?
Remove empty line?
We should add a new line before this one
I think this line needs to be changed to `QItemSelection`.
I'm a bit confused by this. Why are you doing this if it does nothing? It seems like you are using the sharedLock on both platforms, rather than just storing the sharedLock in the previous line.
should this be `.jsjs`?
Let's not use wildcard imports, as these go modules in this file. Also please add a `TODO` statement to merge
Why change this?
Is there a reason to use interface?
Wouldn't it be better to call this `*big.Int` ?
Since it's a string, I think it'll be better to split it with a single line string, maybe even better, like `"%s"` or `%s"`?
I believe the previous assertion was wrong, because `http_client` is still `nil`
`label_cb` is an NULL check and never NULL, because `cb` is an `cb` check. I would prefer if this should be fine.
@franckc @mmaxim do we need this for the screen too?
What's the reason for changing the type of the const?
I would move this line closer to list above.
I think `PathHandler` and `PathHandler` should be in the same place as the generic type.
This should be something like `CASDefaultCstorPool InstallENVKey` or `CASDefaultCstorPool InstallENVKey` but I'm not sure whether we should use `CASDefaultCstorPool_DATA`, but it will be more consistent than `CASDefaultCstorPool_DATA`.
Shouldn't it be `client.close()`?
Would be nice to also add these to the `process_name` function. But that makes it easier to read and understand
Shouldn't be exported?
`datetime` should be above relative imports.
Use the new Ruby 1.9 hash syntax.
@jridgewell Is it safe to use `TimeRange.match( /last-(\d+)-days/ );`? I see that we're just setting these values in the `TimeRange` interface.
Why this was removed?
Not sure we need it to be in the `working` hash here as it's used below on line 156. @shunter it would be good to keep the `PutState` as it is and add a check here that the "working" hash is always set?
I think this needs to be done in another PR.
why do you need the break?
Why does this need to be a long? This should be just 1.
This is a very minor change and I'm not sure why we have the API in here. Perhaps we could have a `signedHeader`, but we should probably have `writeHeader` and `writeHeader` methods, and use that instead.
The `if` is not needed here, `''` is an array of strings. It is a string.
this should never be empty, we should try not to run into a temporary file
`getDescription()` already contains the `getParent` object for the `getDescription`. I'd rather have a separate `getParent()` function for that, and add a `getParent` field on `getDescription`.
Need to update this one as well
Should we add a log line to h2o_buffer_reserve? I think it's a little clearer than the extra `if`... Or maybe `fill_cb`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Just curious, why do we need `SSL_color=True` here?
Wow, I don't see this change. This change is related to the fix for #6154.
I think `!rtype` is unnecessary
We should probably also check the errors for all `os.Stat`, but I'm not sure how I feel about this.
Is the annotation needed?
This is the new config related?
No need for the second param here.
This is also a bug. The problem is to use `getDefault()` as the value of `count()` if not present.
We should probably also check that the value is not `null` here.
We should not log this? I assume it will never be nil?
Not that it matters, but I guess we should keep the package and simply call `package_name` instead?
I'd suggest using `@namespace`. It's more of a `@since` thing which we're trying to convert to `@namespace`.
What if I have both a private `do` and a `simplify chained comparison`? Is there any way to avoid this if?
There is no point in introducing a new param in the database. The default for example of this field is to keep the current one in sync.
I think it's a good idea to log the proxy?
Do we need to include theauthority version?
This should only be logged when the network metadata is not found, right?
Should we use lua_setRetry() to return lua_pcall?
Hmmm... This is a very good place to use a different name. Maybe something like `config.option.poppler`?
I think this can be merged into a separate PR
What about the `TRACE` level? Does the user not need to specify the level?
i dont think that this is the right place to do this. it should be a public method
We can't use this, it's just a regular regular expressions.
This log line was not doing anything
If you're going to change this to `NewTestLogger`
Could this just be `hashCode`?
This is unrelated to this PR, but this change seems unrelated and will cause compilation errors.
This is the fix for the fix of the bug I fixed in this PR. This affects the "user" user. This change is not correct. The "lastfmscraper" of the page is a "user" user, and the "user" is not the "lastfmscraper", which I believe is not correct. Maybe a good way to create the page in this case?
Can you rename this constant to `aspnet-mvc`?
powershell -> bolt?
Here too, please, use `MINUTES` instead.
The `numBytes` property is removed.
I think it's better to move `import 2.0` to the top of the file, and then import `samplers.pseudo_sampler` at the top of the file.
Nit: `go` and `go` should be grouped together. You should be able to import `github.com/algorand/go-algorand/` and the `go-algorand` import should be together and together.
I don't think that these are intended, they should all be in a single line. In the end, we are not using a descriptive defaulting of `l2` for the same purpose (it should not change the line for the default value)
Is it correct to remove these imports from these imports?
why is this needed?
why not use a registration here?
Please add `trim` after `encoder`.
Why is this lock_a being dropped, and where does it come from?
This will break volumes in the future, but this will make them confusing for other people who were doing what I mean. What was going on here? I'm assuming this is something we do with `uo.volume`? If I'm correct, then I would say we need to do something like an extra file and `uo.volume` which would allow the ability to configure it.
@deads2k @michaelandre My understanding is that `leader != null` and `leader != null` are also used in other places, so I think this is fine.
`AbstractAnyTypeDeclaration` is not used anywhere in the class name so I would use it instead.
This could also be removed from within pybind
nit: can we put the actual version to the service package, rather than making it more generic.
This is the part where the method is called for an experiment, so I don't understand the usage.
Why is this needed? I don't see any `#ifdef` doing it.
Can't see where it is used?
I am not sure if this check is necessary, but it seems to work without this change?
@bvanesson could you please take a look at how to make this new setting (i.e. not to have the `TooDevice` set in the middle of it)? I would rather do a static constant somewhere and have a test for this.
Could be an `final`
I'm guessing that for `Value`, do we need this check? I think it was already fixed in the `__init__`, and we don't have the check that `self.TYPE_REGISTRY[runtime_type.name]` is None in `self.TYPE_REGISTRY[runtime_type.name]`
Please do not do wildcard imports. Please revert them and keep the code clean.
this file should be removed
Could be replaced with `e`.
Could you please explain this change? It seems to me `QDesktopServices` is already imported by `URL`, it should be `URL`, no?
Isn't that the case that the container already has the `quit`?
This is the wrong way to check for imitimate collections.
Should we add `Apply` as second argument?
I'm not sure if this is the correct term here. It's an internal function. If not, I'd say, `idx` or `idx` or `int`?
The other one is supposed to be `#`) so it's clearer that this one has a `Babbage` (not an `id`).
Why do we need the `+` here?
I'd rather we do the validation inside the `if (parent.type == 'function') {...}` block, rather than in the if statement for consistency.
This seems like something that should be done in a `d := os.Stat(d, * *(?)`, since that's not related to this issue.
Does it have to be omitted for `sampling_VERSION`?
Nit: I think this should be _ _API_. The problem is that `format inventoryfile boltdir configfile` is still being passed to `banner`, but that is not a requirement in the code so that we'll probably have to call `banner: map_to_prefix` in the context of this module.
This is an example of what a value indicating whether a property is configured to be returned from the UI. Could you also add that to the UI?
`Throwable` is an anti-pattern. I think `Throwable` should be fine here.
I think it'd be nice if we could avoid the `DynamicMap` here, as that would also make it easier to test whether we can test whether a new `DynamicMap` attribute has been created before we merge this.
I think that `componentAINER` is a little too generic for this (and we'll need some ` stuff` for the `main` component). Is there a reason not to use that?
Is there a reason for moving the check inside `IotxAddressLength`?
Why not just `a`?
Wondering if it would be a good idea to add a `request` parameter to the `request` class so the `request` can be null?
This is not required. The kokkos_Core.hpp is already included in the kokkos_Core module.
Not directly related to the current patch but the `cb_mq_health` call above should still be `hs->q_metrics`.
I think it would be better to put an empty index in the account's `(0) == 0` to avoid the risk of using an empty value in the first place (and the risk of to actually be a long).
This file can be empty.
Could you explain a bit what is going on here?
What about a log message that says "xstate_xmm_caller_saved() is called with a return statement for the error code." ?
Remove the extra spaces here
This should not be required. You should not have DIFFICULTY_BOMB_REMOVED in the right place.
Nit: It would be great if we can have some sort of builder that ensures we don't have one, at most, and we have the scheme in the URL for all these commands.
This feels like a hack that can be done in a separate PR though. We need to make sure that we're in the "listens" order of other things.
these were not meant to be added.
This will be removed in #5768, it will be removed after the release...
why this?
Can you please update `2014` to `CERN`?
This should be defined in an options PR.
I think you forgot to remove this
this is not really needed
I think this should not be final
Why is this needed?
nit: I would put these on `fromvariant.UnitUnit import static` so that it can be called multiple times.
This is not the right place to put a test. Can you please add a TODO here to remove this and just say that it's not doing anything, but I don't see how it's doing anything else
Why do we need the `throw new;` here, when we set it to `true`?
Shouldn't this be a `type: property`? Otherwise, we are going to have to specify the name as a prop. And maybe we can just set it via `JetStream.property` and then use it here?
I don't think we want to error here. I don't think we should be testing it.
Is this the only correct spelling of `baseFeePerGas`? I would prefer we have to have a constant for it.
This one has no effect, please revert
Can this be deleted?
I think it should be `IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
`bridge` is an instance variable, can we name it `page_ranges`?
is there any case where we can make the containerd disabled?
I'm a little confused, is this a public member?
For consistency, you can remove the second show
Could be extracted to a variable declaration.
Do we need to create a new transaction?
I think that it should be returning the first value and not an error.
Why change it from `LeaderID` to `LeaderId`?
I think we may need to change this to git_checkout, because it takes in git option and we may need to change the current logic as well.
This is now unused?
Should `extension_condition` be added to the list of `RTP` classes?
This should be `--order rand:SEED` and not `rand:Model`, which is the expected option.
This is not right, the client should be able to instantiate a new client in a new server.
Please remove the whole expression `portport.IsNullOrEmpty(OtherKeys).IsNullOrEmpty(OtherKeys))`
import \* is unchanged
why the change from `module.exports` to `api.exports` (I'm guessing this is no longer necessary)?
This was causing lint errors.
Can you remove the `if signed_in?` condition below? This will make it easier to see what happens in the `if signed_in?` method.
Is "it me" not a typo?
Why is the `[scrollbar](@/api/options.md#autoRowSize, option to `true`
Is it necessary that `MSGS` can be `null`? I wouldn't expect it to always be used by the `namedtuple` (which is a `menu`).
This octest has an `:times:?` argument to the top of the function that is doing what is needed.
Do we want these somewhere in the config?
I think you can just return opsList. You can't use the block ID because noUnref don't do anything, right?
This will break if the dictionary is `None`.
This is really the wrong place for this change. It looks like this is the "data" part - it is just for testing.
Why are we dropping the quotes here?
Do we really want this to be in here? I feel like it will be a bug, though.
the `return` can never be `nil`, right?
I would also add this to the `.gitignore` file.
Should we use `getChainID()`?
I think we want to log the stack trace too (we don't really want the stack trace for every request/response?)
This file should be updated to use `ruamel.yaml`.
nit: you can merge this line, as `Preconditions.checkArgument(lookback, openFileCost, openFileCost);` will return `false`.
This will not work on any version right?
I'm wondering if we should just use `data_blank` here and not use `user` (and similarly in all the other columns)?
Hey can we have a more descriptive API for the API and the whole project so we can introduce such things later? I don't have any opinion on this but if we could just have some sort of implementation of the implementation of the implementation we're planning on doing, we can introduce a `panic()` function to reduce this correctness to the user (or not at the moment) in the future :wink:
Maybe we should just remove this line
The parent must be defined as `$this->taint_flow_graph` instead. It would also be nice to get the last element.
We need to make this `collection.Stream`. I would recommend to replace the `Metric` from `collection.Apply`.
For the current sake of consistency, maybe we should also change the doc and count(*) to be more intuitive?
This is wrong and should stay, it's still used in the TTemplateParamClass.
Please add a check for `$newConfig['Captcha'][$key]` so we don't get an empty string value in the `if` condition.
why not `*luidGatewayID`?
This is a breaking change as we are already at it.
info is already in debug message
I think, you should use `to.value` instead of `to.deep` as a new class. Also, you can use `get` and then use `to.value` instead.
This is a bit scary, but what about `PyPy`? `Type` and `originalIcebergType` sounds like a `Type` and `IcebergType` are `ColumnDescriptor`, `ColumnDescriptor`, and `ColumnDescriptor` are `ColumnDescriptor` and `ColumnDescriptor` - what do you think about `ColumnDescriptor.Type`? Also, is there a reason the `ColumnDescriptor` is not `force`? It's not clear what `Type originalIcebergType` is for?
Why did you remove all the code paths?
I'm not sure about moving this test into `Predicate/base.js` file. I think it's worth doing so with MongooseError, it is still useful.
Please use a `Objects.emptyMap()`
`SegmentLikeSet` is a `DataSampleHeaderFactory.java`, and `InternalCommands.java` is a `SegmentLikeType`. I'd just call it `InternalCommands.java`. `SegmentLikeWrapper` is just a `InternalCommands`, not `InternalCommands.java`.
I think this is still not necessary, since we only have this in the session.
Hm this is a bug fix. I see the previous code was broken and it seems to be not related to your change, but it is the bug that is causing issues. The previous code was only trying to see the previous behavior for a bug. If you need to change this code and it has the fix.
Maybe it should be on the line above `err,` to be on the same line?
Should we just add params to the member, before and pass it directly to `validateParams` ?
Is it not possible for a simple regex to use this? If the user passes a `networkPattern` to a `KratosMultiphysics/oxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox
This is probably not the right way to write to the code, but I wonder if we should make a `toArray` method instead of `from_metadata` to be consistent with the `toArray` class
I think the original more `string` is not needed, we need to add a `string`
Could we have a constant for `marionette: true`?
why the rename?
I am not sure whether we should retry or retry later when we hit the device name. I'm not sure whether we should retry or not. @pgavlin ? When does device name come from from disk device name it can mean, it will be the same as disk. Will that work for someone who is using this device?
Hm, why is this public? Shouldn't we have an accessor in some sort and always reuse?
`get => 1` looks a bit too broad, how about using a `get;` or `getOnValue(0)` instead of `get => 1`?
I'm not sure how this change relates to the new version. Is this intentional?
Trailing whitespace detected.
We should make sure that `initializer` is never null in this case. Also, I would prefer `null` for `initializer` for null.
I would use `__enter__` to specify which values it is.
`remove` has no meaning, so this is not the correct index
I'm not sure if this is the best place for this, but if `eni` is the default task, then we could probably just make it a `private final`?
The atomic doesn't seem right. The problem was that if you pass `atomic` here, then the first call to `st.NumMatches` will fail.
I am pretty sure the wifiStatus is still necessary?
I think `fetchMock` is not used anymore, can be removed
Should this also check forExpectData?
Don't think this is needed
Can we move this test to a new function, please?
this log message is misleading since it's a message
For consistency, please use `<%_name>` for consistency.
I'd call this `var FEATURE_NAME = "reports"`
This was a bug that wasn't causing the crash.
Should this error message be included somewhere else?
@matt-gardner The linter can't find a trailing whitespace.
In the current implementation, `Warnf` was used to check if args is args in the first place. Is that correct? If so, does it mean that args would be used as a `Warnf`?
I'm not sure about this change, it is a breaking change, and it is not required when a file is removed, but if it is required, maybe we can refactor that to a variable in order to make it public.
I don't think we should add this method to `getUploadedFlowFile`. This is just a question for the interface.
I think we could change this to `dynamicconfig.IntPropertyFnWithTaskQueueInfoFilters`
I think it's better to add it only when `NVDAObject` is enabled, and if it's not there are no additional logic, we'll need to make `NVDAObject` a required method.
This line should be indented to 80 chars long.
We've also been doing a cleanup of stuff like this. Maybe we can also add this to `Planner.py` and delete this method since I'm not sure it's worth the effort to remove it.
Why was this change made?
CachedThreadPool was not used anywhere
`if reduction in [0, 'none':` should be also equal to 'if reduction in [0, 'none':
What exactly does this do? When does this padding have a padding?
Why removing the space after $balance ?
you can use `org.apache.commons.util.base64` here
This is not the actual fix, and the build should not be the source-specific. The old source-specific is still using the old source-specific.
This is not a valid way we do the `other.txt[i] = other.vPin[i]` below so you could do something like `if(d.from(c015_queue_element_element).if //(c015_queue_element(c015_queue_element_&&& other)`
Why is the order of imports changed from "" to []?
Why was this removed? Is this forcing the new `if dask` to be the initial value?
I think that you can just remove `t.getenv()` function here.
How about creating a different config for all Z accounts?
I think it's more consistent to use `waitForThumbnailsBeforeUpload` (which is the default, and the second parameter name is set to `true`).
Just a note, we should be storing the USERS in a constant or not.
The queue should not be done by this being closed at queue time but also not by queue anymore.
What was wrong with the old code?
You can use a `listTagsEnabled` to prevent errors from getting raised by the class.
What happens if we don't use a setter? Can't they just be the `Phase` instead?
Can you rename this to `tbarrella`? `AllowlistedModules` is very confusing than a hardcoded value.
why change this?
Fix import ordering
This would be a breaking change for the next major release.
Is there a better place to put this logic? I would prefer if I could return this in `isbasebase` instead of `hyMountpoint`
Space inside } missing.
This is a bit of a hack and I think it should be moved to the common lib layer. It's a bit confusing in the future if we want to be more in line 290
I think this field name `campaignSource` is confusing. Maybe `campaignSource`?
Just a question: do we need to make this configurable?
Can you please write a constant for this one?
Can we move this to an else statement? Or change it to `catch segfaultHandler ??`
This is a bit scary, but I think it's fine to remove the need for `disposed` since it has a real `DefaultActivity` instance.
Could we test this function?
do we have a constant for this?
Would you mind fixing this? Seems like an extra formatting looks superfluous, and I'd have to be surprised to see a single space on it.
Is this the correct form that we want to set this?
How about we add a `@NonNull` here ?
why not just `addr basics.CreatableIndex` and `addr basics.AccountData`? we are just adding the `TEST` fields to the `Get` method and adding this, we need to also remove the second parameter in each call.
@mheon I think the length check is wrong here. It is ok for now as well.
Use a guard clause instead of wrapping the code inside a conditional expression.
hmm, I'm not sure if this is a good idea, but we should probably be moving this into a `before_action` so it's more clear that the template is in the `MutableError`.
I think this is not a valid code and not a big deal, but the current code is a little odd.
It's really an optimization to not change the author, but I think it makes more sense to add the new parameter to the docstring.
If i'm not mistaken, this is the bug in `freopen` that I'm seeing. Can you check?
You can move these to the same `createUser` method.
Is this really what we want @rcebulko?
I think we should use `nodeToCIDRs` here instead of `routeSource` because `nodeToCIDRs` is a collection of `PythonOption` and is a collection of items.
I'm not sure we should do this for all calls to `Gem.client.auth` -- should that also check for `options[:mode] == 'plan'`?
What happens if set_format returns None?
This one should be a single line string.
Would this be better to use an additional var?
<msg> <msg> <msg>  newline here at the end.
I think the original implementation of `backend` is what happens if a user passed `numba.backend`, but the `backend` does not.
It looks like the only caller should be used is `ListDeploymentChains` here. Should we be returning `ListDeploymentResponse` at both cases?
Not a fan of this, but it seems like we might want to keep the original code and not add the message if we're not doing any. Maybe we should rename the method to `failed to prepare` or something.
how about the other release too?
Why? We don't have access to it?
why do we need to call `FATAL` ?
Why not move the command parameters into the interface?
It'd be better to pass the `Scheduled` into the `Scheduled.go` struct
I think we should have a `pathlib` file for it, and not just the `tpb` file. I think we should be using `filelib` and let the files go to this.
The only reason this is adding the extra `pumpId` is because `tempBasal` isn't necessarily true.
If we want to keep this line and set `Address.checksum()`, we should probably just call it `Address.checksum()`
I wonder if this shouldn't be deleted. If it's the case, I would have expected the call to `provisioningDelayCondition` in case it fails.
Lint/UselessAssignment: Useless assignment to variable - current_database.
what happens if a nilkeys is nil? i.e. it can be nil, but i'm wondering if we shouldn't just return a nilkeys. e.g. allow a nil pointer to be nil.
Wanted to add the new typehint for `T` here.
Please also include the `db` key in the `AuthCommand` struct
These changes are not related to this pr ... please don't include a conflict
How is this different from what was added? I'm not sure why the change is here.
Do we need to test this?
is this change intentional?
I think that I'm mistaken, if I'm reading this right, it might be useful to pull the entire local var out of the local var.
Why are you using the type table?
I'd rather have the full link here, but this file isn't actually used anymore
@deads2k that I think this should be `ServiceAccount/Sub subscription`. The user could be certain that they'll be used by the client. We have a `json.get("serviceAccount,omitempty"` in the client. I'd like to understand the use case here, but maybe this should be an `ReadOnlyStatus` instead to make it more clear?
I guess you can move this check to after line 121, then remove `if (isSslEnabled()) {` block on line 152.
These are all in the .env files. They were not meant for the purpose of the .env files to exist.
This seems like it will actually be doing anything?
Does this need to be added to the `switch` block to ensure the updated state is done in the queue?
I think you should just remove this line entirely as there is no other way around
Should the echo be passed in?
I'd prefer we keep these tests in order to make sure we're getting a test coverage for all commands (I think that they are more readable)
defer error?
This is a no-op. It is not a bug, so this is a bug.
I think the changes in this file should be a separate PR, since they're in here to ensure we can't break existing clients with the new one that they don't have access to the gasPrice.
I'd like to use `PersistBlockLevelInfo` here to avoid the need for the Info to be able to use it when we're using `JobResource.IsCurrentTimestamp` in the `ManagerManager`
This is the only one I was trying to get from the api to this package (which I don't think is worth it) but we're just adding a lot of model variables to a file. We can probably provide some more details of where we could support these and `None` filters in the future.
`isView` is not needed, you can remove the constructor entirely.
I think this is the right fix since we are not running `attr_writer` on the `attr_writer` method at the moment.
You should add a note that `item` is not an array and should have one.
Rather than making a constant on each object it seems like it is only needed when a `videos` is used.
Please move `receiveError` to `yield`
I would keep the grpc here for some reason. I don't know if this will make a difference in some other PR.
I think a `cancel := cancel` would be more appropriate here.
Can you explain what this means to do? I can't see why it's necessary?
I am a bit concerned about this being a bit confused as to what a user would expect this to run on. How does this relate to the user's execution in the SDK?
this is not the case anymore
This is the only place where we actually use a AddDiagnosticSourceInstrumentation. Why don't we just keep it like we did for now?
Rather than using a conditional logic, how about a conditional `expect("strips namespace and hyphen)` to make sure the `project` is more accurate than `cast`?
nit. This should be renamed to `show` if you want.
We shouldn't log it either as this is one of the most important errors, so there's no reason for it.
We can probably make these fields unique in `updated_at`.
It looks like we need to keep this as the last one in HIVE_reset_file? I'm wondering if we should move this to HIVE_reset_file as well.
Should this method be deprecated?
I don't think it would matter, but would you mind renaming this to something like `is_onna stay`?
Is this true only relevant for a test?
Is this the right way to fix this?
I don't understand this change. It looks like this is needed in the test, as there are some ZoneDateTime calls to `.withOffsetSameInstant(ZoneOffset.UTC).toLocalDateTime()` that are already there, is that correct?
We should use sha256 for these. A lot of our people may use a single byte with no security implications and should be using `[a-z]` to build in the future if that works with no length of the transform.
Why is this removed?
Why is this required?
I don't think it makes sense to rename this to `AWSEmailProvider`
Added an updated updated email?
why this only need to be added to the `grafWriter`? shouldn't it just be a `preact-'`?
Why does the text return 0? It's hard to understand.
We still use `String.format` elsewhere - is that correct? (I guess it's not a good idea to have it on the `service` module, and if it's not then it should be `true` if it's not `true` or `false`, but it would be clearer to do it on the actual line.)
I think this condition should be `condition.Condition !== 'LessThanEqual'`
shouldn't this be LOG('Col') instead of a @LOG statement ?
Why do we have this change?
I think we should update the description too, maybe `hasProgramable`?
is this not needed anymore?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not a script script
How would you feel about adding a new utility method to `runLoop`? I know that it looks like this function is being called in a few places, but since this function is only used in `close()` and `runLoop` always assigns some day. I would be okay with the same name as I had before. I think we might be better off using the one used in this function, since it might be worth a different name to me.
Should be const.
Do we really need to keep this? It seems to be a bit dangerous?
You are using `MessageLayer` as a global variable. Can you use that here?
is this the only line you mentioned above?
Since the value is not in the middle of a function, you might want to change the name of the parameter and return the result from a method to a method with a name for it.
can you please add a TODO and check all the fields to prevent duplicate overhead?
What's the purpose of this `EventNS` call?
Do we know what's going on here? I thought we had to add this now that we already did this in place.
This won't work if you add a bit like this in `bitWrite(..)`
We should not use the `getFlowType` method here, since we have a `typeName` field in the `build-system/common/attributes`, as the method name is an internal class, and the only caller wouldn't know what is expected and could happen here. I think it's best to have that logic in the call site, so we can get rid of it
Why are we making these disable changes?
I don't know why we need to add `.` at all - this seems a very old style and doesn't need any additional actions.
Is the `createGrid` variable still necessary? The `data` was never used to actually check the input.
This should probably go in the revision block since its not used in the revision
There is no `internal` field. You should be able to remove it.
This is the only change which is correct. Why are we changing it?
this will break if it's not named "conftest.py" since you only added one module
Please add a `TODO` here
I'm not totally sure the intention here is to set the `1070296 ` to a higher value?
why not just use `LogicalType`?
can we use `payment_method` directly here?
Space missing inside {.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is still an example of how we could have a $descriptions. If we need to add it here, we could remove the `foreach` argument from the phpdoc.
`timerNoUserLatency` seems like an unnecessary change.
I think that we can get rid of this check. If we don't do it, we should add in `app/views/collections.py` and `app/views/site.py`.
Line too long. [85/80]
Layout/TrailingWhitespace: Trailing whitespace detected.
@agramfort do you know if we can set `OperatorMap` here instead of `toBeam`?
You can also delete the `*`
Why this is changed as well?
Is this the same behavior as in AccessListItem ?
Why not call it `continue`?
Since this is a setting to `null`, is this going to break any other flow run in `count` ?
This could be combined with our linter
Should `super(SGEJobTask, self).__init__(args, **kwargs)` be a static property and use it here instead of adding another parameter for `__init__` to the constructor?
Could this table name be changed to `table_id` instead?
You can remove the return value from the body, it's not needed
I know that the Group IDType is limited to the number of types in a few places, but the type should be given by the number of type GroupIDType, so the types that are given.
This is a little awkward... "Percentage of the" sounds a bit like a contract that's a 1.0 contract. How about "Percentage of the graph (in vertices) to contract [0..1]. Will be 1.0")
Please add a link to the description of the enum in the description of what it is.
can this be a local variable?
@smarterclayton should this have the parser been updated to use the new properties?
Use `find` instead of ` @coupon` (and elsewhere).
"512s" is a very old error. Maybe we should just make it clear that the error is both the initial ` Exactants.*`?
Why is this required?
Why do we need to make it a `Output`?
The original message should be `label >= 0 && Host <= 0`, which is equivalent to the others (same for the others in the other file).
I don't think we need a separate lower case since it's just a single boolean
Does this need to be called only when `topics` is provided and `TopicBody` is a `TopicBody`? I don't have any strong preference with the code that would render in this case.
Shouldn't we be using the `_shared` helper for the liquid tag? I don't think there is any selector that is used in this context
Does this only apply to the `bundle` table? Is there any reason to use `bundle` in a test file?
This is just a nit, but would you mind moving this to a separate function? Seems simpler and a bit more readable, like `return fmt.Sprintf("%s-%s.scope", c.Parent, c.Name)`
Do you need to add `if kv.WriteBatch(batchForBlock) err` to the call site? It looks a bit odd.
I think it might be simpler to make the `Void<Void>`. The same in other places in this file can be done in `AbstractChannelContext`. The problem is that if a react-based members are configured, the `.complete()` will be called after `ChannelContext`.
For now the fact it's not a text component, but not a text component. Can we keep it?
This doesn't match the code it is used.
@stephentoub is this what you want? I'd be happier if you have a test for this.
Is it possible to have a listener in a subsequent PR that does this one?
Why not pass it directly to `time.Now()`?
Is it worth it to just make `timeout` a `None` value and just do the `timeout = 1` instead? Then we could just do `timeout = 500 env variable `?
This doesn't belong here, the same way it was before
I believe this could be a "constant" attribute
please import this
Is it expected? I don't see the point of having a test where the email address is coming out of sync.
Should we rename this to `getDefinitionWithTimestamp`? I think we should just remove this method as it is the correct thing to do.
This is not correct as it should be marked as `Guard.isNullOrEmpty() ? Add value : null`
`Exception`, not `catch.`
Hmmm, not sure why we did this. The problem with the other statics is that if you have an `TYPE` it means that the value of `TYPE` is `ProductImageField`. So this is what we do for the other statics in the list of `TYPE`
Can you also add a message to the message to ensure that we are not supporting the actual event here?
It's not clear to me why this import is here. It is here because `BytesRefBuilder` is never called after the check below.
I think this is the wrong place for this.
Should the default be provided? I think the `tures` is already there in the `constants` module, so the `tures` fixture should be left as is.
the `.str()` calls it twice, so it should not be removed
I think this can go away with `hid`, no?
not sure if this is good to have as a API change.
I think it would be cleaner to explicitly check the whole package rather than just checking if the file exists in your build process.
We should probably add a default icon, not a `getIcon`
I'd prefer to see a test for go-sdk-go, but I think it's best if we use this package with a different package than `golang.org/x/net/context` to avoid a lot of duplication of go-sdk-go (and not go in `aws/aws/aws`). The `golang.org/x/net.context`, which is not how it works in the future but is also in a different package.
@cra0zy - Is this change related?
can we name it `Topic` to match the other `back` methods?
Why this change?
I think it would be better to use `LOG_IF(char, status)` to make it clear this is an error-checked.
Shouldn't this be called as well? e.g. that requires a default value being returned by the user's default?
Is there a reason for this change? I see you checked that `disable` is a `undefined`.
I think we can drop both `ctaLink` and `cta` to save the parent.
This is weird. I think we should just make `Current` nullable, and not have it nullable.
Please add the docblock here, too!
commoncommon does not seem to be defined
So we will likely likely have a better solution than `exported` error?
Do we have a test case to verify this? Isn't the batchstore always an deferred localstore?
This doesn't seem to be used in the tests, right?
should this fail on master now?
I believe this will need to be removed in the future
This is a bit weird because in the case of the previous comparison it looks like a boolean, which makes sense to me. But if we really need to support it, maybe we can just remove the if block altogether?
this is not a good use case, we can use ExceptionStore
Is it possible to simply keep this code in `Blockly`?
Why don't you remove the deprecated classes? We have some common package for defining this.
This is not really what we want (and this is a test) so I think this is a little confusing for a long run. Maybe something like `test_tests_to_hex` is better?
I would use `writeXML` here to make ` writeXML` public, then we don't have the same API in the writeXML class.
no real need for this line. `cbor.RegisterCborType(err);`
It looks like the original logic of this method is only used in a single file in the code base. Is there some way to make it explicit? It's probably not a big deal to make the code specific to this API. If you want to make this change, it wouldn't have side effects in the API.
Should this be `err error && err == utils.ErrRequestCancelled` ?
So this is only used once in the same process, right? Why is it being removed here?
I have not used the predicate in a db. Why do you need to delete it?
I think this can be removed if you do not need the extra code. It does make it more difficult to understand.
Why is this being removed?
Can you please update the changelog as well?
can it be extracted in a separate PR?
I would not add new methods in the `deleteTerms()` interface.
Wasn't this change supposed to be reverted?
Don't do this in the `buildCallback`. If you look at the `buildCallback`, I think you should change the logic to the `buildCallback`.
why do we have this constant in firstTimeEmpySubject?
I'd like this to be `transport request`.
Should this raise an error, or is there a reason why you moved the message to the message?
I think we should rename this to `_expands_user` or something like that. The user just wants to know about the user being loaded but the user is being loaded. `_init_user`.
I am not sure if this is good; if `isHidden` will be included in the `cleanupcleanup` block, we will have to handle this case when `isFocusable` is false and `_isHidden` will be true. I guess that will be the case when `isFocusable` is true and then `isFocusable` will not be true in the `cleanupcleanup` block.
Remove this, it is not necessary anymore
Please name it `KeyStorePassword`
Can you please delete these `console.log` calls in this file?
If you are touching this line, you shouldn't need to create a new `log_op` twice.
Shouldn't we be passing the API to the `InvalidUserTask` itself?
Shouldn't this be: `self->logIdToSend_ && self->logIdToSend_`?
If I understand this correctly, the idea was to make the same update twice. So I added a new line here to ensure we are not breaking the purpose of the alert status condition. But I do see the same for some reason, so it's a bit odd to see if you have a "actually, this is actually not a valid option" but you can see. What's the reasoning behind that ?
hmm, why is this necessary?
I think this should be `expect(config.to_discovery, error_out).to raise` instead, because it will be fairly unusual. We can't say what the behavior is here. We should also do a duplicate of the same output target (as the original error was not the right thing to do here).
This method isn't used anymore.
I think it would be nicer to get rid of this variable. The current code is very confusing. It's used in many other games, and it's a little odd.
You could just do a `Skip(swagger.getInfo().getTitle())` in the `getKey()` method, so that you don't actually need the check below.
Please don't edit the test code as it makes the test fail.
Should we also include the `mentor_url` as well?
Does this mean that if you have to add a new map with the current map, we will get the underlying map from the user's config file?
If we're going to use this `from kinto.core.utils import json`, then we can remove `from json import json`
Is this needed?
Shouldn't there be an explicit `is_alive_`?
this is a little confusing. Why not just return an empty function here and then you check if it's all the way it was before and you check if the error has been provided?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should there be flash.v2 branch of upstream?
Right? Should this be an contract? I mean - would that be something left out in the PR?
Why is this change necessary?
Can we have this value in the server to make sure it's in one place for a reason?
nit: please revert
Line is too long. [82/80]
It would be good to explain what's the purpose of this loop. The body is `bytes` (which means a couple of things that need to be a dictionary).
why are you setting this value? is it always `hashCode`?
I'd remove the `Set<Object>`
this should be 4, 4, 3
No need for namespace here but `namespace` already performs the namespace.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
You should probably change that to `return` here, or should make this a global setting
Can we change this to "hive"? It will allow the user to specify the alternative uri (it's a constant)
It doesn't look like there was some check in here that it could be moved to `with_topo` and the return statement below.
I'm not sure that's a good idea to test here, but I'd be interested if we could just make this configurable by `setCertificateRequestCA` and then have it in here, and pass that in.
Why should we set `excessDomChildren.indexOf` to non-null and remove this line?
I would suggest using spaces here: `x in $elm_toBind = (int, Object_id) {`
Looks like you missed a license header here.
You should be able to run `error_open_zip`.
We should only ever hit the image image and not set the image?
I think we can drop the `!local` part and drop the entire test, this test should already be done for its own test
`local_ip` could be initialized to `local_ip` and this would be `local`
I would rather do a bool check here.
I'm wondering why we need this change.
nitpicking: can you make the return type `(int) -1, 2, 3, 3)`?
This is a good change to the 3D descriptors, and the exception message is going to be ignored
I would just remove all the library dependency. It is not necessary to add `data_store`.
This doesn't really add anything to this commit, I would have expected a change of behavior to be to make this change to be in a separate PR. If `ValueTask` is required we could remove the `ValueTask` and `ValueTask` from `CreateValueTask`.
If a proxy is also specified, does this mean that a new proxy is not active?
I'm not sure if it makes sense to add such metadata to each `TableMetadata` in each `Map` class, but I don't think that would matter since we're not setting these properties in each `Map<String, String>`.
This test no longer needs to be changed. The tests were using the `T` variable in both sides of the test.
nit: you can remove the `isDebugEnabled` check as you do for the debug check in `log.debug`
This is a pretty big change - if you are doing a release, then I'll merge.
I would prefer to have a good candidate for `badContentType.of(url)` to be consistent in this case as it's not a good practice to have multiple good practice
I think it should be "cannot be changed to the quit."
is the line that fixes #2999?
This is a bug, this is being fixed by just being a flux error.
We can't import this file if it's already installed.
I think you mean `newSchedule := schedule` instead of `go newSchedule := schedule`.
This seems wrong. The caller is returning a null for project.
These includes are really redundant.
I think you could break out of the `break` statement, and just do that in the response of the function below.
What is the idea behind this line? I'm wondering if you have an idea how the manifest file is set. Is it really needed? Also, you should add the manifest file to the docs. Also, I'll add a check that that is done when the source files are added.
We should use the `self._default_Viewer` constant here.
I guess this is going to be more specific than `PercpuUsageInUsermode`, since these are added in the `UserUtil.go` file.
In the past we were not checking for the rec ID here but check_user_can_edit_record() was never called, so it is not needed.
Can you add to the docstring of this function so people know what they use in the dashboards? Those are pretty importantly important, but I guess we'll need to make sure they're all added.
is this a bug?
Just remove warehouse and use `[]`
**nitpick (non-blocking):** I'd love to have a centralized name `delete_one.rb` that says "deleteed" and "delete" and "delete" for consistency with the rest of the codebase.
please return the full error message, the caller has to check, this will be executed twice.
`getMicroserviceInstance()` can be used here as well, no need to set it.
Is this actually useful?
This is not used?
This can just be `ip_header->ihl > 5`, which is already checked in the code.
Can you please add a `map` to the existing `Stateful`?
Please rename to `internal`
This should be done in the `SurSur` class
I'd be in favor of the double macro. But this is a very minor thing I think.
I don't see a reason of using `node.frame()` here.
This may be in a separate patch since ` MCTX_NUM_` does not exist in the XX code. We should also have a test for it.
@philbucher can you confirm if the list is required by the list ?
should be `null`
What does `-1` do when there's no such file?
I don't understand this, you can use Backend\BackendAuth. If you want to have a default, you can use the default. If you use this new class you can use -DER_TIME_KEYKEY
Since this is the first `send_block` block, the second `epoch` will always be `""` and so `send_block::epoch () const` will throw an exception.
Is this change intended to be in here?
Can we remove this field entirely?
Do we have a test to cover for this case?
We should add an assert here that some text gets constructed in the `sanitize-tchannel` flag.
Is there any reason for this to be `0` and `1`?
Do we want to rename `DbRound` to `DbRound` to be consistent with the naming? Or are we missing coverage here?
this seems wrong to me (it should also have a `getClusterRegion` method in the test)
Should we rename the standard `/base64` or `/base64` to match the other use case below?
can we move this logic to `onboarding` class? It would be more readable, if we moved this logic out of the `onboarding.` loop, then we could make this a method in the `validateUpdateAlarm` method
Why was this left behind?
Is this going to cause problems on mobile?
Nit: I think it would be easier to read as `test` rather than `processing` (e.g. `testing.T`)
Why are we using a copy here and not the whole `copy` function?
`flatteningConfigs` can be set in `proto` so that we don't have to set it here.
Can this be passed in? It seems a bit unfortunate to have to have the same configuration as other components and it would be nice
Is this change intentional?
why not just use number
I'm curious about this, what's the rationale behind changing `application` to `application?` to reduce duplicates?
You are using the default value here, you should use the default value in $scope->getScopeValue() which is called only once (it is a string).
We could use `isLatest()` instead of `getFromBlock()`. IMO that would be more robust and consistent with the other methods we do
Does this include include `-h`?
this should use the new constant for the new values.
This test would be more correct (and possibly smaller than the one above :slightly_smiling_face: ).
I don't think we need this, if passcode length is always >= 0, so this should be set to 4.
No need to change this?
It looks like we use the global "secret" naming convention. Can we call this something else?
I think this should be `\s`, `\n` instead of `TCP[TCP].seq`.
We should keep import *not*azer and do nothing if you have them in your IDE.
TheThe operator should probably have a space before `&`
The file should be `include '../../release.inc';`
I would make this <msg> This is going to create an additional ` TimeChaos` class, and set that to `false` instead. This would require a TODO, as it's only used by `build-system/python/unit/ec8`.
Why not just use `with` rather than `",` ?
Would you please remove this method and make it non-nullable?
nit: the first return type is `region Region`
Could you please use `switch` here so that we can avoid the `caddyhttp` channel everytime? Thanks!
This file should be changed to a previous commit.
It's not obvious to me why `path.Split()` was called, but the caller does not need to check whether the file exists in `os.path.Split()`.
for each "s2" label, we can use the same naming of the s2 version as we use in the godoc
This will be a bit of a problem because `dso_unordered_map` won't be called when `isa` is true. Maybe we should just `executut_map` and then call `get_unordered_map` in the `SetIdStorageService`?
can probably pass in the block to keep the old code consistent with the new capability capability.
The original name was correct, I think. We should be consistent and use `@Nullable`.
What's the purpose of this change?
shouldn't that be `return 0`?
We should make this a `utils`, as we don't use the default libbeat.
should we use `??` here?
Isn't the `cluster` in line 235 still accurate? I assume the intent was to just remove the check for the `Client` and `Client` if it isn't a `Client`. If it doesn't, that would mean that the user would have one in-clustering the cluster in the repo, but that seems to have a good idea.
I don't quite follow the same pattern here. The difference here seems to be that the number of proposal is not absolutely cached, so you don't have to change the number of proposal.
What do you think about moving `MetadataMetadataTable` outside of `forEach` loop?
This should be in a separate PR if not
I'm not sure about this being called anywhere?
Can we put this on one line, maybe even a `?:`?
No need to change the email here, since the user will never accidentally contain email email.
The new logic here isn't necessary, since it is just testing the old logic for the new code.
nit: you need to add `@TODO`
I'd suggest using `7.3` rather than the `>=`.
why change from nupic.data.generators to nupic.data.pattern_machine ?
I see this is used to generate zero zero.
Don't remove the dependency on the `bob` prefix (in `self.prefixed_userid`)
The mock call shouldn't be necessary (and the fact that you are testing this is now the wrong thing).
This seems like it should be a `warn` with a period at the end of the sentence.
Is this used anywhere?
I think we should name this `Context` instead of `ISpanContext` to be consistent with `ISpanContext`.
I'm not sure this was the right solution. I'm going to change it for the `find_by_in_query` function. I think it would be better to make this `find_by_query` and `find_by_uced_reset` to keep the `find_by_query` and have it return a `KsqlConfig_with_reduced_reset` instead. That would allow the user to make a `find_by_query ` for the user who do it, but it seems like a change that would be unintentional
is it just the default value for the `!=` operator?
If `find_instance_group_by_url`, we won't need to do this check. The caller can call `find_instance_group_by_url` if `group` is present.
Shouldn't it be `: 1` instead of `|`? Also the second condition should be `if (m.group(1)` instead of `...equals(" ASC")`, no need for this line.
I think it's better to keep the -instance method and check `FormatIsMultiplane` here, so it is easier to debug and remove the -instance check
Cachedor is not defined, it is not used?
Do we want to also remove this line?
This should be done after the first `if` statement. See the `if (selectedItem.isMLIMIT());` section above. Same for the above `if (selectedItem.isMLIMIT());` statement below.
Can you please create a doc to explain what `""` does?
@lisasy Should we use `ParameterTypeNames` here?
I think these two variables should be capitalized to match the naming convention for `SpecProvider` or `count`.
you're adding a new param to the `afterAction` interface, so can probably remove `afterAction`
I think that this should be a try.. catch as well, no need to catch and silently ignore the exception.
Do we want a default port for this?
Is this a perf regression? What exactly happens when a new page is added? Should we assert that this is the case?
Is it possible to have a method like cache.get() or is there a reason for doing this?
The `copyList` method returns a boolean.
If we're using `os.path.join`, I don't think this will work. It is necessary, but it does work with the path that we already have.
@gustavonalle this is where I had to do it as part of this change. The `app` environment variable is `true`.
Unless it's safe to use a non-zero conversion here, the function signature of `x` is not necessarily the right solution.
Don't we still need to call `auto HandProps` ?
Can you explain why the config is needed?
I've seen this change in a previous release.
I would make the pin pin into a separate method that accepts the template here instead of a hard coded one.
Do we have a test for this? Is it possible to just keep it in `OnMainThreadAsync`?
what if we added an empty check? `opt` is a `boolean`?
I would rename this to `className` as that is what it does.
I guess it's not a problem, but this is the one we wanted. The package itself has some problems with.
What's the reason for removing Unit? Is this just a mistake or just an old reason?
We need to set this to a reasonable default value.
Let's not have this import anymore. It can be removed. And it's probably a leftover from the previous commit.
If you move `cart_item_id` to `idxmin_idxmax` then you can delete this line.
@jsoriano Can you verify if this works, but it's not possible to get a `DEFAULT_GITHUB_ENDPOINT` field from there?
Should we have a task for this?
It's a little confusing to have a test. Can we use a mockConnection to check if it is in a config.
If this is the `rescue` that is fixed, then this is the only place where we actually need this new `klog.Infof`
Maybe make these default values be set to zero by default in case someone specifies `existing_rows_count` in order to set them to `""` in order to make sure they don't accidentally pass in the value?
In order to support multiple machines to use multiple machines to hold multiple inputs. I think it makes more sense to have them in one line so that it only applies to one line.
Unnecessary spacing detected.
This is incorrect, if you have a period at the end you don't need to escape the `else if`.
Should the nonce be set to _ here instead? If not, we may need to add it to the docs in the future.
This shouldn't be necessary, since paths.report() has already been deprecated.
`Assert.translate()` would be nicer here - IMO
This is the main code.
@jmhooper @mitchellhenke I don't get why we need to do this. It seems to install a lot of things, and I don't want to have to worry about it if we're going to do so.
I think this is wrong, we are assuming that all the messages were printed in `globalWorkSizeX > UINT32_MAX` after all. The `kds` is always triggered, and the others are not.
is there a reason we'd want to pass the value rather than silently ignoring it completely?
@jridgewell Should we change the name of " 1.15" to "1.15"?
Is there anything cleaner to do in here? We're getting options by default in the `lazy` option.
This seems like it might get annoying to see the usage of the namespace, but I think in the future we might want to add the namespace to the namespace as opposed to the namespace in `namespace`
I've been doing this in a certain way, but I wanted to make sure that in the future we might not have to do this automatically if we want. Thank you for this!
I think the "or" is more common term than "or" (i.e. "when can also configure NVDA, get help and other other keys)
This is the actual fix for the reasoning behind the changes in this file. The "errors" part will cause a lot of problems because of this.
The issue is that the previous code still says "p->mp_impl" but the previous code was incorrect.
Remove this line.
If consumerIntf is not used and it will not be reused?
Can you please add a spec for including including checking the error? That way you don't have to including the error.
Why `config` is used in this place? If we don't, just `index_norm` should be used in the code, right?
Should we also test the content of the response rather than the content of the content?
remove this extra line
Why is this `Trait` needed? I don't see it being used anywhere in this file.
How about adding an enum instead?
@kroitor since you already have `scale` in `evoked`, why not `float`? Then you wouldn't have to cast to `discount` in `__init__`? Also, it would be good to import the `enum` from `mypy.externals.py` to `mypy.externals.py`, which would be the only thing to rename here.
I wonder if removing this from `codec.h` would break any existing code. I think this was accidentally added. We don't need to add the ENCFAIL at all as a dependency.
this doesn't look related to this pull request, so should be a separate commit
This does not appear to be the best way to test this, right?
Why we do this instead of just storing the Reload logic?
what's the difference between runs and runs?
Why is this not using `err` and not `err`?
This file should be removed as well.
Is this change intended?
I moved these because they are used for the `should_validate_step_from_spec` method to save the test suite.
maybe you should add this to the `install_all_ candidate` dict to make it clear this is a boolean.
`value: types` can be set to `null`, right? I'd recommend using just `enumerable: false` as that is what you're using for `getClass().getName()`
I don't believe the whitespace between `auto` should be on the next line. So the `auto` should be on one line and the `RDKit::MOL_SPTR_VECT::const_iterator` is always true. It should be `auto end = getStartIterator(rxn, type);` (see above) and `auto end = getStartIterator(rxn, type);`
Should be `Action*>(ptr.release())` rather than `Action*>(ptr.release())`
I'm curious, why this has to default to `true`?
shouldn't we use the regex only when "resh"?
Maybe we should use `loadAll` or `data` for this?
The `viewTop` view is not necessary in this function.
If we can remove this `List<String>` we don't need the `topic` here any more.
I guess this should be `List<String>`, because it is not thread safe to have the `if` statement.
This is a change in behavior, but I would prefer a different name for this than a class variable.
I think it's better to move the import to `models.Sim`.
Please put the same code in `PackagePackage` so it is easier to know and understand what is going on.
I think this should be `ResponseMicroBatchStreamScan` as SparkBatch.
Can we move this to `result.put` ?
I would use a `this.getAmplick().run()`.
Is the name of the package in `lib/openshift/librarygocont` still needed ?
Should we keep a "make update"?
How did you change this? I think you should still write `content.array(...)` to `''`
I think this will need some test coverage.
Group with `goimports`
I believe we're trying to move away from timeout here
I am confused by this, I would expect the human-index name. This is just a question of how a method is called.
I would have expected to see the type annotations in this test.
I don't think we need this line, can we just remove this line and delete the `else` branch?
This looks like a leftover code.
This can probably be a private property.
We need this to be `cloud_instances.go` - we can't use it here.
Why remove this from `Sign in`?
This case can be replaced by just the one in the list above.
I would rename the interface to `MakeLogger` to make it clear that they are the same.
@andizer @tnozicka what is the reason behind this change? I am not sure that the other changes are worth it, though.
I don't understand what this is for... I can't find anything on my part
So, `upload` is not an array? It can be either `upload` or `upload` or `upload` if it's not, I think.
Was there an impact to this change?
Shouldn't this test be done with `waitUntilAllElected`?
This seems to be unused now?
Who uses this function? I think `BuggyProposal` is more appropriate, it shouldn't matter if you need the same `case` as you did for the `app/services/keygen-level`
This will not work on windows but on Mac, it may cause all sorts of stuff to work. I would prefer to avoid having to change the name here.
let's do a `action.search` and use that instead of passing in every call to `action.search`.
I think this should say "is not present in the text calsalsals". It would be a better place to put this on the prefix in the dashboard, since the rest of the code is more readable when we know that it is a number.
This is a no-op.
I'd prefer if we made this a separate class or at least `isposable`. I'd prefer to see two separate classes on the same file (and other `isposable`s, but it looks like the two is a separate thing but it would be easier to see what the old one does).
The same issue here about splitting the two locations into multiple lines.
I'm guessing you need this?
This is a bug fix - we are returning the whole tile field for the actual `ExtensionsPool` - which is now never used.
Should we do the same for the check above, before checking `getRingInfo()->isSSSR()`?
Why was this removed?
Do we have the same problem as this block?
I think we might want to say that the type can be `pubSub`. We don't want anything to be around that, but this seems like it could be something to think about.
Should be 100, so that any initial delaying between users are updated to use 100 and 100, right ?
No point in adding this here.
Can we add a note to the docstring what the inputPattern is and what it is trying to avoid?
this `testMatch` is used to be testing the same thing as the one below (which is the best place to refactor)
The `Assert.Equal` assert above has been removed as well.
Why remove this? I think you're removing it for some reason.
Should this return a `error`?
`Schema schema` is now unused, so you don't need this `if` here?
Why use alphabetical order?
Can we make this package private and not use `--redelivered`? We will need to handle that too. It doesn the same way the one below.
Does it make sense to use `wistia_embed_threshold` for these? It will avoid having to repeat the entire page, which is why I think I would prefer it not being used. I would suggest to put the page back in there. I'm not sure what the problem is if there were to be more than 1 character.
This still needs to change to `asset_type `
NotFixTopicCopyBugOption(), why not use a function for this ?
There are a number of elements being created here in the short_count function. I would suggest replacing all such occurrences with a short_count_lines()
This is a different issue. `include H2O::tasks` is used for `WIP-acl` not `WIP-acl`. What is your opinion on changing the code to use `WIP-acl`?
Should these constants be kept to constants?
nit: `tqdm` would have been more convenient here, e.g. `Bytes.slice()`
We need to make this bigger, to be able to just use the `RSpec.configuration` suffix.
This can be moved to `DotNetNetNetNetNetNetNetNetNetNet` as well, and not as part of the interface.
Can we just remove the playback manager here?
The `1000` is an intentional choice. The function should not be called for `max_edge_get()` if it should be called.
Does this return the result?
The `WP_interval` field is not used here, I think you should remove the `LoadRaw` flag. The only thing that's being used is it may be to add a `LoadRaw` to `PullInterval Duration`.
shouldn't be localization.js
I think `literalSet` is clearer here.
I don't know if this should actually happen. It seems to be a bug in the refactoring, but I guess it's not possible to get a specific error if the user passed `--changed` to `getattr`, and it doesn't have it's own error.
Is it ok to remove these two lines (and the `describe` above)?
What about `GenerateGenerate` instead? It might be more robust but more efficient.
Hmm, this is weird. I think the previous `.id is not in necessary_tasks` should be `None`
Nitpick: I'd prefer if you used "import ID" rather than "import ID"
This line is also not correct, `primary` is a `Object.fetch`, which is not the same as `Object.bypassDocumentValidation`, so the user can not see that `Object.fetchDocumentValidation` is called when the name is empty (which is the same thing), so maybe not problematic.
If this doesn't return null, will that mean the old constructor will not return null?
I would rather not set `blockValidatorProvider` here, which is the default value for this method. I don't think we should do it.
Why the space character?
This file is already included in `include-bulk-edit`, so I'm not sure it's a good idea. Can we remove the `Searchable-<WITH>`, and use that in `include/bulk-edit` instead?
I don't think we need this "side" attribute here, it's not necessary. If we add the width of "captured" attribute, we don't have a good idea.
Can I set the default value to `true` in case this is `true`?
Why do you need to import jinja2?
This needs to be done after DRach, or after DRaching_add().
I think the above call to `getIdentifier()` was not needed?
I don't think this change is related to the fix, can you please revert?
This was the only functional change that fixes the bug.
This is the only one I'm not sure why we would want to change this. Maybe a good idea?
you're changing the order of the parameters, should it have a default value?
These includes should go to the `-movement.h` file.
@josegar74 I would have made `NewUpgradeTaskJob()` public in `lib/store`. We have the `TaskJob()` public in `lib/store`. @jon-wei
This should be a `sys_get_meminfo()` function, which should only ever be used if you are trying to build an system with the other supported supported system versions.
nit: "The name of event" or "schema". events supported_.
Why not just add a `SequenceNumberForNewDataFiles` method for the other snapshot? It can also be fixed for other snapshot connections.
I think the wording should be "1..60"?
I don't think this is a concern.
Let's not add any benefit to this change if we add a link for a link in your local devs, which might need to be fixed in a separate PR
`@var string` is not necessary here
this is wrong, it should be set only on the box. The current behaviour is that the current user has the latest amount of timeout, but it is a current user of the box. In the current state, the original set was wrong, and it's the full fix, which will be wrong in my case.
Maybe "Don't use" -> "that is a record" ?
I'd prefer to keep the `downloadProfilePhoto` method as it makes the methods more readable
I would have just kept the variable to avoid the type `array`
(style) please, no space before tabs
Is it necessary to have `_start_cb` and `_tabbed_browser`?
This change seems unrelated.
was this a bug?
This function was only used in a try catch only. We need to make sure we don't break the whole `signerFlag.Value` interface.
Is this log-line temporary?
nit: this is a bit unfortunate to mention here to me as the log message. I'd prefer if `iter` can be used here or not, since that is what the log is.
This will need to be changed. The old configuration will be a bucket by default.
why not just `defined('CACHE_ENABLED')`?
I think the `DependencyName` is unused.
We should add the "ZK_HOST" to the builder. I am not sure we will ever want to add a new field for the Zookeeper.
Shouldn't we use banners with `gcloud/application-default` in a followup?
Is there any value in keeping the return value? If so, the logic here should be fine, because we want the condition to be set to `columnSelected`.
Style: This file is used to provide a strict `strict` (so that the file system isn't found in the final version)
I guess this should be a warning, right?
Style nit: it's not necessary to use `posix='win' not in sys.platform` here.
I think we should pass the `slack` object here as well.
Please update the corresponding text in `Controlr`
I think this should be `shifted_bearing = 0.5 * discrete_step_size`
Because we are going to use a sane GH style for VERSION, and a style thing, I think we should use a 3rd line instead of a `float` here.
What happens if this is `0L`?
This is the only change that affects TF providers. I'm not sure it makes sense either. I can see it's only for testing, but if we do it for the sake of rebasing we should do it now.
I think we can move this to a helper method
Is this `List` used in any way?
`getToolChain()` is not a pointer. It should not be changed in this case, if you want to avoid a comparison of `!supportsReleaseFlag(jdkVersion)`
`findIdByHash` doesn't accept a `Hash`, it doesn't seem like a `Name` would be a good name. Can't we call it `deleteByHash`?
I think this is not needed, right?
Do we have a test for this?
In case you want to execute the execute, you can call execute() and execute() call it with execute() then it will be called after call to create() call.
do we actually need this?
If we have a python file, we can use `pytest.skip` here instead. It will be much safer not to use `pytest.mark.skipif` here.
This looks wrong. You're modifying the edit, the current item and you're using the wrong one.
Same here, just use `[syslog-prot]`.
same here, can use `RWMol` to avoid any string concatenation
It seems that this call to `RLock()` is not necessary.
This should still be the default right?
Shouldn't we call this `loadReactAppOnceIfReady()` now?
Can you explain why this change is needed?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Maybe it's time to just pass in the `TestClient` instance?
How about `isHybrid`?
This should not be necessary, since you're changing the context.
I think it might be better to make this `true` by default, instead of `setUp(argNameVal[0], "true")`.
i would prefer `if ($chars[$i + 1] === '\\' ||` instead
Style/RedundantReturn: Redundant return detected.
Should this be `isly` too?
Can you move this check inside `selectedIds/selectedIds`? It's used only once, so I'm sure it's correct.
RuntimeIOException isn't used anymore.
`tmtm` does not support tmImplementation now, is there any use case for this?
I think this `State.navigate()` calls in this `if` statement would be better. So, I don't know why `ForAdditionalLiveTvOptions` is being handled now, right?
Should not be part of the pull-req ? Not sure if this should be here or in the pull-req...
This is the only place I'm concerned. What is an improvement of using the existing API? Is it possible for a user to use `UIA/UI.handler.onForegroundChange`? What about the events?
This should be `replace-partitions-Replace` to match the other one.
MissingMissing `W3CBridge`
What about checking `_activate_user`? I'm not sure what the best way to do here would be to have the key and then use `one_or_none()` in the `required_attributes` method.
we can't make these private - we don't want them to be part of the old implementation
This looks strange. Is it used anywhere?
The test does not knowing that there isn't a single value. The value that's not null is a valid value. Instead you can test it with one of the values that you're testing.
What does this value do?
Why do you need this? `autosave` is already in the session object, so you could use the session's name and the `name` should be removed.
Are we OK to leave this here? I'm afraid that if we have multiple connections, we might as well get rid of the `BalanceRecord` calls in `AccountData`.
@jsoriano This change was necessary because the amount was already handled by the above change
Is this 1 minute minute minute minute minute minute minute minute minute minute minute?
Can we make this `=`?
Why is this in the config file and not in the library?
Just an observation. The log files are already in the `nowarn` method.
Is this a change here for backwards compatibility? Is there a way to make sure it stays in sync with the other commands that call the "SessionStats" command? Is it something that is the most appropriate for this change? I think this is what we want to test in this module, but I think we should use it from this API.
Is this the right place to change? This code is only supposed to work for single-level case in the middle of the library. If someone else is going to use the single-level case in the future, it'll be safe to change it here as well. Maybe it is worth to add a property as a part of the library to have the same pattern as we use for start and retry.
Is there a test that needs a mock type? If not we should test that out.
This is not used anymore
I was going to say "does not set" in my form, I think it's more common in this PR than "should not set" in the PR description. I was not aware that I was getting this from a "ifndef it" in my form.
I think this line is also too long, `[]` should be on the next line.
why this is removed? I assume it will be breaking for the future
Shouldn't we have a `GGCP PubSubSource?` property on the `.gcpCredsSecret`?
We can add an `if` statement here to make it more clear that a `OnFlushFlush` is being set and then the `OnOnFlushFlush` is set.
This shouldn't have `pytest.getAmpDoc()`
@rhymes this file is actually being split off for the USAS packages and I don't see a better way to handle it :)
Can you use the variable `(a, b)` as the last argument instead of the `-t`?
Why we change this to 0?
should we just move all of the centralMachineManagement to `hive.openshift.io/clusterName`? so if it is not required to specify a cluster, just a thought.
I believe, that this is a change required and not a real bug in this PR.
Should be `@method string`
Why this change? Is this just a code smell?
How about using the stdlib 'retention' here instead?
Since `x-0.1` and `x-0.0` are equal, should we make the condition be conditional?
tpfp_func isn't used any more, please remove it.
I'm not sure if we should return 0 on success, because it doesn't mean we should stop returning 0 on failure.
This function is no longer called from within the `New` function.
should this line be updated to reflect the feedID parameter?
I don't think we want this to be handled by `allowIncompatibleChanges` - is that intentional?
should use the same constants as the ones in the pages where they should be used.
I would rename this func to `executeRequest`
to be translated
What does this test do? It's not clear why it's testing the exact output.
@jcotela do you mind moving this to a constant? Then it should be `const`.
I would prefer a helper method, for better readability to ensure that all activeClientMap logging messages are active and not active.
I don't think it makes the `fresh` thing really useful here.
This was just a typo.
This would be better off with a `Task.GET` as it's part of a `todo`.
Is there a chance that this would be 0 here?
rm empty line
I think it is too much work to add the `:1`, `-1` and `input_img` to `show_img`.
I'm not sure about this. The original code below does the original thing. When is the number of decimal input and list input?
Should you also mention that you're using the same nvcc at the bottom of the file?
@LefterisJP with `lal install -l`. I have changed these to `true` to make it more obvious where these are the.
I don't think this `else` is necessary, but it's not a problem since the task could contain failure anyway
What happens if we called this `Whitespace_authority_base `? I think you'd be fine without passing `action`.
Nit: Imports sorting!
Why do we need this anymore? The others have the same name, but they can have a different name.
Why was this added?
I'd rather remove these three lines since the spec doesn't have to be updated to use the same `show.html.erb` file for `spec
(exex, "Auto loading assembly file: {0} failed! Skipping this file.",, extensionDll)
I think that this should be in a `try/except` block to avoid issues with the `device` value being returned.
We should remove this `/x` tag. I would prefer not to have a `use` statement in the code.
This does not look very descriptive. Maybe we should just rename it to something like `${copyOf}` or something? `stats` or something similar.
This should also be `if (ann.indexOf('=') == -1) {` to be consistent with line 414. But then we need to change line 346 to `if (keyValue[0].length < 2 ? "" :keyValue[1]))` instead.
Maybe `item.recording_start` is better since it would be the same type as `recording_start`?
This should be reverted.
This import should be removed.
@nmittler - Should the `kube` package be `kube`? I.e. it has similar imports in `core/types/models.go`.
I'm wondering what's the difference with _assertDictEqual? Shouldn't we have the check that one is passed via the dict ?
How about making a constant for `h2o_hpack_decode_huffman`, and use that here, for `h2o_hpack_decode_huffman`?
The original original was wrong here
can we make the version in this string a const?
You need to add `if (metricsConfiguration.isPushEnabled())`.
I'm not a fan of using this `self.backbone_end_level` because it was not an error (which I don't think is the right place to change it) - and this is why it was here before. The old code was to fix the missing `self.num_ins` to `self.backbone_end_level` to `self.num_ins`. The old code is a bit redundant as it is already there in the `if` block.
Why is this needed? Isn't the `static` variable already checked for this already?
The condition seems correct, if there's a `err` in the `else` case, should the condition be inside the block?
I'm not sure we need to specify here, and if we just remove the peer type from `display: false`.
I'm guessing there is a call to Free() here that I'm missing?
can you call this `loss_normalizer_momentum`?
@jona86 do you remember if there is a possibility that `FIONBIO` is present in the _WIN32 file? Shouldn't it also be a _WIN32?
Nit: please sort this with the other test in this file
I'm not sure we want to include the `tail` keyword in the mean and provide different results to the mean.
Shouldn't this be removed from this PR?
This should be the default `ImmutableList.copy` IMO. The only thing that is `ImmutableList#copy`.
@saghul, looks like you removed these lines here, is it okay?
I know this is a bit of a hack anyway, but can we add a `git blame` or something?
Are we missing an `version` here?
Do we still need the `errors` here?
this should probably be `#if defined(PLATFORM_IS_FREEBSD))`
This should be `network-audit-results.json` rather than `network-audit-results.json`.
This was the only place I'm seeing in a subsequent PR.
You should be able to get rid of it.
`ast.py` contains only the `_color` key. I would prefer it not only on line 427.
Is this really needed?
I think we can just import `__time` here.
Not for this PR, but `html_safe` is a string, and it's not a general-specific one, so we can remove this line and the one from the file `_`.
Nit: I would prefer if we used `unused_case` instead of the new one.
we should make this an enum, not a const.
nit: this is not necessary
I think these imports are wrong, can you fix them in this PR?
travis_terminate 2 was the original point that the order was correct.
Is this change necessary? The number of arguments in the method are used for 1.12.
@deads2k i'm not a huge fan of this, do you really need the default value?
This method name is not very descriptive. You could use the same logic here.
Please update the docs to reflect the new words.
The lock should be destroyed.
Is there a better place to put this in a file that would have been added to the latest `src/service/` module?
Maybe I don't get why this is wait till? Shouldn't it be a warning?
Should we also mention it in the name?
This shouldn't be needed, it's already in the `API` package, so you should not need to add it there.
Should we add an issue to track fixing how this class is fixed?
Not related to this PR but it seems weird, is this a change from a code change?
why is this changed?
I think `this.querySelector('#target');` should be in all cases, so we can make this test in the same way as the other test, since in the other cases we use the same check for the other test cases so it's not a test.
Why are you calling args.toMillis() here?
(style) trailing whitespace
we need to keep the old name here to make sure it's not a new one
this should be implemented in the constructor
`_('%{tabpanel}` should be in a `_` if you are touching the code, not here.
I don't like these keyword arguments. I think it makes sense to explicitly mention one. Lets do `label` and `screen-reader-text`, as it's not a component-level component in the component that we're using this for.
You can use the same variable name for `roots_xcursor_theme` and `wlr()` here.
There are no other `=>icsFilter`s in this file. Can we have some sort of `=>icsFilter` (like `=>icsFilter`)?
The logic here should be: `if len(self) == 1 and ((key == 0) or (key == self.keys[0])) and not self.drawn:`.
this is not right. `windows` can be either `False` or `False`
Should we be using the `TaskVolume` struct instead of the global struct? (e.g. `VCPULimit`, `Memory`?).
You can make it so that TierIndex is only set to 10?
This is a bit confusing to me, but it looks like I'd say that we should be consistent and use this in all places instead of everywhere. But it is a bit of overkill.
This change looks good.
This shouldn't be necessary anymore, right? Also, you're missing a `@Deprecated` annotation on line 355
This is really dangerous - `GenericMeta` and `Comist` must be imported if we use `_GenericAlias` (I don't know)
the template does not depend on anything other than the template, I think it is better to remove it altogether.
I'm wondering if we should have a `reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`/`reset`
why this change? Can we avoid having the write write logic in all cases when calling the map?
We need this to be part of the UI - we can just use this in a view
This is the reason why `reason` is not an `Causes` type and `reason` is what it's supposed to do. In this context, this message should only be printed as a single `Message`, but the `.Completed()` method should be moved to `CSCS`.
Maybe add a description of why it is required to add more info.
Can we not use a `continue` field here?
I'm not sure if this makes sense as we're in the most common data structure but we should use the new data structure
As an example, if something is not pinned (i.e. a pinned tab is not found) we'll get some time and get some time by hand that is not happening in the future? I think the right place is if this check is true, the test will fail with a warning that we want to do to be sure that this is the case, right?
Could you update this to check for `null! $(".disabledUserBanner", 1) $(".disabledUserBanner", 1) $(".market", $(". Trace")` instead?
Is this change still necessary? Is it because of the previous `lift()` call?
Seems this is the only place where we build the spec?
This is unrelated to the PR and just noted that I should have missed that. The first time I see this PR, I just noticed it earlier.
should this be `_nat_dest *nat_dest`?
I think we can now assert that the span is null.
I think you can drop this one: - In theory, if the legacy collection collection is sent correctly, it will be sent even if it does not exist - and the reindex can be used for a change that is not compatible with your API.
should we have some sort of implementation of this at some point ?
What if we kept the `Bolt::Logger` here since it's only used once now?
Here you can call `reverse()` on the same line as `for loop...`. `t` is the proper `type` (or `type`)
@deads2k that we need to rename `takesHeapSnapshot` to `takesScreenshot`
Why did you change the parameter name?
This is not correct. It also causes more than comparison. We'll need to clean up the `go` to show it out in the `admin.go` file, which is the most likely to cause a build to fail.
Should this really be `""` rather than `""`, or is this just for debugging?
I would prefer to have the check in `get()` rather than in the body of the `if` statement, since this is not an error code.
I think you need to move the import to `getPiplassfish` method
change the name back to the new style
Can we make this configurable? I would expect this to be configurable.
We're now pulling a null here, not adding a new one.
This is a little tricky, but I'm guessing the `add()` function also contains the unit tests and `wsid_add()`?
I don't think this is needed, the new code already uses a new method.
This change seems unrelated to the bugfix. Can you remove it?
How about moving this into the `DockerfilePath` section?
I think these should all be constants.
Is this the right way to do the migration here?
I would use `return None` instead of the second return value for all paths.
We don't use `omitempty` here. Just do this.
you should use a constant for `iff`
why is `Region` removed from the config?
Why do you set `connected` to `None` instead of `None`? It is not a requirement and `None` is used in this case.
Because we want a docstring for the parameter, the user could use a `window` argument. This way users can pass in a `default` instance.
I don't see `getNonStreamingMethods` used anywhere
I think this will still be the case for a long time the `--force-property` flag should be `'3'` for the `--set` flag, and then the `==` flag should be `'true'`.
We should use `zeros zeros(shape.size(), 0);` here so it is clear which one is expected to use. Also, is there any reason for a shape to be null when the function is used in the `ResetReset` ?
this will not work on all models. You can probably drop that and make the handler `parser.path` call again in the first place.
Can we keep the old code?
This file needs to be renamed.
does this still need to check featureToken?
This is the key that should be a string, not a `destinationPodName`.
nit: alphabetize this line
This change makes the test fail because it's not really part of the fix.
Why are we adding this here?
I don't think we should be using this for all storage storage. Also, since we can't rely on the user to use the private method, I think we need to add a check for os.kdir to ensure we can't find a valid path in the file
Shouldn't this also be `TraceContext`?
Is this required ? Because if you are already using `java.io.FileOutputStream` it is the same as `java.io.FileOutputStream`
Why is this in a separate PR? Seems unrelated to the same PR?
Why `ecsMaxReasonLength` and `MaxIDLength`? It seems the name `data-` is used in many places, not in the project.
This field is in `prohibited_unless`, is it possible to have a different field from `prohibited_present`. This field should not be added to other prohibited types as well.
I think this is only required for the `-`
`QUIC_GO_LOG_LEVEL` is not used anywhere so I removed it
Why do we need to check `*virtualDiscDesc.CapacityAllocationUnits`?
Is it possible to have this `data` list of elements?
In general, I'd expect `.get()` could be a `String.mkString(0)`
this will break any existing API. Is it really necessary?
Hey @deads2k I don't think we need to change this as we do for server side copy, not just a hard-coded config. I'm not sure how this will work with any other server side copy as well.
Should this be `access`?
is it necessary to make this test a separate method?
Why was "go" before? The go-go was already there.
Nitpick: I'd prefer if the field was renamed to something like: `[subquery:[subquery]`
was this a mistake?
Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
I don't think the "break" can change for this, any reason it has to be changed?
I think this should be moved to CoreTags class. This is used by both env and the CoreTags namespace.
I would also change the description to be "yKL3rWXluEM7NapnMSCNNfkiq"
Does this mean that a `Event` gets deleted to `preserve_host_output` has an active host?
This `node` field is not used. I believe that the correct fix is to create the `attributes` field instead of the attributes.
These are not used.
Is this because we only support the `pss/{topic}/ws` API?
This should be private.
Worth a utility function?
We also need to check `allowedPostRequest` in case `req` is null.
This is not a breaking change for existing users. The existing customers will want to override the new one.
this is a bit odd as it's not a hard dependency
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
I would prefer to have a separate name for that variable. Otherwise this is a bit more cluttered and maybe more closely.
I think this is not the right place for this, as `BATCH` is used only when `WebServer` is enabled.
Shouldn't we be setting this to 0 in tests?
should we add a check thatBuffer.isBuffer was 20 before calling it?
`p` needs to be a `Guid` like other services.
I think this was just a leftover from debugging?
We could add this to the `L` check in the `describe()` block so it can be moved back up to the `if` block.
is this a typo for our current sole purpose?
@saghul, we are trying to workload us for this... if you really need it, do you think we should make it configurable?
This change should not be public API.
I think we should just check that this is actually defaulted to true and only set it if `relayets` is set.
I'm not sure it's safe to do this. If we're going to add a new parameter that's not going to be set, maybe it will be better to do it once.
Line is too long. [85/80]
remove the empty line
this will also be removed for S3, right?
The output output should be an output in the `reporter` method, not an output.
What's the thinking on changing these?
What is the purpose of this method? It is not used anywhere in this test and the `OnchainConfig` now has no value.
Why do we need to remove the attributes? I'd say `AutoRest` is a very common term as well.
Can't we do this in `setUpNode` so that we don't have to do this in the future?
Don't need this
why not `Block()`?
Shouldn't this be a `createSource`?
I think this should be `Isolation`
MainMenuItem should be enough.
I think we can remove the `text` here, we only support the `Private` attributes in the `text` list.
Same here, we should not use a `new` argument.
Can we remove this and keep the test clean up?
Can we call this `shallowCopy`? I think it is better to do it for all shallow-service shallow-service shallow for pod-code.
nit: I don't think we need this method anymore. It should be just `VolumeNamespace`.
Just to confirm - in case we ever return `Number<WebNAME>.cdp/`?
Could you explain why this change?
This should be a separate change
Do we need an index? I mean, do we want to test that?
I'd prefer a more descriptive name, `apply`, `apply` or `apply` is easier to read and confuse people that they're not consistent.
Should we really add an extra field to identify the Config? What do you think? :)
Not sure about this. I think we should use `user.hasText()` here as well.
This should setUnsubscribed in a variable called `setUnsubscribed`
I know that this is just about testing that Sports is not part of the Sports but how about making this an enum class?
I'm not sure this is the right choice. Why would you want to make this configurable?
The other `child_` functions in this `DS.py` work, I think.
It's a little confusing to read... we also store both the `failed` and `FAILED_TO_LOAD` in `failed`... but also if we can add `FAILED_TO_LOAD` to `failed` in `FAILED_TO_LOAD` then we can remove the `failed` part.
I would use lowercase `mediaInfo` here.
this is the wrong place for this, since a media media will be closed even if the media does not exist..
should we just make this a constant?
This is wrong now, but I think this is a leftover from a previous version and should be reverted
I think this should be a constant
@alexander-schranz is this the right place to have this block to be inside `self.tab_url()`?
Why is this import removed?
Wouldn't it make more sense to have this in a `ensureensure` method, and not have `ensure` method in `ensureNum`? And in other words, we could just have a `ensure` and have it contain all these `sockaddr` properties.
I'm not sure if we should make these run-private. The idea is to have an `if fs.Config.StatsFileNameLength != 0` check here and have a `*`.
wow this was actually broken before
`Tree<TYPE, ?, ?>` and `Tree<TYPE, ?, ?>` (I don't really see `javaslang.control`). Do we really need this?
Please don't do this; if `db.capacity == 0` we'll always want it.
Should this be in a different file?
This one shouldn't be required. It can then be removed, right?
This is the same as `_WIN32` and other includes above should be moved before the `if` check before the `#include` clause.
Metrics/LineLength: Line is too long. [83/80]
Can this be `resource.isSupportedMimeType()`?
I would move the file to the top of the file
Why not do this inside `if` branch?
@smarterclayton did you mean "incorrect" instead of "ouou"?
This should be `if (param_.solver_mode() && Device_Device(param_.device_id())`, otherwise there will be no visible visible when the device_id is set.
Why is this needed?
I think we should do better and check that `precision` and `None` are not the same, just for the next case.
Why was this removed?
Just realized that all these calls are in `models/configure`/`models/configure`. I didn't see any use of it. It's just a nice thing that wasn't done in this PR though.
Is this `Workingdir` in the config file? If so, can we make it `WorkingDir`?
was this a bug?
Why not move the lib import to the same line?
Where is this used?
why not use `String#Equals(String, StringComparison)`?
It looks like this logic is repeated 3 times - does it only handle errors? Is there an issue tracking that?
Unused import, can be removed
@bartonjs, I'm not sure why I put this here
Shouldn't this also be `//`, `//`, `//`, `//`, `//` and `//` both work?
I think we should add the environment variable to theenv pkg. Instead, please use the same variable name for all the services.
This is just for the complete complete use.
Why are these changes needed?
Why are you passing the full path name here?
Is `_ p2p` correct, or do we want to get rid of it?
This should still be `errors`, right?
Is this something we need to address in future? I'd expect a single method that returns `self._url`, for example.
I'm not sure I see the point of this method. Why can't a null check?
Should this be `type`?
You can do `m_renderPass_dependencies.insert(m_renderPass_dependencies.end(), m_renderPass_dependencies.end()) + m_renderPass_dependencies.size() + m_renderPass_dependencies.size();` directly.
The `QUGenerator` was used for both fields in `DotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDotDot` and here we want to implement "HOLExperiment"
The fix here is a bit weird, I wouldn't expect a double to have this be a double.
I think this test is missing by the call to `AppVersionExporter` that needs to move to `AppVersionExporter`.
Why not just return the result directly? It should be the latter.
why not use this for names in names?
This is not the same as `ledger_walker` (and it should all be `None` as the second arg). So the `walk_count` and `walk_to_walk` should be moved to `ledger_walk`
typo, missing from the class
`strutils.bytes_to_escaped_str` returns a string. Is this right?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why did you do this here? It doesn't look like there is anything that prevents it from being overwritten by the user. Is there a reason we need this?
It's odd to see `ImageDirectoryStructureCreator` being a string, but it's probably better to use `ImageDirectoryStructureCreator` instead.
this needs changing once I suggested moving the code to `common/Tags.go`
Is there any specific reason for adding this?
I think this is not needed, `initPWMClocks()` already does the same.
Use a placeholder, not concatenation.
This is the default. We need to keep the ESP32 version.
why the change from `iFromPeers` to `ingressRule`?
do we need to add `.scope`?
You could make this a function of claims.Namespaces and return the result
Is this going to be true for RelaxedReclaimPurge?
These changes were made made to the test file. I changed them because the version of the version changed.
I'm pretty sure this is defaulting to False, but if so, I'm going to change it in a later patch.
I know this is a change in behavior for the blocker, but I think it should be in `onChange.fetcher`
This means that every time we call this function we return an error we should make it possible to remove it and always call a hard error, i.e. not add a new function to the cri55 function. Is that intentional?
Shouldn't this be translated as separate commit?
`currently` seems to me an incorrect operation
Why not just `computed`? `pubpub`
The PR description says `btl.reload` but the second one of the specs are still a little bit :smiley:
Why the remove?
It looks like the `hidden` value was being used in several places in this file. Why is this needed? I think it is better to remove the need for this.
Maybe this is worth it (especially since execution is a gomock), but not used by execution
**Question:** This argument is not really related to the PR, but I'm not sure if it is a good idea to have it here since it is a global variable. I'm not sure how expensive this is, but it seems it seems to me it should be used elsewhere (and not for the usage usage usage).
Please check `if(ev->flags > 0)` instead of checking for NULL.
Should this have an `Capability` or a `Set<String>` type?
I think you can get rid of the MD check and just check that it is not written.
Should we have a unit test for this? It seems like it would need to be configurable? I'm not sure how this relates to VPandasIndexingError is here.
The CoreChecks is not used at all?
I think it would be more readable to make this named `public`
Is this related to this PR? Does `choice_name` depend on any object?
This method is going to be useful when a schema is recreated (I don't understand) and this is a very different purpose... Can't we change it to something like `parquetSchemaUtil.convert(schema, name)`?
Why this change? It seems it was just the wrong order for the first pass.
Can we rename this to `Counter["Gauge"]` ?
would prefer `if (code.match(/ ...`
Why are we changing the API?
public static import and getDistributionMode
Is focus used anywhere? If not, please remove it, If not, remove it If not, use the default, remove it.
Are we sure that this function will always be called for everyone who might want to have an opinion on it?
I would keep this as `--reupload=fragments="Re-upload all fragments, even if it's not being used.
I thought we had already added this field before? I thought it was only used in some places so not in the PR.
This will fail for `mSession` and should be `mSession.isActive()`.
Should this limit for BMOs/nbmos/10 (in MB) be agnostic limit?
Shouldn't this be `Set(big).Int`? Otherwise all the functions are expected to be rendered in the same way.
Maybe also mention "Tokyo".
I believe we're dropping this.
Just wondering, why not use Twig_Environment instead of Twig_Environment ?
We should avoid using the term "issue".
`opts.generate_hexfloat_in_json` is not really the right default here, since there was an error when `opts.generate_hexfloat_in_json` is false. But, if `opts.generate_hexfloat_in_json` is false, `opts.generate_hexfloat_in_json` is false, so we need to check if `opts.generate_hexfloat_in_json` is true.
If we change Manifest name, we don't need to add this interface.
why did you change the other `harparser` in parser? I don't see where the parser is in parser.. (i guess it's a pain in our codebase)
this is not needed anymore
This is a little strange, as there is no `findElements` method.
Why this new parameter?
Should we be doing `this.givenFeeSat = opts.feeSat || none(opts.feeSat)` here to be consistent with the `if` above?
How about a unit test with a conditional on the block? This way it doesn't have to be skipped at all if the conditional on the block.
Do we want to add this? We are already deprecating sync/store accordingly.
Is it possible for these `ReadVectorSize` to have an arbitrary path?
Why not use a wildcard for import?
nit: remove extra spaces after `return` please.
why is this changing? they don't work on info
can we get rid of this?
Is this the only place where the file is used? I think the `.no-2:` is actually required since this file is not initialized with any non-empty string.
Since we're here, wouldn't it be better to have a `spec.GetXattr()` call in the `if` block below?
I think this can be simplified by just a `currentMedia = callback.getNextInQueue(currentMedia);`
Won't this still work without the `name`?
This is not a required file, remove it
This will create a new `findUp=` node in the `find Internal` function (line 4393) which will find it.
This is the change that fixes #4028. Please revert this change. Thanks.
If I am not mistaken, the token must have a value. We have some "substring" for that, and we should probably not have a default token. If we don't need the token, that would be good.
this is the reason why you added `this.delegate = delegate;` here
Redundant `return` detected.
remove empty line.
This is necessary if `ResetReset()` fails.
Is there a reason why we removed this line? Seems like they could be removed too. I can revert this line.
I think that in order to have multiple partial instances we might be able to run multiple partial instances. Can you move this line up to the top of the file?
Could you explain why you need an example here? Also, I'd rather not have a single entry that refers to `--no-Dockerfile` and `--no-cache-Dockerfile` that is passed by `--no-Dockerfile`.
Just a note, in this case I see it's actually a valid option...
It looks like this should be in a different commit, if you want to fix the problem.
Could you please describe this change?
Shouldn't we do a null check on any of the other tests here?
Should we move this logic into the `begin` block to avoid duplicating the code if the auth is not successful?
I would call it `mqtt_inner_item`.
Why did you need to change this file?
I think we can use `string.format` here to avoid the NPE when `type != null` in case `string.format` is not supported.
If this is the fix we want to fix the bug. The user who knows how to fix the OOM issue. You can do that instead. If you want to fix the OOM issue, it is not an issue anymore.
Instead of `g.auth_header` can we just pass the `tlink_header` to the `register_block` function and have it only pass it to `register_block`?
so, we are setting up multiple users to the same file? i.e. not just the same file... i dont think we have multiple users.
What's the purpose of this config?
This method is being called in a single place so I'd be tempted to make this a method on the `["deliver_now"]` method instead
Should it be "stages"?
Why the change to `&&` here rather than just `messageBody.IsEmpty`? Then, I would just drop the `&&` entirely, and replace its check with `if (!messageBody.IsEmpty)` below.
I'm wondering whether there is an easy way to avoid this type information? Not seeing any other `app/views/` suffix elsewhere, but I'm curious if it was necessary to add the `--public-id` flag to this field?
Is the change here still needed?
This should only be enabled if `128Int > 128`
let's use the constants here
This is not an issue but a PIeecces. The PIeececces one has already been updated. I think it might be useful if we want to add it into the PIEmptyManager class so that we can remove it from the PIeecces flag later on by changing the PIeecerts.
Another one-liner would be helpful here, too.
Remove in cleanup and put it in another file.
This could be `String.prototype.mkString`.
I don't think this is correct. The CertificateRequest has been approved by the CertificateRequest; so the CertificateRequest has already exists and the CertificateRequest has still been ready for signing.
I think this should be `!accountID.accountID`
I don't know why we have this in altertative... but if we are inventing it, let's make this a separate PR for not using `__all__` for it.
@matt-gardner Do I get why this extra newline is needed?
This is a change from what I was trying to figure out. Is this intentional? If it's not, then I'd suggest removing the `PRIu` from the `PRIu` variable, and adding an `PRIu` from the `PRIu`. That's why I didn't see how I was getting `[` on my part.
Hey @DaanHoogland , thanks for your contribution. Can we do this in a separate PR?
This is the change I'm curious.
@bryevdv, but this should probably be `winVersion.winVersion.major >= 10`, right?
Please make this a constant, it's not a part of the option name.
what if we add @ @product then @viewable_subscription to ViewableSubscription?
I wonder how many other languages do we care about this?
so this is now unused now?
This should be `c.BoolT(FlagConnectionEnableAlias)`
I'm confused, I thought we weren't working with this? If so, would it make sense to have this in a static method in the `FunctionDescriptor` class to avoid duplicating it?
I think it would be a good idea to add a `historyId` and `historyId` fields (since the table has the same state as the existing one). It would also make the code a bit more readable. WDYT?
This is not right: just do the following two checks for the `instr_is_scatter` function, the function call above will return a value.
The `.Once()` calls here are now just unnecessary.
This function is `m *LBFargateManifest`
Please add a license header and a few other occurences in the name.
you can use `resp.body` here directly
This does not return anything. We can't just do a call like this. Just return.
I think we should be more strict about checking in `go get -d -v ./...` and then check against `consensus/retry`, otherwise it will be much clearer.
Does this really needs to be a directory? Shouldn't it be grouped by a user?
I don't think this should be part of the public API...
this is a weirdness of how the API ends up being used, why did you want to use it here? I think this is better as a separate PR if you can, but it seems like the only thing we need is to always have `verify.TxnPool` and `verify.TxnPool` that are already called when we have it there.
I'd rather not have both `ply` and `4`, that would be a breaking change. I think we can also get rid of the `ply>=3.4` part.
Can we make this debug level `DEFAULT_MaintenanceMode` instead of `DEFAULT_MaintenanceMode`?
Why did you make the change in this file?
This is the sync call for an async request
This should be reverted.
This check should be moved to a separate method, as it's only added to `AbstractProcessBlock()`.
end at 47, 4 is not aligned with if at 43, 22.
How about just using `else if`. Also what about nullptr?
This might need to be `&& height` at the start.
is it not required to have the parameter in the class ?
It would be nice to have two separate functions: one with the same name and one with a name, one with name and name and name. one with a name and one with name.. For the future, one with name and name. one with name and name. one with name.
Suggest removing the unused arguments.
Extra empty line detected at body beginning.
I don't think this is needed since `PMIX_RELEASE()` has a pointer, so the pointer can be simplified
I would use a shorter name
This is a bit of an unrelated change. It's not necessary to be using the type-level parameters. If it is an array, you should be able to just call the type of the method from within the `callAction` constructor. If you look into, the `super` function in `super` is only used in `super.` below.
Is this related to this PR?
Rails/DynamicFindBy: Use find_targets instead of each.
Is this safe for some reason?
I guess the `variableInMap` can be null in here? Maybe `if (variableInMap == null) {`.
I think this is a bit of a nit, but I think `finalized` is already in the `Fn`. Maybe something like `awaitUnbuild finalized`?
This can be nullptr.
This one is the same as the one that's used as a member field.
Why is this line changed?
What's this constant for? I don't see it used anywhere.
I think it is better to use debug rather than silently ignore.
This is a change of API. Please revert this change.
Why did you make this change?
I'm not sure that we want to do the EnableApplicationResponse for these purposes?
Should this return `pony_assert`? Seems like a better error code would be to be returning stringtab...
I am a bit confused... Isn't `getPackageParams` going in the interface?
Is this related to your PR?
Is this an improvement or a little more specific? I'm not sure if we could be using `_u.date00` as the name of the function. What do we use? `_u.date00`? What would be the meaning of `_u.date00`?
shouldn't we be exposing `default=True` here?
This will probably be a breaking change since it's unintentional.
Is this a regression or a regression, or does it just use the `Write` field?
Just curious: why this file has changed from 5f-layout to 5f?
This is the only change that affects sending a read-only error message.
The `newBuilder()` here was never necessary since the `MetricMetric` class is deprecated.
I think this should be changed to `GetSlot` to match the API.
You should be able to get rid of `string& path` since you're using `lua...` in the middle of a regex.
Why the change?
Is the "healthcheck" field still necessary?
Can you please add a check to make sure this is all done on the screens
I think you need to specify this in `SubnetGatewayIPV4Address` and `SubnetGatewayIPV4Address` as it was before.
This is probably the wrong place to put the `find` method here (and in the `find` method above).
@jasyfmassa Is this to import the generator?
why remove this?
I would say this is an actual test and not a specific test that will be unstable
I would make this a separate PR for it to work. What's the reason of this?
The same issue here
do we need to call `CancelPrefetch(ptr.ID)`?
Is it possible for us to return a struct here to reduce churn?
remove extra line break.
> `GetStream` does not look correct here, I'd expect it to return `null` even if it is a `GetStream` that we return `null`. I don't think we should change that to `GetStream.ReadWrite` because it's an array and `GetStream` is an object. It seems like it could result in NPE if the file doesn't exist, since `GetStream` returns an array and `GetStream` return `null`
you can merge these two imports, `qutebrowser` is not needed, and you can directly import the `isort` method.
We could use ` neve-tans` here for the kind of thing that is going to have been defined by the app.
nit: can you revert the changes in this file? (and the one above)
please revert this change. The previous version of this function does not have to be changed again ...
Remove this line.
I'm not sure why we need to change the class from `packageImplementationVersion`. If the package package is not a property of the version, then this check will be redundant with the `packagepackageVersion` above
Is it possible to have this variable in all cases where you have to define it?
I don't understand this change.
@sparrowDom This should be `io.prestosql.spi.copilot-task.name` and be `io.prestosql.spi.copilot-task.name`.
You can do `e.type === 'input' || e.type === 'change'` instead of adding a new line to each of these lines.
This is a change required to be in here.
nit: `if (_ncasecmp("OFF", val, len))` ?
This is not necessary, but a warning in a test I can't see.
I'm confused by the docstring what you call it?
Shouldn't it be "CatchBlockLog"?
I think this is a leftover from the previous PR. The old idea was to only use this if there's a new `__init__` method in the `MPT` module (see below). The current version of the code looks good to me (I can be wrong though) for this PR though.
So these are unrelated, but they're not actually used? I don't see it being used anywhere.
I wonder if we should log this somewhere? We'll be trying to not forget about it if we don't do it for every hand.
Looks like this was intentionally noted, since it was here before and is now handled in the previous iteration.
I think this is fine.
This means that it will be not supported in production.
This makes the imageIO not a pointer?
Is `omitempty` still used? If not, should be used.
Is it ok here to assume the map has been initialized by?
IMHO this should just be `getMap`, because if the aspects is not found, you could just use `nameof(nameof(nameof(nameof(nameof(nameof(nameof(nameof(nameof(nameof(nameof(topic))`.
This was the right fix from a previous PR, I was just trying to figure out why. I was thinking of a way to get the right name and the error is the best approach to do here. I don't know what the difference is, just saying that it has the right idea. I'd expect `os.path.dirname(...)` to get the right name.
I think this should really be on the `AppFactory`. It's also possible this class is only called from `build()` and `build()` methods (as is for other `run()` methods, and `build()` methods are called from `process.py`. We can also make sure that they are the only one for `process.py`).
I think the `auto` and the next line should be removed, but is this a bug? If so maybe we can just remove the `auto` altogether?
Why is the Network ID present in the VM ID but not in the VM ID in the VM?
I think the rest of this file needs to be reverted.
Please avoid using `String.format(...)` as the default constant for Roader.
Shouldn't DEFAULT_REVISION be DEFAULT_REVISION?
This is not related to authentication. I'd just do 'loginOptions' before calling config.getOauthScopes()
You need to check that `layout` has a property and so you can call `this.focusElement_('noteTextViewer');` once.
@sparrowDom Doesn't this cause the build to fail? I'd guess this is something we want to avoid, right? I thought we had to add this to all our custom implementations.
Is this the case that `__all__` has been replaced by `__all__`?
if we're going to delete the `if` below, maybe we could have a try/finally somewhere that checks if the key in the string is empty?
We don't need this change as the main code already has this.
I guess that this function should be called `afterRetryForever` instead of `RetryForever`?
I don't think we should remove this line. There is already a `return` statement in the `else` for the error case. The error code below includes the error, which is not expected to be handled.
You'll need to set the key to the value to the value before setting it.
The actual implementation doesn't seem to be used anywhere
This is good. `Match` can be `priority uint16`, because that's what `azure.service.date` is.
I guess this should be `updateUnresolvedPackage adds an `.` prefix to the `<pack>` package.
Please use `pathlib`.
@mjkkirschner Is this an accidental addition to a specific setting?
the `network` was declared within this method and goes out of scope at the end of the function, so nothing else can modify it. We do not need to copy it again in this pr.
remove the empty line
I think this needs an explanation too.
Is it worth making this a constant so it doesn't fail in `succeeded/`?
Can we move this import to where it is used?
Just remove the return value from `InstanceIds` since we now return an error.
complete or restart?
I would also add this to the `before_action` below.
this is the only line that changed in this file
` PutHash` can't be imported if it's not.
This is not being used anymore, right?
I'm not sure I get why this was necessary, but is this intentional?
I don't believe we want to keep this for anything else. <msg> Do we have to worry about other regressions?
Is this test only working if you use `checkState`? We can't use this in a way that's the same order as the rest of the test suite.
Do we have any potential problem with just one set of potential contexts to enable it in case of error being returned? I don't know why it is necessary. But this seems like it might be worth it for a follow-up PR.
I wonder if this could be called multiple times instead of each loop
This should not be necessary.
whoa, you're not going to use it in Jelly though. it's a good idea to add this to the Jelly so it might end up in a good place to define it in a more future way. We could add a name `io.core.druid.segment.default.core.internal.annotations.get_core.default.get_core_source_test.html.core.core.internal.source.default.source.dvc.core.default.get_core_source_test.html.core.dvc.core.dvc.core
Is this really the correct place to put this? It's a bit more general `ResponseType` and `OR_malloc` that it should be used instead of `ResponseType`, which we can use for all of these, so that we can use the `.spec.urls` to set the `icmpCode` attribute on the `*`.
InitializeStreams and others are still in the code base
What is the purpose of this? is it always 'ico'?
do we need this?
chunks2f megabytes -> Spegabytes
let's let's do `altName`
Shouldn't we use `$options =uning('/tax_engine')` here?
Is there any test to cover this?
Does the updateLibrary method need to be renamed to Library?
I think you can drop this if it should be `.filter?` or something like that. The filter could have an extra `published` or `.filter?`
Is there a reason for changing this?
The issue with log4net.Util is that the log4net has its own properties that is passed to the caller (I think this should have been "TracerDomain" as an argument). I'm not sure that the other arguments are different, but we should be consistent.
@tgamblin Do you remember why we would want to use JsonRpcError here instead of using Rpc ?
This function is also defined in the file name (`Zeppelin`), and needs to be dropped.
What does this do?
Is there any way to prevent the entire aws entry from being generated?
Can you please put this behind a conditional statement? I'm pretty sure it's ok for me, but I think it's fine if you want a few lines below.
Is this an unrelated change?
This mock_entry isn't necessary any more. The package should just be mocked with a mock entry.
RunQuery is not used for "Run" anymore.
type is already an env variable, right?
This is the only change that fixes #8025. I am going to research why this was here, but this is why the tests are failing because of this. It is about a test for the previous behavior for `based` and thus this should have been `based`.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This should probably be `hand.getPlugin('Tomek', 'fill', 'pop', 'used', 'used')` instead of a separate string
the `ref` parameter must be `ref` to match the other one, and also the `ref` parameter must be `checkUser`
I think you're missing a call to `primary_drm_backend_monitor_create()` because it's a single call to `primary_drm_monitor_create()`?
This isn't related but should have been removed
I'm not sure that the `.revert` is still relevant here.
why was this removed? Are we using unlink_display() twice ?
I think the functions here are the same since we use it elsewhere, and they are the same.
Since you changed the model, I think you should also change the `icon-number--"` command to be `/icon-number- all`
I would put the setter in the constructor. What I mean would be a better way: - `restProducerInvocation.setInvocation` - `restProducerInvocation.setProducer` - `restProducerInvocation` - `restProducerInvocation.isInvocation()`
I don't think we need to add this. Maybe `if (!projectJsonPath)`?
@tmds, I have fixed the issue here.
I was going to suggest to call `wlr_input_device_destroy(dev)` here and not the one in `wlr_input_tablet_tool_destroy`.
This method should be private, and should not be exposed as anything else.
Do you need to handle `props.children.forEach(props)` here?
I don't see any uses of `--mode` in this option.
isn't this always true?
AFAIK, the PR description is just an idea.
Why we need this?
Why the `double positive`?
Should we make the `proposal_attr` arg arg for `Binaryoast_name_expand` so it only applies to all the `proposal_attributes` columns?
I don't know the exact same thing, but if we have a similar key in `COMMAND`, then we can just change the key in the signature, to keep `COMMAND` the same as `END`, `END`.
Please rename `omitemptuy` to just `CHAR`
This change was not needed anymore
why is this change required?
not a typo.. "show specify assume role when aws.CredentialsSecretRef.Name"
This change is necessary because you need to pass the `blazer` to the `common/blazer` without the need for a call
Should we be using `name` for the name? I don't see any new name for this. Just want to understand.
I'm not sure we should use two functions here - one makes the conditional always fail. I think you should just make the conditional in one line, and pass them as an argument to `header.main` (since it is a special case)
It feels like there's an unnecessary way to fix it. August 30 might just be a `PMDException`.
This needs updating as well
Does it need to be added explicitly? The body of the body seems strange
This file doesn't seem very useful - maybe a `VarRename` property should be added to the `provide` class? Or some such property should be added.
does this need to be public?
This type of change is unnecessary.
This should use `T` and the other `isConnected` functions.
No need for a separate PR.
Is this used somewhere? I'm surprised you need to update this enum when the `enumerable` isn't in place?
Can we delete this method and just inline the one in the `line-generated` extension, so that we don't get rid of it?
why is this in the individual individual individual individual directive if this is added again?
This should be `max_bound === null`
all lowercase should be 4.
I think `tail_` and `tail_` are both a valid `String`, so I guess it would be better to just call them `append`?
Wouldn't this result in a error if the result doesn't exist?
Hash data doesn't exist.
Why change this?
This `rescue` can be removed since the `Metric_hosts` is already a string, right?
remove this line please
I'm not seeing where the `rerender` flag is coming from. Can we keep the same here?
This should be in the _is_editable_prop method, as it has some different check.
What do you think to make it clear in the doc that it is no longer a component?
This is very unusual, the `basename` function is very confusing. I think this is the only place we are expecting a single entry. Is there any reason why we don't want to log an exception at all?
What's the reasoning behind this change? I've just looked at the first param and I'm surprised it didn't mean for `10`, but why did it change to `1`?
What if there is `content_t=1`?
Should this be `deep_thoughts` or `deep_thoughts`? I think the `deep_thoughts` would be `deep_thoughts` in the `build_systems` package, not `thoughts`.
is this a regression or a test?
I don't like this name because it's the one we want, and there is no `_trail` permission.
why not using `exFlowKey.intern()` ?
I'd rather have the corresponding `context.Context` here to `doFn()` so we don't need to change this line for readability.
Do you know why this is the first place for this PR?
What if I specify one folder?
Sneaked this here. Anything wrong with the ` rdmolops` import?
I don't think the whole point of this `wait` is to dump the px. In fact the `wait` call below has a `close()` method that does a `wait`. Could you please add that to the docstring?
I'm curious, what is this change?
This isn't needed, `sortByColumn` is only used in test selection.
This is a bug fix. `isHydrating` is never thrown. Can we remove this code?
I guess it is a good idea to change it to `ReOp`?
Shouldn't this be `QueryVisitor`?
Why was this changed? cv.child is always non-nullable and we are not using the default values for cv.
This would be more reasonable if you put the `str = double.Parse(id.Substring(3);` below the `else if`.
I don't see the usage of this condition. If you do this, I will fix that.
Why change to ` Copyright (C) 2010-2021`?
revert this and change the copyright year
Should this be `l.KeyLabel` too?
Can the issue be improved by using the old one in the `policypolicy`?
why not `\s`?
why was the constant empty before?
This change is needed if `IsApiToken` is true but `nil` isn't. Is it because `c.IsToken` isn't called?
Do we have to check for `applyMode == ""` for `||` here?
I wonder if it's reasonable to have this set in a constant, and then in the `cmd` file (as well as in `create/spring/`).
The condition should be after conf.HTTPConfig
I think a little better to say : _my_ as you know you can see the type of the properties in the doc.
can you add back these?
`|| PrivateKey._getRandomBN();` would be better.
The goal is to change this so that if we change a class into a different class, we can still get it into the `getParameters()` method and remove it
"If the containing message is serialized, and the fieldmask will be serialized" -> "If the containing message is serialized, the fieldmask will be serialized"? I mean, if there is a non-empty fields, then the value will be serialized.
I think it would be helpful to have a test that passes in this case.
The formatting for this should be 4 spaces.
@tnozicka what's this `knative.dev/logging` path or did you miss the `knative.dev` path?
why is this needed? the span was added to the `operation string` below.
I think it would be better to have the "127.0.0.1" as a default of None (or just the default value) in this case to be consistent with other fields (i.e. None and 0.0.1). If you are going to change the default to None, I'd suggest that this would be fine with the case where the default value would be used.
This was an error that should have been fixed in a different pull request, and not a separate bug.
I think we can get the default from `KBFS_ENABLE_JOURNAL` now
Please use a blank line.
`end(true)`)` on line 35 and 44 is not necessary here. The body of the method is only called from a single test which can be blanked on line 35.
I think these two lines should go before the previous `setup.py` and before `build unit`.
I think the function name `new` is misleading, since we are using `config.val.url.searchengines` and `config.val.url.setQuery(None)` here.
why remove this?
Why not just remove `MaterializationOrObservation`?
@alopresto Is it possible to change this to `["/aio/anonymous]` instead to check if the type is empty?
Do we really need this? There's already a new file for this already, but I guess a lot of things can be removed.
This file is no longer used in this file. We don't need to include any other header in this file at all. You can add a separate header if you want.
same here, can we delete the extra newline ?
This should probably be removed, the standard library includes `fastrtps/testing.h.3`
What is this?
Why is this sm.StateReader instead of the two-django state?
nit: the same code is used everywhere else. Is it possible to call this method before the object is created with `load()` and then call it from there?
This is an API change that avoids sending the value from `diff_res`. If we want to be diffed in the `.resolved` file we should also make sure we update the `diff_res` key here.
Is the first `1000` needed here?
I am not sure about using this - we only check the first `if span.IsRecording() == true` - is the value `nil` here? Is this the only place this test will be shown?
Can you make this method package private so that users can read the queue on the configuration too? That would mean a bit more readable.
Why the newline here?
is this going to comply with theinf checks?
I think the `s.getANewTag` can be combined with the `jq.Handler` above, since there's `s.getTagInfoUsingAddress` left there.
rollbackTraffic -> rollbackTraffic, use both context and context
Is this const still needed? I think it would be a good idea to define it at the beginning of the function.
In theory this should be `h.clientPort != null` (and the zk check should be `2181`), right?
I think we should remove this file and make the changes to MessagePack the default
We can add `default=True` to these packages and `default=True` here.
`getArgFromURL()` is called only in `getuildFile`, it doesn't need to be called here. It can just be called directly.
Is this just a long-standing of the `_MissingPandasLikeIndex`?
Shouldn't this be `subnets`?
I guess that you have an idea of just calling this `Ch`? I feel that this is only a part of the `<policy region> <parameter region>`
I would rather see test going to run a test on the testing setup of the V2StreamErrorException test.
@mattpap Ambiguous idea: is there any specific reason that this would be using `t("mailer.footer", "")`, or is it just for a specific reason?
Please remove this blank line.
I wouldn't call this new field something different than the one passing in `isNotEmpty`. I'd like to avoid re-assigning it.
This was a bug.
This method name is not very descriptive. `getDisabledMetricAttributes` could accept `undefined`, but I think it would be better to name this `isMetricAttributeDisabled`?
@sjenning how do we know this breaks anything?
Why is done before the loop in `close`?
Shouldn't this be `rclone` and not `rclone`?
This is a bit of a nit, and also a bit odd. `clamp` does not look like a function that returns `1e-12` so the `clamp` can be 1e-12, and this is not a public API.
Is this not safe to remove, and just use `_requestQueue` directly to get the `_requestQueue`? This looks fine, but I'm fine with this
Should the above `&subsurface` be removed as well?
missing a closing paren here
I see this wasn't a `MakeTestUID` so I had to update tests to cover the tests to cover the `EP-8` attribute. I have to think through the tests for this. I'd expect this to be a safe change.
I don't see this being used anywhere in the code.
Is this not needed anymore?
We should also throw an `error` or something
Why is that change? (I assume it's the default?)
`null` is a bad addition to the purpose of ` mock(DefaultOAuth2UserService.class)`
Does this work on Mac? Does it mean it's only for testing?
I think you can use `StringUtils.isNullOrEmpty(String QUERY_ID)`
Missing space after `,`
why is this necessary?
there's a test case for this
Do you have a default (e.g. 7) for which they use? If so, could you use a different values for the default?
The `value` here is already omitted.
Can we also check for `setIgnoreCase` in `pickSnapshotId`? It will also ensure that the order is set.
Maybe we could just make the initialState an optional and then have the initialState methods at the top of the file.
I think `Teacher.joins(:video)` is not needed in the scope of this PR.
Do we have any other issues with these?
This should use `tests.modules` and `pantsd` to avoid the need for an example of what it was for.
These can be removed if it's not used
I think the original link was wrong, I assume this is just a link?
Is this `nil` needed?
Maybe we should also add the `/session/:sessionId` to `/heap_snapshot/files` ?
Is there really a reason that we can't put a deprecation?
The name of this file is a bit misleading. Maybe something like `add_connection` or something like that.
This is incorrect because if we have a `code.IsNullOrEmpty()` in the expected output, we would still have to cast it to `response`, and if not `response.IsNullOrEmpty()` in the wrong direction. Otherwise this is not correct.
I'd be in favor of putting the type check in method call, but that's not a blocker for me
We should be using the `W3CBridge` in this context.
this seems to be missing a space after `if`
(style) spaces required around that '=' (ctx:VxV)
Nit: Use `AppCfneeSECONDSSECONDS` instead of `textUser`
Can you please add the `use_static` getter as well (since we have a similar getter for the others, i.e. `use_static`?).
This file should be removed
@stephenroller I think we need to call `Get()` on `RefreshAndGet` and get rid of `EnsureEnsure` in `EnsureEnsure`. I think this is the reason why you're not calling `pkg/resource/api.go`.
What does that mean? Is `optdict` always available?
Can we have it return an error here? We're using it in two places and it may be a bit simpler to read.
I'd like to remove this `identifier` method and add a TODO to remove the "identifier" argument.
hm, why did we change this file, what was the reason for this change?
Why is this change necessary?
What does this do when you try to use the `_notebook` variable? It seems to me that it only works if the `_notebook` variable is not provided?
Should this stay as `const` or `db` or `const` to keep it consistent with other services?
This change seems wrong. Why did you change the order of numbers?
Can you change this line to `format | ConsensusVNext`? It seems odd to me that if you are already doing this, then it's not needed. It can also be added to the `tasks` variable.
@tgamblin Do you want to change it to `cctx`?
I thought we had a `post_url` in the `resolve` method in the `app_url` method?
This should have a test, right? (And if you're already changing it, I'm not sure if this is correct, but I'm surprised there's no test to have this)
A few of this code in the same PR are using the same code, and it is confusing to have a separate code for the same code as in this function.
why not set `WriteDeadline` above?
This constant is unused and should be removed.
NIT: could be inlined
This is the only change you mentioned in the PR description. I just changed the existing tests to make it more robust.
If you're changing the `ip6` you probably want to use `isinstance(ip6,Net6)` here, rather than adding `@user` annotation above that does the right thing.
nit: I don't think the `std::vector` can return either the input or the object itself. That said, we shouldn't use `ResultCode` as the return value.
Why this regex is skipped?
Why is this 16 now? We should still set 430 as a 4th argument.
I think `Event` and `Hash` can be removed.
Missing spaces around the concatenation operator.
do we need a factory here?
Is it possible that we have one of the three three score formats with this change ?
I'm not sure this is needed.
This is not really the right abstraction to me. If empty, $source will be null, it will return empty.
There needs to be a space between `binary` and `compressed`.
controller is not enough for users to use a function?
This class contains only two classes: 1. There is no `_serializer` field. 2. The `_settings` property is only used as `_serializer` and only used by `_settings` in that class (`_getCache()` returns an int) So a `_settings` should be renamed to `_in` instead of `_getCache()` if it's a list of settings.
Is there a reason why this is not `f.metadata['websocket']`?
Wouldn't this be better off passing the `separator` parameter to `separator` and then initializing it in here?
I would prefer to add `alias` to `models/addadd_model_with_model`
I guess we can just use `GetMetricPointsAccessor`, we could leave it as it was and we can keep it as it was.
Please don't add trailing whitespaces.
I am still not sure this is the best way to go, but I think it should be `net/http/net` instead. The other one is `net/http`.
The `title` and`checkpoint` were previously initialized to `false`. Shouldn't we force a checkpoint here and only if the user hasn't changed to reflect the original checkpoint?
This doesn't make sense, since this is only used for `v2` in the code base. We don't have this constant in the code.
Didn't we want to remove all the test cases for Welcome_mail? Or do you plan to test that it works on older versions?
I'd make the code explicit what it's used for and how to fix it
What will happen here if the ring ring ring ring ring ring ring ring ring ring ring ringglassfish to be null? Do you want to use that?
@jordajm this was the bug that changed in #4275. Please rebase on merge with the existing pull request and get the reason to change it here.
`inputs plots(b, dagster_type=DataFrame)`
How about: "If the selection is anchored at the start"
Remove this newline (as it is already in the last commit)
Do all these still need "privacyMode" as well? Just wondering about why they are not part of the default "privacyMode"?
why change?
Why did you remove all theog overrides?
How about add a dev dependency on `checkpoint`?
In theory, we are not going to use the `predicate.Presto` property. Should we use it instead?
Revert this one
This should be `std::uint64_t` I think to simplify things.
can you move this to a shared function, so it can be reused in the same way.
I would prefer to put this message in the builder. Also, if the bucket is different from the one above and if it is internal, then there is at least one way of doing it in the `__init__`.
This should be an explicit bool.
Why not include stdio.h as stdlib.h in the Ctor and C/C++.h in Ctor?
is this a searchScope?
Do we need this call at all anymore?
Why this change? I don't quite understand the semantic change.
does this need to be public ?
this could be more descriptive about the word "Rename" vs "the".
I don't think `org.shredzone.flattr4j.model.User` is needed, you can import it in both `import org.shredzone.flattr4j.model` and the `default` declaration.
That's not what we use here, since RPMs is an implementation detail that will call this `.String()`.
This change seems unnecessary
Please add `[DisallowNull]` to the constructor
I'm not too familiar with transport transport and I can't find any references to transport here in the transport without a transport, so there is no real need for this extra check. I'd recommend you change it to something like `dup_object`.
I think this <msg> nit, `ctx.Status.ChaosStatus.Experiment.Phase` will be the default for us (i.e., `ctx.Status.ChaosStatus.Experiment.Phase`)
This should be grouped with the other examples.
shouldn't this be a component-level constant ?
I'd rather not call this `X` because this way you won't need to do anything specific to each header
I'd be inclined to keep this line but not add whitespace to the "if arg" block, rather than adding an if statement, because I don't know how to fix this, but I'm wondering if there's a problem that I'm missing and wondering if it could be helpful if the error happened?
I think the LoadGroup should be at the top of this file.
I know that we don't support name name in the name and we already use the same concept. Maybe change the name to something like "created name"?
Why not directly use `privateTransactionHandler.getSenderNonce` directly here?
This should be `setFlags`
can you explain why this is required ?
We don't need to change the default behavior.
Maybe we can use an enum directly instead of a constant?
Maybe add a description of what the expected result does.
The `IOException` was removed as it was in the original catch block and the code was in the same PR.
why this method is public?
If `TRUE` is not used, it will be used to specify TRUE by default, otherwise, it will not be needed here.
I don't think we are adding this variable for anything else - it's only used for any task (because this is only for the task).
I would call this ConfigResource() and just call it `PluginConfigFor(interface{}) *PluginConfig`
I'd prefer not using `JSON` as part of the module. That way we don't have to do this until we get the correct data.
If this is only used in `Rails.Net` (and in `Rails.Net`). Doesn't this need to be added to `Task`, similar to `Task.getRegion()`? (This isn't being used anywhere, but the issue is that the code still uses it)
Why do we have to remove it in this PR?
Is this needed? I don't see any usages of `and`.
nit: can we call this `const`?
Do we need to validate that config has the same config as the old factory?
I guess there's a reason why you added this as a param to `Getabout` instead of `site` since this method would also be called on the `cities` where the `site` option is set to `None`.
shouldn't this have to be the default in version?
I would rather we remove the assert completely, it seems like that's a bug.
You need a period at the end of the sentence.
Shouldn't this be `KIE_CONFIG`?
Is this intentional ? I don't see a way to add the ix to it, but it seems like it is a tutorial of this PR.
what is the difference between `weight_` and `weight_`?
this is also an old code ...
This is not right. I'm not sure about the actual `master` -- is it ok not to use this to create one directory for every other, or a user in the `/configprint`?
I don't see where the `upload` is used. Can you remove `addons`?
Why change this to doubleDialog?
@tlauda I'm not sure I've tested this, and the original code does. The new code doesn't check if the trace doesn't exist and the trace doesn't exist and doesn't have the trace. So I think this is probably the right thing to do.
This is the same logic as above.
I don't think this should be true: `AuthFree = true`
This makes me nervous, but since this pattern is being used in a few places, I think it's better to only check if inputWriter is an error.
Should we add this to the `modules.py` file? I see we add it there in the `modules.py` file.
Should we remove params from here?
Nit: This is really a bit odd - it's the same thing that we're not going to get more complicated to the given message.
I think this is a leftover from the previous PR.
I think this is still not necessary, we should have a default property on a null state as we should never add it.
`null` is a good place to put it. It's not necessary to introduce a local interface.
Why remove these?
Hmm. This property is never used anywhere. It seems we can remove it.
Why we add axis here?
the new functionality must be added in the future as well.
@bvbflad do we need the update here ?
This is a very common term we should use to track what the span is and what the span should be.
I think you forgot to remove this
I would suggest to use a more descriptive name for this case.
This is the default behavior for numAttempts - 1 (3) - 2. I think this is better. @bflad ?
Can you catch both the `try...` and the `catch` here?
I don't understand. What is the logic of this method for? I'm afraid this isn't a nil service, but I'm assuming a nil is a good enough check to check here?
This seems to be the same as `Ember.IsNullOrEmpty()`?
I wonder if we should make this a public constant? This will help us with @daniel-beck
These are a long line.
this should be added in the constructor
The free bytes for the `tracker` variable seems to be a no-op so I think it's ok to leave as-is and leave a note about how to fix it.
It looks like `attached_listener_mutex` is no longer a `mutex`. Why is it necessary for this `if`?
Missing `is_` before `if`
Is it needed to pass in the `Test`?
Remove extra new line.
this should be `<tr>`
I think h2o__tokens is a pointer for h2o_token_t *token = h2o_token_t * 2; ++i) { h3o_token_t *token = h2o__tokens + (i) h2o_token_t *token); h2o_token_t * to h2o_token_t *token; }
I think we could use one of `no_docstring_rgx.pattern and` here.
this is just for testing?
Shouldn't this use `describe`?
Should this use checkpointPath.rfind('/');?
Code standards: Please remove spaces inside square brackets.
I don't understand why these two lines are needed. It's the case that the connected to peer (inbound) will only be triggered.
I don't think this is necessary because this test will fail if DateTime does not have a DateTime.
I see that `if ( ! footerText ) {` is not set anymore in this case, is it safe to remove?
I think you can do `GroupGroup`
Please, please, fix the indentation.
This is an example of a valid config (i guess it's an optional parameter on an optional). What about a proper `RuntimeError` or something similar, so we don't need to specify the default config for everyone.
This description is very fragile. I'd be in favor of adding a lot more information.
"If both this flag and "--drive-use-created-date" are set, the created flag may have been set, the created flag may have" FWIW I'd rather you
why did you change it to `1e-15`?
@mrunalinikankariya can you confirm that you have a diff on why you added them?
why need this? why not just pass in the value directly?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
If I remember correctly, you are calling `count` directly in the `count` method and using the one below, I think the `count` is fine here.
is defined?(Mongo::QueryCache) defined?(mongoid]:cache_table) if defined?(mongoid]:cache_table) if !mongoid]:cache_cache"] ||= {}
I'm wondering if this should be a constant somewhere? Or is there some way to avoid using a common model for all controllers (either `README_id` and `C:\s_id`?) or a `type` attribute?
why not make this a `var flatbuffers = flatbuffers`?
I think you're right the indentation here. We probably want the indentation to match.
should we make it return `false` by default?
Why do we need this change?
@Scottmitch does this work with the other values?
Can we remove the lock here? I think it is a bug.
This is a breaking change for existing functionality. Can you remove it? It's not really related to this PR, but it would make me hesitate to pull the new functionality out of the scope of this PR.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we should still keep this info in the buildCallback. If we're going to make it info, then we can still set to info in the buildCallback. That way if you're going to do this then the log message will be useful.
Is this used anywhere?
You can probably drop thisrand
It looks like this is still used in `EnvironmentConfig` (line 199).
Shouldn't this be done in `pendingRequest.configuration.remoteHost` above? This would be more consistent with the `queue_dir_ID` above and below
This should never happen, because we don't set an app.
What does this do? Why not just have the plugin exist on the plugin itself?
not needed, we have this on line 314
is this a "openv" thing to do?
You don't need this newline.
I think we should just add this to `LoadLoad` so we don't have to copy past from the post-merge when it can.
This should be moved to `_is_internal_node` as well
Any reason to change this? I think it will be more readable. Also, I'm not sure why this is an actual bug and the `--before` option should be handled here, but the `Organization` option should be moved to a separate file in a separate file.
why removing the entire loop ?
why not move `memory.optional_memory` to a variable ?
It's fine if you can add a space after the comma, or you will have to escape it.
I'm not sure if this is a good idea to have an array with an an array. If we're using an array to avoid using an array with a const, let's do the same for the array. If you have any array, we don't have any array that is a map of the value and we just have an array.
If `null: false` defaults to false, would it be safer to do `null: false` in the controller instead of `null: false`?
Indent the first parameter one step more than the previous line.
We usually don't do a class, because this field can be removed if needed IMO
Could this logic be non-null?
I think the `if` can be removed as well
Is there a way not to do this in a future change?
@sahbi-ktifa Can you review this? This will result in a NPE when it's not returned, and we are not calling cleanup.Name
We can't change this in this PR, because this is a new release.
I think these should be constants in `Dataverse.py` and `Dataverse.py`.
I don't see this used anywhere, can we remove it?
`final` would have thrown too, right?
The variable name `ReadConfig` looks very confusing to me. Maybe something like `linklink` or something like that.
Can goimports be moved to their own file?
We'll want this to be a `skip_error`, not a `not_to`. I'm not sure how to test this, and if we do, we will need to check `not_to raise_error`
`sfun` seems to only be used to set a default of `False` when there is no columns. Can we just default to `True`?
This is just a mistake. It does not seem relevant to your ticket but we're not using it elsewhere in this PR
Isn't it better to use a `Path` type of object? Wouldn't it be better to use `Path` type directly?
It would be good to validate that here, `binary>"` is always present, but `break` isn't really necessary.
This package shouldn't be included in this package. It's used to generate dependency.
I think `project_name` might be clearer in the future here
if this is only called from one place, maybe put it in a one line with the other one in the place?
You might need to add a `try-finally` statement here, since this is an ExternalTool, which would be called before we create a ExternalTool.
nit: I think this file is redundant and can be removed. It's in `namespace Pb seemed to be used in `LocalPrefs()`.
This line doesn't make sense. This line does a bit of an over the 80 character limit.
Why make this a pointer instead of just making it optional? If we want to use HIP_PLATFORM clang then it should be fine?
This is not necessary because ``object`` already evaluates to ``None``
Nit: we usually avoid having to expose this as a constant
It might be worth wrapping these into a helper method, as they are not used anywhere, and it makes it easier to understand what this is for and why they were not.
I think you have an issue about this. In `PipedSpec` should be fine.
This is a different code, and should be `# Process`.
I think it's better to keep this property to allow to set it for each request.
can we call the cvc.Spec.Policy here too please?
Should this be removed?
I think you also need to change line 362 to `catalogName` and `createMetadataTableInstance`.
Does this need to be added to the `VersionAsString` field?
I think this should be `SSL_peek[0]`.
Could you revert this file?
This is a little bit weird, we are returning a `Transaction` for every block of `Transaction` even though it is not just an int. I would just call `Transaction` with `write(...)` and then return an error, but it is confusing.
Should not be in this PR
We're not really using `3L` for a 15 minutes. Is that intentional?
Can we just use `IsEnabled` directly here? I know that `DecodingException` is already an `RejectRequest`, and we don't need to use `default` as an `UnEnabled` to check if we ever use `IsEnabled` and if it's an `else` case then we should use `IsEnabled` as the whole `RejectRequest`
No need to check `video` supportsDts+no, just assign `$no` to `web0s`
I'm not sure how to return anything here, but it seems strange that the caller has changed the returned value of a returned value when `dstCtx == srcCtx`.
I am not sure how to do this. If we do want to have an array by default, we don't have a single array.
This shouldn't be needed - the new debug output might be used for debug/log when you've reduced the log into the debug output.
Should we do this for `on_resource_changed = listeners.history.views` instead?
I believe this `@team_page_present?` should only be true if `page` is `nil` or `false` or `false`. Also I would also prefer keeping `disable_page_present?` in the `if` clause so we don't have to worry about all the `disable_page?` checks around.
Do we still need the check for serialized path here?
why do we need `.hypervisor` here? should this only be done if `hypervisor` is an instance of `hypervisor`?
I would setuptools.setup() as a variable and make the default available on all the others, no?
`ConnectReturn` should be renamed `metricConnectionManager`.
Not sure this is the right solution. It should also be a separate pull-req?
Can we use `ACE-wrap` to preserve the "whether" `Unwrap`?
I think this should be the other way around, I'm not really familiar with this part.
Think this is the only change that affects TF codegen.
This could be made private.
Can this just be `force_assert_format`?
Isn't this still the right place for this?
What are the purpose of this change?
I assume you removed this line? `jobCallback` is a `JOB_ID`.
You don't need this extra headers, as they are used below.
This is a bit of a guess, but it seems to me it'd be worth noting that this is a change in behavior, since the feature is only used in the UI.
`fullSynchronization` is not defined in the `Synchronization` and is it a regular active configuration so it might be better to remove it entirely?
Do you think there's any chance this change is safe to just call `SecretEncryption`?
Can we make sure to update the `container-status` controller controller for all the lightbox controller under `/api-controller.yml`. That way, we can add a validation for that config for the controller that is not included in the server and that we don't care much if that one is being run.
nit: unused import.
This is not needed.
Could the test case be run as part of this PR?
This line will break on older version
I'm wondering why do we need to hardcode the `unless excluded_portal_link`?
I think the `.` is redundant here.
this would need to be `if(props.defaultValue)`. Otherwise it would only be `Key[key]`
Please use a data variable instead of a data variable in the near future and make it mandatory. This will make the code harder to read.
I think this import should be above the Lucene's `org.apache.lucene.*` module since all the classes are using this class.
Can you explain why this change is required?
nit: we may have this on other lines too
We need to do a import in `createMetadataTableInstance` so that we don't use static imports. We need to move this down into `java.lang.MetadataMetadataTableInstance`.
I guess the previous version of this pylint didn't work?
I think the `delegate` variable should be removed.
Please also make sure the exception happens in `setUp()`
Isn't the previous message sufficient? If the bundle already refers to it, can we just call `bundle` instead of `Run`?
Should there be a `T?` instead of `T`?
I think this code could be extracted to a `EmptyIntModule` in case it was empty. I guess it was done as part of a different PR. If a user is not able to call `EmptyIntModule` and has access to `"", nil, nil, nil`, then `EmptyIntModule` will never fail. If it is a PoSt that can fail because it will not be present.
Use `keybase\types.csv` for an array of type `Reflection` (also for `DateTimeZone::listIdentifiers`, etc.)
I think you need `fileModified`
Please keep the variable as `GONE`.
Is this going to cause lint errors?
This should be fine, it should be in C++
Just curious why you remove it from `rvm`?
How about we do `if self.len in self.len(pay))`.
I thought the plan was to do `receiveIsAdBlockerActive` instead of `receiveIsAdBlockerActive`.
This will need to be changed to use the new `principal` function
I think this test would fail with an invalid blog directory
Maybe we should just remove this whole `Branch` and have `Long BASEFEE` return the `boolean`, so that we can get the `boolean` and `combineKey`.
Why is this needed?
Does this need a migration?
The `||` should be `||`. Also I think you can merge `||` into the `||` condition. Also, since this is one of the previous `||` statements you're not actually handling the `||`.
I think you could get rid of the `if` statement here.
why do you need this function? should we just return ` Calcite` by adding `nonzero(cls, dataset)` instead of just initializing it on the first position?
I think it should be `Uri(string) => string.IsUri(string)`.
@tarekgh @mmaxim do you have any suggestions on why we're going the only way to get this information in the debug mode? Is this what we want? I'm thinking about the debug info to be debug by default. It might be a good place to make it more explicit in the debug mode?
I'm not sure we need to set `app.appapp creates an copilot directory` to be a directory.
@haampiehoban for these - I've made a recent call super killing the source type
Did you mean to keep the `SabreEvent` annotation?
This function will need to exist for `go fmt`. `go fmt` will only run into the `Stop()` function.
I don't think it's safe to make a parseAccountID method in the `Profile` class. The way we don't introduce an extra variable, we don't have to parse the client ID in the `Profile` class, it seems a bit weird.
Could you remove `_` from the end of the arg and use it in the tests as well (and the test)?
I would prefer if we added the `UnknownCharSet` option (and used it as a constant for the target name too).
What is the purpose of these changes?
There is no need for `not observations` at this point!
@bvanessen @tgamblin This makes me a little nervous. What was wrong with removing it?
should we have an `cdn` attribute in front of the group?
This should really be `static`.
I would use `atom->hasProp` instead of `get06Num()` (and `getScalerNum()`)
Does this need to stay here?
I think we can call it GasPerGas
This is a little bit dangerous. How about: "Warning: the provided docroot at..."? The output says "Warning: the provided docroot that is not an image.
Is the `null` check for this intentional?
Shouldn't this be `SpecCSINeeded` rather than `fadirectRawBlock`?
this should go to `is-` also, right?
Should call `load_script` in this method `load_script` or `load_script`? (Also, here and below.)
shouldn't this be public ?
Don't remove this.
Please use relative imports as the rest of the imports (including our linter) for this file (and other files)
nit, should we have a blank line after this?
nit: missing newline
This should be in the `const` operator, with the rest of the function `pgm`.
is it better to make this a constructor argument with no arguments?
Please add a license header here, as well.
It is not clear from me why `hierarchical_name` is not part of the name-ephento components. It should be fine, but it should be changed to just one of these options, not a big deal.
nit: we could put "kubernetes.io/docs/services-networkingress-class" first into the file, and then we could make sure that it's not in a file or jenkins world.
nit : move param here to next line
Why is the null check required?
I'm not sure it's worth it to create a deprecation warning, or at least a warning?
Could you elaborate a bit on why we should be passing a `glog.Error()` directly?
We can't raise an error when the error occurs. This is the reason for not showing the error twice, and that you have to make sure it does not fail.
why logging here ?
It seems that this class could stay private, right?
How did this ever work before? Can we do it in one PR?
Our styleguide suggests to remove the `mvn` label. It would make sense to move the `mvn install -B` out of the script since it is in the `FeatureEntry.rst` file
Wouldn't be better to use a constant for protocol ID so we could just have a single instance `iotex` for that?
This is not related with the change in this PR.
Can you remove the `this` and `parentProcessId` annotations?
Do we need this? We're already using the `name` field for xattr name and the value is just an attribute name.
should be test_assert + .h
I assume this was intentionally left behind from debugging?
Is this change intentional? It doesn't look related to the PR, and I guess it's still useful.
I think we might need this ` skip` here, if we do for `xhr` and `concat`. If we do, let's also add a new `git checkout` directive to `make_running_package_info` or `git checkout.test_package_info` and `git checkout` to add it. I think this `make_running_package_info` will do something.
`EnvNonceMap` has a better name, perhaps?
Is it possible to simply `clientconfig` and not `clientconfig`?
I think I would just remove this test. This PR introduces new admin users and it is related to the admin process?
I don't like this type hint; if we don't want to return an error, the `acceptedHeaderTypes` should never be null, so the `esc_next_url()` should be fixed.
If you don't want to add these on `debug` statements, you might want to log a stack trace if the var doesn't exist.
Are we sure this doesn't work for other languages?
this is not needed, we should do it in constructor
This import seems unused.
feval is a list of packages in the pipeline - that should have been called by the same time (feval is a dict), otherwise the data will not be smaller anyway.
What is the reason for adding the extra param?
What was this change about?
Shouldn't this also check for the errors, and also check that the errors are set in the `err` variable?
Is this the actual fix in the PR? I'm wondering if the reason for not using the name was to avoid this crash, just wondering if this should be an issue with the `func()`.
Should not be needed here
This should use the `_user.subscription` option I think - this should work as-is - it's a `_active_at` method.
I think this should be `if (!preg_quote($remove_var_id, '/') . '[\]\[\-]/', $var_id)) {` It's a bit ambiguous.
Please remove these unused imports
Please don't export this as this is used in the new release.
do we need the `assert` here?
Do we need it on the fly?
Please remove spaces.
We are still using `go-selinux` here. Should we move this into `go-selinux`? It might seem more natural to be able to just use some default values, and I'd like to avoid the need for a specific container.
I'm not sure how to move these database entries into the database.
@kabanzakpovz @aparajit-pratap @mfojtik @stephentoub - is this used by other enable-quartz?
I'm thinking this should be conditional on the error and not be part of the error message. It is a little bit confusing to have it in the message of the message. It seems to me this is going to be an error case (the error message of the `__str__` block above). If we need something else here, then we could have it be `...` and we should also check if the error is not supported.
do we need to add the serviceInfo to ServicePort for this?
We can't assume if the key is null, we will need to get rid of it. What if we change the check for `d` so it can return `null` here?
I don't think this will work, you can check how many Hasks to run in parallel with the default setting of the to port. The default setting of an option may be to set a different option than to the default of an existing service. So I think we need to pass the `puppetserver_port` to the default value, and set it to false if it is not.
Why not just use a `count` here ?
I think there's already an option in the `if` block of line 124 below.
`GetTipSetState` is a subclass and so we can call it `GetTipSetState`
I thought we were moving all the import to top?
Is this a compatible change for SSA version?
maybe it will be better to return an error for both input and input?
This seems like it will be hard for us to keep track of whether a biosGrubLegacy or not. I think we should have that as a separate option.
This was a bug, right?
I would say if this is actually used somewhere else and it will be removed, if it is not only in case of command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-info command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line command-line
We're losing event.File here. I don't want to know.
Please add the message "BibEdit to be removed in 1.0. Please check"
Why this modification?
The test is already testing the integer number. We should not test it at all.
Can you add a `@since` or a `@private` tag here, and below?
I think these are private, we don't want to be private.
I'm pretty sure this line is the right change
This is not needed for 32-bit environments. The test should pass without the `TTransportException`
You need to check if theStreaming contains a null field - otherwise you won't have to check the value.
I would prefer to have a `try/except` block (which I think is a `IntegrityError` that is passed in to this function) and then just do it in `from COM_index import IntegrityError`. I would also move the `from COM_index import IntegrityError` logic into the `try/except` block, which would allow you to just remove the `from COM_index_id()`.
What's the idea behind having a `std::recursive_mutex`?
I'm not sure about this. If I understand correctly, theissuerName will be empty and the client will not be empty. If the client is logged, then the client will still be logged.
Nit: please avoid using individual imports
`writeAttribute(xmlw,"source","DVN");` ?
Maybe a `CompareCommits()` function in `Compare.go`?
We should be able to use `IsInUpdate` here.
I think it is a little bit weird to have a function that has this value. Shouldn't we be able to define a constant?
Can we also mention here the master master master is not enabled?
I don't think we should add this option to the `endpoint` app, since it has nothing to do with it. @maarcingebala do you think it's ok to add it?
This field can be initialized with `DEFAULT_CSRF_MATCHER`, right?
why not just use `assertTrue`?
can't you use the upper case for `++i` here?
This function seems unnecessary given that `AppendHistoryNodes` can already return a nil.
Should this also have `SPIFFEID`?
The former should probably go in the `Pcontrib/go` section above.
I think the `if` can be removed too. The `mocha.reporter()` will not be used
Another line of whitespace is needed here.
@tmds I don't know what this is for. Can you please confirm?
@rhatdan @mhjafarpour @maarcingebala @michaelandrehovsky - does this variable need to be there? The `time_CHECK_zone` property will only be used for testing.
Why was this change necessary?
why not do this interface?
`WordSourcesReportDataDefaults` can be removed. Please revert back to `lodash`.
This is a bit permissive, but I think it's good to use a standard `make format`
nit: missing `&& height` (noteIds is null)
I don't think this can work. I think we have a `Rpc-failure` header, which would allow you to access a `Rpc-failure` header without any prefix.
Did you mean to change this line?
I think the original logic was wrong here
I don't understand the purpose of the previous return value here (and the one below), but this is where it is used and we don't need to change the logic here. I would prefer to just always return a `Long.DEFAULT_TIMEOUT` and remove the `if cls._timeout` and just return that value if it ever changes.
@cramforce could you check if an existing `opts` value is present? I think you should check if the endpoint is in one of the `else` case below, but if there is an error in the `else` case, we should check if the result is `true`
Nit: please use `%d.Permissions` variable instead of `%s`
`messageTime` -> `messageTime`
this is a breaking change. why do we need it here?
I wonder if we should not have to use `PlanNode` here.
bootstrap is not used in this file, is it intentional?
why did this change? you're using `False` instead of `False` here
closed shouldn't be optional here
It might make sense to move it to `org.onSelection.core.time.Path` rather than the enium.
I'm confused why `error` is changing this.
This is the same as the one above. We could use CartDecorator in the code.
This looks like a typo.
this was necessary, I was trying to get back to the latest running tests.
Why is this changing? I think the original PR makes sense.
This doesn't make sense now since we have the `Converter` as a global state. I think we'd want it to be a singleton
i don't think we should use "g_getName_min_count" to be consistent with the other values here?
Remove the extra line here.
I would prefer to keep this line (and make `(A-Za-z_][A-Za-z_.0-9]*)*\\]"` as `InFlight`). We might also want to make sure that `In oversight` is always 0, but it is only 4.4.0.
can we change the name to `RetryLimitExceeded` ? it is more explicit, and I guess there is a reason for this change
Nit: extra empty line
Should `Logger.TimeSpan.FromSeconds(TimeSpan)` still take an `Task.TimeoutAfter`?
You should use the flag instead of the flag
Should these not be `<data>`?
If there's an explicit timeout, we should probably update this to use `@load_time`
You have to add `music` class, as that's what we use for the other two classes.
I don't see this being used anywhere? I'd expect this session to be the first transfer?
>Checkpoint time of the speed, how can we make sure that Java Java 10 minute is a subset of a best practice? how about if a more accurate value like `(float(long).Called(Time.HasValue)` ? that could be a breaking change, but maybe the latter would be more efficient.
I don't think you need the `.horizontalAdvance (QStringLiteral("a")`
Does it make sense to have a `cd9` directory which we don't have a `boltdir` directory, then we can keep the same name? It's a little confusing since we don't know how to get rid of the `cd9`, but it's just a thoughts to keep things in mind.
I think the first part of the command is unnecessary, since the `ruby-` is a global variable.
I assume the prec is always an int_part so prec is an int, so the argument is an int.
I am not sure we want this sleep to change, or is it safe?
You can use `process.exit` instead of swapping an script.
I think the previous code used this as `/* sigpending_t has xstate inside the loop` block. Why do we even need this special case?
Should be `$allowedArgs -contains $_ | % { $private::tempArgs[$_] = $private:tempArgs[$_]] }`
why is this necessary?
This should not be necessary as the default will be a JSON string and not a title of this plot.
Remove empty line.
I think this will need to be in `awsCredentialsPath` too
Should `types.Basic` be a constant?
Is it really a good place for this change?
You can remove this copy and just use the string.
I don't think this is the right fix.
I think the <msg> nit: it would be better to do `return Comparator<? super T> getComparator() {`
Is the `table.properties()` line necessary? I don't see where where it is used, and why is it needed?
can we put this in the check above its own line?
@garyrussell I think we should leave this file unchanged.
I think this is fine, but you'll have to check if the LTS version is used by LTS_6_5. I am not sure if there is a better way to fix this.
Just curious, do you know why we include here?
`containsKey` is not really used here. I think `equals` is better.
I think we can skip the `aria-valuenow` annotation. We need `data-`-based stuff in the `AbstractAbstractRoles` class, and then we could just remove the `hasAttribute` annotation from the `node` class.
This needs to be added for the new `bokeh` release.
This is a good place to put this as `ServiceName_USE_CHANGE`
I don't think this is necessary.
This is not true. `b` is the only thing and is not handled with `returns`...
This change is unrelated to the rest of this PR, but I'm not sure why we need a separate method for these changes. I am just wondering if we should just change it to something like `Mask_list_ Item_ Item_timeseries` or something.
I think you missed the same in the next two lines
Why `schema` and not just `schema`? If not, then I would use that variable here, which is not what we want.
- Why are we returning properties for this argument when we are using it elsewhere but not everywhere else?
Hmm, what is this line doing exactly?
Which check is this necessary?
I think you meant `ip_address"]` here.
I think it would be good to keep the test the same as if (exit(0) { return false }
Why we need this here?
I don't think this error code will work. `NotFound` should be changed to `ErrCodeBucketNotFound`. `errors.New` is used to set the response.
Why do we need this special case (and not just in the `osx` module) and in `build/system/auth/config.rb`?
I am a bit confused. Why?
Is it really worth to leave this, and just leave it in, to avoid having an array with one?
I'm not sure that `ConcurrentNonces` is the right name for this, since there are a few instances of `ConcurrentNonces` that we should follow.
why is this needed?
Should this be `ErrorError`?
I think we could also have `db` and `version` in this test? Or is this not a valid usecase?
@deads2k that this is the one you found for?
I don't think this will work. I think this will work on the test.
You could use the `+=` operator here and throughout the codebase (see the other files).
this is indeed the main thing? i dont think it is needed
Why are you using `_test` in this test?
can you please also fix the unit tests?
This is a good idea but it's not really a good idea. We need to fix the bug related to the task task.
Align the parameters of a method call if they span more than one line.
Can you change `Name` to `nil` (or any) `0` for this one.
I would have expected this to raise an exception if the body is `POST` or `PUT`
Why are we calling `loadClassCache()` here instead of calling `loadClassCache()` directly, since we only have one call to the class itself?
COMMAND is not a key, right?
This test fails without `import org.junit.Test;`
I thought `scanner_index_id` was an attack vector (i.e. `resource_id`), but not an attack vector. If it's not required then a new order of the map should be set to `scanner_index_id`
@michalpristas Do you agree on the use-case here? It looks like it is not a requirement in the test? Also I would not expect anyone to call this method in the test that uses the same `submit` method.
should we make the hash literal?
I think it would be better to make this `public ImmutableList<String, ImmutableList<List<String>>`. It would also allow `currentType.isStructType()` for `List<String>>`.
this will break tests, use the same naming rules
Does this need to be in here?
shouldn't this be `null: false`?
shouldn't wait for the complete before logging this.
Line is too long. [85/80]
I think `arg` needs to be kept as a struct
I think we can get rid of `preinit()` and just return the `preinit` here.
Consider moving that to a new line where we use the new line to be consistent with the rest of the file.
Is this related to this commit ?
I think this should be changed to a helper function.
This looks more like an error in `rm.py`.
why not `shader.decoding`, `shader.decoding`
we can skip this try/except now
Let's keep the old field. We don't need it in the `Entity` package
I think we might need to keep this as `ForceTraceWriteLine` and remove the getter for RawWrite.
This will not be necessary, since `set` will be called in an `if` statement.
I don't know if it might make sense to use `pipeline_definition_sensor` here, but this might be a bit more confusing. How do you feel about renaming `pipeline_definition_sensor` into `operator_slack_message` and adding the logic to `config.yml`?
This is wrong. It's the same thing, I think. If the default, it should be used in the test as well as the default.
Can this just be `new_token = new_token is not None`? This looks like an odd choice but it could have been a bit of a nice candidate for the future.
I think we could also have a test case for this.
I am confused because I don't see why `--network-host-project-id` is required. It is not a project, you should be able to run `network.add_argument_group`, and you should use the flag for that, but I'm still not sure.
@drcrallen I think that's ok for this. But it would be good for `master` to work with this, as it'll work in the future without having to change `getSourceData` to return `false`
`public virtual virtual virtual virtual virtualWith BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE BEFORE
You should probably use a more clear name like "map[string]int, error", and make it clear that you have the other one you have, e.g. `map[string]int, error`
Does this need to be set at the end of the function?
If the error is already set, this will return nil. I think this will return true.
Remove this unnecessary change
This is going to be a bit broad, because we only need to have the `fstatat` in one place, which seems wrong. Can you remove it?
why this file has a dependency on it?
I think you can remove this, too.
The exception message should be updated.
Our standards: this is the first sentence, not the first one
I think that you should only check the return value, if it is `nil`, then no need to check this.
Should we remove the description as well? :smiley: Maybe `workshop` or something similar?
Is this the correct way to go? ` Order` still needs to be added to the library, right? Or was it just to use `Root`?
I'm wondering if it would make sense to move this to be a separate `if` block and move `DD_INTEGRATIONS` into the `if` block to make it more obvious? (We should be sure that it is not a `ref tracerHomeDirectory = Path.Combine("DD_INTEGRATIONS")`.
This will be more efficient to use `path_` rather than `path_`.
Oops, I didn't find the point of this option. I can't think of any reason to put this in the main `seconds` model to make it more general, though it would also be nice to have it there too
Array -> Array. should also be translated
This could be changed to `Boolean.Occur.MUST.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Dll.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics.Diagnostics
I think you can also skip telemetryConfig.Enable
This if statement is not necessary, since if it already exists, it will generate a boundary value.
isnt this a bug in the past? This seems like a very useful error than before...
I don't understand how `IBL_UNLINKED` works.
We should just be calling this `opt_verify`. We should probably just make a `verify` property that does the same thing.
why did you change the name of the field?
Won't this work if you put it above the `auth#oauth_callback` decorator?
this looks like it should be fixed in this PR
Please add spaces around the `{` in the `{`
Should we use a regex for all public variables?
Should we use the existing `Microsoft.Design` for this?
This is the culprit of this PR. Why would TransportPubSub include all the available available headers? Does it need to be any other way? Or is there any reason to just leave this up?
Should probably use a different attribute for this
Do we want to handle the case when `t.Split` is not nil?
@jona-sassenhagen please review this file
I'm not sure this is the best way to make this configurable? I don't have a holistic picture of how I can track this. I would like to think that it makes sense to have a helper for the default, and have the `userInjectedExpandableRowHeader` be set by the user. But if we really need it then we could move it down the line to the `access.get()` check.
why do we need to use `cachedLibPath` here?
nit: I think this is a lot of a bit complicated to read. I would just add the `src/readreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreadreaded by default in `src/readreadedby/readedby/readedby` so that we don't have to add these checks for each one.
Why is this not needed?
This is the only change required in this PR, as the default implementation has to be updated.
I think this is the right fix. The `echo` here should be the last argument to `new`.
`decryptWithPasscode` can be null.
I think it'd be better to add a `ClassHeaderFunctions forCmsSignature` as well. It is a little strange that we have a few of this in the code.
Tags can be removed now.
I don't think we need to defineII/O. I don't get why it's here, the user can get all type `get_extents` and then get that in. We can just pass it as a default to get when a range type is `None`.
This is unused
Should this say `sql("DROP TABLE IF EXISTS %s", sourceName);` ?
why is this aneededeeded and not an int to use a new one like the other others?
Why the change?
We need to set a default service and then set the default to `false`. I think we should set the default service only when the service is actually `false`. Also, it is better to check if the service was actually not `response` before the service is formatted (and only if the service is formatted) and if the service is actually actually `false`, then the header is actually added, then the response will be formatted.
The test here is not correct as the first half of the node is different. This is why it's not the case. The length of the second half of the first half is different (in the first half of the second half).
Since `zVE_CONFIG_Hrm` always exists, should `zdd_CONFIG_Hrm` be removed completely?
I think you don't need to add this.
This is a bit confusing, as `REC_INT_FRACTION` is used here and `REC_INT_FRACTION` in the same place.
I'm wondering if it's better to keep `colorigo` in the case where it's a `ibigo` error.
This is a change in behavior, but the URL should be in `QUrl.lstrip` and then be in the URL itself.
nit: move to line 121 (line 15)? `a.required` is already checked in `build().save()`.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't think this is the right fix. This breaks my tests and should be fixed.
why this import?
Please use `lockBefore()` instead of `LockID`.
There should be a typo: `lang.java.ast.JavaParserConstants;`
@JackyWang Thanks for the PR. Just curious, does this Guid add anything to a ticket?
`Collect` has been removed as well since it can lead to unexpected results.
Can we rename this to `PersistenceContext`? It's a bit more of a name, e.g. a name that makes sense in a couple places. What about something other than the name? `PersistenceContext`? `PersistenceContext` is something more clear.
>Idb.Background(PlatformDetector.SupportsSharableMutex) [](start = 12, length = 23) No need to check both cases here.
I would prefer a separate commit here, but as a note to myself, the tests are failing because of this change.
If this function returns an error, is that what we want?
Why this isn't necessary, if you only use it in `spec/services/execCommand.rb`?
This doesn't look right to me. It doesn't look like anything in the language should contain all the components, but it might be an internal language or other language. The only thing to do is if the language isn't found in the language itself is an internal language, it will be the other way. If we want to make sure that the language isn't found, then I think we should add the `<...>` tags. What do you think?
It feels like there is an example of the use of `DD_CONVENTION`. Is this intended?
I'm confused by this change. This is going to break existing getters where the `getAliasProp` returns a non-null string instead of a valid input.
This is a bit hard to follow, but maybe we need to add a TODO to make it work.
Needs a space after `,`
It seems like `OwnerEmail` should only be updated if it's `null`?
Please remove this code block, and update the code to accept a `dict[str, ""]` instead.
Can you add a TODO? `newbodybody(...)`?
@liggitt I added a new Atoms here. The new Atoms in both branches are correct?
`mini_approval` was not being used anywhere in the code so can remove it.
This line doesn't seem to be doing anything.
@hongwei1990 We need to move `const CONNECTION_EVENTS = ['error', 'number', '1')` above as it's already defined in the 'const CONNECTION_EVENTS'
nit: do we need `using` on all usings?
why are we changing this to an integer?
The return value should be changed.
No need to be a warning if this exception is logged.
Not needed anymore IMO
I think this should be a `partitionField` and then the default to `partitionField`.
I would use `DEFAULT_IS_account_path`. It's really more readable.
I think we should use `padding.empty()` instead, since this is not a `Mapping`.
Just want to double check, should this not be handled by the MongoError, and not the error message be logged?
Maybe we should change the `last-focused` property from `recently focused window` to `recently focused window` for consistency reasons.
Same thing here... Care to explain why C++ is not a problem or a bug ?
`terms` is a number of non-zero term, so I think you should be able to use `terms` here.
Is this actually used? Can we remove `replaceResultInFormWithNew`?
Missing space around string interpolation detected.
This import was unused.
Why does the `project_number` need to be optional?
I would rename this to `defer deadlineTimer`
I think this needs to be moved to some "process" module instead (see line 177).
@cston, since this is a public API, it seems it should be the way it was in the caller. The `WLR_DEBUG` and `WLR_DEBUG` are the default value.
I think it's better to just call `listener` here?
Does this compile? Doesn't seem like it is being used anywhere.
We need to keep the old stuff for every new purpose (e.g. `BzureTest.cpp`, `BzureTest.cpp`.). In this case, there's no need to have `B_get_num()` be used for the new API, as this will be the new interface.
Nit: Can we use the function name `isWordAR` instead? `pkg_reader` is the name of the struct in volume.txt`
Can we make this return `bool` instead of this `bool`?
This probably isn't necessary since you're using `.version`
Could this query be a constant? I don't think there's anything that can be used here.
We should not need to change this line since we have the order of blocks now
this is not related to authentication.
Why do we need this change? This change won't break any tests.
I think the `boolean` should be left out (same for the others below)
I'm confused by why is it not just change the attribute attribute?
Why do we need this?
`undefined` isn't needed here since it has `-a` and `is.undefined` already.
I think it should be "gocloud.dev. url". I think the latter might make sense as well: "gocloud.dev. directory:"
I would rather you use `assert` rather than `assert`.
`UTF8` and `UTF8` are only used in one place (in the codebase). This is the case where the base class has already been set to `null` and we wouldn't be able to get rid of this.
I think this can be extracted and moved to some other `Setting` namespace, right?
Is this necessary? I thought this already has `boolean` and `boolean`, but if not, why `private` and `boolean`?
This table is used by default but there's no guarantee that `team` is set to `true` in the DB.
Is the `updateParams` method call for this method?
Can you also make sure to check that `data_encoding` is nil?
You can pass the `b` as the last argument to the function.
This file was actually not included the `mpi.h` header, so there is no such header needed.
@smarterclayton @stephentoub do you have a better idea?
This was a duplicate error?
Please add a message to the log
I wonder if this is an issue in the original?
This is an extra blank line, and the extra empty line below is causing the flake8 tests to fail (and I've removed it).
This is the only place I see is that if we can't getRetryTask, then it will beRetryTaskV2. I think that's a bug.
This import should be below the `builder` label in the constructor
this shouldn't be done in `_get_env()`.
Missing `@return` statement.
This looks like it should be private, and I'm not sure where to use it.
I don't know if you should keep the cron job, but the original version was still on purpose. Is the previous cron job correct?
Why was this removed?
Why do we want to put the `browser.tizenVersion` check first?
I think it should be `go.opentelemetry.io/api/security.go`
This will need to be updated to remove the `dll` attributes as well, because the `class_name` method can still work when the `generic` argument is created. This is the way to have this now and the `csv` attributes should be created in a bunch of tests.
What if spark_column is None? Shouldn't this still be enough?
Note that if we change the doc, we can change the doc?
this method should not be called
Why not keep the deploy file at all?
Maybe the name `cvrGot.IsvrGot()` is more descriptive?
Is this change related?
Why the changes in this file?
This is the only change where we should remove this code path.
can we change both of these to have `Bool` and `Real32Array`?
Is this file in `pkg/cmd/extensions/register_site_test.rb`?
"MYST" should say "All docs are supported"
I think the `Controllers` validation is already checked here. I think it's not possible to get to this controller, so the error message would be misleading.
You can make sure `if` is always `nullptr` and it is not `nullptr`. Same thing applies below.
The `ANA` function in `removeTab()` is now called after the `try` block and it needs to be moved to the `try`.
This can return null if `getFor` returns false.
I'm not sure this is right. If we don't want to include the path in the `PULUMI_LANGUAGE_ROOT` (and the `PULUMI_LANGUAGE_ROOT`), we don't want to use the full `PULUMI_LANGUAGE_ROOT` anymore, which means it will only be executed if the paths are present. We can't use the `PULUMI_LANGUAGE_ROOT` method here as a special case.
@smarterclayton should we have the `%v` and `%v` that we're using here?
Dictionary can not be added.
@fmassa I think this should be a warning?
I think this needs a case where `s/params` would be passed to `alert` rather than `null`, which would require the `deletes` property which could be passed to the constructor. Also, it would have been better to be explicit about how `autoPath` would have to be used. We could add a boolean for this, and use a `new` helper that would need to be passed in as well.
Should we throw an exception here?
We should not have an if-clause in the script checking for this case as soon as we're doing it for all platforms.
This was always true, no need to check `if`
@josegar74 I've added the `logger.error` check to avoid printing the response.
There is a typo in the name `t_function`, is there a reason why you can't call this `_args_struct`?
This is a change from this commit
I suggest to move this check up the StatusForbidden class, since we don't have to have it as an argument to `StatusForbidden`
probably need to call rankstr(rankstr), no need to pass it in in.
I don't think you need to initialize it after this. It is not used anywhere, just delete.
This should use `outbounds.isRun` instead of `outbounds`.
Why not put the `cancel` method below `cancel`?
Should this be `@phpstan-param array<string, string, mixed>`?
Does it still catch exceptions if the callback is a `presence`?
The name of the tag should be `tags`.
It seems this will need to be called for each pair of the dilation repo?
What's the reasoning behind setting a default setting `Dockeronly` is not set in this case?
Would it be easier to add a `Debug.Assert` to the if?
I would prefer to see a more specific name for this, such as `make lint`
You can also use `mount ("/etc" (casecase>",>")`. The rest of the changes are to the codebase.
This should probably return a `String.prototype`, otherwise sequenceNumber doesn't need to be annotated as `@Nullable`.
"raise" is the preferred term.
Why did you remove these? To me it should still be the best time to remove `aws-global` from the original version as well as `aws-global`
I'm not sure we need to handle `/admin/request` at all, but I don't know if it will make the `/admin/request` mandatory, or if there are any changes on the `querystring` to be able to use `querystring` directly, as we do for the `/admin/request` API. If we do this, we need a new `querystring="true"`. I don't see anything in the PR description about how we can use `querystring=None`.
Were we not doing the same `ticker` twice?
Could we make sure it's intentional?
I know this is a bit of a name, but should we be consistent about these? How about `HalfHermitianToRealInverseFFTImageFilter`?
I think this should be `IonMobility`
`FlattenedMethodAsyncCallSettings` is now just a static instance, and it can also be renamed to C#SInterop.
It seems that in `pkg/secrets` we should not use the package `cloud` package anymore.
Why not remove the `protocol` and `Access`?
The block.Block should be removed here, and the block.BlockCount is used to pass nil
This will need to be renamed because it's `config` (which is already imported from `sans`).
Can we change the condition to `return nil` or even better `return nil` to make it obvious what this condition will happen. This is the reason why the condition was removed, no?
should we rename `BuildIndex` to `BuildUser`?
This is the same logic as above, but `raw.FormatString` should be moved back up to the next line
I don't quite understand why we need to stub this out?
I'm not sure this change is needed
This is an API break, not an example of the problem. We want to change the name of the field in the field.
I would add `[NotNullWhen(true)]`, but I wouldn't expect that there is a single previews.
why we need a new configuration for local?
We don't use import with system imports, we can just omitting `List`.
This file is covered, but there may be a typo in the commit message.
This is the line that most of the stuff that makes sense, what if we called this `acceptable_exit_codes`, and then the logic below `cmake_options_exit = true`, then `cmake_options_exit_codes` will automatically determine whether the user has found the right answer. This is probably because we want to show an invalid data if they're an invalid state or not. We should just remove the `acceptable_exit_codes`.
In this case, it will be better to use `dataframe.DEFAULT_DD()`
We could just use `this.servers.size` here since the check is not required here. Also, `serverType` should be `true`
The same is true for the `if` condition, please fix.
Consider moving the string to a separate constant
I think we should just leave out the disk option and just make it `-fDiskCertCache`.
`st` is a very generic name for this field (i.e., `stats` is not there yet) we can use `getBuilder(new ServletHolder())` for this property
The `tail: unrecognized file system` is probably more accurate.
Can we just make this a local var and use `${openshiftClusterID":"fake-infraid":"owned}` in the test package?
That's not clear to me. If it's an `Optional`, the `node` can be a property of `Node`, and not a `list`.
This seems like a pretty reasonable change.
You don't need the `kill` param here?
This `CreateString` doesn't seem like it should be a string.
please remove empty lines.
notice is a debug level now
I'm not sure what to do about `private replDataSourceMetric = new AtomicLong(0L);`
We could also make sure to check all the annotations and avoid the extra empty array on each operation.
I guess ` bound bound` is a little bit overkill, but the `BackoffType` and `HeaderBackoffType` are both returned by the enum, so maybe just `policy_list_tim_JE_AS_NEW_INITIATOR_WORKFLOW`?
`browser.tizen` can be undefined. Also, the original code is not correct.
I think it would be better to have this as a `config` directory, not to have a directory at all. Also, the password is going to be able to define a `Config` or something like that. It would be a good place to handle all `err`s in `err`, and if we are to avoid `err`s with one of those variables, then we could pass that as a `config` property and pass in `err`.
Should this be TelemetryelemetryData()? Or is it just introduced in the constructor?
Remove the boost::make_shared here too, since its now a regular expression.
nit: remove empty line please
I don't think the `useDelete` should be calling this `deleteDelete`. I think it would be better to keep the same as `useDelete` and avoiding the warning about the use of this property in the PHP call.
why the `Success` variable name change?
It's not a big issue, but let's remove it if it's technically correct.
Why remove the err here?
is there a way to add this to `JsonRpcUrl? url`?
do not prefix prefix with `client_model_slug` or just `client_model_slug`.
info is not needed
if [[ is a pointer, this will change to a `exec > >` and therefore change it to a `exec >` so it's an absolute path
Since there's a function for creating only one function, should we make this function an override?
This will make the cache always create a default. I think it will make the test work correctly.
Doing these two things make more sense if we just put `nextFetchDate` into a `FetchDate`?
Why are these changed?
Please revert unrelated whitespace changes.
This is not correct.
Do we know why we can't use `bin.Slice`?
Why do we have to make this public?
I would call this something like: `Email(3, X)`
Should be `2048 * signature checker threads` (same for the other non-bootstrap messages as well).
This is not a function, right?
Is `api/#range-queries` used for anything other than `initializers`?
There are some more of these where `#define _HOST_ARM64` could be defined here. (Also, I think this would be more consistent with the one below.)
Would it make sense to also have ` "[ROOTDIR` return the result?
Nit: can you move the include of the cppelin header to the cppelin header, please?
This seems to be the main change.
This check isn't required?
Why is this needed?
This looks like a debug level to me, but I guess this should be a good place to be generated?
Should this also be removed ?
I don't understand this part.
I think you should add a constructor parameter to the `options` class to keep these options options options passed, instead of being set options options.
If we're only removing this, could you please make this a constant and remove it from all the others?
This is a regression from a recent PR to the `tests` fixture, not just the `*`.
Can we make the handler a static utility instead? Then it should be only exposed to the static utility and not a simple `self`
again, why do we need this change?
I think this `m.paths` folder is only used to send paths in a `torch.moves` directory. I don't think this path should be here, so if we do `m.paths["devices"])`, we can remove the `m.paths["devices"]` case.
Just `gaPropertyID`, is it necessary to add `__all__`?
Should this be `status.uploads` instead of `this.status.uploads`?
This was a bad test and should be a separate bug, I don't think this is needed.
I would call it `DbCapacity` for clarity
Is there a reason to keep the hash in the hash instead of just doing the hash?
I would make the command line flag `sudo " + cmdParts[1:]...)` and make it explicit that it's a dict
nit: could you use `aws/Config` to specify this values?
This is an interesting thing to change. This changes behavior in the state state when it's just a previous release?
I think this is not needed, right?
Could you please add a docblock about the link? :)
Is `error` the same as `xhr` ? I assume it's not an error?
if you're using a specific implementation then this would be better as `if (isGrpcStreamingMethod(methodModel)) {`
(style) 'nd' may be misspelled - perhaps 'and'?
This is not a boolean, so it would be better without the need to pass in the static constructor.
Why we need this? We don't seem to have code coverage in a file.
We need to be careful here. I'm not sure whether it would be enough for now, but it would be nice if you could check that it's ok.
This is where I was saying it was.
Don't we already have this on the catch block above?
We probably need a way to avoid creating session in session if it doesn't exist.
Why are you using error? I don't think you need to handle the error
I don't think these are required.
I think this was left over from copyCommand() method, as it was not doing anything else. It's also not doing anything.
This variable appears to be unused now.
Why is this import needed?
I think there is a lot of errors where this is being used. We'll need to find a better way to fix it.
Just curious, is this just a whitespace change?
Remove the else branch?
What is this `map[string]string`? `sprintf()` is the `sprintf()` function.
AccountMaxVersionPrefix is a pointer, why not a pointer?
why is this removed? It's not used anymore in this PR, right? It's used in many other packages and will be re-inified.
Is there any error message we can do for the whole thing?
`ensureCoroutine` can be called in the constructor
should this be a separate JIRA ?
I don't think you need need to add it here as it is only called from `MultiDomainHost`, right?
I'm not sure we should be adding new features here.
This should be split across multiple lines.
This should probably be a different test. i.e. use `test_data_url` instead of `name` as well.
Not sure how to change this, but it would be nice to have a 1-element assertion that the methods are `1` and `2` are `True`.
This should be moved out to the new `#ifdef` block.
this is not right. It should be a string. In case we don't need a string, we can set the sync.Map
Please rename this file, it can be changed to `wrapAnchorTagsPattern`.
yikes --- is there a way to avoid this?
why not just always top?
Can we make this const and use an overload instead?
Why did you remove the test for this scenario?
Why remove these? They're now deprecated.
I'm not sure if the `if`s should be removed here. I think that in theory I should be able to handle it, but not to mention it in the docstring. If that's the case I should mention it.
I guess this is not a big deal. If the value is being read, I think it should be a `Set<Boolean>` instead of a `Set<T>`
The `Output` suffix is redundant here
this was added in the core (go or the core) to remove it from the core, so I removed it.
Why is this private static? I don't think you are adding a public interface...
What's the point of this?
It feels like we should move all of the two of the two into the `Forms.RT` namespace since that's what we use in other languages.
this import is not needed
This change is not necessary but it will cause `FrameworkBundle\Model\Pricing` to be `Packages`
This will fail because the `DashboardEffect` action is used to determine if anybody will want to run `import ScrollEffect`.
I think `g.params.is_active` might be better than `g.token_str = token`.
why do we need to support both?
Should not be exported
Auto Automatic doesn't take any dependencies from the library itself. Can it just be moved out of the `Auto Automatic` class?
I think it's good to keep the original behavior for `id`, but I'm pretty sure the `assign` attribute is a valid attribute here. Is it possible to have a `Func<string, value>`? If that's the case, maybe we should have a `string.Empty` attribute for the attribute?
why do we have to change the current logic, as the same has been removed from here?
This should be `export/index.js`, no need to add them
What is the use for this?
Which event is passed in here? Do you plan to add it in the changelog or is that because this function is not called from the `FormEvents.new_on_update` function?
This is unrelated to the PR.
Why is `copy` being removed?
Does this need to also be part of the `port-aws` package?
This is the only place where the user is used, and can't see the issue. The `balance` param is used in some cases.
Should we have a more informative name for this field?
This should be removed.
Does the pattern here need to be called fromLayer?
I think it's not clear from this change, but it makes sense to me that the service is `tasks` and not `tasks`.
is there a reason for adding the `t.OrigErr`? was the function used elsewhere and was there some reason to not?
This should just be `assert`.
Same question: why not leave it in `validateNoConflicting` ?
This file should be private
Should this be `Tags.AppSecEnabled`?
We're not using the `__init__` method. We don't have to do this for every `AtomicLocalFile` model, it's only used once in the `__init__` constructor.
This was changed because we were using the new `partners_ic` decorator in the main templates, but I don't see any reason to do the new version for these changes.
Could this one be done with a `resource.const` to test if this doesn't work for the first time being?
for me the formatting is off :(
Do you actually need to escape quotes from the string?
Why was this moved?
do we want to expose an enum here? If so, how can we use an enum instead?
This is wrong. You're changing the return value of the plugin's current invocation to be the correct result when the function returns the current result, but you're doing the same thing here.
please don't update copyright header
Why did you remove this?
@agramfort do you want to take a look into the old pattern here?
If there is some other header that is created, can this property be set instead?
I think the convention is a more self-explanatory class name. "Exception" is probably better. I don't have strong opinion, but I would just prefer the name "logger". The name "logger" would be the better, "loggerlogger".
I know I already hadn't before, but would it be nice to import this from `from binascii.hmac_drbg import DRBG`?
Could you please explain how this works? I can't find a null word on this.
I think the `plugin` field can be `""`.
why the change? the change in this file should not change with this change.
Lade hoch, should be lowercase.
Should we have `minimumUmask = 1` here for future proof?
Is not this required for all compilers?
You can use the mock_P_at function
I'm assuming this was the only place where the `post.parallelulation` function can be used. If this is only in the `post.eculation`. I think we should remove the `post.eculation` parameter from the `post` parameter as it would need to be changed in that case.
Align the parameters of a method call if they span more than one line.
i'd rather have an external function for it
Remove this empty line.
I think you might consider making `setState` public in your IDE settings
Can you add a `TODO`?
This function can return an error, so the user could assign a default if the result doesn't exist.
What's the reason for this change? Are you sure you don't use `MAXaction`?
This test needs to be moved from the other test. See line 121.
"should" is the key that is passed here. Should that be an error or a link to the caller? The caller can be passed in as an argument or the user can call that method.
why change from 1 to 1?
This should be a warning in `pkg/kubernetes/server/image` since `endpoint` can never be nil.
This should be `handle_()`.
Do we want to remove this test now or do we have tests not fall into it? I mean, does `runBpfUnitTest(..., func(...))` just because there are no tests in the tests now
do we want this func now?
Nit: should this be ` validateProxyUser(String proxyUser, User realUser)`
This seems like it may not have been necessary to add it. Can you explain? Can it be added as a dependency please?
If you're using this, I'd like to know the answer to that.
I would prefer to avoid using the interface, this is a very common pattern and should be used by Jetpack as it has a lot of plugins.
Why not use the constant here?
Why not just use `org.infinispan.commons.extension.StringUtils`?
I think it should rather check `if len(password) == 0` to prevent the need for a separate password from being able to see if the password was unquoted before the password was checked. The way I understood this correctly, I was getting the warning from the password is because of `*`. But I think that would be an error, but I do not see the need to handle the case that the password would not be non-kubernetesed yet.
@jridgewell I'm going to change this line since it was in the first place and it didn't change the functionality of this PR. I just added the "this" to the function, as I said earlier, but I don't think it makes sense to have this here for now
Why does va_start need the update? It will be changed in the line below.
this can be defined here as `envconfig:"PROJECT_ID"`
nit: add a space after `,`
This is the new feature that is passing during the request so should be in the `else`. I think this is fine
Is the change in the public API? If not can we use the private API instead?
I would use `Parameter_of_cache` here.
Here it would be better to put the exception in `before_filter`
Just curious, is this actually useful for a long time ago?
Would it make sense to also test that it's an unbounded test case?
Why is this? It's not a problem and should have the version.
I'm not sure this is quite right. The logic on line 262 is to build a pylint so that it should be included in `setup.py`
I'm not sure what the best policy is here. This variable is used for both a constant and a value in the schema. It would be a good place to change this value.
Do we need to set `env` in this case?
I know it's kinda an automated but we can't change it in a separate change, but can we add it to the new test framework and update it with the new one?
I don't like the `Removed` property. I'd rather not change it at all.
I think the name of this URL has to be `URLFlag` (in general it was not renamed to `os.path.inos.path.inos.path.inos.path.inos.path.inos.path.inos.path.inos.path.inos.path.inos.path.foros.index.index.go` instead of using `os.path.toos.path.inos.path.getProvider()`. In the future we can change it to `URLFlag`. But we could also add the `url` prefix to
I'm not sure we should change the default behavior here.
why this import?
I don't think this is actually required. There will be a lot of code that uses the call to create the request with all the actions.
How about a unit test for this change?
Just to double check, is it not needed anymore?
We should make sure that the user has a migration to add a migration to the current step.
Is the 60ms a good idea?
Why are we setting directory here? I think it should be the default directory in symlinks.
We probably want to use `omitempty` here so that it doesn't get overwritten by `error`.
Since `Failurescular`, is the default `Circular` reset in this file?
I don't believe we should add the new validator parameter to the constructor.
I would suggest to use `open file bucket...` instead of `os.path`. The same goes for the other files, and the file, but it is in this PR.
Is this needed? It's already part of the Solr.
You should use `--no-order`, although I don't like that this is a built-in setting.
Is this the right place to put this, as the "increase" method will not return the `slots` instance?
I'm not quite sure if we should just make this a `List<T>`? I don't really think so either.
I would prefer the name `httpsListenerPrefixes` as this is an internal name.
I'm not sure about the `MAX_USER_CONNECTIONS 4` value.
If we're modifying `needs_reshape` here, then the compiler will still complain about it. I think it might also be good to do a change in `compute_span_mad2` since this is the only change in the `Reshape` package, if it's not needed, then it may still be possible to have this `Reshape` instance.
In case the `.map` is an array, it seems `x` is a string (not an array), not a string, so `.map { |x| !(x)` does not exist. It doesn't allow `list.size` because the random value is a string, but `x.first` isn't a string. You're going to have to pass `list.size` in and `all` the string to a string (`""`) to `common.empty()` and `common.empty()`. You're trying to avoid an array by calling `apache.Map` here.
I'm curious: what's the purpose of this change?
Nit: I like this style, the docstring says a type of string. It can be confusing. How about something like `Err`? I'm afraid this will be more idiomatic in general.
@Scottmitch why do we need this?
is there a need for this to be a public method?
I think "both reasons" is a better approach than "ENGINE-16002 Exception while closing command context: ENGINE-03110 Required admin authenticated group or user or any of the following permissions:". Sorry.
You should avoid import * and not use wildcard import *
should this have a `config.func` suffix?
Huh, good catch. I wonder if this makes more sense at the very least... This is a very good change...I don't know why we did that. Maybe it could be an issue, but I am not sure how to test it.
This is an output function, I would suggest to use `func (nonexistent) init()` instead.
how come we don't do this? How about `#ifdefClosingy` or `#ifdefClosingy`?
@tgamblin This is not the only place where `crash_test` could contain this flag. I suggest to move it to `test_test` as well.
nit: the `name` and the above are redundant.
I would make the decision to have a configuration parameter that does the right thing.
I don't believe these are needed
why would `self.floor_thr == 0` be sufficient?
can you move this import to `github.com/chaos-mesh/api/...`
I would prefer to have it set to `""` instead of `undefined`.
@caglar10ur please review this change, this is not correct. It will allow to MemoryUnlimited if I set `Memoryuse` and `Memoryuse` (which is `MemorySwap.init`), otherwise, the `Memory` will be `configs.MemoryUnlimited` if the memory update is set to MemoryUnlimited. You need to do so, but that is not the case.
Should we do props.maxNumberOfFiles !== props.totalFileCount or props.totalFileCount ?
If the var is the var then it should be `epochNum`, right?
@fmassa Shouldn't the `newEntity` variable be updated to be `final`?
Line is too long. [82/80]
the indentation is off here...
Why do you put it on the line above? This is fine for now.
This is not enough to deprecate. It is fine to just remove.
We don't have to pass a name here, we should add this parameter to the `config.go` file.
We can remove this
Do we really need this here? It's just a copy of the file that's used everywhere.
Doesn't this need to be indented one of the `tail()` calls?
Metrics/LineLength: Line is too long. [122/120]
Why was this removed?
Could you remove the trailing comma please.
I'm not sure that this is a good idea (or at least it will have to wait for the API to be loaded?) - the API does not exist.
this means the user has to be cleared after the postprocessing on the database will be visible. but if we ever get to the user with a different name, then we should be able to use `service_provider` instead
This line is the only line changed.
Is there a good reason to set the default 10 here instead of just the max number of characters? The default value will be less than 10 when the default 10 is 1. What about a max max number?
`text_font_size` is already used, can you remove the style here as well?
Can we make this part of the conditional so it's clear what the goal is.
we can actually not have a attribute set.
Why not just `GetRoutingDelegate` ? `GetShardKey` is a reserved word and should be the same as other fields.
The same here.
Would you open a new issue for this? You may want to use `httpExpr.TRUE` to save some of these.
What happens if both inf and the name (signed) are set?
@RiccardoRossi is there a reason to keep `-1` here?
here we can remove the explicit cast
This change isn't necessary, as it is a general rule we could use in `#Thissembly`.
I assume that all the new users have the same name as the key. Are they the same?
I think we could just use a string.
`string|false` is the default.
I think we should not run these tests with the new functionality (e.g. in a way that makes it more explicit that the service has a different meaning). I think we should not run the specific tests and test that it needs to fix, as we do for the tests and we should make that work.
@sahbi-ktifa Can you please take a look at the plan and see if that is the right way to do that?
NO bool should already be in the block
This doesn't seem right, you can use the global namespace if it's a `ctx`?
This is the only line changed in this PR. Please don't change the code to use this file.
Shouldn't we check that all of the root or any of the other types are set to true in this case?
This will only work for Python 2.7.0, but we need to make the change here too.
If we already dump to `debug` then it will be `dumpedBody` even in `debug`. I'm not sure if we want to dump a `err` or not.
This is not right: the `type` should never be found, so this `string` is unnecessary.
This doesn't actually fix the missing controller - this is supposed to be a test for `antrea-agent-plugin` controller in some kind of context.
This was not used by the changes in this file.
If a node is not set to null (for instance), then this will still get executed and the caller will not see this. If a key is not required, we can set `scope?.Context != null` to null.
you cannot assume the VP version is the main purpose of this. You can simply pass the `ards` to the function
The naming of this is a bit ambiguous, since we are setting it `read.split.by-partition` (a. I know this is kind of a hack) but it's a bit misleading that it may be even confusing, since it doesn't have a value for the paranodes. (The name of this has a `MASK` subclass, and it's a name for a bit more clearly to me)
I assume this was left over from debugging?
chunking is wrong, soc is not a good place to be used. It's probably better to have it at least once, and then have it at least one of those cases.
We already have a `USERNAME_PASSWORD_REQUIRED`, should we use that here?
`_tree.Commit(blockNumber)` is `_tree.Commit(blockNumber);` so no need to pass `_tree.Commit(blockNumber)` here.
Is this a public API that I'm missing? It is not a public API. The method could probably just call this method by still adding an internal property.
Why are all the imports changed? It is not related to the rest of the patch. The rest of the code is a lot harder to follow. We are now doing the line of code to avoid the need for every single `if err != nil && err != nil && err != nil`.
can you remove the license header here ?
I think this will be much safer to do in future if we just say to say `and ...` here. It's better to use `and ...` for `x` and `x` as well, but I would say that you can remove `and ...` from the line below, or maybe just change `print(x)` to `print(x, ...)`. (Also in the future you should consider using a `(x,y)` method, and use it to see what the output of the `x` is.)
I don't think the name is required since we don't require `pageLoad` in the UI for the system. I think it should be the current one in the URL too.
the `no region` is specified for the node.
can we move this logic to a helper method and call it `sanitize_get_writer`?
This function is never called, so it shouldn't be here. It should be called as a `bool`, not an `Promise`. Let's remove it as well.
Isn't this going to change the way it's emitted in `__init__`? I thought we did it just to be able to do so but it's not clear how to do so.
This is just a style fix but I think we can just inline these two lines inside the `click()` function as it's a single call to `on_element`.
Is this the right place for the `Marshal()` function? I feel this might not be the only place the code would be called, but if the type can't be changed would be better, I would have assumed the name would be more meaningful.
nit, this is missing a `//`
This can be put in a transaction
`m.Get("/avatar", user.SettingsAvatar)` will always be `false`
I'd rather see the docstring in the new message, but it makes sense, because this is a bit confusing for people who may see.
It might be better to move the option to a new app, in case you are creating a new container with custom commands.
I think `spack.util.Date` is better.
That was causing the `integration` to fail. Is this what you meant, or was it causing the test to fail now?
I think we should add a check to be sure there is a way to change this?
I don't understand this change. I thought it was a simple path not in the default config, but the default file was not in sync yet.
I don't think this is necessary, the test is still passing without an explicit message.
Why did you have to remove the extra lines?
Is it a good idea? The current shutdown will be destroyed in the first place.
Why is this needed?
I would use `(as we had 2 variables with this one, and just create it in each `>`
If the logging is now on the caller, what if someone calls this method in the console?
This is the new API for the new API.
I think that we need this for debugging purposes.
I think the word "Accept" and "real" is more like "ies", and the test could be more clear.
The test name `Recv` seems a bit confusing, since this `Recv` is in the name it's used in `T. protobuf`. Can we move this to the `T. protobuf` above, and have the test pass on it?
This makes the `setupsetup` private, which is now being accessed by `*ctx`. If the `Background()` method was introduced to `setup.setup.ctx` it should only call the method on `setup.jit.ctx`. But this seems like it should also be added to `**`.
You should pass the entire stack to the list of `is_shared` on this line (the `is_get_get_validate()` function can return an error from the list of `is_SurfaceKHR`)
Why does this change to abort? If we're going to change this for a while, should there be a `onError` somewhere?
I don't understand how this works, but I believe the package imports are not part of the API changes
I think this is not a right place for this, `ISpanDecorator` should only be added to the Decorate class. I think this can be removed.
will this affect the BCL? if not do we need both?
@rickmarterclayton do we have any tests for that?
Style/NumericPredicate: Use preceding left join.
I guess you meant <msg> I'd rather not use the getter here
Why the double underscore?
If you want to ensure the Assert's to be a string rather than an empty string, you can't do `IsClose(warnings.Single(events, e: e.EventName)`
Do we need this method? It seems a little out of place, so maybe even move it into the `@Deprecated`?
`GetMetricFunction#Metrics` could be renamed to `GetFunctionFunction`?
Is `opts_url` still available as a `response_path`? If so, should we rename `oration_BACKEND` to `Singleton_BACKEND`?
This is the wrong way around.
Could you add `git blame` and `git blame`?
nit: I know the old code is a bit vague, but if you think you can change this to `baseFee - feeDelta - 0`.
I think we need the explicit sequence here.
no need of this line. You can just delete it.
thanks for the fix
I believe this can be just `callback.onSuccess(parseResponse(response, bodyConverter))`
Why removing this? It doesn't seem like the wrong place to put this code.
is this change necessary or did it just increase the tree?
remove these.
@danrot This is now useless, as we return early...
What is this annotation used for?
I am not sure what the best thing to do here is. The `logManager` is really used by the EIP repository but it may be useful in the future, since that may be quite a bit of a deal, I'm not sure if I'm mistaken.
I think we also need to use `self.num_classes` here as well, but I think it would be more readable (and I think its easier to type `is_flags` if you can. Same for `is_flags` below).
This function does not make much sense, since `Byte Size` is not a `ObjectSize`.
@mfojtik @smarterclayton now I put it right after I had to make it work. I'm not sure why this is necessary.
why do you need to change the blob.type? what's the difference between this and the other stuff?
Style/IfUnlessModifier: Favor modifier while usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This means that the physical device will be set to 1.2.1 and should only be set to 1.1. Is there any reason to only use this code to support a version?
Shouldn't this be: `if (getenv("OOL_className") && info->exit_code == 0) {`
I'm surprised this didn't fix the progress elements because the property has the same `progress` attribute. I don't think we have any real need to fix it, but I'm curious what the logic was doing here. If the progress bar isn't specified, the value would be the initial value. If the progress bar isn't specified, the progress bar isn't being present. The progress bar isn't specified, so I wouldn't worry about it.
This file has nothing to do with this patch, as the file is not included in the PR. Please don't remove this file.
info is not needed, it should be removed.
We should add a warning here
i don't think you need to pass the ID in the tests.
would it be better to use `preview::spmd`?
Can we just use `self._apply_series_op` and remove the if and return below?
This is a very minor change I guess, but could you add one of these to ` Summary` and `Sum`? Thank you.
It's not a BC break, since it's part of the `attribute_` methods on the `jaint` interface.
if you make this return a tuple, i would use `__apply_single_override(self, *, key, replace_value)`
Can you add mock_sort as a parameter here?
This changes from subprocess to this file, so it will be easier to recompile the `universal_newlines` in the build process.
Why not keep the current step more? `GetActiveClusterName` seems a little bit ambiguous.
We should have a `@pytest.mark.skip` test where there isn't one.
The `ToList()` is actually not needed.
Do not use parentheses for method calls with no arguments.<br>Line is too long. [111/80]
Please don't remove brackets.
Is it expected that the new one is added in a specific client?
You could just call it `h2o_reprocess_request` if you are going to modify the headers, right?
You need to call refreshInterval here and below since it's done after.
why remove it?
Nit: this is a function, not a blocker (in which case the 'NAB */' is not necessary)
It seems the same as the NPE check above. Can you fix this?
I think this should be `Channel::AllByResponse` to avoid the global scope for `Channel::AllByResponse` and maybe the `ModuleDecl::ModuleDecl::ImportedModule` logic should use the `collectLinkLibraries` field instead of this new field.
Can you please add a TODO to remove these lines?
Why the need for a `onResponse`?
Could you please move this to `maker.info`?
can you add the TODO above this line so it remains on this PR?
This will need some more logic as well.
Since echo gets added to the `cho_GO_VERSION` controller, this would be more like an `GOMAXPROCS-2`, not sure if it should only be done when you use `GOMAXPROCS-2`.
We need to check `if producer == ctx.addr.RawAddress`?
Why we need this? The `pendingRequest.configuration.remoteHost` is only used for remoteHost.
Nit: please avoid using `import` for new line.
So, I wonder, we should probably be using `W3CBridge` to avoid confusion if they're getting the same in the `W3CBridge` branch?
This can be removed since it will be a primitive type.
Was this broken before?
Please remove this line as we'll have a few more instances of `t` on the second line.
Could you add a case for `opt.wrap(query.getPackage())`
`isProtected` is only relevant to the constructor and should be removed.
I'm not sure if we want to use the `click` function, but I wonder if it might be worth adding an additional parameter to the `link` function (or rather rather `failed_element`), since it's the `working` decorator, which will be used in the future.
`Object` is used in many subclasses, so this is a little too generic for Go() and might be a better name. `getProfile()` could be better than a better name.
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
I'm not sure why you remove it, it is no longer needed.
Would it make sense to set this in a test block? Seems like it could be worth mentioning where we had an end user in `Queries`, which is the thing this code is about.
I know this is a bug, but should this be `target->getPosition()`?
Thanks for the PR @aghassemi @efiop! This should probably just be `user-loyalty` or should we have some sort of action for the "user", "enabled", "enabled", etc.
Is the path to the script really a typo?
Shouldn't we just catch all exceptions here? If we need to log, we can just catch them. I believe the `throw new Error(const new Error(const new Error);` below will throw if `this.FlushAsyncInternal(false, CancellationToken.None).ConfigureAwait(false);`
These should be private since there is no reason for them to be private.
you need to check that the first character is in `time_Duration`.
Why did this need to be changed in this PR? It doesn't look like it will be related to this task.
I believe the `l` should be a `log-file-path` in a new file.
nit: add `@since`
I believe `OpenTelemetryTracing` is a wrong approach. Can we have a test case with `jaegerInfo`?
this is the fix, we should do the same for all platforms
Why are we using the environment ID for the whole environment? Are they all added or used to refer to the environment ID in the environment?
Why is it necessary to change the method signature?
If we have to generate an payment version, wouldn't it be better to store it in a per-version struct? Especially since we have `Supports PaymentVersion` field in paymentVersion, maybe `ValidValid` for more flexible versions?
Recv needs to stay here.
Remove unused imports
why this one is removed?
Please keep the list sorted here. It will be clearer as `testAsAsSessionSession`
why is the expectation changing the expectation? also, the expectation still runs on all the specs with the new expectation on the results
Does the key not contain spaces?
This is probably not needed anymore as we are already creating the CloseableGroup class on line 165. Can you also add this to the existing constructor, if you remove all usages of it.
nit: spacing after `const int *`
You should use a custom `Program.Run` implementation instead of a simple cast.
This is incorrect if the model is not in the same directory. The old code was `ckpt_new_train` but it was `ckpt_new_train`. In fact, I think the latter will be better.
Can we please add a `TODO` to remove this?
Do we need this in order for testing?
Is this a breaking change?
use `deprecated_resource` instead of `set`?
I don't think we need to do this, we can just `return` the `TeamPlan` object directly.
I am curious, what is the reason of this change?
I'm pretty sure we don't need the `registry` variable. Why do we need the `throw new IllegalArgumentException` here?
Why did the config set this?
This is wrong. You should have the default value for 1.2.1 in that case.
I think this can be removed if I remember correctly, if we don't support it, we'll need to do it in a separate PR if you want.
Shouldn't we use the global `...` in this example?
Refactor this to use `label_as_spammer` so it's safe to call this method directly.
I think it'd be nicer to pass an empty object in here to avoid a hard-coded value if we don't want an empty string.
Is ` `` guaranteed to be a `*`? If so, does this make sense?
What happens when there is no `type` column? Is it because of this error?
Please use `String#Equals(String, StringComparison)`
How about `if 4.8.0`? I think it'd be more readable if this was a separate error and not a warning. The goal here looks to be that you don't have to do that since you can't load the token, but it will get confusing when you add the token (which you'd rather be the last one). Also, I'd rather just have the "clangsa" be a string here.
I think this may be more maintainable, but how does the `fee` argument get set to `21000` instead of `fee = 21000`? It looks redundant to me.
can we use `nameof(c)` to get the full list?
I would use `https.isverification` instead of `https.is malformed`. It's more readable for the future.
Is this supposed to be here?
Please use sql import instead of `.sql`.
I'd prefer something like `assert*` here rather than just `assert*` in the next line.
The `reject` already has a value in the `result`, so I guess that was causing a conflict.
I think the old version was correct
I wouldn't worry about the word "Focus" here.
Can we use a mock (or any) `ToMillis` method here instead, to be more specific?
`onNewPasscode()` is not called in a `requestCode`, is it because of a `onPasscode()`?
The defaultPostWriteInterval should be set to 50, instead of creating a new dependency.
Please use `keybase1` (the same as the original version).
We can do this in a followup PR.
why not `blockly.Msg.NEW_MESSAGE = 'New'`? and the corresponding `NEW_MESSAGE` could be more specific.
Please use `Map`, `Debug#report` instead.
If the `except`-typed `AttributeError` was chosen, then we could raise an `Error` error. I think that `check_option` should be replaced by `Prospector` and then `except` with a check that `get_option_from_DAYS()` should be called, and in `get_option_from_DAYS()` always returns something.
this is not needed as `DisableHttpGit` is only used in one place. maybe you want to use the same logic as the other one.
I don't think it's necessary to add the `@org` annotation here.
I believe this needs to be done in a different way. The "one bug" was never trying to do so so the `<disabled>` is missing is unnecessary.
I think you could get rid of these if you want and move to `docker_container.rb` if they're empty, then you can merge this and the line above it.
I would like to avoid the duplication with the rest of the list.
Why we don't put these into a `dependsOnWrite` function? It's not a function, but we may need them here?
The `if (isset($identifier))` is not necessary if you use `getIdentifier`
Do we want to also check `AbsolutePath` in this case?
I'd like an idea to have an enum value that contains all the namespace defined by the user. This will make it easy to change in the future.
This was the only reason I'm concerned that there was a race condition here. In case someone has been able to run a post-processing issue, it would have failed, and the previous code got a pretty bad idea.
If this error occurs, I think it should be logged.
I'm not seeing where you can use this method (in which case do you need to change it?) that allows us to remove the old method and remove the method in `src/main/java/__init__.py` to remove the generic `oldOpenTelemetryBuilder`. That will reduce the amount of code.
@cramforce is `True` a typo here?
doesn't this have to be in the base class? it's only needed in `config.uint8`
Shouldn't we use `str_replace` from the package?
(Pre-existing) I'm not sure whether this is correct, or if the `[j]` parameter does appear to be the parameter name (parameter, -i.e., `--argument-parameter, ...`, ...) so we should not be able to specify the argument types in the parameter.
This should be removed as this will only work with custom filesystems
This isn't going to work. This was a very handy bug where you had deprecated ` being deprecated` in the deprecated `new` was used.
shouldn't the config be `$config = $config.inc('Config')` ?
Should this be `SPI0_MOSI_PIN = 100`?
I think it would be a good idea to have a similar test for `LinkLinkError`. That way you can get rid of the `getTypeDefOfMethod` code and replace it with `context.getTypeDefOfMethod(context.getDeclaredMethods()`. I don't have a good opinion, but it looks like it is the most common case and I can't see a good way of doing it. This also makes it a bit easier to read and @dvoytenko
Maybe we should just rename this to `traceparent`?
Is this used by something?
This import is not used, please remove it
OUtbounds{Unary: yarpc.NewDispatcher(yarpc.NewDispatcher(), ...
is this a typo?
why was this removed?
I think you can save this by using `.save` directly.
Is the intention to use sizeof here instead of the port size? I would prefer it to be long and make the port size a local, since that is how it's done in the code, and only in the code it's not.
Do we need to sourceGroups? It seems that, since we have a `DestinationGroups` property, we shouldn't be calling the `sourceGroups` field from the struct.
Can you add a `TODO` here to make sure `cursor_part` is not defined and we want to read the value correctly?
Just a thought, are we adding a map to a map?
This seems to be the only place where we need to do this.
Is this needed at all, or just testing?
Can we keep the console.error api? I can imagine it's an issue for some reason.
Should this be implemented as a `Serializable`? This is not the case for the "reSession" of the PD client.
Use the new Ruby 1.9 hash syntax.
remove empty line if it is empty
Should be `final`
I'd make this a constant and use it in a var defined in the `host.py` module
This should be `UpdateLabels`
I think you can just do `waitForAdsRemovedRemoved(self,this.reduce)` and then call `waitForAdsRemovedRemoved`
I think it would be better to move this to `tag_error_response`
Why does this class need to be treated as class constructor?
Should we add `_base_` to the model? This way you can save a few lines down the road, right?
this will not throw an Exception if the message is still being thrown
I'd like to see a separate PR for this, but if you're just taking a look at the PR I'd like a simple example of how the name is a bit long. Maybe something like: "With a publisher that can be used, we are now calling a topic with the CLI, and a name for this var can be renamed to "With a publisher it's going to find".
I'd keep the info level to be consistent with the other error messages.
@tvalentyn - This should be added to the `<2.4.0` dependency (which is the only version that will be sent in the package, but it seems there are actually some places in the repo).
nit: you can move this above the WordPress dependencies block.
I'm a little confused by this, are we sure that `.to_hash` is the default value?
This spec would be better as a separate spec (`user.authentication_nil` or something) but I don't know what's going on.
This is probably a nasty refactor.
This will be an unrelated change?
This is really odd that we do this. We should probably make it `ViewerAtStartup=None`, but not `private`.
I would use `string[]` for the `$segmentId` parameter in the `RouteId`
I think the idea is to define the `--export-fixes` flag directly in `build-system/common/constants/package.py` for the new way.
Can we use our standard `v1` package here?
It might make sense to use `{port: true}` and here and in the next line, but to make this more obvious that it makes code slower I think.
This is the only change that is needed, right?
This is not needed. `or lock.yml` is the cache that you are not passing in for any non-bundler SDK. It seems like there should be a performance regression when you need the cache itself.
Just curious why you added `contexts` here but not the `IsAllocated` method in `ByteByteByteByteByteByte`
This is a `*` change, and shouldn't be here.
shouldn't you be checking `defaultPath` here?
Can be merged with the other pull request, i.e. `5 seconds`
Can we set this in the L180164 so we don't need to add another field?
Why not `with`? The current message should be more specific.
This can be moved to a new line above.
Isn't this redundant, as Assert.True(true)); is the same as the above.
I think we can also get rid of this parameter. It is just a simple getter.
remove is useless here
for key is dictionary, it is a list of dictionary. I think this is what it's supposed to work in tests
The `position` tag should be removed since the type is always empty.
This will be fixed in a separate PR, but I don't think we should add any default `slots.stream()` in the same `for` loop, and only return 0 if `slots` is true. I think `slots.stream()` would be enough.
This should be kept as well, I think.
Is it possible to add an issue to track track whether the user provided a new thread? If so we should be able to add a public API for that.
I don't think there is any other apis apis in the repo.
Are there any scenarios where someone might be able to call `skip_unexpected_fields_in_json`? We're not even creating it.
This file can be removed, and we can just remove it
If it's not required to add key to config.hasTable?
There's a typo in dynamo_exited, should we fix that?
This is not a great name, but it's just `SetTlsCACertificate`
The other code is fine, but this can be removed if it is too long.
This is just a thought, but I was thinking that it would be a good idea to make a function that returns the boolean, and make the code block much easier.
If this is not a public method, can we add it to all the classes?
If the property isn't found at all, it should be a property instead of a property.
(style) line over 80 characters
How about a `ISpanSpanSpan` - it does not do the `IScope` but `IScope` - to be clear what it does and what the scope is here are? (It seems a little strange.)
This is a change from what was causing issues. Was this intended?
Remove extra line break.
This file is no longer longer used, please remove it.
Maybe add an assert here that the length of the whole `().assert(` can be `""`.
Can this one be deleted or renamed to `IEnumerable<T>`, since that's what it's doing in this PR?
Was this not an error before?
remove unused imports
Why `use_depthwise` is passed to `depthwise`? Is it because of the `target_native` flag? I'm not sure if that's the correct way to go.
Maybe add a `fips.function()` here to explain the need for the change?
I would rather not change this, because if `storeInbox` is not set, we will always get the same number of threads in the same process and this will be a number of threads and then get it back, and the store has already happened. We can change the type of `storeInInbox` to `getStoreInbox` to `storeInbox::getObject()` and then `getObject()`, and `storeInbox` if `storeInbox` is set.
This should be moved to the interface
I don't think the host is needed.
I am confused by the `h3` here as well. Can you explain what this is about?
Please also add a `/** @throws IOException` annotation for this.
It would be good to check this doesn't work.
Do you want this to be a pointer?
Could you add a docstring for this attribute? Like `width=20`
Is this supposed to be a different code ?
Since you're editing this, you probably need to call this `RETRY_LEVEL`
this is not needed anymore, we should remove the `fakeSessionStats` from this list
Please don't change the arguments here, it's not a API change.
Please add your name to the copyright. Also, I'm not sure we have to change the default.
Should there be some logic that sets the token? That way the API will be able to have the token created and not the API.
Should probably be in `RemoteCacheLookup_validate`?
`readonly DoublyLinkedListNode head` ?
why is this changed?
just use `descriptors3D` here, because it's a `float`.
Shouldn't the client always be enough?
Nit: I'd remove those two lines.
nit: remove the extra space
This is not a required change. Can't we get rid of it?
this was the original fix. The session should be the one in the PR
@hackaugusto This was the bug. The re-indexing of this test should only be run as part of the AE for the `UX` and `UX` types. We don't want the tests to be running at `_o.Test3.A`.
Are there cases in which `Descriptor` could be the first form we want to add?
should we use ` query_proposals_data` instead?
@node = node.to_xml.to_s
I don't like this new default behavior, it's a little hard to follow, but the ` === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === ===
This was a duplicate of line 137
missing String String GET_CAST_ISSUE_MESSAGE should be String, see below as well.
the node name is always non-nullable.
This could be done in a separate PR but since that's the only place it's used. You can just add it into the `if sys.version > '3'` if you want to.
I wonder how the `string_metric_parse` setting is in this file?
This doesn't appear to be used?
This looks like a typo, right?
Why are we returning an app container here instead of returning a container?
I'm not sure this will work for some later, but will this break other applications that are not used?
Is this going to be a problem if a column was in a non-column column? Or is that what you want to do for the bug? I guess we want the following column as well.
Please revert unrelated changes and not changes to the PR
I am curious why we do this instead of setting it to `true`?
@rhymes this one, and the one in `app/models/base_environment` will be more appropriate
Why set to the current zero? If not, we should set this to zero. And if the user doesn't need that, we would not set this to the zero zero.
Can we remove this function if it's not used anywhere?
Shouldn't this be checked with a `BaseTracer.newIndex`?
Could you elaborate on the difference between these two? Might help with this message too, but it's a bit odd...
I'm not a huge fan of this name, it seems like this method might be called more generic, e.g. `split SizeSize` (or `splitProcess`) and so on, we can use that in other places.
This is a bit of a problem, since we want to keep running Python 3 in a `os.makedirs` function, but to get the whole `os.makedirs` function, which will raise a `os.path` (which is only a `os.path` function). I would suggest to make `OSError` an `os.path.join` here, and then we should check the error, since we'll end up re-throwing the exception, and use `os.path.join` here, and just return to the empty `OSError`, otherwise we'll end
Shouldn't that be a `@cmdutils`?
I'm not sure I like this here. If the user is not going to send the server from the `PropertyMessage` that is not present (and there are other places where this was added), then `PropertyMessage`. I think this may be an unusual way to test this more, since this is not really the only usage of "needed" (and it is a good reason to test that the user has been already handled by `PropertyMessage`). I think the only place you're trying to have is if we want to keep this code that is needed, but we should probably try to set this code here
Is this the only functional change? What about renaming the variable to `buildfile`?
Do you mean to add this?
Why not just use `accounts`.
make it a `size_limit`? it's a `io` thing
I'm not sure why the previous code did this. Seems like you were using the old configuration?
Can we make the validation and return a `err`?
I'm wondering if `pkg/store/v2` should be in the group `pkg/store/policy/v1`. Then this can be removed and the `config` package should still exist.
What if the user has no additional check and if its present, then the user has no effect?
If `len(statusParts) == 0` and `statusParts[0]` do not exist, it will return the value of `0`.
Why do we need this? An early return could be skipped on particular server
It would probably be a bit nicer here to do `:bad_request` rather than `:bad_request` since this is a special case anyway.
@rhtyd I'm confused why this exception is here.
Can we move this to `phase`? There is a matching `phase` being set to `true`.
You don't need to assign it here, right?
do we need to set this on the fly?
`index` is not the right thing to do here, since its an array of an array.
This should go below the variable name.
I'm confused by this change. Why not `float`?
Please keep the old annotation.
why the change from pool? we need a more detailed pool
should we change the English doc here?
This is the reason we're not doing `mu.com` as above we're relying on the `Manager` in the project for the update on nodes. It should only be the one that we need.
This is needed for buildability (no need for the `windows.h` header)
This code will fail if it will throw an error, even though there is only a descriptor descriptor if there is not one. We need to make sure that the error will be printed even if there's no error.
why use `codes.InvalidArgument`?
What does this do?
Can we change this to use the `common.Map` rather than a magic value ?
This should also mention that the security definitions will be ignored.
It seems to me that this is not needed, right?
I think `Array of user data` is better
This is a good change, but I don't see how the new code works. Could you confirm if this was correct? Thank you! Thanks
Why is this being changed from theRegister?
Can this be made static?
Can we get rid of this function entirely? We need to move this to the bottom of the file. Also, I've seen that `while winUser.getMessage(byref(msg), None, 0, 1)`
i think these were the wrong place in the tests - should we have some test coverage?
This is wrong and will make use of existing configuration, as the SDK will also support `overwrite.py`
Can you explain why do we even need 2 xx and 3vers?
@mjkkirschner @mikedoan please review this change, since the rest of the code is a no-op.
We have some issues around fundamental changes to this file, but I don't think we should add it. We could probably remove that too, or make it a breaking change.
I think we can get rid of `ipe_argument` here.
This should probably be part of the name of this constant.
is this a typo?
Is this what you are talking about?
Why this change?
Use the new Ruby 1.9 hash syntax.
>PyObject * [](start = 28, length = 7) I'd suggest using `PyObject(2, "O", (PyObject*)pFunc, "O", (PyObject*)lmpPtr)` here and `PyObject *` everywhere else.
this should be `'release'` (same above regarding `enable brave update`)
I'm curious why this change is not needed?
I think this is supposed to be a different approach, but is it necessary that we don't use the schedule '{self in the first place? If it has a schedule '{W, can we make the schedule '{W be a better option for the user to do this? Or do we want the schedule '{W passed in as well?
This setText is not needed anymore.
This will break on Windows, I guess. We should make a separate PR.
I don't think we want to expose a promise here. This is a promise, and it is a promise?
We could also add a `url` route here
This condition is now useless?
This change is not needed, right?
Is there an obvious name in `primer_stdlib` that it's used everywhere?
why is this a `var`?
why was this changed?
@mikeshultz is this right? If I am not mistaken, this is an example of why I suggested the point of `onCommitNode` to use the `el.parentNode` directly in the first place (i.e. `el.parentNode.removeChild`).
This should be `func fmt.Sprintf("unexpected status %x", err)`
Should we be using this constant from `glassi-api`? @Eric-Arellano @stuhood @aparajit-pratap @jridgewell @sttts
It might be good to have an option to always enable `tty`, i.e. `tty=True`.
What do you think about using an underscore.lookback, i.e.: 0.8 and 3.0, 1.9 (lookback)
Why is this necessary? It seems that the `a-index.get` never changes, and the `a-index` still needs to be there.
Since `val` is not a member, we can use `countlyGlobal["member"]` to specify the full URL.
Why can't you use the `ObjectUtils.db.driver` class here? I think it would be more consistent with the other class naming, like `Abstracttiming().next()`
Why does it need to be handled at all here?
Do we actually want to have a test with this?
I think it would be better to split this migration into two different PRs. Also, I'm afraid of adding an 'a' and `episode` one to the ones to distinguish between `a` and `b`.
I think this should be part of the local service, otherwise it will be used once the service is fetched.
This isn't related to this patch, but it's worth trying not to mention the name of the view.
Why does it mean that all callers will not want to have `total_blocks_process_block` and `total_blocks` in the blocks_account state?
This won't be compatible with the default parts that are not generated when the default is `""`. I would expect it to be set at the moment in the `default_parts_num`.
In a future PR we'll need to rename the type to `TypeTransformer`.
why not just remove the property entirely? the tag is always present in `tags/core_id.js` and not the tag for the `matchers`
this import is not used
We should probably use `createdAt` instead of `created-2`
Please, fix line 153.
`public-volume-create-allowed` has to be public? Can I get rid of it?
I'm not sure this one is right. Is this really necessary? Is `conn->push_http2_decode_goaway_payload()` always called on each `conn->push_http2_MAX`? I can't think of any better
You probably want a quick note about the i18n cases here - if we do want a message to print something, it should probably be an error.
It's probably worth moving it out to a separate method, if possible.
This doesn't have to be in the description of the PR
Line longer than 120 cols
Please update line 72 as well. In order to fix the problem, we can use the name `HIP_UNSUPPORTED}},` instead.
Why are we returning `null` here?
Why is this being removed as well?
I believe this is the only change that will make it impossible to load the node so that it works for all of the flow.
One of the nasty bug. We have a lot of unit tests that use this function to install our callback, and that's why the function does not return a dict. I suggest changing the name here to something more informative.
I'm not sure this will work, as the "Sizeized" is the only thing that is set to `None` in this test.
I think we have some docstrings for this region. We should also change the `client` parameter.
This one still doesn't make sense. We try to get rid of everything and generate a reference to the service.
Can we just make this `||` since this doesn't allow vertical alignment on `||` tags?
You need to use `DApartition` here.
The unused use statements should be removed
`#if DEBUG` isn't needed here, `DEBUG` will be enough after the if ` lookup` is gone to handle the exception, even when a user is calling `OnNext()` with a `#if DEBUG`.
I'd like this a bit, it's a bit hard to see what the expected format is for.
I'm pretty sure this is the wrong thing. If the thread is broken, I won't know if it should be reported to a thread thread (like a few different places) or something like that. But I don't feel strongly about this though.
It looks like the `from_pandas` function should drop and drop as it was before in the first place.
What if we called this `config_transports` rather than `transports` for symmetry with the fact that we are passing in a `nil` kwarg?
This is the actual fix here.
Please don't make the change in this file. This would cause a lot of tests to fail. The reason it's not that complicated use of this type of code, is there a reason to do this?
this was added in a new PR
What's the use case in list here?
No need for stats here, we don't do anything with it in this PR.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Let's put that into `TODO` for now. Thanks.
I don't think there is any need to do this since you're using the default in the middle of this function.
Can we use a better regex to determine the results of this error?
Can we use a more meaningful name? `true` or `false`
@smarterclayton do we have a test where sqlite is used in this file?
It looks that this loop is not really necessary.
I believe we should not add new methods to the public methods.
I'm a bit worried about this. I'll be removing all the changes in a separate commit, but it'll make it easier to test (and see if we can avoid the change on all the tests).
We're trying to move away from logging. I'm not really familiar with the debug logs.
Isn't `mu.RUnlock()` always defined?
why the move?
The old code was a bad idea. It wasn't an obvious bug, but it was the new code.
Is there any way to check whether the user has lower case? Or just the `IdentifierScheme`?
Hmm, so this was not in use?
Please remove this field.
I would recommend to get the value from the `/internal` component from the `Container` component to `/internal` in the `.json` files.
You need to set the static constructor here as well
Can we use a better regex to improve the error message? The reasoning is that we don't want to include the full full buffer when we need to do the actual work for any header.
nit: `final and _
I don't think this is a right change. The default value of `config` is `True` but `False`.
shouldn't it be `if ($this->container) {` ?
LOG is already exposed in guava
Looks like `&:to_f` is only ever used by `min_by` so should we just add `&:to_f` to the `WARNING`?
Can you move this file into `enzyme`?
can we add some information about how this works?
I'm wondering, is it possible to have this logic in the `throw new ListNotFoundException` or should we have a `quit` method that would throw an NPE in this case? This may be more efficient, but would also be fine.
why do you use `%w`?
`OrderedDict` and `OrderedDict` are not used in this module.
Isn't this going to produce a N+1?
I would move this before `getAccounts` call, as it's redundantly a general rule, and could be reused by other packages. Also, `getWaitWait` could have a `finishResolution` method. It's not clear what `getAccounts` is.
Could you explain the purpose of this change?
This would be a good start if you set the field in the field instead of using the value of the `if`. I suggest you replace it with a set of `is_required` call in the field?
Line is too long. [85/80]
@sahbi-ktifa Can you double check the use of `getPythonDocConfig(true)`?
I don't think it matters much, because the PMT hash may not exist at all at the end of the list. Instead, we'd need to set a real `ZERO` flag to `PMT-stage` to make sure we don't exist.
This is going to give you some thoughts on the `config_file` variable, but I guess it would be better to have this in a `use_config_file`?
I don't think we should have this as part of the name.
I think this is a bit vague. It could be a bit confusing. Maybe `IRewardCalculatorCalculator` or something.
`ClientConn` is a `A` so I'm fine with this.
Is there a reason for not calling `setReachableFiles` here instead of calling `setReachableFiles` directly? Isn't that a purposeful pattern?
@mikeshultz did you find this? I don't see any `serialize::TYPE_dir` defined anywhere in this PR, it is probably better to remove it from `AllCMakePackage`
It is better to make the call to `split_name_teach` in the `section` method
Is it possible to simply return 0? I'd expect it to return 0 as the default in `isDone()`.
I think we should update site-release too, to make it clear that nothing goes wrong
Why not put this in the core? We have a lot of people using it in prod and will be more readable in the future.
SimpleSimple is the only one that is needed for the `GamePlatform` method.
There's a timeout on the next line, but what happens if a `25000` is missing and the timeout would be missing.
@agramfort this is not necessary for yours.
We still need to log the `WriteVolume` arg here
Same as above, but this change should be in a separate commit (not in this PR, I will let it be reverted in this PR anyway).
I don't see why this is hardcoded here. I am not really sure whether it's worth it, but it is probably worth to mention some kind of `-` in this place and having to check the return type and relying on this for each app to be sure.
Why wouldn't `getFactory()` return a CommandLine?
`this.hot.countSourceCols()` is not thread-safe, it will be removed completely.
Can we have the option to always set `u_conn->fd != -1`?
Use the new Ruby 1.9 hash syntax.
can you add back the empty line above?
Could we use `s.debug.debug()` here as well? `s.debug.debug` has no `Debugf` instance and will `findInMemoryf` `findInMemoryf` in my case.
`log.warn` is probably a better name than `log.debug` so the user might not have to change it unless they're in the first place. We can change the name to something like `log.info` or `log.get` or something more general, especially so that `log.info` is just an alias and `log.get` does the more clear name.
The change here won't work. You are adding a new one for this. The tabContent.querySelector(".btnFilter") is called for a new one.
I'm not sure if this is the right place for this, but it is managed by default.
Hmm, I don't think that these changes are related to the PR.
This is a breaking change and should probably be `type[string]string` (or something else) since we're using `original` instead of `type`.
This is an interesting thing. I could have caught that before, but now I can't think of a cleaner way to make this change. I think the only way the "This profile will be permanently deleted" can be undone. In other words, when we are relying on the current confirmation of the configuration profile, it would be fine without the "This profile will be permanently deleted" action, but it's not too long. <msg> "This is an undone thing that will be much faster and could be undone." (and "This profile will be permanently deleted" is the default.
Is this really a good place to make it into the `if` below? I thought it's worth having one...
I don't think you'll want to consider using a real `Router.Source` (or a `Read` function) here.
Why this constant?
The <msg> CseContext already handles a name, why do we add an optional parameter if we are not going to add context here?
I'd prefer using spaces here, but I'm not really sure what's better.
Is there a reason we can't just use `isIE9`?
I'm not seeing any changes in this file to default to the defaults.
@lilleyse this is the actual change as we are using 11+
Can this be made `setFirstPingTimer()`?
This should be in the same package.
This file is no longer used any more.
I'm guessing that you're just using <msg> This is not an error condition... (I assume that `uname` is just forcing it to be a valid value to be there, but I guess it's just not an error)
I would prefer to use `plans_path` here, instead of `files` and `tasks` here, but I think we will need to update the code in `<something>`, which might not be necessary for this to work.
I think this can go to the other commit.
We should also mark this as `X509Module`.
`model` -> `common`?
How do we know that there is no cost to the old behaviour? Were we trying to reduce the amount of stuff we want to do here?
why is this change necessary?
May be put into brackets?
This test doesn't really rely on the implementation yet and should probably also be a different test. It doesn't make sense to me but I don't feel strongly
What does "text" mean? Is there any special reason? If so, can't we just use the one you defined here?
you need to change the `GetValueAsData`.
Why do we need this?
Should this really be a `final`?
@agramfort this is what I was thinking for indeed... When I was thinking, I think I'd prefer to see a more specific version of this, or a more generic version of this. I don't think I've ever figured out what the best way to do is. In this particular case, it makes sense, for example, if we have an `id` or `id` or `permissions` in the `commit`, this makes sense to me.
This looks like a hack to me
why is this peer id being removed?
How about: `RpmDependenciesDirectory = os.rpm([0])`
`str(Basicblock, self).__init__()` will work for now?
Should we remove the log line?
this is also used by the tests in this file. is this a fix we need to revert?
isn't there another call to _Player()_?
We're going to have to change this line, as it has been changed in the PR.
Should we remove this too? If we don't, I'm wondering whether we should make `traceInOp` an attribute on the result.
I don't think this should be part of this PR
I think we should check for `isPluginV2`
why remove this line?
I'd rather not expose these in this namespace. You might want to add them to the resource string so that they can be omitted for those components and that they can be accessed via another resource that is passed in.
I think this is the wrong approach. This function will be called when the server is running in a `windows` package.
I'm not sure it is the right choice for users to use a schema.
I think we should be using CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link + "</a, instead of providing a list of elements in the class. <msg> The old code does not have to be done in the code and it will be removed.
@dain can we move this to a `static const`?
This is going to change the function that was used in controller but now does nothing.
I'd prefer to see a way to make the OCI case more complex. In case the `domainname` property is not in the `String`, the ` StringComparison` would be executed as a `[]` instead of a float.
It seems this change could break a test that has `req->res.min_size`. I think you should just do `if (req->res.mime_attr->is_compressible)`
nit: `Append` -> `Append`
We can't use the info version here. The version will be the real version.
Why does this not work with newer versions?
Where does the timeout come from? I'm not sure if it is a problem because we have to check the result anyway.
we should rename this file, or create a new one with a name
I would not add this to the setState, this will be set later on.
I know the encoding is still required, but should we just change `utf-8` to `utf-8`? (and maybe even in the docstrings?)
@dvoytenko I found that `cfg.DB` and `Chain.TestingPath` will never be `null` here. I'm not sure that `Chain.EnableAsyncIndex` will have an empty path here, and I think we don't want to have to go here.
Not sure I get why this change is needed
This is not needed since we're in the test.
This isn't a boolean but the default should be set. The default should be False.
Style: we can remove the *.
@deads2k i need to recheck this again?
This would be a good time to add `result` to the end of the tuple. You might want to rename this var to something like `Optional[str]`
@Scottmitch was this a typo?
Please use a `@Nonnull`
this should be done after `http://`
I think this will break if someone has a specific six object with six.text_type, but this will fail.
TIL you can get rid of this!
I think this may also be causing a crash.
I think the extra `EscapeatileObject` was not necessary here.
I'm a bit wary of changing this line.
Why this change? I see you removed the `cctx` above.
`respBuf` is the same as `T`, so `respBuf` is not `respBuf`.
Do we need to worry about the second sentence?
I guess it should not be delete here.
Can you change this as well?
The problem with this is that if an error occurs with the `Error saving WebCal-calendar ` it means that the window isn't found, we don't want to wait for a reason. In the `lib/behappees` case we would want to check if an error is returned, even when an error occurs. So we would not expect it. We could also change the window isn't set to "Error saving WebCal-calendar" for "not supported" when we set `send` to "not supported" or "not supported"
why remove this?
Why does this need to be a `Integer`? It's a `Integer` object
I'm not sure how to handle this `byte` since `p.m.Lock()` can return a `uint(blobs)-1)` value if `p.blobs)-1)` has an `byte` before `p.m.Lock()` returns `uint( maxHeaderSize)`
What was wrong with calling `getByStatus(V1, -1)` directly here?
Do you think we can remove the last call to `commandStartExternalEditing`? The `id` is not a valid alternative, so we wouldn't need the conditional in `getSearchFromInterval`.
maybe use a logger here
The `sanitize=True` should be removed.
@jmhooper @maarcingebala do you know why this is needed anymore?
I would use a different value for this.
Do not use spaces between method name and method name.
Please add an headers to the unix unix unix unix unix unix unix unix unix unix unix unix unix unix unix unix unix unix unix.
I think this should go before the change in `GetDirectoryDirectory`
`from . import _` ?
Do you think there should be any way to get this information?
Maybe we should have the `notification` field be part of the tuple and extract that field into a `resource.go`?
driver_.experiments.js
Unnecessary spacing detected.
Can we get a more specific payment (such as channel name), maybe just "Owner" ?
This is a breaking change, but I think we should keep it.
Why is that needed? I'm not sure if the test should actually be testing what it does.
`createElement` needs to be a list, right?
I would put this on the line above, it's more readable, what do you think?
I don't think we need this variable here (and in `node.parent.statement`), because otherwise this call won't work with the correct `read` method.
this was the bug, right?
This is the place where `timerSleep` is called (it has no sleep) - is this going to give you a long time that the sleep is not in sleep? Is this the place you are setting is not supported?
nit: this could have a separate commit
What does this change do? The previous code had the same function, so `wlr_backend_destroy` is only called once in the case of the wlr_backend_destroy.
Should we rename this to LoadPlainYAMLManifests, since it seems like it is going to be called twice
This is a weird thing - the new value in the constructor is from the "hash" and not from the builder. It should be the default in the constructor.
Can we use `Integer.wrap(1)` here? This will mean that we won't see any references to the user-defined storage.
@michalk: Is this a bug fix? Should `to_ts = max_ts` also be updated to `time.time()`? It looks like this was never used.
I'm confused by this setter. What does grpcStubTypeName mean as a setter? Why not just call grpcStubTypeName in setter? That way if we are not reusing setter then the setter can be accessed via setter setter. It will be better to make the setter required for setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter setter
Should this be marked `cscs` too, since we have the `cs` annotation in the code base. Also, I'm surprised this works well with EBPROM.cs files; however this is not the same as other `if`/`else`s.
Shouldn't this be a `catchpointWriting`?
could this be `Iterable[str, create]`?
Not sure if `__init__` is needed anymore
Need this change as well
we don't need `config` in this module, right?
This can be simplified to simply `trustedIssuer`
The whole thing is that this might be clearer. How about a separate method, `(offsets, offsets)`?
Why did you change the order here?
I would prefer to have some tests around this.
I think we can remove this newline here.
This is a breaking change and should not be part of the `Expansion` usage. Please add a TODO to check if it's an object or not.
Why are we not using a `.` prefix here?
Note that this is the actual change. This can just be reverted (and I'll do it in a subsequent PR, though).
You should remove `AC_CHECK_PROGS` as well. `YACC` should still be the same as `PROGS`, right?
This is a good candidate for using `ExecutorService` for the config.
`None` and `post_group_ids` seemed like a better name for this security_group.
`File.separator` is the default for File separator. It was not `replace`.
Why not use the same convention for the other tests?
This should use a companion.provider instead of companion.provider
I think you can now use `String#format` here instead.
What is this not sufficient ? Is the gJobMgr being used for this ?
why do you need to check here?
I think we can use `emplace`.
If you use the `tag` keyword for this, you can just add the keyword parameter to the root `tag` (i.e. `gulp dist --help`).
Since we are updating `prompromers` now I think we can get rid of `health` now.
We are using this `ILogger` in the `ICoreLogger` class. The same for `ILogger` below. Can we rename the `ICoreLogger` and the `IClient` to have a `ILogEventSink`?
I would remove this, I don't see where it is being used.
You don't need to escape quotes here, just use `\`.
is this a regression or something?
I think we should use the `_` field instead. The `Value AttoFIL` field should be set when loading the `Property` model.
Let's make it `final`. It would be better to implement the getter and use the interface.
Seems a little weird to me that we don't have to keep this in the api?
I don't think this function needs to change.
I don't think this will work. This is just a copy/paste error.
If you don't want to include a buffer, this should be in the `Delete`
this is not the fix, right?
Why are we returning an empty string now? It would be better to just check for an empty string.
I'd like to see 3EndpointID changes in this file to ensure the version version was changed in the code.
why not just `mutexSetupServer`?
I would suggest to include an example here, to indicate that the value is not either the child or the child (e.g., the child). The `sles` option is not available, but for the other reasons I would not include the `.V` as the `.V` in the code.
Shouldn't we set None here?
We should probably use a more strict `"key" + 1` here. We're trying to avoid the warning in case we want to be careful.
Can we use the defaults here instead of the `args`? This way we won't have to touch the `--et-snapshot` flag.
This is a breaking change and should be in a separate pull request.
What is the impact of this property? It doesn't seem like there's any use-case for it?
NIT: We don't need to create new methods in this class.
I don't think this belongs here - `get_screenshot_as_file` returns a global argument. The function returns a list of files that's a list of files, that's why it's used.
Doesn't the return value need to be checked?
Can we add a type annotation here for clarity?
Why change this? The previous version of the struct is already there.
Please rename the method from `setReachableFiles`
This shouldn't be necessary. Just Just Just set `recall` when an `Consent` is not available.
NIT: remove newline?
I think you don't need this boolean. It would be only `== 0` and `==0` would be the default.
why are we using `logging` rather than `test genesisID` for this?
I would not change the order for the first condition. It would be better to split the first condition into a if statement instead.
Why change this?
This doesn't seem like a desired change
Can we add a `private` property to the type of `publicLink`?
This field should be set to zero.
Can you remove this interface? It does not use the interface to get interface.
Why does this change to 1?
can you explain why this is needed ?
I was not sure if this is good. This is going to break many people people to decode it. I think it would be good to fix the test to fix this. I am also not fairly sure that we'll need to fix something, but I'd rather just leave out what was the problem with the previous code.
Should be `MyResearch/Holds` for consistency?
this check is redundant because it is actually done earlier in the `if c.typeString() > 0 && c.typeString(),...` block.
nit: we have an extension which has the effect on k8s default values of karma-api.
why do we need to use the `libkb.sortAttributes` function in all `libkb.jsx createElement` files?
Can we change this to `aws_CONFIG_MAX_MEMORY = "4"` as we do everywhere else?
Should this property be unsupported_property?
This assertion was wrong, I changed to remove it fromTaskCPUMemLimit and it was never true in TaskCPUMemLimit
Should use `Object` for this.
can you add the error message too?
This is the only change that will make this PR introduces and I'm not sure what we want to do.
Maybe we shouldn't introduce `Makefile` and call this `Makefile` to indicate it's set by the time we're doing it, to make sure that the user has a default value `use` and then call it at `Makefile`? I'm not sure what the best thing to do here is though. (e.g. `makefile`).
Please use the `gcloud-beta-prod` wrapper.
This seems to be a regression, right?
I don't think you need this as you already have the `is-by` option
I'm not sure we should do this here. It is possible that if the user specifies this function, they will not see this check in the `externalFormat` property.
Not sure what is going on, it might be better to use static imports in a separate PR.
remove unused imports
If this function is only used in the DCOS module, why not just make it return the DCOS method?
if it does not exists then use the 0.10 client and set it to `0.10`?
@jeherve - I don't think this is the right place for this. Maybe if the user explicitly passes a "no env vars" or whatever we expect it to be present or not, you need to do that.
I don't have enough space in the name here
Could you explain this change? I don't see it being used anywhere, it seems like it's just testing the function.
@benhalpern this is the `Accept` key that isn't being used for this purpose?
I'm not sure we want to raise here? If the goal is to always return the last string.
I don't understand why we have to close the listener here?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
You're not actually using an array of the exists commands in this file. Why did you remove the `non_dup` functionality?
I would use a `std::line_too_string_size()` here.
`RLock()` can be `//` or `// = 5;` or `// = 5.opts.MaxConn` to match
I think, for the case of `itself` the next iteration of the `conda.client.then` can't be here.
I wonder if this is still necessary.
It'd be better to make these two statements embedded together.
Shouldn't we check for `c.Wireguard.EncryptHostTraffic` here? Otherwise this is always set to c.Wireguard.ILHostTraffic.Map if c.Wireguard.ILHostTraffic is false?
I would use the SQL injection for the use of get here.
This is not needed anymore
You can probably do the same change here too, and set the condition to false in the constructor.
You can just use `MESSAGE_TRADE` directly, and remove the `jq` call here.
What are the cases where you use `s.Name == 0` in this case? Is the type of the same type of the `split` type sufficient?
This was a mistake, I thought it was intended to pass the flag into it
I don't think this cast is necessary?
Is this an oversight from not using the previous cell cell?
Should we make this clear somewhere? I think it would be better to be consistent.
is this used?
Is there an advantage of using the `urlencoded` class in the `Core` backend? If so, I'd rather not have a migration here for `Core` class.
You can use the standard `isIntrinsics` annotation here.
I think this test may not have failed before, but I think `diary_comment` should be a problem. In fact, if you are still using `create`. If you want to remove it then maybe we should change that to just `show` and have `create` return all of the tests.
I would rather call it `eventUserObject` for clarity
Was this a mistake before?
I think using `[:[:]` here means that if we're going to return the return value, then `BAD_REQUEST`.
This seems to be not related but I would have expected the default to be the default if the user already got an error. I would expect at least a log line before it's finished.
This is the fix for #15398
the name is confusing, maybe `const Widgets = Widgets(Jelenets: Widget)`?
Can we get away with calling this `metaInMilliSec`?
I think the indentation was a bit confusing.
Did you mean to leave this in?
I don't think it should be true. It will be set by default if false.
Can you use `_readflow` here, since we use `self`?
Why are these imports moved?
I'd say we don't need a new flag here. The new flag could be empty.
Will applyAllCorsResponse ever be true? I would think that we should be using `applyAllCorsResponse` in this case, but it would be easier to understand when the option is made
why not just `v/%v'`?
We should use this version when creating the meta fields.
Shouldn't we log at `action<? extends Supplier<WebDriver> clazz = build<? extends Supplier<WebDriver>` level (and log that info from `action<? extends Supplier<WebDriver>`?) and `action.info()` if `action.get()` returns `action.get()` if this is not. (I'm not sure if it matters though)
I wonder if we should make the old factory class private as well?
It's not a good idea to call this `err`...
I don't think this change is needed, since the `docker` package is now in `Udp.go`.
Because we want to keep it, I suggest `\b` to get rid of `\b` as well.
this is a private API, we don't want to use it for the PFS.
I'm surprised it isn't 100 characters long.
If you're using the `HardKiller` function you won't need to wait for the result.
It'd be nice not to use the `get_gles2_source_back` function for this. It's a function which only has a single function (like `m_format_query()`) which is called from a different function.
Is it possible to remove this line?
I think we should use `std::find(...)` instead of `m_child_layers.put(),`. This is an awesome change.
@agramfort this was just the fix. I was thinking that this is what should be done in an upgrade process.
We should probably add `stderr=stderr`.
What if the domain is not nil?
This isn't a boolean. You can use <short> calls>(>=1) {\>(>=2) }.
I think this is a bug fix, @jmhooper @matt-gardner Can you review?
I'm not sure this one is correct. If the `exclude` and `exclude` are all `Optional`, the `Optional` should just take into account the `position` param (because the first two lines of `*`) and the `Interval` can just be `Optional`, not the first one. I think the other one is better.
I'm not sure if `string.encode` is really necessary here?
I think you can use log.Info
This is a breaking change for a change in the API. Are we still using this for now?
This will break any existing enumspb.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED. Is this intentional?
you don't need this line
Why is it named as `time_home` ?
shouldn't this be handled with the base class?
You don't need a `&` here.
What is a problem here? I think the `getDataSource` here means that the value should not be used. If you have a `record` method that calls `_get_option_handler` but you get a `getDataSource` from the `getCollectionRoute`.
How about creating a separate PR for testing? This will be helpful for testing purposes.
I think we should probably update the changelog as well
This was added to support the new API and the new API API, I don't know if I can do this.
`isUserFields` can be moved to `query._fields`.
Should we have a test that verifies the number of parser is different than the expected number of rows?
Can we just pass the number of scraped limits and just pass it in the number of scraped limits? It might help us avoid having to pass a number of scraped limits.
`DropIPIPPacketsFromWorkloads` should not be the name here. The purpose of `DropVXLANPacketsFromWorkloads` is to always add `--Workloads` and `--Workloads` to a flag. It's not the name that it's the default. So, I'm not sure about it
This function is used by `removeTransaction` in this function and will be removed from here and in the `removeTransaction` method in this function.
Why is interest to propagate?
Should this be `bool`?
Doesn't this need <msg> I'm assuming the other similar fields are used for the test case?
It would probably be better to check the type if we're going to use this in the future.
can you move this method to `throws IOException, ParseException`
this `private final` doesn't do anything.
I think we should add the parameter parameter and/or type documentation (i.e. the parameter) in `WcharStepStep`
I think that the `LINQ` and `fields` should now be `fields` and not `fields` at all. Is this intentional?
Missing space after `&&` please. (same for other places below.)
The role is always going to be triggered by the `xyz_layer_surface`. I'm not sure why we need to have the logic in this function. Can you move those code to `xyz_layer_surface` and move the role into `xyz_layer`, as it's already in the `xyz_layer` function?
This seems to be missing a `_loadExtension()` call. The main code is `fetcher`, which is called only once. `driver()['loadExtension']` is called before it is called.
Why was this removed?
I have a slight preference to suggest that there's a way to avoid the use of `hole`, but I don't think it makes a difference.
This is not a query parameter, right? why not just use it instead of passing in the one passed in as a parameter and then use it in the `Map_results` method?
I don't think you need to do anything about this, it's in the `Process` folder. The `Process` fixture is only used in the `Process` folder. You can just use `ExternalExternal` here instead of `rescue Beaker::DSL::Assertion`
This will need a lot of changes to the new analytics.
You should use the same variable name for this new condition
Why is 20 necessary ?
Please add yourself to the license header.
If i understand the logic correctly, this is the most important thing to do, we should also say we have this in `tests.py` (and then in a `tests.py` that we don't do with the correct spelling of what we want). The reason is that we should not add this to the specs that we don't expect to be able to use it here is because the `.zip()` is just `index()` where it needs to do so
We'll want to include most of the transactions that are already consuming these elements. It's not clear what is going on here. Can we make sure it is a special case (I know you're just following the description of a few of them, or at least not, but that's the most reasonable matter)?
Shouldn't the content be in `request.headers`?
This should be ` dynamo_exited_synched==false`.
should be `static const`
`Long bitmask` is redundant here, I believe.
I'm not totally sure this is a valid change since you're looking for a "new" type but it might be worth clarifying that this change is not needed?
Shouldn't it be `w.width` here, too?
@ludwiczakpawel i made this change because 3a://' is a public class, and the only method that adds to that method does its own, which doesn't appear to be a tad confusing behavior to me.
Shouldn't this be called `fetchPrivate`, since we don't have a `fetch` attribute?
`my` could be a `my` if we have `ClientAuth`
Did you mean to include this in the PR?
Space inside } missing.
it seems like this file should be after `/../../app/lib/twitter_digits.rb`, not after `/selected/DIR/deployment.rb`.
Why not just call the whole `res`? It doesn't seem to make sense to me.
Do you think there will be a case of passing a custom custom custom custom custom custom custom custom custom node ID, if the custom node ID is available? Maybe this should be done in the UI-specific functions, like what happens when there is no `validate_project` function?
Is this the correct spelling of data from the `build` gem, or would you just need to change it to `process`?
I know this isn't new code but what is the reason for this change?
Can this still be null or empty?
What is the benefit of using the new `c` parameter, and not just the one returned from the `c` attribute?
Is there any way we can get these variables from the system instead of using the variable?
I don't think you should expose `slots.count() > 0` here.
I think it's good practice to use 7, 1,0 as a hack, to be consistent with other stream values.
Can this be a constant?
This is going to break the API. I think it'd be better to have an enum that will have an enum that can be configured to add it into the `Name`? It wouldn't be better to use a single type.
Not sure how to test this, but it seems to be more explicit and less efficient.
I think we should use the full path here instead of `component`, but it's not a general rule right now.
Would there be a null "indices" somewhere to avoid this?
Can it be moved inside the `update` function, so it's more readable?
can we name it simply `published_at`?
@bharatviswa5040d8d3f
Should this also include `url.xml` in the `serializer.xml.php` file? It's not related to the version of the PR.
Should it also be run from command line?
Would you mind adding new files you made to core that use this new files?
This change seems unrelated.
This was just wrong, I think... `OperationDisplay` is only called from one place now
Can you explain why this is needed now?
I wonder if we should just have `ecs` as a list here?
This is wrong, there were a bunch of `ExtractField` environment variable that are set by the environment in the environment. Now that the environment variable does not have any side effects, could you remove the `if` clause below?
You should be able to simply use `if (!pathParam.indexOf(...)`
Is there any reason to have this return the ` VerifySignature` error?
This is the fix for #1717.
This would break a long time.
Can you add a type for the creepiness here?
@alalazo I am just wondering whether there is a typo here - should be `_conv1`?
It's interesting that this is only used with `new` and no `and`. I wonder if it would make a difference in this case?
@cvializhou should that be `Optional[Description]`?
What's the need for this change?
Do not print an error, just return the `<>()`
The `dag_file_exists` method was returning `true` for a while (it wasn't a boolean). So it would return true. I think the old code wouldn't be more appropriate, but if this code is not used, it would probably be worth checking the first argument, and instead return a boolean.
nit: you can remove the `{}` here
Do we have to add that? It might make sense to have a `Handle` here.
What's this for? Are all of those length numbers different than 1e-9?
I think you also want to remove the `private` keyword from `ByteAttribute`. If it doesn't then you shouldn't be calling `super().` in the constructor.
So this is now done by the `listInMQ` method below?
Could you move this method into `tidtidtid` method in favor of adding a new method in `createTableRegion(String, StringProviders, StringProviders, StringProviders, String span, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, StringProviders, long regionNum)` to make it clear this is a string.
Why are you changing the order of these functions? I'd like to keep the `/addons` package as a static variable and have it get its type. But I'd really like us to have it in a more general place and more explicit.
This should be `debug` in `abort`. Otherwise the block could change to `debug`.
Should have made to catch Exception
I don't think that's necessary, you'll have to delete this line. We do, but we might want to make sure it still works with the old docs.
This should be a PGP_MIME, otherwise it will be used in the future.
remove this line
I think this was a leftover from debugging...
Should be in another commit to explain why it's needed
nit: it's nice to have `findElements()`. That's part of the scope of the fix, it makes more sense just to call this one with `findElements()`
I think we should add a note that this is not a "bug" module and that it is not a valid key. In particular, we are not storing a field as a key as a field. In particular, a field is used to determine how to do it. We can change the field name, and not the key. In the "password," module, the field is not a field, so it seems to be a bit strange that it is already in the "password", it would be better to just define a field that returns a boolean value, and a List or a set of different keys.
Let's just make this a field. We will use the default implementation for adding a field in the extension, not the service account.
This change is not related to the bugfix.
Should this still be a `err` instead of a `*err`?
I believe this should be log level or debug level
Style/MutableConstant: Freeze mutable objects assigned to constants.
This is the fix.
This doesn't seem used anywhere. Please remove it.
This is not correct. It will be a small fix for the bug that should have been made in the future.
I think that we need to get rid of the delete_notes function call.
We could add some more context for this. I'm not sure it's useful for us to make this a static field for every object.
What if we added this to the Solr schema? (I guess we already know the name of the Solr to make it even more robust, but the name of the Solr schema doesn't feel strongly)
why do you have to do this? if value.pivot is a required value so if user ever sets it to a `value.map` it will be a `(nil)` value
Metrics/LineLength: Line is too long. [131/120]
I don't see the reason why this is necessary. The `getCouldCouldTouch` method already has this `setContentOnTouch` in it.
I don't think this is a good idea to introduce an "remove" method from all the places, maybe we should move it to a "remove" method?
Why did you change this?
I think this is not correct. I would just set it to `undefined` in the `mutate` method of `compare` and add an example for a `get;` and the `get` field to all the `new` methods.
I'm not sure if this should be a `createSenderResources` method?
Should we keep this message as `NoError`? We may want to add a link to a short message like: > The The dot of this file's docstring would have been much more useful. The former will also need to be updated.
I think this should be called `durationAsync`, since we have the existing `durationAsync` already registered for the `Async`.
huh? I think this is a bug in C and not a bug.
Could be a single `nullptr` if we have no idea how to construct a dictionary.
Why is the `\` needed here? Isn't `idv` already available in the code?
If you do `return` here, it will throw an error when the returned result is null, no? If you do, remove this, and return a fatal error? If we return a `default` we will remove this line and will not fail.
Does this assert still exist?
This was unused. The rest of this PR adds the `go/kb` argument to `go` so that we can remove it in the future.
Was this intended to be committed?
Is the `attackedSet` necessary here? Can you check if attacked is null or empty?
Why are we doing `nextnext` instead of `exports`?
In theory, we can't change the content of `scripts` to `electrum` at all, because we want to change all the components (either the file or the old one).
driver updating the setter.
Why is this interface needed?
I'm not sure we need to be giving it a list here. This is because `user_id` is not `nil` (which is a `string`), but it is not `nil`, which should be `undefined`. Also, why do we need an `map` check?
The previous `Lock()` is a very confusing name...
I think this is a typo. `lodash` -> `lodash`
I think that you need some unit tests for this.
It's better to use the middleware you defined here for `v1.ForkRepo`
I don't think that we should do it in this PR, but I'm wondering if we should just avoid `and` statements?
I think we can remove 6 entirely now that we're only looking for 3 now
We don't need this line anymore.
I think we should check whether the provider is on the same page. (I think that should be the default for `433`).
This was here before, so we don't need it?
I think it would be cleaner if these were renamed to match the new `TextExtension` to `TextExtension`. But it would seem like they are the only supported ones that are used for the value.
do we really need this call? if this function doesn't need this, can we just remove it completely?
Do we want to use `ocWebState.IsTimes()` here?
How about using `settings.reverse()` here rather than creating a new history?
@mfojtik why did you change the order? Is there an `kind` param that will change from an `false`?
Why remove it from `AppDomainFixedOutput`? If it still doesn't, I think it should be used here.
can you remove this, it's not a big bug?
Please add a migration here that we can add later.
you should add this to the changelog.
This is fine, but we should just make it a utility class with the `upperCamel` object (e.g. `ClientClient.lowerCamel(runtimeName))`) that is only used by a single test, and have the test pass if the `upperCamelConfig` is a `upperCamel` object.
Can we avoid the double negative conditionals by removing the `import`?
I wonder if it's time to just call `get_storageclass_on_add()` here? That way, we don't have to worry about the `get_storageclass_on_add()` calls in `#check_storage_on_add()`
@adamsitnik @dpmills I was expecting a LibuvFunctions for no reason. I didn't see any use of LibuvFunctions in the core, but I am fine with your suggestion.
I think this is a very fragile bug. What was the reason for not adding a `UUID` attribute?
`get_additional_classpath` already exists, right? I would prefer it to be in a separate PR.
I'd prefer a separate name for this (and the others below, more compactly).
do you need to pass `config_path` to the `dict()` here, or should that be a dict?
Hmm, I like the idea of the `flattenedTree` cleanup, but we should be consistent about `querySelectorAll(kb.context.getAndElement().setAndElement())`, so it is clearer.
This method is called `addConfigs`, which is called inside `addConfigs`, and it is called once per component. Why not directly add this method directly?
should we be doing any validation on it being set? or can we support it elsewhere?
I am not sure this is correct or unstable. Can you make the default package private?
Do the same for the default value in this method?
This should really really be `spawn.h`, since it is not a single instance, right?
This shouldn't return a boolean. The user could never read a boolean, so a `paused` resource should return `true`.
Could just call `!=` instead.
We have to be careful with the fix here. We can just make `options` the default, so that we can avoid adding new options in the future.
Maybe we want to add to the `Apply` function?
It's not clear why the `identifier` package didn't exist. Is it because we already had the error condition?
Since you are changing this line I would move the `if` above `pepclass(full_parent_name)` to line 819.
Why does this need to change?
the default value is `Number` primitive or object. Zero is not considered negative. `Zero` is an optional optional
I am not sure why we would want to do this...
Is this a bug fix?
why this change ?
I don't think this is used anywhere.
Please add your IDE settings to the future as well.
I think `struct calico_nat_dest *nat_dest` is not the right thing to do here.
@juanvalleww I think you missed spaces
let's go ahead and remove those `it` imports from the go-algorand imports
Is this required ?
This is not correct, we have to have a `validate` method to set the `pattern` property directly.
I think this is not needed, we just need to get this to not work.
It would be nice if this was the right place, but I don't think this will work, right?
Please add trailing comma
Why is this line deleted?
@Scottmitch is there a better way to do it?
Is `LowestInsertedHeader` really a typo? It does not seem like it is used anywhere.
I am not sure that we want to introduce new class methods. What are the behavior of calling ` ImageStream()` with `JmxJobMBeanManager.getInstance()`? Wouldn't this make the implementation simpler, since we are already serializing it?
I am not sure that this is a change of behavior, but this change is just a thought.
nit: I think we should remove this file.
Line is too long. [97/80]
why do you need this import?
I don't like the idea of having both an int and an integer argument. I would rather see an `isinstance` check on the `wavelength` and have the type of `int`.
Should be 'DefaultDefaultCancellation', 50', or 10.14.0?
remove this line
it's not a huge thing to do here but you're using a common package for the chainID. You should add all of the options for the `chainID` fields to `chainID`.
You should probably use `button[type="submit")` here, to reduce code duplication.
Can this be removed?
why not the type of the object instead of the type?
Shouldn't the extension name be BuildIDOSEnv as well?
Spark has started?
I'm afraid this line may impact performance, but is this line still necessary?
no need for this in core? I think it's a lot of duplication
If I understand the purpose of this change, the `NoOMError` is just a bit confusing. How about we create a separate method for it?
Can we avoid calling this twice?
Why does this need to be public?
Remove this line.
I don't know if I'm missing something, but why is this line needed?
I don't see the "go" of the "github.com/opentracing/opentracing" command in `lib/utils.go`
I'd also suggest renaming `k_auto_extends_8` to `assert_status_8`.
This should be a `Set<URI>`
Please remove the quotes in front of the string, as they're not used in a single line.
Can we make the container creation configurable? It would be a good idea to create a lock on the `container` package. If so, this would be more readable. (The reason being that this was done is because the container being created is already in the lock, which is not the case here.)
This might be an anti-pattern, since you want to use a specific `MethodError` here.
In the future, should we also add a note that this is only for the < 24> (5) < 5 ms for that in the future?
It seems like this should be moved to the `cleanupYAML` class, and `cleanupYAMLYAML` should take care of all the advantage of the options.
How to shutdownNow be reused? If an executor is shutdown by shutdown, why not use a default executor for shutdown in the constructor?
Why not `new HiveConf(HiveMetastoreTest.class)`?
Let's remove this `sr` and use it below. It is already being used in line 121 so the `staking` can be used as a part of the protocol object.
Should we do a check for null here? (or perhaps throw an exception)
"unless value is not zero" sounds like an error message.
@xpl, I think we should add an assertion on this to the caller. I'll do the same in the one that is passed in. This fix is needed for `xpl` branch
It might be more accurate to add a bit of logic here, to check the code to be able to run `vkCreateAccelerationStructureNV` on a non-equalation if the code was being skipped.
This looks like something that should be final.
Should be an unused import, I believe.
This was added in #4773, which should be removed.
The timeoutControl does not write the connection without writeing, so the `minDataRate` should be a const on the next line.
I think you need an empty line after this one, too.
Please avoid star imports.
`wlr_log` doesn't seem to be used anywhere, so can you use the same logger here as above?
This was removed because it was a duplicate function now
Line is too long. [83/80]
Could it be `List<?` or `getRequest` ?
Here too, I don't think we have a strong reason to use it
Is this still necessary, or is it just the one that is used in `config/olympia/groovy/integration-config.go`?
We need to think about how to construct a local file, even when the `Clump` column is created. It would be good to know how to get the type of git logs and see the `Clump` table from the database.
Doesn't `config.ControllerManagerConfigurationSpec` take care of `ControllerManagerConfigurationSpec`?
@jeherve - I think that if we add runtime names to the `go` component, should we move it to `Jenkins` package?
Please don't use `set`
I assume this is the wrong place for this
I think we can keep this as `DiskList []DiskGroup`
I don't think this is right
I don't see any changes to this method in this commit, so we can't have the same API call every time we call `apply()` in order to make sure we don't have to do any `apply()` in the API.
Why did you change this?
Use relative import.
could also be `count.size(0)`
The same is in `clip`, this is a regression.
this was the right change
you need to check if this is a string, before calling it from the method, otherwise this is a list of strings.
What's the difference between `--quiet` and `--quiet`?
Shouldn't all endpoints use this constant?
A bit confused. I think you should use `query_args.append('versionId=%s' % self.version_id)` here instead.
why is this change necessary?
should this only be included in the `README_helpers` command?
`packaging.hidden_name` is defined as `@property` as `index`, so it is possible it can only be used here.
This is not needed.
Maybe we should have two separate methods for the same tag? If not, we need a separate test that will use this method.
Why is the disable code in this file?
Is this necessary if this is already included in `validate_window`?
`pytest.dead` also sets the matching `requirements.satisfies` which is a bit surprising to me. It's not that I think it would be better to just remove this check in the `test28_done` and `test28_done` that it isn't actually used for this PR, and the other two test names that are not related to their test names.
This doesn't seem to be used anywhere?
I am not sure that we should do this. The stub is already a `color_enabled?)` so we know that the user doesn't have to stub Spec at the end. We should also have one of the stubs in the controller, and then have the stubs in `spec/services/cache_spec/spec/spec/spec/spec/services/cache_spec/spec/spec/spec/urls/wallet_spec.rb`, and the tests fail.
Do we need to also check for `.toString()` here?
To make it a bit more maintainable I'd say: - move the `modeman.leave` to that block, so it could be in one line, so it's a bit more readable - `usertypes toKeyMode, mode, 'tab changed'` :)
No need for `Headers` here, we can use the `Default` method and do nothing if the `Headers` interface is a `Enum`
Why is this needed? You should check if ($cart) && ($cart->isEmpty())
Why do we have both LITERAL_FIELD and LITERAL_FIELD? Seems to me there should be a test where LITERAL_FIELD is set.
Can't we pass in a `Test*` function?
Why did this not work before? Was the `atm` prefix still in use for 1.1?
We should test for the ` "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "- "-[' "- >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>>
Maybe add a description about what this does (and maybe even with the other ones)
I'm not sure this should say "will need to retry..."
I believe this can be `void template.BlockBlock(null);`
Don't forget to update the test to check for the new `kolt_manifest` argument.
This should probably return a `null` value.
I'm not convinced it will work here without using `parse` (line 245). What's the point of adding this?
update_policy is defined in set_dir(), so why do we need to update the entity here?
I think we need to change the window here to not require window in the application applicationDelegate.
`props.selector(context)`. I think we should have this check here, because if `selector` is a number then `selector` will always be true.
I think it's better to do a check `_blockTree.Genesis ?? false` here.
I think this should be moved up to the top so that we don't have to repeat the file name directly in the library.
It seems like we should still be using this `coding: utf-8` file, and not just `# coding: utf-8` (which would be a good candidate for using `# keyword arg`).
I'm guessing this is something that we should be using in some way?
why is it an instance variable?
This would probably be useful for debug only, but I'm pretty sure I don't think it's necessary to add anything here.
@smarterclayton do we want to make the name more precise? or is there a better place to make it so people know what to do with that?
this test is removed since the file is already in the workspace and we are not testing the file anymore so I removed it.
I think this may be the other way around.
This seems a better place for `create_database` method.
We should never get away with that and this should be the default. If you want to get away with the error, you should never get a stack trace.
How about we rename it to `validation_set` and `validation_names`?
Is it possible to keep these imports unchanged?
Style/MutableConstant: Freeze mutable objects assigned to constants.
Can you put the return type in the function?
why does this need to be public?
I'm not sure why `model.schema.base.options.strictPopulate` is nullable here? Why `null`? Isn't `type getModelsMapForPopulate` always true? I'm not sure if that's the correct way to do it. What do you think?
Why did the change to Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z
I think this method name makes more sense to me. When I read this correctly, `gs` is the name of the slash. It says that `gs` is the name of the file name, not the name of the slash. What about something like `append_newline?` or something. `append_newline?` or `append_newline?` ?
I'm not sure why we need a default here?
File variables are always set to the right file (eg. parsers). Can you use the same file name to make it clear that it is not used?
I'm not sure this has changed. I am wondering how many of our JSON API changes are in a PR.
We usually don't import all the other imports, but this one should not be here and I would have expected just to have it there
We should use an enum instead of a hardcoded stream.
Please remove the extra lines.
this is also incorrect? why?
I wonder if this should be called a lot of `getNamespace` to prevent the schema from being used.
This should be updated to remove `violations_tablename = 'violations'` and have the pylint disable and update.
`strictly` is a convention to store `new_exercise_ids` in the array. I would prefer to not use `each_with_index` since it is a single wrapper anyway, and also just use `each_name`.
Why is this not a clone of the metric?
This seems wrong. The function `compute_max_num_readers` should return a string as well and the return value can never be revisited.
I wonder why this is here? I think the first version of the browser was correct, but there isn't a better way.
Could you add `     ` here?
Why the remove?
I think this line is redundant as the `message = None` can never be `None`
I think we might be missing something here, but I think that we will need to update `input-yaml`.
Is this needed?
Why this import?
Could you please add a new line after `get declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare declare
is this intended?
I think we should be able to use `len(country) == 0` here.
I don't think this line will do anything here because you can't get QUrl if it is the same as `QSignalMapper::mapped`.
If you make this stop() method, then please add it to the end, otherwise LGTM!
This could be renamed to `protostuff.runtime.model`.
This looks like something that should be moved to some common class. I'd prefer using it as a method or constant for the user, not a `reason`.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I'd rather not call the `wrap` method here, since it has to be an `Atomic`
It seems that you can only include `API: "link"` here.
Should we add all of these? I'm assuming this is a test for this?
This is not correct. You can simply use the same function for both the above and the above function. If you want to connect to a peer, you can remove all the related calls to the new function.
This should be just `oldParentVNode` since the childV node has a default value, right?
I think it's a pain here - but if I understand it correctly, this should be `h` rather than `response`.
you can just use `self['platform'] =~ /(fedora)|(redhat-4])` and remove the whole `else` block
I think the changes in this class are not needed anymore since the `fixedWidthBinaryPageReader` can be removed.
Nit: It would be nice to have an enum with a ` unsupportedKey`
you're not using it at all, i.e. in obj_pin.
Can we put this on config file instead of adding more methods to it? It looks like we don't have a module named `HeadLess` and the property has a method that has `*` on the same class but it's also a string.
Nit: please wrap the right imports in braces
Why do you need it? I don't see the method referenced in the constructor.
@matt-gardner, @jsoriano is this the right way to check the contents of these variables? Or is it possible to use the directory "reproduce"? or is this the wrong thing?
Do you actually need both? I see you added them in the PR.
I would move the virtualTree logic into the scope class, to make it more obvious where the scope has been started.
I am not a native english speaker, but it does not look like there might be such a problem. It might be worth moving this line to `brmd.SetBranchID()` and then the `brmd.SetBranchID()` call in the `if` block below.
I don't think the check is required since we only do this if the first file is already in the `if` block
I think the config can be the config without the flag name.
why `currentPlayer` ?
Why is there no other way to specify the `NAME` object? If that's just to be able to specify a user, then this should be fine. I would suggest adding that to this `parse` and then passing the `emails` param to the `User` object instead.
why this is added twice?
Do we need to make any changes to the `unit_KEY_directory`?
Please use `goldenRetriever` to remove the `GoldenRetriever` class
This file should be modified.
Isn't the `error` variable still necessary? If so, why change the function to `nil`?
Can you add the TODO?
should we make this a constant?
why is this changed?
I'm not sure why we are moving all of this from `kubernetes` to `pkg/util/slice`... why not just add the import to `pkg/util/slice` and move it to `constants.go` ?
You should use `Assert.to.equal` here, which doesn't match the rest of the code.
nit, not your code, but could you change this to be a `Math.toJSON()`?
Is the NULL check necessary? If it is NULL, it might cause problem, but it might not IL analyzing the NULL check. Or maybe a better way to do it?
Nit: `Platforms` would be more appropriate
Do we need this?
If you have to be very careful, you could use vague constants for the vulnerability. Also it will be nice if this was a vast majority of the new UART created with the Trinket M0-0 API, but I think we could make this a function.
Can you add a docblock here to explain the purpose of this?
I'm pretty sure `is` can be finalized here, but rather than `reserve`
this doesn't seem like a reasonable test, is this a duplicate of the test?
Can we use `AssertEx.IsTrue(importPeptideSearchDlg.CurrentPage == ImportPeptideSearchDlg.Pages.match_modifications_page)` here. We have some weird non-breaker.
This line was removed since it was in the original implementation and it wasn't part of the public API. The old code wouldn't try to use the new one. I don't think you need this change since the code below is only used in one place and we can use the new one.
This is incorrect, it's actually looking for a single version of a regex.
This is just a nice cleanup, but should probably be a separate PR to fix this in a different patch.
Does this need to go before 1.11?
I'm not sure if it's safe to do this since it appears in a `ConcurrentMap` function
end at 11, 4 is not aligned with if at 7, 23.
should this be "record"?
This should probably stay
I'm not sure we need the second half of the provider here. I think if we do do the `.go` check here it will be fine.
We should change the message to include the content.
Isn't this a required argument?
Why do you need this?
Missing `@return` statement
Is the plan to use `feature.newHeader(true)`?
I know you're changing `conf.l2types.get()` but can you fix the naming?
I believe this should be a different property than `source`.
Why do you remove remove_v1_instance?
I think it'd be better if these were moved inside "AW" block.
This is the change that fixes a regression. I'm not sure how that works. Is there any reason to only do this if we can't use the package registry?
Can we remove this field? :)
This will never be - 1. It is possible to change the code to always return - 1 if if there is no bb->stop_pc
This is an API break change. It's a change that avoids a significant change to the types of the enum. Please revert this change.
This would allow only the base class to be present if the `getParentSvg()` function is called. This will not allow you to use `push[:Boolean]` if the class was present.
Please rename this field to be something more specific. Also, can we change the default value to "local"? It seems like you could just call it ` evt` and then we can add the new parameter in the ` evt` to keep our usage of this field.
@mjkkirschner I'm not sure I like the idea of having the `witers` here...
you could just change this to `topiff.iface`
This is not needed because `permit_params` is already in `new_helper.rb`.
why are we changing this condition?
This is the main problem, as the tests are failing because of `#pragma warning: true` and so on in tests the `Task.start` calls.
We could probably get away with this test entirely, but it looks like it's used only internally so IMO it's better to have an explicit check here.
if not only bool by default, wouldn't it be easier to do this in a single `BaseElement.layoutCallback`?
What happens if you set the return value instead of using `$aliases`?
Is this the only way we can handle this?
How about `ListEvents`? It's a struct
should this test be testing the sqlcipher version?
Is it worth it to have a logger for the job, but not a string?
I think you could also have the url as `:open_url`
This is incorrect, `10 *` is enough. The only effect of `unresponsiveTimeout` was that this was unresponsive, which was the default.
If we have 0 as default, we should not wait for the user to know.
I assume this doesn't break any existing flows that have `@config['interpreters'] = ...` so I removed it because the script script is not using any of the `@config['file_as']` decorator.
Why is this changed?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this could use a `log.info` or a `RegexOptions.info` if you're already setting the `log.Escape()` call. I'm not sure why the above code worked, but I think it should be a `log.info`.
Shouldn't this be `std::in_iop_type` instead of `<< C_DEF << std::endl`. I see `#include::in_Iop_type` but not `#include::in_iop_id`. I don't think that's the correct solution, because you don't want to use a fixed value for C/F64.
This include doesn't belong here, it's only used here.
This is fine to merge into the `form`. I think it's ok to do `options['form']` and not `form`.
@franckc @trws this is an unused import
You are already passing onCompletedCalled so that is not needed.
why do we want to make it optional ?
Let's not include this here.
@bartonjs - are you concerned that the unit tests for this would fail when you create the enum with the `Encoding` enum?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Shouldn't this be `ProviderProvider`?
Shouldn't `javascripts/countly.views.js` be in the `azure/core/events/javascripts/countly.views.js` ? Otherwise, there's no risk of a conflict with the import.
Shouldn't this be `if (!audit)` instead. Also, what happens if `rames` is true and `ax` is false?
This can be removed since it is only used in one place, and `self._bump_and_store_timestamp` is not in the function.
Can you also delete the word "MemoryDiagnoser" in the file?
This is a bit tricky, but can the above be `localFieldPath`?
There's another case where you've removed the checks.
Is this the only way to use it in the `proto.go` file?
This is an optimization to add some payment tables for the same payment tables.
Can we put a TODO here? It's annoying to see that we have the same error message twice.
Why not change it, that way it is only required by the change?
I think it would be nicer if `prefixAsNibbles[2] == 0` since it is a common package and not a common package.
Why was this changed?
It doesn't sound right to do this since there is a better way to write a NullPointerExceptions for a common variable.
I would have made it explicit that the namespace exists but still would have the namespace.
Was this just a typo?
this should be done in a separate PR, as it does not really matter in the current implementation, but this should probably be a utility function in the `info` method, as it is really really the main issue
Is it worth moving away from the `/Dashboard`?
`isHydrating` is not needed here, `can delete deleteNode` is better
I don't think we want this to be called on the server side. We should try to think about it.
do we need to copy here?
I think this should also be handled in the `Update` function.
Why not the same code as before, ?
This is going to make them allStats, but it seems redundant as its done in `service/api/max_Stats`.
Does this also need to set lint on line 334?
This is the only place where we use this behavior. Is there any way we could do this without using `init.go`?
This is not a valid default, right?
I would add `@deprecated` to this annotation and replace `uninitialized` with `@Coordinator.util.resolveresolveresolveresolveresolveresolve` with `@Coordinator.util`. We can also pull these methods with `@Coordinator.util.resolveresolveresolveresolveresolveresolveresolveresolve` as I would prefer that we don't support the `uninitialized` class in the `unased` classes as the default here. I suggest to make the change here to use the new `unased` class.
Should the Keccak.Zero be named as `[ConditionalTheory]`? It's not clear what the purpose of this.
Is it possible that this would be an immutable list? If so would that cause any issues issues? If so, we might want to add an attribute on the `object[]` field.
Please add a license header.
We have a few of them now, why not just have all the function call on the prefetch directly?
Use 2 (not 4) spaces for indentation.<br>Tab detected.
If you're using a static variable here, you may as well remove this method and use `write` in the `Log()` method.
Since this isn't a valid column, and I'd rather you call it `config.middleware.insert_before` rather than `config.middleware.APP_DOMAIN`.
Is this the only place the exception is being handled?
Please revert this and make sure all the copyrights are on the same line as the rest of the file
I don't know why this function didn't add any useful functions to this interface, but I don't think this function is still used elsewhere, so I would like to keep the code consistent and add a `return p.peers(...).convert(true).convert(true)`.
What's the reason for this change?
This was needed to prevent the need for a specific reason.
Just curious, what happen if theAccount is empty? Can we do it in the previous line?
This will need to check `result != null`.
Why was this changed?
I think it's safe for a second pass to `_` (see below).
`parent_of` doesn't need to be in a local variable anymore, right?
I don't see it in this PR, but is there a reason we don't want it back?
I'm not a big fan of this name. It is not a good choice to use here. I don't think this is the right approach for us, but maybe it is better to check for that.
@deads2k I think we need this for everyone. I think it would be good to make this more specific for now. `config-config.pth` would be enough. The `./pants help` is already written as the `-1` module.
receiverreceiver is not a issuer.
Should we also add an assert here that the flag is not available?
This is the bugfix for ErrUnderpriced.
Do we really need that? What's the point of view?
nit: update copyright year in header
Should we be using `cs.dirty.CAS( 3, 3)`?
It's not clear to me why this is necessary (or not in `Module-go`?).
Is this import needed ?
nit: this should be either a `TypeWidth` or a `TypeWidth` (the method name is already nullable).
I would have put an import of the encryption interface.
@jona-sassenhagen this is where you're going to run your cleanup on Windows.
why did you remove the field?
I don't know if it is correct to use `new.Consensus[protocol.ConsensusCurrentVersion]` so you could use `!ok || !ok || !ok ||` instead.
I would prefer to have this be a separate commit (e.g. a separate PR). That would require a lot of changes. This PR doesn't add any more details.
We should probably also update the message in `setup.cfg`.
I wonder if we should have a more descriptive name than `gysttoken.MystTokenTransactorSession`
Another way to make clear the vmultiplier has to be set to the value of vmultiplier.
This isn't related to PR, but I'm a little confused, as this is now used in the Dynamo console.
Why is this file deleted?
Can you just delete the `ReactiveAdvice` variable?
This is an example of a bug, right? The level of the log entry can be more removed.
This was the only place it's used.
why are you you removing this? This test was a bad sign in the test that I need to find in tests.
I think the `t3lib_TCEforms` logic should also be updated to use this class. The other test is already using `t3lib_TCE` so that you don't have to use it.
This is a very specific thing to me, but I think we should just make `DataType` a private interface.
Why do you skip the renderers? It's not a blocker, but a typo.
We already have a `bundler` error for this already.
The `getResourceReference` is a static, right? Why are you using it here?
Line is too long. [82/80]
combat ->Combat_ptr combatString
I think there might be a problem with just one `.to()`
This import should be removed entirely. The `dager` import is now unused and should be removed if needed.
why not just pass the TracerProviderBuilderSdk?
NIT: `v = values.New(t.KeyValues[j], ""})`
I think this is a bit of a wrong requirement. A AII am not sure if we should work with `crcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcrcr
You may want to rename `timestamp` to `ROLES_CLIENT`.
We don't use wildcard imports, right?
@jmhooper @jmhooper @johanste WDYT about moving this to a migration file?
Is this import required?
@prietojc can you make the following changes here also? They're not supposed to have the following changes to make the following changes.
This doesn't look right to me. Why do you need it?
Please don't use the `JSON` in this class anymore. The other `AuthCode.AuthCode` is the default, not `AuthCode.AuthCode.JWTAuthPlugin.JWT_CommitCommit_HEADER`.
Shouldn't this be also wrapped in `execute()`, rather than here?
The log message should be updated, like `GetEvents(msg, log message)`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This should just be `/* XXX i#3307: unimplemented, we can`.
I'm not sure what the best approach here is, could you make a different method? It would probably be more consistent with what this interface is.
Maybe use `pubkey.hex(fp_bytes(fp_hex_hex_fromhex())`?
Should this message say "double"?
I am not sure how much I have been doing this, I don't see where it is supposed to be used, and this is probably the right place to do it. It looks like this should be an if check below and check the other stuff below.
This is not just an issue, but it looks like this should be in a different PR.
Can't we use a specific implementation instead? It's not important.
This is the main change. I don't quite get it. Can we get rid of it? Or is this just to get the whole bunch of `refs` types that are only needed for `newTrace` elements?
@rhymes this is the one that's used for a Cat Char Base\* and there is an `Cat Char Base` but not `Cat Char Base`. I'd prefer a different name for this.
The `Resolve<IMvxChildViewModelCache>` is a more idiomatic way to handle this.
I'm not sure that it matters but why is this logging needed? This is a debug message that is not handled elsewhere.
Is this something you have forgotten to add for this?
Nit: Please avoid using star imports
`System.out.println` is enough, the compiler can live with it.
Why is `flows` not `enableProxy`? If yes, then this should be `flows.serviceGatewayFlow(false)`
No need for this change since it's a core pull request.
It seems `typescript-eslint` is a breaking change. `--ACTIVE-eslint-esended` should not be used any more?
Why not enable it for the default?
This file is removed and is not in the Saleor's codebase
What's a "ok" trying to reduce memory usage?
Revert this class
I think we could also use `setSelectedElement` here, since `getControl()` already includes the env variable.
if we have to have a log line, we shouldn't log in `logf.Log.Info`, so this will show up in the logs if anyone feels strongly
I'm not sure why we need to change it - is there a reason it wasn't?
You are already doing this, remove the extra space here.
I thought we were going to have to remove these from the service and always get to the map?
@dantleech did you have any concern about this? It seems like you only need to change this method and not change the implementation.
I think it should be an instance of `actions` instead of an instance of `super`. That way if we move all those `billing` components to one of `actions` we could add the property to the service.
`set `suspended: true` -> `suspended: true`
You can make this debug message more specific and say something like "log.url.debug("URL is a local file")
Is this related to this PR?
I think these constants are already in `system` package?
If `c.RevisionField` returns a `Log`, what's the difference between `RevisionField` and `c.UniqueString()`?
Why not just remove it?
The function parameters should probably be `XXX *_lat_ops`. It would be nice if you used the `XXX *_lat_ops`.
This is a bug in the code.
This is not the same as we've done for the `MockState $children`
I'm not sure we want to put a line that is too long; a `including` would be much simpler than a `fmt` block.
@mjkkirschner @michalk: Don't we want to use the string representation here? Or is that something we should be using? I'd say we can use the string representation in the name.
Why change this?
Please don't use `else` as we are changing the type of function. You are using this function to generate an `else` branch.
What is the "none" flag exactly?
should we throw an exception here?
I would use the same name for the new parameter.
Could you add type annotations for these?
This is probably OK as the only purpose of this code is to handle some additional `paths` target for all `--target` targets. However, it is just an edge case. We have a couple other `+config.Target` target. I think we should have this in a separate PR. But that might be an improvement. I'm not saying, because this is how we're doing this in the same file. I think we might just need to do the same in `config.Target.Compiler` to avoid calling `config.Target.Compiler` on the end of the code.
Is `AuditRPCWithTypesStatus` the same as a `boolean`? If so, should we rename `true` to something more descriptive?
nit: sort this alphabetically.
Maybe mention these TODOs in the PR
This is the only place where we're using `final` in this file, I wonder if it wouldn't be better to move it into a method?
same here, and in line 174, there should be also a string comparison
why do we need to add this? i think it should not allow for `BeEmpty`
I think this should be `if (!is_builtin)` and not `m_userWriterList.push_back(SWriter)` because it doesn't have anything to do with the `.push_back()` call.
I think we can drop `NoArgsConstructor` now.
`location.p.constant.common.Cleaners.interceptors` instead of `location.p.constant.v2`
This is the wrong place for this, `Q_WITHOUT_MATCHING_Q` is a `QueryElevation` instance.
I would suggest to keep all the flags together.
Why did you need to move this line?
Why not `continue` or `ipfix`, so that we know it's not a valid value.
Should be `num_simd_saved`
why not using the latest version?
I don't think required_subject is needed any more.
Import packages with wildcard is not recommended.
you can delete the line too (but I'd have added the same argument to `_get_presentationType` already).
Why do we need to use `DEFAULT_DEFAULT_JOIN` here?
@aghassemi I wonder if this should actually be called `template.version.present?` and not have a default value
Wouldn't it be better to add the `controlplane` field and set the result in the container ?
Worth adding something like this. Like `gcnArch` is set to `True`, and add a validation explaining the initial name.
Please add the license header to the end of the lines.
I think I need to remove it.
nit: you can use `--"-l"` and `--"-l"` if you want to use a space here.
maybe we need to give it a more descriptive name?
nit: should we name this `VersionKey` to clarify?
I don't think this is good, we have a `info` statement to make sure nothing happens at the end
@wachterjohannes Is this needed? It is used only in place to get the user who is currently running the runner on the server
The only thing I noticed here is that if you're not going to use the bucket's rule, we could just remove this and use `self.assertEqual(rules_engine.rule_book.resource_rules_map)` which does the same. This way the change is still in the code.
Add a line break after this one.
If this was the reason why i had to change the assertion to say the secret of the `c.populateVersion()` was not actually doing anything.
Is this the only place that getAddressDetails is used?
@jsoriano Is the point of this change?
I don't think it's safe to remove it here, as it has nothing to do with the original PR
This method should have a `@Deprecated`.
nit: can we rename this to `classMetricKey` to be more descriptive?
This is a little hard to debug as it is actually implemented...
nit: newline should be above the empty line below
Why the extra space before the = here?
It's better to use brackets here.
we have an issue about this TODO, can you fix it so that we can create the Jira?
Could you please explain why this change is not possible, and what is the motivation for making it more generic and what is the motivation behind it? I find it easier to change in the logs for the next PR but I can live with it, especially given this change makes it more difficult to debug.
How about mentioning the results for the `args` parameter?
Could have used `%n` here instead of `%s` since we're not using it anywhere else in this PR
is this necessary?
This has to be updated too.
`getStandards()` can be replaced by `i18n` or `i18n` if you want to get rid of that line.
I would suggest using `irregular_dims` in this array instead.
Why do we need this? I would think the `id` should be a `Sync_webweb_est` and we could have it return a `Sync_other_est`.
Is `padding` guaranteed to be an `int`? If yes, then can we use `td:nth-child(2)` instead?
Nit: please move up one line now.
This is a pretty generic change. It should be used in more places, like you have with the same `if altModifier:` but the `if` condition.
We should add this logging line to other files, as this file is going to be removed in this PR
What is the content_tag on a pdf-settings? Will this result in the content that was previously written?
I think the more elegant way to write this is to simply mark the test as experimental, so that the more complex config can be removed when we're using the `TestMSMClient` method.
If the goal of adding a field to the `alwaysOk` it should be changed to `isAllHealthy`.
should be `schedpolicy`
why are we adding this as a random generation?
Why is this still needed?
nit: maybe `ExpireTableMetadata expireTableMetadata`?
I think we could use `github.com/libp2p/` here and then in the other go.
This is not an error, the function will return `nil` if there are no errors. The error message was printed twice, but I don't care though.
I would suggest a different name: `tls` vs `tls`.
The naming is misleading. I'd say `OC.getLocale()` should be called `getLocale` or `getLocale`
Do we need this method ? Wouldn't it be better to use the same name as the function `quality_metric_set::interface1` ?
It seems to me the first function is never used here. Why do you need to add it? I don't see it in the code where it would have been called, but I guess it's not used anywhere else.
oops, missing a space between `)` and `{`.
so, I think the eval_CLOSE may contain a wrong error, but I am not sure how to fetch both eval and eval...
Should we create a new issue for this TODO?
We could also just return the result here.
could you remove this line?
Can this be initialized with `volume` type as well?
I think you can just delete this file since we do nothing with the previous PR
I think the other `fstream` functions can be removed from C++11.
nice. This is the only change needed in your PR, is it because the `cancel` method is doing something that is used by the `cancel` method without changing it?
Is this test name really specific? It's not very clear to me that we're using an unbounded version, so maybe `--testing.T` would be better?
Should we update the hash on the optimized rules?
The status id is not always zero, so it should be `myId` here.
Why is the check removed?
can you make it a `nil` here?
nit: can you use the `_` prefix for these functions
This can return a `List`, I think, because this would return an empty list, but the `List<div>` would be a bit faster.
should we make this a const?
Use the new Ruby 1.9 hash syntax.
can you add a note note to describe the difference?
This should use `CartItemTestCase` instead of `TestCase` right? There are a few more `Common` methods below that use this for a while, but maybe I guess they should follow the same pattern as the other classes.
Shouldn't `VerifyingKeys` be a `key`?
@mjkkirschner @smarterclayton It appears this file was added in `isRails.extern.js` and `make generate` (see `make dev_generated.go`)?
this is not right either. Why the quiet time and notifications are not quiet time?
@zora-wang Are these changes intended?
This change is not ideal. When you add a `force_private?` parameter, it will automatically set the `force_private?` field, which will always be `true`. So if I remove a condition and `force_private?` from the `if` to the `if`.
What if you are not using `ApplicationConfig.GetActiveApp()`? Also I'd say the `v` as an option in the warning is also more efficient.
I think that this is the only place we could use these configs. I don't think we'll have any better design for these.
We need to change this as well.
This is a change from what I missed in reviewers
There doesn't seem to be any need to check for null before doing that
The `EC.element_to_be_unclickable` check has to do with the other PR. `EC.element_to_be_unclickable` is no longer needed and I think this should work.
Shouldn't this be `dataFile.getClass(dataFile)`?
This is a test, I have no idea what @aparajit-pratap :-) Looks like a fix, so good to keep the test.
This is a different check...
I think that you can now remove the `kubeedge/kubeedge/beehive/pkg/core/context` import, and use the new one to `kubeedge/core/context`
I don't think it is needed for this field.
Can you use `T` instead of `||` here to avoid the warning?
Is the idea to have an overload of the `httpHandler` in the test that can call `http` instead of the `Deps`? That way, we'll still have to pass the handler into the manager.
I think it makes more sense to make this part of the `fetch` decorator.
shouldn't this be also updated in the constructor?
You need an `if !&` here, the test already refers to the default value in the tests
@michalk: I think this is the cause of the CI failures. The `sarif-1.0.0` was relying on this line to actually fix the version.
This was a duplicate line, so it was the first function on a previous line.
remove this line if not needed
Please use the `map` pattern here.
I think it may be better to keep the original exception here (and the one below). I think if you do this, this message could be helpful.
I removed the duplicate lines here since it's now the same.
Why does this need to be done after the user has received the `select`?
I'm not sure if it would matter but if you do this already, do you need a space in `setUp` to match the rest of the file?
Could you also move this to `src/commit.h`? That would be more readable.
Why wait here? Shouldn't this wait before the wait? I don't see any test to verify it's reported to 5 minutes?
This is an example of how this is called. We could remove the `if` below.
does this mean we are setting the option to null?
I'm going to suggest to keep a `Bootstrap_for_entropyappend` function here. It seems to be more common than a `dXNlci1kYXRhCg=="` than it should be
@deads2k @jasmainakjas this is the bug fix. `AutoReject` is set to `false`. `AutoReject` was the point of this, but I was thinking if `buffers::GetAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppendAppend` is set to `false`. I think we should use `LogMatchesIfDebugEnabled` here. I'd like it to clearly see `LogMatchesIfDebugEnabled` that the call to `Log
Let's just use `/etc/kubeedge/ca` as it is an option to not build these in the DB.
no need to check `'procedures_prototype'` in cedures.
What is the purpose of adding this?
Please remove brackets.
I think that the `StackTracer` will be a no-op if the process exists, otherwise it will not work without any operation.
why not `SERCOM0_SPI` directly?
I'm surprised there's no way to calculate it in the `strong` request?
This change seems unrelated to the change in here, but is it intentional?
Is there a reason to have this outside of theimplemented class?
we could use constant for these const values
This file has been deleted, no need to fix it.
I'm not sure how we should add here... If we're going to add it to the code string, then it should default to `0` in `lib/code.php`
This was not working before...
Why do we not need to call `SafeAreaInsets`?
There should be a trailing semicolon here, otherwise LGTM
Shouldn't this call (this) be inside the `destructelessWriter` callback?
this means that it should not be None by default (which should not be None).
@jsoriano Is there a better way to implement it?
for consistency: `return x < Y`
What happens if there is no owner? Does it have an async async version?
Shouldn't `custom` be escaped with `opentelemetry`?
Which case is it?
I'm not sure this gets a good idea. If loadingUrl is null, it will always be loadingUrl.getHost(). If this is going to be true, this will cause a bunch of loadingUrl to crash.
Note generally it means that only data will be used for ng2 now.
Not sure that this change is correct, but if the config changes are only for the first provider, the only thing we want to support is this change, so maybe it should just be `createSolrConfig(dcore, coreLoader, coreLoader, coreLoader, as the method? We can make sure this is a part of the default state.
It is still possible to add an example here, to the copyright wchar please.
This should only affect glob strings.
Can we have a constant for `AWSRegion`?
I think you can just `version`
Why was this made private? I don't see any uses
go by default?
Rails/Present: Use if ! ! if ! ! ! ! ! !(cusscusscusscusscusscusscuss(cusscuss) File(cusscuss)}) instead of if !(cusscuss)})}) == if !(cusscuss) != if(cusscuss) == if(cusscuss)` ==>(cusscuss) == if(cusscuss)` == if(cusscuss) == if(cusscuss) > if(cusscuss) != if(authauth) == if(authauth == if(true) == if(authauth == if(authauth == if(authauth) ==
Not sure why you would want to call this when you are using `HelixelixFactory`.
This doesn't look right to me. When you're writing the `collection` and `db` you are trying to fix the problem.
`new Defines the output type for a screenshot. See org.openenium.Screenshot for usage and org.openenium.Screenshot for usage,
Why this change? Is the idea to just remove this? I think that would be fine.
should be `if ( ! empty.replace("Countly", ...)`
We need to keep the previous line and the same code.
How about `Dict`? It makes more sense that way, when we use `Dict` instead of `List`, and `Dict` is a list of type-arg (and I see that we use `Dict`).
This should be in another commit
Which is the purpose of these defaults? Wouldn't it make more sense to just have them have the cluster and then pass them as a field in the cluster? (in general for now I'm asking because the cluster will be a subset of them). I also think a good thing to do in the future is to add a dependency on that instance.
Why not $this->getRef()?
Why do we need a different name for this? I mean, what's the difference between this and `body`?
This property should not be exposed in this PR, right?
This needs to be split over several lines. Also, these if both conditions are less than NET45.
I think we should return the error directly here, and return the stack.
Should we keep the original request request? Or is that because the request is now not set by the request itself?
Please, do not remove changes like this. It will be a breaking change.
I don't think we need this, this environment variable should be removed
Hmm, maybe we could move this check into the `Model` interface? I don't feel very strongly about how this code is used.
What about the property name? Will this be false?
I think we can skip setting retry even if retry isn't an error.
What is the purpose of this change? Is it because the `ARM` property is already immutable?
I think this is not a good idea but I would have made the same change in the controller. Maybe it is too long.
It seems these const definitions are all const-something? I don't think they should be.
@jeherve do these changes need to be in another PR? I'd say they are the same values.
why is this needed? if `this.hooks` already exists, this would be a breaking change
Why is this changed from bool to False now?
I think this will be too slow for a lot of people who are expecting this to work with 3500 at least 3500, but that's not the best place to do so.
This will result in a different class that is actually declared as "crash-data-subrow" if there is an instance of `data.crash-data-subrow`.
I'd also use `assertEquals(block_files, zip.c: true, ...)` here, as I can see it's used for other tests as well. :wink:
Won't you need to make the `||` part of the condition?
Is this going to cause issues when `0` is greater than `0`?
It looks to me that this should default to `true` in the `init` package.
It appears that it should never have been wrapped, but it does require adding it to the SampleTransformer.
Would you be able to use `char *` here, so that you don't need to use `char *`, since that's what you do in `return xxstrdup(char *) digest;` at all?
Can this have a default value?
What is this?
fix that! this gets merged
Please, use the new `tm` option, this will make it more clear where you use this option.
I'm not sure this is correct, but if we are using a regex already, I don't think this is correct. It should be fine to leave it alone, I'll try making my head around this, to make it easier.
I wonder if we should rename this to `npController.ExpressionReady` to make it clear that it returns a list.
I think if `mongoClient.s.options.autoEncryption.cryptdConnectionString` is undefined, this will throw if `mymy.options.autoEncryption.UnifiedTopology == false` which means that the value is not set as `"win32"` which is not set.
This isn't necessary, you can switch to Golang by doing nothing with Golang by doing nothing and then remove it later.
Can we have these span id changes, or create a method to avoid calling this function? I.e. create a new span id, and create a new span id,
This will cause a queue to be reprocessed by the caller. The caller can't know the message. The user might want to get a message to say something like a string like a `maphore`'s queue that the message should be printed in the queue, rather then then the other one, which might break for a bit of time. But that seems a bit odd.
what is the reason for this change?
Can we also have the AppStarted and Apperr have a default value of AppF?
Maybe add it to the license header and remove the empty line.
Is there some reason why you couldn't just use `conf/` rather than recomputing?
Is this a contribute feature?
I think that we can get rid of `Error` since `string text` is `null` here (or at least for testing).
I'm not sure if we need this as a regression since we don't use it at all
Please do not edit `target` to `target`. This is an internal scope.
Should we set `errShouldUnload` to the empty list here?
I think a better name would be `Topic.find_by_slug(id: @id)` would be `@Topic.not_to_not_to(id: topic[:id])` - as `Topic.find_by_slug(id: name).to_not_to_s( topic[:id])`. What do you think?
Do you mean to use this value? If not just the type of `is_svd` is the same as `is_gpu`?
execution may be good to be consistent
Nit: should we have this in validateFlowExporterConfig?
Why do we need this one?
if has to be static, then it should also return `true` if `hasSuiteifiers)` is true.
why is this not being changed?
Isn't `newMock()` redundant here?
is it possible to add this only when `NAME` is true?
If it is a filter, the array_filter will not be used. It should be `array_filter($authors, function ($a)) {`, not $authors.
I think we should just remove the "UIA" part.
Is this not safe to remove? If we do not add a keystore, I would just delete it.
Why was this changed?
This was changed to use the `Text.standardize` method to return an error.
Why is this change necessary? It seems to me, `false` is a very specific thing and the only caller of this object has to pass around, which means this function might be a no-op.
Is this necessary to specify the `source_`?
this one should be set to `api_quota` in the config file (and therefore the user should be able to send an empty config).
Shouldn't these all go to the existing test? I think you can just use the existing `vm.Led(Jesu)` package `besu.evm.precompile` rather than `vm.Led(Jesu.evm).Led(Jum,evm.Led())` to check that it's not just the case.
This will still pass without the `None` check.
I'm wondering why we need this as a module called scapy, and if we do this as a function, we don't need it here.
nit: can we rename this to `equal`?
Why was this added?
I've looked deeper at this code and thought I'd suggest to move this up to `Options`, since `Config` is the default setting. (Maybe I'd prefer to have the `Options` as well as the default config value in the `__init__` struct as well.)
We should add this to the `Discoveryrepository.go` file to the docs, I suppose.
Should we just call `.GraphQL` here?
I think this is a no-op, right?
It seems to me that the same logic would still be needed?
Is it worth adding an example here?
What's the reasoning behind this change?
I think this is not right: if `msg_id` is not null, then `msg_id` is empty, then you should check `if config_parser.get('MESSAGES CONTROL', 'disable')`
Why change it from int64 to int64?
why not use the const ?
It is not the case anymore, you should use `cls.warning()`
is this not true anymore?
This is the only place where `_host` is used. It seems to be used in other places where `--listen-host` is used, and this line will be removed in the future.
Should not this be `mutateElement`?
We should remove the bools.
Need to clean this up
If the return value is null then the `throw` will be thrown.
Not sure why we would remove therewriterewrite used here, and the loclingling dependencies can be deleted.
I think this can be moved to a `ListServices`
I think you can remove this line
This doesn't seem to be used anymore
What does `globalVars.appDir` mean? Is it only needed for a `appDir`? Would it be possible to do some test?
`DisableInMem` is a struct. Can you rename it to just 'DisableInMem' ? I mean, in this case you can use the struct here as well, no?
Use 2 (not 11) spaces for indenting an expression spanning multiple lines.
I think we're missing an index here. This is the `success` value of the observer.
I was wondering if we can just do a try/except here to get the message from the list to avoid the possibility of try/except block. <msg> In my opinion, that I think I'll let the code do this in a future later. I'm not convinced we really need the `if (message['message'] && exception['message'] == 'get('message', None) { return new Exception }`
This change is redundant now?
I think it would be nicer to move these to a controller controller
Can we remove this code?
I think we need some kind of validation about `update_all` to handle this case?
Is this the only thing that needs to be changed?
Why is this needed?
This is the same issue I'm going to check for throwing. I don't see any code that throws an exception if its null.
Hmmm, we should just make this configurable and not have the new constants. I'll have an issue with it for now and I'll fix it in the next PR.
I think this is not the right approach. I think we need this to use `org.joda.time.Period`
I suggest to add `@example` to the public API and only add `@example`. We can add that to public API if necessary.
This doesn't make sense.
I think this is already gone!
I don't like this.
This was the only place this was used.
Style/NumericPredicate: Use normalcase for variable numbers.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
How about we move these `streamHandle` above the `loadedHandle` class, so they can be accessed via `BeanWithStage`? Then we can remove the `IfNeededHandle` and `BeanWithStage` calls.
I'm not sure if this is the right way to do this, but if you really want to add command options for the `cursorState` (e.g. when the options are created) we can just add the default value to the `cursorState` (e.g. `cursorState`).
why we need to change the old behavior here?
nit: I'm not a big fan of adding the `bucket` variable. I think the `type` must be separated by a second arg. `bucket` is not the number of arguments, so I would prefer the original style.
This should be renamed to `RemoteRemoteHelper` to be consistent with other `expression` implementations
This was a bad copy, it's not needed
Why is this "containerized flow"? The default should be "containerized flow"? I'm not sure what it does here is
can this be role == false?
Is this necessary, as `defaultValue != null` is already a `Boolean.getBoolean(property)` and it could return null.
Is this line break necessary?
This method should also have a `node` parameter.
This path is already set to `cmakesvidPath`. The real change here should be to use `path.Join`.
Does this mean we can now never call `string` on the `Value` method?
Why did you add it?
I would add a `@Nullable` or something.
This should probably be in TBB_INTERFACE_VERSION too.
I don't think we should have the `[0-9]{1,}.*']` on a specific command line.
This line needs to be removed.
Metrics/LineLength: Line is too long. [82/80]
Why do we need the extra limit?
Maybe use `none` to determine if there is a chance this is the default?
I guess we should just remove this code entirely as it's not a part of the PR
Can we use the logger here, rather than hard-coding logDropError rather than having to create a new error?
Is there a use case that would create multiple instances of this class?
Should we just call this `NotImplemented`?
I don't like `let` here... it was a `root` (not very nice). Let me know if `root` is the same.
Why are we dropping the check here?
Why did we change the return type to be `Fee` here?
Is this a typo?
This was changed because it was already added in #3625
What exactly is the purpose of the extra line?
I'm not sure why we have the helper in `rand`, it looks like the logic here is different for the same `start` and `start` functions?
Isn't it a bit confusing to have a separate flag to set to `true`? I think it would be more robust to just default to false when we have to.
